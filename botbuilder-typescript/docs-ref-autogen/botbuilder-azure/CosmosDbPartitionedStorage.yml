### YamlMime:UniversalReference
items:
  - uid: botbuilder-azure.CosmosDbPartitionedStorage
    name: CosmosDbPartitionedStorage
    fullName: CosmosDbPartitionedStorage
    children:
      - botbuilder-azure.CosmosDbPartitionedStorage.constructor
      - botbuilder-azure.CosmosDbPartitionedStorage.delete
      - botbuilder-azure.CosmosDbPartitionedStorage.initialize
      - botbuilder-azure.CosmosDbPartitionedStorage.read
      - botbuilder-azure.CosmosDbPartitionedStorage.write
    langs:
      - typeScript
    type: class
    summary: >-
      Implements an CosmosDB based storage provider using partitioning for a
      bot.
    package: botbuilder-azure
  - uid: botbuilder-azure.CosmosDbPartitionedStorage.constructor
    name: CosmosDbPartitionedStorage(CosmosDbPartitionedStorageOptions)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: >-
      Initializes a new instance of the <see cref="CosmosDbPartitionedStorage"/>
      class.

      using the provided CosmosDB credentials, database ID, and container ID.
    syntax:
      content: >-
        new CosmosDbPartitionedStorage(cosmosDbStorageOptions:
        CosmosDbPartitionedStorageOptions)
      parameters:
        - id: cosmosDbStorageOptions
          type:
            - botbuilder-azure.CosmosDbPartitionedStorageOptions
          description: |
            Cosmos DB partitioned storage configuration options.
    package: botbuilder-azure
  - uid: botbuilder-azure.CosmosDbPartitionedStorage.delete
    name: 'delete(string[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function delete(keys: string[])'
      parameters:
        - id: keys
          type:
            - 'string[]'
          description: ''
      return:
        type:
          - Promise<void>
        description: ''
    package: botbuilder-azure
  - uid: botbuilder-azure.CosmosDbPartitionedStorage.initialize
    name: initialize()
    children: []
    type: method
    langs:
      - typeScript
    summary: Connects to the CosmosDB database and creates / gets the container.
    syntax:
      content: function initialize()
      parameters: []
      return:
        type:
          - Promise<void>
        description: ''
    package: botbuilder-azure
  - uid: botbuilder-azure.CosmosDbPartitionedStorage.read
    name: 'read(string[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function read(keys: string[])'
      parameters:
        - id: keys
          type:
            - 'string[]'
          description: ''
      return:
        type:
          - Promise<StoreItems>
        description: ''
    package: botbuilder-azure
  - uid: botbuilder-azure.CosmosDbPartitionedStorage.write
    name: write(StoreItems)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function write(changes: StoreItems)'
      parameters:
        - id: changes
          type:
            - StoreItems
          description: ''
      return:
        type:
          - Promise<void>
        description: ''
    package: botbuilder-azure
references:
  - uid: botbuilder-azure.CosmosDbPartitionedStorageOptions
    name: CosmosDbPartitionedStorageOptions
    spec.typeScript:
      - name: CosmosDbPartitionedStorageOptions
        fullName: CosmosDbPartitionedStorageOptions
        uid: botbuilder-azure.CosmosDbPartitionedStorageOptions
