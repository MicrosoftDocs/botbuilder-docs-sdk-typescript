### YamlMime:UniversalReference
items:
  - uid: botbuilder-testing.DialogTestClient
    name: DialogTestClient
    fullName: DialogTestClient
    children:
      - botbuilder-testing.DialogTestClient.conversationState
      - botbuilder-testing.DialogTestClient.constructor
      - botbuilder-testing.DialogTestClient.constructor_1
      - botbuilder-testing.DialogTestClient.dialogTurnResult
      - botbuilder-testing.DialogTestClient.getNextReply
      - botbuilder-testing.DialogTestClient.sendActivity
    langs:
      - typeScript
    type: class
    summary: A client for testing dialogs in isolation.
    package: botbuilder-testing
  - uid: botbuilder-testing.DialogTestClient.conversationState
    name: conversationState
    fullName: conversationState
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'conversationState: ConversationState'
      return:
        type:
          - ConversationState
        description: ''
    package: botbuilder-testing
  - uid: botbuilder-testing.DialogTestClient.constructor
    name: 'DialogTestClient(string, Dialog, any, Middleware[], ConversationState)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: >
      Create a DialogTestClient to test a dialog without having to create a
      full-fledged adapter.

      ```javascript

      let client = new DialogTestClient('test', MY_DIALOG, MY_OPTIONS);

      let reply = await client.sendActivity('first message');

      assert.strictEqual(reply.text, 'first reply', 'reply failed');

      ```
    syntax:
      content: >-
        new DialogTestClient(channelId: string, targetDialog: Dialog,
        initialDialogOptions?: any, middlewares?: Middleware[],
        conversationState?: ConversationState)
      parameters:
        - id: channelId
          type:
            - string
          description: >-
            The channelId to be used for the test.

            Use 'emulator' or 'test' if you are uncertain of the channel you are
            targeting.

            Otherwise, it is recommended that you use the id for the channel(s)
            your bot will be using and write a test case for each channel.
        - id: targetDialog
          type:
            - Dialog
          description: >-
            The dialog to be tested. This will be the root dialog for the test
            client.
        - id: initialDialogOptions
          type:
            - any
          description: >-
            (Optional) additional argument(s) to pass to the dialog being
            started.
          optional: true
        - id: middlewares
          type:
            - 'Middleware[]'
          description: >-
            (Optional) The test adapter to use. If this parameter is not
            provided, the test client will use a default TestAdapter
          optional: true
        - id: conversationState
          type:
            - ConversationState
          description: |
            (Optional) A ConversationState instance to use in the test client
          optional: true
    package: botbuilder-testing
  - uid: botbuilder-testing.DialogTestClient.constructor_1
    name: >-
      DialogTestClient(TestAdapter, Dialog, any, Middleware[],
      ConversationState)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: >
      Create a DialogTestClient to test a dialog without having to create a
      full-fledged adapter.

      ```javascript

      let client = new DialogTestClient('test', MY_DIALOG, MY_OPTIONS);

      let reply = await client.sendActivity('first message');

      assert.strictEqual(reply.text, 'first reply', 'reply failed');

      ```
    syntax:
      content: >-
        new DialogTestClient(testAdapter: TestAdapter, targetDialog: Dialog,
        initialDialogOptions?: any, middlewares?: Middleware[],
        conversationState?: ConversationState)
      parameters:
        - id: testAdapter
          type:
            - TestAdapter
          description: A list of middlewares to be added to the test adapter.
        - id: targetDialog
          type:
            - Dialog
          description: >-
            The dialog to be tested. This will be the root dialog for the test
            client.
        - id: initialDialogOptions
          type:
            - any
          description: >-
            (Optional) additional argument(s) to pass to the dialog being
            started.
          optional: true
        - id: middlewares
          type:
            - 'Middleware[]'
          description: >-
            (Optional) The test adapter to use. If this parameter is not
            provided, the test client will use a default TestAdapter
          optional: true
        - id: conversationState
          type:
            - ConversationState
          description: |
            (Optional) A ConversationState instance to use in the test client
          optional: true
    package: botbuilder-testing
  - uid: botbuilder-testing.DialogTestClient.dialogTurnResult
    name: dialogTurnResult
    fullName: dialogTurnResult
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'dialogTurnResult: DialogTurnResult'
      return:
        type:
          - DialogTurnResult
        description: ''
    package: botbuilder-testing
  - uid: botbuilder-testing.DialogTestClient.getNextReply
    name: getNextReply()
    children: []
    type: method
    langs:
      - typeScript
    summary: Get the next reply waiting to be delivered (if one exists)
    syntax:
      content: function getNextReply()
      parameters: []
      return:
        type:
          - Partial<Activity>
        description: ''
    package: botbuilder-testing
  - uid: botbuilder-testing.DialogTestClient.sendActivity
    name: sendActivity(Partial<Activity> | string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Send an activity into the dialog.
    syntax:
      content: 'function sendActivity(activity: Partial<Activity> | string)'
      parameters:
        - id: activity
          type:
            - Partial<Activity> | string
          description: |
            an activity potentially with text

            ```javascript
            DialogTest.send('hello').assertReply('hello yourself').then(done);
            ```
      return:
        type:
          - Promise<any>
        description: a TestFlow that can be used to assert replies etc
    package: botbuilder-testing
