### YamlMime:TSPackage
uid: botbuilder-stdlib
name: botbuilder-stdlib
summary: ''
type: package
functions:
  - name: 'delay<T>(Promise<T>, number)'
    uid: botbuilder-stdlib.delay
    package: botbuilder-stdlib
    summary: Delay resolution of `promise`
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function delay<T>(promise: Promise<T>, milliseconds: number): Promise<T>'
      parameters:
        - id: promise
          type: Promise&lt;T&gt;
          description: an optional promise to delay
        - id: milliseconds
          type: number
          description: how long to delay
      return:
        description: >-
          a promise that will resolve to the result of `promise`, delayed by
          `milliseconds`.
        type: Promise&lt;T&gt;
  - name: delay(number)
    uid: botbuilder-stdlib.delay_1
    package: botbuilder-stdlib
    summary: Return a promise that resolves after `milliseconds`.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function delay(milliseconds: number): Promise<void>'
      parameters:
        - id: milliseconds
          type: number
          description: how long to delay
      return:
        description: >-
          a promise that will resolve to the result of `promise`, delayed by
          `milliseconds`.
        type: Promise&lt;void&gt;
  - name: 'maybeCast<T>(unknown, Newable<T>)'
    uid: botbuilder-stdlib.maybeCast
    package: botbuilder-stdlib
    summary: Maybe cast value to a particular type
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function maybeCast<T>(value: unknown, ctor?: Newable<T>): T'
      parameters:
        - id: value
          type: unknown
          description: value to maybe cast
        - id: ctor
          type: <xref uid="botbuilder-stdlib.Newable" />&lt;T&gt;
          description: optional class to perform instanceof check
      return:
        description: 'value, maybe casted to T'
        type: T
  - name: 'retry<T>((n: number) => Promise<T>, number, number)'
    uid: botbuilder-stdlib.retry
    package: botbuilder-stdlib
    summary: Retry a given promise with gradually increasing delay.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function retry<T>(promise: (n: number) => Promise<T>, maxRetries:
        number, initialDelay?: number): Promise<T | undefined>
      parameters:
        - id: promise
          type: '(n: number) =&gt; Promise&lt;T&gt;'
          description: a function that returns a promise to retry
        - id: maxRetries
          type: number
          description: the maximum number of times to retry
        - id: initialDelay
          type: number
          description: the initial value to delay before retrying (in milliseconds)
      return:
        description: >-
          a promise resolving to the result of the promise from the promise
          generating function, or undefined
        type: Promise&lt;T | undefined&gt;
  - name: isNilOrEmpty(string | Nil)
    uid: botbuilder-stdlib.isNilOrEmpty
    package: botbuilder-stdlib
    summary: Check if a string is nil or empty.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function isNilOrEmpty(val: string | Nil): boolean'
      parameters:
        - id: val
          type: string | <xref uid="botbuilder-stdlib.Nil" />
          description: a value that may be a string
      return:
        description: true if the string is nil or empty
        type: boolean
typeAliases:
  - botbuilder-stdlib.Extends
  - botbuilder-stdlib.Maybe
  - botbuilder-stdlib.Newable
  - botbuilder-stdlib.Nil
