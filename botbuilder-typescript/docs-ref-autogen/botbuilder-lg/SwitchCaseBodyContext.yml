### YamlMime:TSType
name: SwitchCaseBodyContext
uid: botbuilder-lg.SwitchCaseBodyContext
package: botbuilder-lg
summary: ''
fullName: SwitchCaseBodyContext
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: SwitchCaseBodyContext(BodyContext)
    uid: botbuilder-lg.SwitchCaseBodyContext.constructor
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new SwitchCaseBodyContext(ctx: BodyContext)'
      parameters:
        - id: ctx
          type: <xref uid="botbuilder-lg.BodyContext" />
          description: ''
properties:
  - name: altNumber
    uid: botbuilder-lg.SwitchCaseBodyContext.altNumber
    package: botbuilder-lg
    summary: |
      Set the outer alternative number for this context node. Default
       implementation does nothing to avoid backing field overhead for
       trees that don't need it.  Create
       a subclass of ParserRuleContext with backing field and set
       option contextSuperClass.
       @since 4.5.3
    fullName: altNumber
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'altNumber: number'
      return:
        description: ''
        type: number
  - name: childCount
    uid: botbuilder-lg.SwitchCaseBodyContext.childCount
    package: botbuilder-lg
    summary: ''
    fullName: childCount
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'childCount: number'
      return:
        description: ''
        type: number
  - name: children
    uid: botbuilder-lg.SwitchCaseBodyContext.children
    package: botbuilder-lg
    summary: |-
      If we are debugging or building a parse tree for a visitor,
       we need to track all of the tokens and rule invocations associated
       with this rule's context. This is empty for parsing w/o tree constr.
       operation because we don't the need to track the details about
       how we parse this rule.
    fullName: children
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'children?: ParseTree[]'
      return:
        description: ''
        type: 'ParseTree[]'
  - name: exception
    uid: botbuilder-lg.SwitchCaseBodyContext.exception
    package: botbuilder-lg
    summary: |-
      The exception that forced this rule to return. If the rule successfully
      completed, this is `undefined`.
    fullName: exception
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'exception?: RecognitionException'
      return:
        description: ''
        type: RecognitionException
  - name: invokingState
    uid: botbuilder-lg.SwitchCaseBodyContext.invokingState
    package: botbuilder-lg
    summary: ''
    fullName: invokingState
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'invokingState: number'
      return:
        description: ''
        type: number
  - name: isEmpty
    uid: botbuilder-lg.SwitchCaseBodyContext.isEmpty
    package: botbuilder-lg
    summary: |-
      A context is empty if there is no invoking state; meaning nobody called
       current context.
    fullName: isEmpty
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'isEmpty: boolean'
      return:
        description: ''
        type: boolean
  - name: parent
    uid: botbuilder-lg.SwitchCaseBodyContext.parent
    package: botbuilder-lg
    summary: ''
    fullName: parent
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'parent: ParserRuleContext | undefined'
      return:
        description: ''
        type: ParserRuleContext | undefined
  - name: payload
    uid: botbuilder-lg.SwitchCaseBodyContext.payload
    package: botbuilder-lg
    summary: ''
    fullName: payload
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'payload: RuleContext'
      return:
        description: ''
        type: RuleContext
  - name: ruleContext
    uid: botbuilder-lg.SwitchCaseBodyContext.ruleContext
    package: botbuilder-lg
    summary: ''
    fullName: ruleContext
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ruleContext: this'
      return:
        description: ''
        type: this
  - name: ruleIndex
    uid: botbuilder-lg.SwitchCaseBodyContext.ruleIndex
    package: botbuilder-lg
    summary: ''
    fullName: ruleIndex
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: number ruleIndex
      return:
        description: ''
        type: number
  - name: sourceInterval
    uid: botbuilder-lg.SwitchCaseBodyContext.sourceInterval
    package: botbuilder-lg
    summary: ''
    fullName: sourceInterval
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'sourceInterval: Interval'
      return:
        description: ''
        type: Interval
  - name: start
    uid: botbuilder-lg.SwitchCaseBodyContext.start
    package: botbuilder-lg
    summary: >-
      Get the initial token in this context.

      Note that the range from start to stop is inclusive, so for rules that do
      not consume anything

      (for example, zero length or error productions) this token may exceed
      stop.
    fullName: start
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'start: Token'
      return:
        description: ''
        type: Token
  - name: stop
    uid: botbuilder-lg.SwitchCaseBodyContext.stop
    package: botbuilder-lg
    summary: >-
      Get the final token in this context.

      Note that the range from start to stop is inclusive, so for rules that do
      not consume anything

      (for example, zero length or error productions) this token may precede
      start.
    fullName: stop
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'stop: Token | undefined'
      return:
        description: ''
        type: Token | undefined
  - name: text
    uid: botbuilder-lg.SwitchCaseBodyContext.text
    package: botbuilder-lg
    summary: |
      Return the combined text of all child nodes. This method only considers
       tokens which have been added to the parse tree.
       Since tokens on hidden channels (e.g. whitespace or comments) are not
       added to the parse trees, they will not appear in the output of this
       method.
    fullName: text
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'text: string'
      return:
        description: ''
        type: string
inheritedMethods:
  - name: addAnyChild<T>(T)
    uid: botbuilder-lg.SwitchCaseBodyContext.addAnyChild
    package: botbuilder-lg
    summary: |
      Add a parse tree node to this as a child.  Works for
       internal and leaf nodes. Does not set parent link;
       other add methods must do that. Other addChild methods
       call this.
       We cannot set the parent pointer of the incoming node
       because the existing interfaces do not have a setParent()
       method and I don't want to break backward compatibility for this.

       @since 4.7
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function addAnyChild<T>(t: T): T'
      parameters:
        - id: t
          type: T
          description: ''
      return:
        description: ''
        type: T
  - name: addChild(RuleContext)
    uid: botbuilder-lg.SwitchCaseBodyContext.addChild_1
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function addChild(ruleInvocation: RuleContext)'
      parameters:
        - id: ruleInvocation
          type: RuleContext
          description: ''
  - name: addChild(TerminalNode)
    uid: botbuilder-lg.SwitchCaseBodyContext.addChild
    package: botbuilder-lg
    summary: Add a token leaf node child and force its parent to be this node.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function addChild(t: TerminalNode)'
      parameters:
        - id: t
          type: TerminalNode
          description: ''
  - name: addChild(Token)
    uid: botbuilder-lg.SwitchCaseBodyContext.addChild_2
    package: botbuilder-lg
    summary: >-
      Add a child to this node based upon matchedToken. It

      creates a TerminalNodeImpl rather than using

      [Token)](xref:Parser%23createTerminalNode(ParserRuleContext%2C). I'm
      leaving this

      in for compatibility but the parser doesn't use this anymore.
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: Use another overload instead.
    syntax:
      content: 'function addChild(matchedToken: Token): TerminalNode'
      parameters:
        - id: matchedToken
          type: Token
          description: ''
      return:
        description: ''
        type: TerminalNode
  - name: addErrorNode(ErrorNode)
    uid: botbuilder-lg.SwitchCaseBodyContext.addErrorNode
    package: botbuilder-lg
    summary: Add an error node child and force its parent to be this node.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function addErrorNode(errorNode: ErrorNode): ErrorNode'
      parameters:
        - id: errorNode
          type: ErrorNode
          description: ''
      return:
        description: ''
        type: ErrorNode
  - name: addErrorNode(Token)
    uid: botbuilder-lg.SwitchCaseBodyContext.addErrorNode_1
    package: botbuilder-lg
    summary: >-
      Add a child to this node based upon badToken. It

      creates a ErrorNode rather than using

      [Token)](xref:Parser%23createErrorNode(ParserRuleContext%2C). I'm leaving
      this

      in for compatibility but the parser doesn't use this anymore.
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: Use another overload instead.
    syntax:
      content: 'function addErrorNode(badToken: Token): ErrorNode'
      parameters:
        - id: badToken
          type: Token
          description: ''
      return:
        description: ''
        type: ErrorNode
  - name: copyFrom(BodyContext)
    uid: botbuilder-lg.SwitchCaseBodyContext.copyFrom
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function copyFrom(ctx: BodyContext)'
      parameters:
        - id: ctx
          type: <xref uid="botbuilder-lg.BodyContext" />
          description: ''
  - name: depth()
    uid: botbuilder-lg.SwitchCaseBodyContext.depth
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function depth(): number'
      return:
        description: ''
        type: number
  - name: emptyContext()
    uid: botbuilder-lg.SwitchCaseBodyContext.emptyContext
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static function emptyContext(): ParserRuleContext'
      return:
        description: ''
        type: ParserRuleContext
  - name: getChild(number)
    uid: botbuilder-lg.SwitchCaseBodyContext.getChild
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getChild(i: number): ParseTree'
      parameters:
        - id: i
          type: number
          description: ''
      return:
        description: ''
        type: ParseTree
  - name: 'getChild<T>(number, {  })'
    uid: botbuilder-lg.SwitchCaseBodyContext.getChild_1
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getChild<T>(i: number, ctxType: {  }): T'
      parameters:
        - id: i
          type: number
          description: ''
        - id: ctxType
          type: '{  }'
          description: ''
      return:
        description: ''
        type: T
  - name: 'getChildContext(RuleContext, number)'
    uid: botbuilder-lg.SwitchCaseBodyContext.getChildContext
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function getChildContext(parent: RuleContext, invokingState:
        number): RuleContext
      parameters:
        - id: parent
          type: RuleContext
          description: ''
        - id: invokingState
          type: number
          description: ''
      return:
        description: ''
        type: RuleContext
  - name: 'getRuleContext<T>(number, {  })'
    uid: botbuilder-lg.SwitchCaseBodyContext.getRuleContext
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getRuleContext<T>(i: number, ctxType: {  }): T'
      parameters:
        - id: i
          type: number
          description: ''
        - id: ctxType
          type: '{  }'
          description: ''
      return:
        description: ''
        type: T
  - name: 'getRuleContexts<T>({  })'
    uid: botbuilder-lg.SwitchCaseBodyContext.getRuleContexts
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getRuleContexts<T>(ctxType: {  }): T[]'
      parameters:
        - id: ctxType
          type: '{  }'
          description: ''
      return:
        description: ''
        type: 'T[]'
  - name: 'getToken(number, number)'
    uid: botbuilder-lg.SwitchCaseBodyContext.getToken
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getToken(ttype: number, i: number): TerminalNode'
      parameters:
        - id: ttype
          type: number
          description: ''
        - id: i
          type: number
          description: ''
      return:
        description: ''
        type: TerminalNode
  - name: getTokens(number)
    uid: botbuilder-lg.SwitchCaseBodyContext.getTokens
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getTokens(ttype: number): TerminalNode[]'
      parameters:
        - id: ttype
          type: number
          description: ''
      return:
        description: ''
        type: 'TerminalNode[]'
  - name: removeLastChild()
    uid: botbuilder-lg.SwitchCaseBodyContext.removeLastChild
    package: botbuilder-lg
    summary: |-
      Used by enterOuterAlt to toss out a RuleContext previously added as
       we entered a rule. If we have # label, we will need to remove
       generic ruleContext object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function removeLastChild()
  - name: setParent(RuleContext)
    uid: botbuilder-lg.SwitchCaseBodyContext.setParent
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setParent(parent: RuleContext)'
      parameters:
        - id: parent
          type: RuleContext
          description: ''
  - name: toInfoString(Parser)
    uid: botbuilder-lg.SwitchCaseBodyContext.toInfoString
    package: botbuilder-lg
    summary: >-
      Used for rule context info debugging during parse-time, not so much for
      ATN debugging
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function toInfoString(recognizer: Parser): string'
      parameters:
        - id: recognizer
          type: Parser
          description: ''
      return:
        description: ''
        type: string
  - name: toString()
    uid: botbuilder-lg.SwitchCaseBodyContext.toString
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function toString(): string'
      return:
        description: ''
        type: string
  - name: 'toString(Recognizer<any, any> | undefined)'
    uid: botbuilder-lg.SwitchCaseBodyContext.toString_1
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function toString(recog: Recognizer<any, any> | undefined): string'
      parameters:
        - id: recog
          type: 'Recognizer&lt;any, any&gt; | undefined'
          description: ''
      return:
        description: ''
        type: string
  - name: 'toString(Recognizer<any, any> | undefined, RuleContext | undefined)'
    uid: botbuilder-lg.SwitchCaseBodyContext.toString_3
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function toString(recog: Recognizer<any, any> | undefined, stop:
        RuleContext | undefined): string
      parameters:
        - id: recog
          type: 'Recognizer&lt;any, any&gt; | undefined'
          description: ''
        - id: stop
          type: RuleContext | undefined
          description: ''
      return:
        description: ''
        type: string
  - name: 'toString(string[] | undefined)'
    uid: botbuilder-lg.SwitchCaseBodyContext.toString_2
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function toString(ruleNames: string[] | undefined): string'
      parameters:
        - id: ruleNames
          type: 'string[] | undefined'
          description: ''
      return:
        description: ''
        type: string
  - name: 'toString(string[] | undefined, RuleContext | undefined)'
    uid: botbuilder-lg.SwitchCaseBodyContext.toString_4
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function toString(ruleNames: string[] | undefined, stop: RuleContext |
        undefined): string
      parameters:
        - id: ruleNames
          type: 'string[] | undefined'
          description: ''
        - id: stop
          type: RuleContext | undefined
          description: ''
      return:
        description: ''
        type: string
  - name: toStringTree()
    uid: botbuilder-lg.SwitchCaseBodyContext.toStringTree_2
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function toStringTree(): string'
      return:
        description: ''
        type: string
  - name: toStringTree(Parser)
    uid: botbuilder-lg.SwitchCaseBodyContext.toStringTree
    package: botbuilder-lg
    summary: |-
      Print out a whole tree, not just a node, in LISP format
       (root child1 .. childN). Print just a node if this is a leaf.
       We have to know the recognizer so we can get rule names.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function toStringTree(recog: Parser): string'
      parameters:
        - id: recog
          type: Parser
          description: ''
      return:
        description: ''
        type: string
  - name: 'toStringTree(string[] | undefined)'
    uid: botbuilder-lg.SwitchCaseBodyContext.toStringTree_1
    package: botbuilder-lg
    summary: |-
      Print out a whole tree, not just a node, in LISP format
       (root child1 .. childN). Print just a node if this is a leaf.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function toStringTree(ruleNames: string[] | undefined): string'
      parameters:
        - id: ruleNames
          type: 'string[] | undefined'
          description: ''
      return:
        description: ''
        type: string
  - name: 'tryGetChild<T>(number, {  })'
    uid: botbuilder-lg.SwitchCaseBodyContext.tryGetChild
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function tryGetChild<T>(i: number, ctxType: {  }): T | undefined'
      parameters:
        - id: i
          type: number
          description: ''
        - id: ctxType
          type: '{  }'
          description: ''
      return:
        description: ''
        type: T | undefined
  - name: 'tryGetRuleContext<T>(number, {  })'
    uid: botbuilder-lg.SwitchCaseBodyContext.tryGetRuleContext
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function tryGetRuleContext<T>(i: number, ctxType: {  }): T | undefined'
      parameters:
        - id: i
          type: number
          description: ''
        - id: ctxType
          type: '{  }'
          description: ''
      return:
        description: ''
        type: T | undefined
  - name: 'tryGetToken(number, number)'
    uid: botbuilder-lg.SwitchCaseBodyContext.tryGetToken
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function tryGetToken(ttype: number, i: number): TerminalNode | undefined'
      parameters:
        - id: ttype
          type: number
          description: ''
        - id: i
          type: number
          description: ''
      return:
        description: ''
        type: TerminalNode | undefined
methods:
  - name: accept<Result>(LGTemplateParserVisitor<Result>)
    uid: botbuilder-lg.SwitchCaseBodyContext.accept
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function accept<Result>(visitor: LGTemplateParserVisitor<Result>):
        Result
      parameters:
        - id: visitor
          type: <xref uid="botbuilder-lg.LGTemplateParserVisitor" />&lt;Result&gt;
          description: ''
      return:
        description: ''
        type: Result
  - name: enterRule(LGTemplateParserListener)
    uid: botbuilder-lg.SwitchCaseBodyContext.enterRule
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function enterRule(listener: LGTemplateParserListener)'
      parameters:
        - id: listener
          type: <xref uid="botbuilder-lg.LGTemplateParserListener" />
          description: ''
  - name: exitRule(LGTemplateParserListener)
    uid: botbuilder-lg.SwitchCaseBodyContext.exitRule
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function exitRule(listener: LGTemplateParserListener)'
      parameters:
        - id: listener
          type: <xref uid="botbuilder-lg.LGTemplateParserListener" />
          description: ''
  - name: switchCaseTemplateBody()
    uid: botbuilder-lg.SwitchCaseBodyContext.switchCaseTemplateBody
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function switchCaseTemplateBody(): SwitchCaseTemplateBodyContext'
      return:
        description: ''
        type: <xref uid="botbuilder-lg.SwitchCaseTemplateBodyContext" />
extends: <xref uid="botbuilder-lg.BodyContext" />
