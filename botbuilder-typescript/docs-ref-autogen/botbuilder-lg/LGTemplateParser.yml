### YamlMime:TSType
name: LGTemplateParser
uid: botbuilder-lg.LGTemplateParser
package: botbuilder-lg
summary: ''
fullName: LGTemplateParser
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: LGTemplateParser(TokenStream)
    uid: botbuilder-lg.LGTemplateParser.constructor
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new LGTemplateParser(input: TokenStream)'
      parameters:
        - id: input
          type: TokenStream
          description: ''
properties:
  - name: atn
    uid: botbuilder-lg.LGTemplateParser.atn
    package: botbuilder-lg
    summary: 'Get the <xref:ATN> used by the recognizer for prediction.'
    fullName: atn
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'atn: ATN'
      return:
        type: ATN
        description: ''
  - name: buildParseTree
    uid: botbuilder-lg.LGTemplateParser.buildParseTree
    package: botbuilder-lg
    summary: |
      Track the <xref:ParserRuleContext> objects during the parse and hook
      them up using the <xref:ParserRuleContext%23children> list so that it
      forms a parse tree. The <xref:ParserRuleContext> returned from the start
      rule represents the root of the parse tree.
      Note that if we are not building parse trees, rule contexts only point
      upwards. When a rule exits, it returns the context but that gets garbage
      collected if nobody holds a reference. It points upwards but nobody
      points at it.

      When we build parse trees, we are adding all of these contexts to
      <xref:ParserRuleContext%23children> list. Contexts are then not candidates
      for garbage collection.
    fullName: buildParseTree
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'buildParseTree: boolean'
      return:
        type: boolean
        description: ''
  - name: CASE
    uid: botbuilder-lg.LGTemplateParser.CASE
    package: botbuilder-lg
    summary: ''
    fullName: CASE
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static CASE: 14 = 14'
      return:
        type: '14'
        description: ''
  - name: COMMENTS
    uid: botbuilder-lg.LGTemplateParser.COMMENTS
    package: botbuilder-lg
    summary: ''
    fullName: COMMENTS
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static COMMENTS: 3 = 3'
      return:
        type: '3'
        description: ''
  - name: context
    uid: botbuilder-lg.LGTemplateParser.context
    package: botbuilder-lg
    summary: ''
    fullName: context
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: ParserRuleContext'
      return:
        type: ParserRuleContext
        description: ''
  - name: currentToken
    uid: botbuilder-lg.LGTemplateParser.currentToken
    package: botbuilder-lg
    summary: |-
      Match needs to return the current input symbol, which gets put
       into the label for the associated token ref; e.g., x=ID.
    fullName: currentToken
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'currentToken: Token'
      return:
        type: Token
        description: ''
  - name: DASH
    uid: botbuilder-lg.LGTemplateParser.DASH
    package: botbuilder-lg
    summary: ''
    fullName: DASH
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static DASH: 4 = 4'
      return:
        type: '4'
        description: ''
  - name: DEFAULT
    uid: botbuilder-lg.LGTemplateParser.DEFAULT
    package: botbuilder-lg
    summary: ''
    fullName: DEFAULT
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static DEFAULT: 15 = 15'
      return:
        type: '15'
        description: ''
  - name: ELSE
    uid: botbuilder-lg.LGTemplateParser.ELSE
    package: botbuilder-lg
    summary: ''
    fullName: ELSE
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static ELSE: 12 = 12'
      return:
        type: '12'
        description: ''
  - name: ELSEIF
    uid: botbuilder-lg.LGTemplateParser.ELSEIF
    package: botbuilder-lg
    summary: ''
    fullName: ELSEIF
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static ELSEIF: 11 = 11'
      return:
        type: '11'
        description: ''
  - name: EOF
    uid: botbuilder-lg.LGTemplateParser.EOF
    package: botbuilder-lg
    summary: ''
    fullName: EOF
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static EOF: number'
      return:
        type: number
        description: ''
  - name: errorHandler
    uid: botbuilder-lg.LGTemplateParser.errorHandler
    package: botbuilder-lg
    summary: ''
    fullName: errorHandler
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'errorHandler: ANTLRErrorStrategy'
      return:
        type: ANTLRErrorStrategy
        description: ''
  - name: ESCAPE_CHARACTER
    uid: botbuilder-lg.LGTemplateParser.ESCAPE_CHARACTER
    package: botbuilder-lg
    summary: ''
    fullName: ESCAPE_CHARACTER
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static ESCAPE_CHARACTER: 16 = 16'
      return:
        type: '16'
        description: ''
  - name: ESCAPE_CHARACTER_IN_STRUCTURE_BODY
    uid: botbuilder-lg.LGTemplateParser.ESCAPE_CHARACTER_IN_STRUCTURE_BODY
    package: botbuilder-lg
    summary: ''
    fullName: ESCAPE_CHARACTER_IN_STRUCTURE_BODY
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static ESCAPE_CHARACTER_IN_STRUCTURE_BODY: 31 = 31'
      return:
        type: '31'
        description: ''
  - name: EXPRESSION
    uid: botbuilder-lg.LGTemplateParser.EXPRESSION
    package: botbuilder-lg
    summary: ''
    fullName: EXPRESSION
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static EXPRESSION: 17 = 17'
      return:
        type: '17'
        description: ''
  - name: EXPRESSION_IN_STRUCTURE_BODY
    uid: botbuilder-lg.LGTemplateParser.EXPRESSION_IN_STRUCTURE_BODY
    package: botbuilder-lg
    summary: ''
    fullName: EXPRESSION_IN_STRUCTURE_BODY
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static EXPRESSION_IN_STRUCTURE_BODY: 32 = 32'
      return:
        type: '32'
        description: ''
  - name: grammarFileName
    uid: botbuilder-lg.LGTemplateParser.grammarFileName
    package: botbuilder-lg
    summary: ''
    fullName: grammarFileName
    isPreview: false
    isDeprecated: false
    syntax:
      content: string grammarFileName
      return:
        type: string
        description: ''
  - name: IF
    uid: botbuilder-lg.LGTemplateParser.IF
    package: botbuilder-lg
    summary: ''
    fullName: IF
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static IF: 10 = 10'
      return:
        type: '10'
        description: ''
  - name: inputStream
    uid: botbuilder-lg.LGTemplateParser.inputStream
    package: botbuilder-lg
    summary: Set the token stream and reset the parser.
    fullName: inputStream
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'inputStream: TokenStream'
      return:
        type: TokenStream
        description: ''
  - name: interpreter
    uid: botbuilder-lg.LGTemplateParser.interpreter
    package: botbuilder-lg
    summary: Set the ATN interpreter used by the recognizer for prediction.
    fullName: interpreter
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'interpreter: ParserATNSimulator'
      return:
        type: ParserATNSimulator
        description: ''
  - name: INVALID_TOKEN
    uid: botbuilder-lg.LGTemplateParser.INVALID_TOKEN
    package: botbuilder-lg
    summary: ''
    fullName: INVALID_TOKEN
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static INVALID_TOKEN: 6 = 6'
      return:
        type: '6'
        description: ''
  - name: isMatchedEOF
    uid: botbuilder-lg.LGTemplateParser.isMatchedEOF
    package: botbuilder-lg
    summary: ''
    fullName: isMatchedEOF
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'isMatchedEOF: boolean'
      return:
        type: boolean
        description: ''
  - name: isTrace
    uid: botbuilder-lg.LGTemplateParser.isTrace
    package: botbuilder-lg
    summary: |-
      During a parse is sometimes useful to listen in on the rule entry and exit
       events as well as token matches. This is for quick and dirty debugging.
    fullName: isTrace
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'isTrace: boolean'
      return:
        type: boolean
        description: ''
  - name: LEFT_SQUARE_BRACKET
    uid: botbuilder-lg.LGTemplateParser.LEFT_SQUARE_BRACKET
    package: botbuilder-lg
    summary: ''
    fullName: LEFT_SQUARE_BRACKET
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static LEFT_SQUARE_BRACKET: 5 = 5'
      return:
        type: '5'
        description: ''
  - name: MULTILINE_PREFIX
    uid: botbuilder-lg.LGTemplateParser.MULTILINE_PREFIX
    package: botbuilder-lg
    summary: ''
    fullName: MULTILINE_PREFIX
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static MULTILINE_PREFIX: 8 = 8'
      return:
        type: '8'
        description: ''
  - name: MULTILINE_SUFFIX
    uid: botbuilder-lg.LGTemplateParser.MULTILINE_SUFFIX
    package: botbuilder-lg
    summary: ''
    fullName: MULTILINE_SUFFIX
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static MULTILINE_SUFFIX: 19 = 19'
      return:
        type: '19'
        description: ''
  - name: NEWLINE
    uid: botbuilder-lg.LGTemplateParser.NEWLINE
    package: botbuilder-lg
    summary: ''
    fullName: NEWLINE
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static NEWLINE: 2 = 2'
      return:
        type: '2'
        description: ''
  - name: NEWLINE_IN_BODY
    uid: botbuilder-lg.LGTemplateParser.NEWLINE_IN_BODY
    package: botbuilder-lg
    summary: ''
    fullName: NEWLINE_IN_BODY
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static NEWLINE_IN_BODY: 9 = 9'
      return:
        type: '9'
        description: ''
  - name: NEWLINE_IN_STRUCTURE_NAME
    uid: botbuilder-lg.LGTemplateParser.NEWLINE_IN_STRUCTURE_NAME
    package: botbuilder-lg
    summary: ''
    fullName: NEWLINE_IN_STRUCTURE_NAME
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static NEWLINE_IN_STRUCTURE_NAME: 21 = 21'
      return:
        type: '21'
        description: ''
  - name: numberOfSyntaxErrors
    uid: botbuilder-lg.LGTemplateParser.numberOfSyntaxErrors
    package: botbuilder-lg
    summary: |-
      Gets the number of syntax errors reported during parsing. This value is
      incremented each time <xref:%23notifyErrorListeners> is called.
    fullName: numberOfSyntaxErrors
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'numberOfSyntaxErrors: number'
      return:
        type: number
        description: ''
  - name: parseInfo
    uid: botbuilder-lg.LGTemplateParser.parseInfo
    package: botbuilder-lg
    summary: ''
    fullName: parseInfo
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'parseInfo: Promise<ParseInfo | undefined>'
      return:
        type: Promise&lt;ParseInfo | undefined&gt;
        description: ''
  - name: precedence
    uid: botbuilder-lg.LGTemplateParser.precedence
    package: botbuilder-lg
    summary: Get the precedence level for the top-most precedence rule.
    fullName: precedence
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'precedence: number'
      return:
        type: number
        description: ''
  - name: ruleContext
    uid: botbuilder-lg.LGTemplateParser.ruleContext
    package: botbuilder-lg
    summary: ''
    fullName: ruleContext
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ruleContext: ParserRuleContext'
      return:
        type: ParserRuleContext
        description: ''
  - name: ruleNames
    uid: botbuilder-lg.LGTemplateParser.ruleNames
    package: botbuilder-lg
    summary: ''
    fullName: ruleNames
    isPreview: false
    isDeprecated: false
    syntax:
      content: "public static ruleNames: string[] = [\r\n\t\t\"template\", \"body\", \"structuredTemplateBody\", \"structuredBodyNameLine\", \r\n\t\t\"errorStructuredName\", \"structuredBodyContentLine\", \"errorStructureLine\", \r\n\t\t\"keyValueStructureLine\", \"keyValueStructureValue\", \"structuredBodyEndLine\", \r\n\t\t\"normalTemplateBody\", \"templateString\", \"normalTemplateString\", \"errorTemplateString\", \r\n\t\t\"ifElseTemplateBody\", \"ifConditionRule\", \"ifCondition\", \"switchCaseTemplateBody\", \r\n\t\t\"switchCaseRule\", \"switchCaseStat\", \"expression\", \"expressionInStructure\",\r\n\t]"
      return:
        type: 'string[]'
        description: ''
  - name: ruleNames
    uid: botbuilder-lg.LGTemplateParser.ruleNames
    package: botbuilder-lg
    summary: ''
    fullName: ruleNames
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'string[] ruleNames'
      return:
        type: 'string[]'
        description: ''
  - name: RULE_body
    uid: botbuilder-lg.LGTemplateParser.RULE_body
    package: botbuilder-lg
    summary: ''
    fullName: RULE_body
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_body: 1 = 1'
      return:
        type: '1'
        description: ''
  - name: RULE_errorStructuredName
    uid: botbuilder-lg.LGTemplateParser.RULE_errorStructuredName
    package: botbuilder-lg
    summary: ''
    fullName: RULE_errorStructuredName
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_errorStructuredName: 4 = 4'
      return:
        type: '4'
        description: ''
  - name: RULE_errorStructureLine
    uid: botbuilder-lg.LGTemplateParser.RULE_errorStructureLine
    package: botbuilder-lg
    summary: ''
    fullName: RULE_errorStructureLine
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_errorStructureLine: 6 = 6'
      return:
        type: '6'
        description: ''
  - name: RULE_errorTemplateString
    uid: botbuilder-lg.LGTemplateParser.RULE_errorTemplateString
    package: botbuilder-lg
    summary: ''
    fullName: RULE_errorTemplateString
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_errorTemplateString: 13 = 13'
      return:
        type: '13'
        description: ''
  - name: RULE_expression
    uid: botbuilder-lg.LGTemplateParser.RULE_expression
    package: botbuilder-lg
    summary: ''
    fullName: RULE_expression
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_expression: 20 = 20'
      return:
        type: '20'
        description: ''
  - name: RULE_expressionInStructure
    uid: botbuilder-lg.LGTemplateParser.RULE_expressionInStructure
    package: botbuilder-lg
    summary: ''
    fullName: RULE_expressionInStructure
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_expressionInStructure: 21 = 21'
      return:
        type: '21'
        description: ''
  - name: RULE_ifCondition
    uid: botbuilder-lg.LGTemplateParser.RULE_ifCondition
    package: botbuilder-lg
    summary: ''
    fullName: RULE_ifCondition
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_ifCondition: 16 = 16'
      return:
        type: '16'
        description: ''
  - name: RULE_ifConditionRule
    uid: botbuilder-lg.LGTemplateParser.RULE_ifConditionRule
    package: botbuilder-lg
    summary: ''
    fullName: RULE_ifConditionRule
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_ifConditionRule: 15 = 15'
      return:
        type: '15'
        description: ''
  - name: RULE_ifElseTemplateBody
    uid: botbuilder-lg.LGTemplateParser.RULE_ifElseTemplateBody
    package: botbuilder-lg
    summary: ''
    fullName: RULE_ifElseTemplateBody
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_ifElseTemplateBody: 14 = 14'
      return:
        type: '14'
        description: ''
  - name: RULE_keyValueStructureLine
    uid: botbuilder-lg.LGTemplateParser.RULE_keyValueStructureLine
    package: botbuilder-lg
    summary: ''
    fullName: RULE_keyValueStructureLine
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_keyValueStructureLine: 7 = 7'
      return:
        type: '7'
        description: ''
  - name: RULE_keyValueStructureValue
    uid: botbuilder-lg.LGTemplateParser.RULE_keyValueStructureValue
    package: botbuilder-lg
    summary: ''
    fullName: RULE_keyValueStructureValue
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_keyValueStructureValue: 8 = 8'
      return:
        type: '8'
        description: ''
  - name: RULE_normalTemplateBody
    uid: botbuilder-lg.LGTemplateParser.RULE_normalTemplateBody
    package: botbuilder-lg
    summary: ''
    fullName: RULE_normalTemplateBody
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_normalTemplateBody: 10 = 10'
      return:
        type: '10'
        description: ''
  - name: RULE_normalTemplateString
    uid: botbuilder-lg.LGTemplateParser.RULE_normalTemplateString
    package: botbuilder-lg
    summary: ''
    fullName: RULE_normalTemplateString
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_normalTemplateString: 12 = 12'
      return:
        type: '12'
        description: ''
  - name: RULE_structuredBodyContentLine
    uid: botbuilder-lg.LGTemplateParser.RULE_structuredBodyContentLine
    package: botbuilder-lg
    summary: ''
    fullName: RULE_structuredBodyContentLine
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_structuredBodyContentLine: 5 = 5'
      return:
        type: '5'
        description: ''
  - name: RULE_structuredBodyEndLine
    uid: botbuilder-lg.LGTemplateParser.RULE_structuredBodyEndLine
    package: botbuilder-lg
    summary: ''
    fullName: RULE_structuredBodyEndLine
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_structuredBodyEndLine: 9 = 9'
      return:
        type: '9'
        description: ''
  - name: RULE_structuredBodyNameLine
    uid: botbuilder-lg.LGTemplateParser.RULE_structuredBodyNameLine
    package: botbuilder-lg
    summary: ''
    fullName: RULE_structuredBodyNameLine
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_structuredBodyNameLine: 3 = 3'
      return:
        type: '3'
        description: ''
  - name: RULE_structuredTemplateBody
    uid: botbuilder-lg.LGTemplateParser.RULE_structuredTemplateBody
    package: botbuilder-lg
    summary: ''
    fullName: RULE_structuredTemplateBody
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_structuredTemplateBody: 2 = 2'
      return:
        type: '2'
        description: ''
  - name: RULE_switchCaseRule
    uid: botbuilder-lg.LGTemplateParser.RULE_switchCaseRule
    package: botbuilder-lg
    summary: ''
    fullName: RULE_switchCaseRule
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_switchCaseRule: 18 = 18'
      return:
        type: '18'
        description: ''
  - name: RULE_switchCaseStat
    uid: botbuilder-lg.LGTemplateParser.RULE_switchCaseStat
    package: botbuilder-lg
    summary: ''
    fullName: RULE_switchCaseStat
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_switchCaseStat: 19 = 19'
      return:
        type: '19'
        description: ''
  - name: RULE_switchCaseTemplateBody
    uid: botbuilder-lg.LGTemplateParser.RULE_switchCaseTemplateBody
    package: botbuilder-lg
    summary: ''
    fullName: RULE_switchCaseTemplateBody
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_switchCaseTemplateBody: 17 = 17'
      return:
        type: '17'
        description: ''
  - name: RULE_template
    uid: botbuilder-lg.LGTemplateParser.RULE_template
    package: botbuilder-lg
    summary: ''
    fullName: RULE_template
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_template: 0 = 0'
      return:
        type: '0'
        description: ''
  - name: RULE_templateString
    uid: botbuilder-lg.LGTemplateParser.RULE_templateString
    package: botbuilder-lg
    summary: ''
    fullName: RULE_templateString
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_templateString: 11 = 11'
      return:
        type: '11'
        description: ''
  - name: serializedATN
    uid: botbuilder-lg.LGTemplateParser.serializedATN
    package: botbuilder-lg
    summary: ''
    fullName: serializedATN
    isPreview: false
    isDeprecated: false
    syntax:
      content: string serializedATN
      return:
        type: string
        description: ''
  - name: sourceName
    uid: botbuilder-lg.LGTemplateParser.sourceName
    package: botbuilder-lg
    summary: ''
    fullName: sourceName
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'sourceName: string'
      return:
        type: string
        description: ''
  - name: state
    uid: botbuilder-lg.LGTemplateParser.state
    package: botbuilder-lg
    summary: |-
      Indicate that the recognizer has changed internal state that is
       consistent with the ATN state passed in.  This way we always know
       where we are in the ATN as the parser goes along. The rule
       context objects form a stack that lets us see the stack of
       invoking rules. Combine this and we have complete ATN
       configuration information.
    fullName: state
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'state: number'
      return:
        type: number
        description: ''
  - name: STRUCTURED_BODY_END
    uid: botbuilder-lg.LGTemplateParser.STRUCTURED_BODY_END
    package: botbuilder-lg
    summary: ''
    fullName: STRUCTURED_BODY_END
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static STRUCTURED_BODY_END: 27 = 27'
      return:
        type: '27'
        description: ''
  - name: STRUCTURED_COMMENTS
    uid: botbuilder-lg.LGTemplateParser.STRUCTURED_COMMENTS
    package: botbuilder-lg
    summary: ''
    fullName: STRUCTURED_COMMENTS
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static STRUCTURED_COMMENTS: 24 = 24'
      return:
        type: '24'
        description: ''
  - name: STRUCTURED_NEWLINE
    uid: botbuilder-lg.LGTemplateParser.STRUCTURED_NEWLINE
    package: botbuilder-lg
    summary: ''
    fullName: STRUCTURED_NEWLINE
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static STRUCTURED_NEWLINE: 26 = 26'
      return:
        type: '26'
        description: ''
  - name: STRUCTURE_EQUALS
    uid: botbuilder-lg.LGTemplateParser.STRUCTURE_EQUALS
    package: botbuilder-lg
    summary: ''
    fullName: STRUCTURE_EQUALS
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static STRUCTURE_EQUALS: 29 = 29'
      return:
        type: '29'
        description: ''
  - name: STRUCTURE_IDENTIFIER
    uid: botbuilder-lg.LGTemplateParser.STRUCTURE_IDENTIFIER
    package: botbuilder-lg
    summary: ''
    fullName: STRUCTURE_IDENTIFIER
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static STRUCTURE_IDENTIFIER: 28 = 28'
      return:
        type: '28'
        description: ''
  - name: STRUCTURE_NAME
    uid: botbuilder-lg.LGTemplateParser.STRUCTURE_NAME
    package: botbuilder-lg
    summary: ''
    fullName: STRUCTURE_NAME
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static STRUCTURE_NAME: 22 = 22'
      return:
        type: '22'
        description: ''
  - name: STRUCTURE_OR_MARK
    uid: botbuilder-lg.LGTemplateParser.STRUCTURE_OR_MARK
    package: botbuilder-lg
    summary: ''
    fullName: STRUCTURE_OR_MARK
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static STRUCTURE_OR_MARK: 30 = 30'
      return:
        type: '30'
        description: ''
  - name: SWITCH
    uid: botbuilder-lg.LGTemplateParser.SWITCH
    package: botbuilder-lg
    summary: ''
    fullName: SWITCH
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static SWITCH: 13 = 13'
      return:
        type: '13'
        description: ''
  - name: TEXT
    uid: botbuilder-lg.LGTemplateParser.TEXT
    package: botbuilder-lg
    summary: ''
    fullName: TEXT
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static TEXT: 18 = 18'
      return:
        type: '18'
        description: ''
  - name: TEXT_IN_STRUCTURE_BODY
    uid: botbuilder-lg.LGTemplateParser.TEXT_IN_STRUCTURE_BODY
    package: botbuilder-lg
    summary: ''
    fullName: TEXT_IN_STRUCTURE_BODY
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static TEXT_IN_STRUCTURE_BODY: 33 = 33'
      return:
        type: '33'
        description: ''
  - name: TEXT_IN_STRUCTURE_NAME
    uid: botbuilder-lg.LGTemplateParser.TEXT_IN_STRUCTURE_NAME
    package: botbuilder-lg
    summary: ''
    fullName: TEXT_IN_STRUCTURE_NAME
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static TEXT_IN_STRUCTURE_NAME: 23 = 23'
      return:
        type: '23'
        description: ''
  - name: tokenFactory
    uid: botbuilder-lg.LGTemplateParser.tokenFactory
    package: botbuilder-lg
    summary: ''
    fullName: tokenFactory
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'tokenFactory: TokenFactory'
      return:
        type: TokenFactory
        description: ''
  - name: VOCABULARY
    uid: botbuilder-lg.LGTemplateParser.VOCABULARY
    package: botbuilder-lg
    summary: ''
    fullName: VOCABULARY
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        public static VOCABULARY: Vocabulary = new
        VocabularyImpl(LGTemplateParser._LITERAL_NAMES,
        LGTemplateParser._SYMBOLIC_NAMES, [])
      return:
        type: Vocabulary
        description: ''
  - name: vocabulary
    uid: botbuilder-lg.LGTemplateParser.vocabulary
    package: botbuilder-lg
    summary: ''
    fullName: vocabulary
    isPreview: false
    isDeprecated: false
    syntax:
      content: Vocabulary vocabulary
      return:
        type: Vocabulary
        description: ''
  - name: WS
    uid: botbuilder-lg.LGTemplateParser.WS
    package: botbuilder-lg
    summary: ''
    fullName: WS
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static WS: 1 = 1'
      return:
        type: '1'
        description: ''
  - name: WS_IN_BODY
    uid: botbuilder-lg.LGTemplateParser.WS_IN_BODY
    package: botbuilder-lg
    summary: ''
    fullName: WS_IN_BODY
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static WS_IN_BODY: 7 = 7'
      return:
        type: '7'
        description: ''
  - name: WS_IN_STRUCTURE_BODY
    uid: botbuilder-lg.LGTemplateParser.WS_IN_STRUCTURE_BODY
    package: botbuilder-lg
    summary: ''
    fullName: WS_IN_STRUCTURE_BODY
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static WS_IN_STRUCTURE_BODY: 25 = 25'
      return:
        type: '25'
        description: ''
  - name: WS_IN_STRUCTURE_NAME
    uid: botbuilder-lg.LGTemplateParser.WS_IN_STRUCTURE_NAME
    package: botbuilder-lg
    summary: ''
    fullName: WS_IN_STRUCTURE_NAME
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static WS_IN_STRUCTURE_NAME: 20 = 20'
      return:
        type: '20'
        description: ''
methods:
  - name: 'action(RuleContext | undefined, number, number)'
    uid: botbuilder-lg.LGTemplateParser.action
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function action(_localctx: RuleContext | undefined, ruleIndex: number,
        actionIndex: number)
      parameters:
        - id: _localctx
          type: RuleContext | undefined
          description: ''
        - id: ruleIndex
          type: number
          description: ''
        - id: actionIndex
          type: number
          description: ''
  - name: addErrorListener(ANTLRErrorListener<Token>)
    uid: botbuilder-lg.LGTemplateParser.addErrorListener
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function addErrorListener(listener: ANTLRErrorListener<Token>)'
      parameters:
        - id: listener
          type: ANTLRErrorListener&lt;Token&gt;
          description: ''
  - name: addParseListener(ParseTreeListener)
    uid: botbuilder-lg.LGTemplateParser.addParseListener
    package: botbuilder-lg
    summary: |
      Registers `listener` to receive events during the parsing process.
      To support output-preserving grammar transformations (including but not
      limited to left-recursion removal, automated left-factoring, and
      optimized code generation), calls to listener methods during the parse
      may differ substantially from calls made by
      <xref:ParseTreeWalker%23DEFAULT> used after the parse is complete. In
      particular, rule entry and exit events may occur in a different order
      during the parse than after the parser. In addition, calls to certain
      rule entry methods may be omitted.

      With the following specific exceptions, calls to listener events are
      *deterministic*, i.e. for identical input the calls to listener
      methods will be the same.

      * Alterations to the grammar used to generate code may change the
        behavior of the listener calls.
      * Alterations to the command line options passed to ANTLR 4 when
        generating the parser may change the behavior of the listener calls.
      * Changing the version of the ANTLR Tool used to generate the parser
        may change the behavior of the listener calls.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function addParseListener(listener: ParseTreeListener)'
      parameters:
        - id: listener
          type: ParseTreeListener
          description: |
            the listener to add
  - name: body()
    uid: botbuilder-lg.LGTemplateParser.body
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function body()
      return:
        type: <xref uid="botbuilder-lg.BodyContext" />
        description: ''
  - name: 'compileParseTreePattern(string, number)'
    uid: botbuilder-lg.LGTemplateParser.compileParseTreePattern
    package: botbuilder-lg
    summary: >
      The preferred method of getting a tree pattern. For example, here's a

      sample use:

      ```

      let t: ParseTree = parser.expr();

      let p: ParseTreePattern = await parser.compileParseTreePattern("<ID>+0",
      MyParser.RULE_expr);

      let m: ParseTreeMatch = p.match(t);

      let id: string = m.get("ID");

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function compileParseTreePattern(pattern: string, patternRuleIndex:
        number)
      parameters:
        - id: pattern
          type: string
          description: ''
        - id: patternRuleIndex
          type: number
          description: ''
      return:
        type: Promise&lt;ParseTreePattern&gt;
        description: ''
  - name: 'compileParseTreePattern(string, number, Lexer)'
    uid: botbuilder-lg.LGTemplateParser.compileParseTreePattern_1
    package: botbuilder-lg
    summary: >-
      The same as [int)](xref:%23compileParseTreePattern(String%2C) but specify
      a

      <xref:Lexer> rather than trying to deduce it from this parser.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function compileParseTreePattern(pattern: string, patternRuleIndex:
        number, lexer?: Lexer)
      parameters:
        - id: pattern
          type: string
          description: ''
        - id: patternRuleIndex
          type: number
          description: ''
        - id: lexer
          type: Lexer
          description: ''
      return:
        type: Promise&lt;ParseTreePattern&gt;
        description: ''
  - name: consume()
    uid: botbuilder-lg.LGTemplateParser.consume
    package: botbuilder-lg
    summary: >
      Consume and return the [current symbol](`currentToken`).

      E.g., given the following input with `A` being the current

      lookahead symbol, this function moves the cursor to `B` and returns

      `A`.


      ```

      A B

      ^

      ```


      If the parser is not in error recovery mode, the consumed symbol is added

      to the parse tree using <xref:ParserRuleContext%23addChild(TerminalNode)>,
      and

      <xref:ParseTreeListener%23visitTerminal> is called on any parse listeners.

      If the parser *is* in error recovery mode, the consumed symbol is

      added to the parse tree using
      [Token)](xref:%23createErrorNode(ParserRuleContext%2C) then

      <xref:ParserRuleContext%23addErrorNode(ErrorNode)> and

      <xref:ParseTreeListener%23visitErrorNode> is called on any parse

      listeners.
    isPreview: false
    isDeprecated: false
    syntax:
      content: function consume()
      return:
        type: Token
        description: ''
  - name: 'createErrorNode(ParserRuleContext, Token)'
    uid: botbuilder-lg.LGTemplateParser.createErrorNode
    package: botbuilder-lg
    summary: |-
      How to create an error node, given a token, associated with a parent.
      Typically, the error node to create is not a function of the parent.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function createErrorNode(parent: ParserRuleContext, t: Token)'
      parameters:
        - id: parent
          type: ParserRuleContext
          description: ''
        - id: t
          type: Token
          description: ''
      return:
        type: ErrorNode
        description: ''
  - name: 'createTerminalNode(ParserRuleContext, Token)'
    uid: botbuilder-lg.LGTemplateParser.createTerminalNode
    package: botbuilder-lg
    summary: |-
      How to create a token leaf node associated with a parent.
      Typically, the terminal node to create is not a function of the parent.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function createTerminalNode(parent: ParserRuleContext, t: Token)'
      parameters:
        - id: parent
          type: ParserRuleContext
          description: ''
        - id: t
          type: Token
          description: ''
      return:
        type: TerminalNode
        description: ''
  - name: dumpDFA()
    uid: botbuilder-lg.LGTemplateParser.dumpDFA
    package: botbuilder-lg
    summary: For debugging and other purposes.
    isPreview: false
    isDeprecated: false
    syntax:
      content: function dumpDFA()
  - name: 'enterLeftFactoredRule(ParserRuleContext, number, number)'
    uid: botbuilder-lg.LGTemplateParser.enterLeftFactoredRule
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function enterLeftFactoredRule(localctx: ParserRuleContext, state:
        number, ruleIndex: number)
      parameters:
        - id: localctx
          type: ParserRuleContext
          description: ''
        - id: state
          type: number
          description: ''
        - id: ruleIndex
          type: number
          description: ''
  - name: 'enterOuterAlt(ParserRuleContext, number)'
    uid: botbuilder-lg.LGTemplateParser.enterOuterAlt
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function enterOuterAlt(localctx: ParserRuleContext, altNum: number)'
      parameters:
        - id: localctx
          type: ParserRuleContext
          description: ''
        - id: altNum
          type: number
          description: ''
  - name: 'enterRecursionRule(ParserRuleContext, number, number, number)'
    uid: botbuilder-lg.LGTemplateParser.enterRecursionRule
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function enterRecursionRule(localctx: ParserRuleContext, state: number,
        ruleIndex: number, precedence: number)
      parameters:
        - id: localctx
          type: ParserRuleContext
          description: ''
        - id: state
          type: number
          description: ''
        - id: ruleIndex
          type: number
          description: ''
        - id: precedence
          type: number
          description: ''
  - name: 'enterRule(ParserRuleContext, number, number)'
    uid: botbuilder-lg.LGTemplateParser.enterRule
    package: botbuilder-lg
    summary: |-
      Always called by generated parsers upon entry to a rule. Access field
      <xref:%23_ctx> get the current context.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function enterRule(localctx: ParserRuleContext, state: number,
        ruleIndex: number)
      parameters:
        - id: localctx
          type: ParserRuleContext
          description: ''
        - id: state
          type: number
          description: ''
        - id: ruleIndex
          type: number
          description: ''
  - name: errorStructuredName()
    uid: botbuilder-lg.LGTemplateParser.errorStructuredName
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function errorStructuredName()
      return:
        type: <xref uid="botbuilder-lg.ErrorStructuredNameContext" />
        description: ''
  - name: errorStructureLine()
    uid: botbuilder-lg.LGTemplateParser.errorStructureLine
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function errorStructureLine()
      return:
        type: <xref uid="botbuilder-lg.ErrorStructureLineContext" />
        description: ''
  - name: errorTemplateString()
    uid: botbuilder-lg.LGTemplateParser.errorTemplateString
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function errorTemplateString()
      return:
        type: <xref uid="botbuilder-lg.ErrorTemplateStringContext" />
        description: ''
  - name: exitRule()
    uid: botbuilder-lg.LGTemplateParser.exitRule
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function exitRule()
  - name: expression()
    uid: botbuilder-lg.LGTemplateParser.expression
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function expression()
      return:
        type: <xref uid="botbuilder-lg.ExpressionContext" />
        description: ''
  - name: expressionInStructure()
    uid: botbuilder-lg.LGTemplateParser.expressionInStructure
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function expressionInStructure()
      return:
        type: <xref uid="botbuilder-lg.ExpressionInStructureContext" />
        description: ''
  - name: getATNWithBypassAlts()
    uid: botbuilder-lg.LGTemplateParser.getATNWithBypassAlts
    package: botbuilder-lg
    summary: |
      The ATN with bypass alternatives is expensive to create so we create it
      lazily.
      @ if the current parser does not
      implement the `serializedATN` property.
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getATNWithBypassAlts()
      return:
        type: ATN
        description: ''
  - name: getDFAStrings()
    uid: botbuilder-lg.LGTemplateParser.getDFAStrings
    package: botbuilder-lg
    summary: For debugging and other purposes.
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getDFAStrings()
      return:
        type: 'string[]'
        description: ''
  - name: getErrorHeader(RecognitionException)
    uid: botbuilder-lg.LGTemplateParser.getErrorHeader
    package: botbuilder-lg
    summary: 'What is the error header, normally line/character position information?'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getErrorHeader(e: RecognitionException)'
      parameters:
        - id: e
          type: RecognitionException
          description: ''
      return:
        type: string
        description: ''
  - name: getErrorListenerDispatch()
    uid: botbuilder-lg.LGTemplateParser.getErrorListenerDispatch
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getErrorListenerDispatch()
      return:
        type: ParserErrorListener
        description: ''
  - name: getErrorListeners()
    uid: botbuilder-lg.LGTemplateParser.getErrorListeners
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getErrorListeners()
      return:
        type: Array&lt;ANTLRErrorListener&lt;Token&gt;&gt;
        description: ''
  - name: getExpectedTokens()
    uid: botbuilder-lg.LGTemplateParser.getExpectedTokens
    package: botbuilder-lg
    summary: >-
      Computes the set of input symbols which could follow the current parser

      state and context, as given by <xref:%23getState> and
      <xref:%23getContext>,

      respectively.
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getExpectedTokens()
      return:
        type: IntervalSet
        description: ''
  - name: getExpectedTokensWithinCurrentRule()
    uid: botbuilder-lg.LGTemplateParser.getExpectedTokensWithinCurrentRule
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getExpectedTokensWithinCurrentRule()
      return:
        type: IntervalSet
        description: ''
  - name: getInvokingContext(number)
    uid: botbuilder-lg.LGTemplateParser.getInvokingContext
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getInvokingContext(ruleIndex: number)'
      parameters:
        - id: ruleIndex
          type: number
          description: ''
      return:
        type: ParserRuleContext | undefined
        description: ''
  - name: getParseListeners()
    uid: botbuilder-lg.LGTemplateParser.getParseListeners
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getParseListeners()
      return:
        type: 'ParseTreeListener[]'
        description: ''
  - name: getRuleIndex(string)
    uid: botbuilder-lg.LGTemplateParser.getRuleIndex
    package: botbuilder-lg
    summary: 'Get a rule''s index (i.e., `RULE_ruleName` field) or -1 if not found.'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getRuleIndex(ruleName: string)'
      parameters:
        - id: ruleName
          type: string
          description: ''
      return:
        type: number
        description: ''
  - name: getRuleIndexMap()
    uid: botbuilder-lg.LGTemplateParser.getRuleIndexMap
    package: botbuilder-lg
    summary: |
      Get a map from rule names to rule indexes.
      Used for XPath and tree pattern compilation.
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getRuleIndexMap()
      return:
        type: 'ReadonlyMap&lt;string, number&gt;'
        description: ''
  - name: getRuleInvocationStack(RuleContext)
    uid: botbuilder-lg.LGTemplateParser.getRuleInvocationStack
    package: botbuilder-lg
    summary: |
      Return List&lt;String&gt; of the rule names in your parser instance
       leading up to a call to the current rule.  You could override if
       you want more details such as the file/line info of where
       in the ATN a rule is invoked.
       This is very useful for error messages.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getRuleInvocationStack(ctx?: RuleContext)'
      parameters:
        - id: ctx
          type: RuleContext
          description: ''
      return:
        type: 'string[]'
        description: ''
  - name: getTokenType(string)
    uid: botbuilder-lg.LGTemplateParser.getTokenType
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getTokenType(tokenName: string)'
      parameters:
        - id: tokenName
          type: string
          description: ''
      return:
        type: number
        description: ''
  - name: getTokenTypeMap()
    uid: botbuilder-lg.LGTemplateParser.getTokenTypeMap
    package: botbuilder-lg
    summary: |
      Get a map from token names to token types.
      Used for XPath and tree pattern compilation.
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getTokenTypeMap()
      return:
        type: 'ReadonlyMap&lt;string, number&gt;'
        description: ''
  - name: ifCondition()
    uid: botbuilder-lg.LGTemplateParser.ifCondition
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function ifCondition()
      return:
        type: <xref uid="botbuilder-lg.IfConditionContext" />
        description: ''
  - name: ifConditionRule()
    uid: botbuilder-lg.LGTemplateParser.ifConditionRule
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function ifConditionRule()
      return:
        type: <xref uid="botbuilder-lg.IfConditionRuleContext" />
        description: ''
  - name: ifElseTemplateBody()
    uid: botbuilder-lg.LGTemplateParser.ifElseTemplateBody
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function ifElseTemplateBody()
      return:
        type: <xref uid="botbuilder-lg.IfElseTemplateBodyContext" />
        description: ''
  - name: inContext(string)
    uid: botbuilder-lg.LGTemplateParser.inContext
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function inContext(context: string)'
      parameters:
        - id: context
          type: string
          description: ''
      return:
        type: boolean
        description: ''
  - name: isExpectedToken(number)
    uid: botbuilder-lg.LGTemplateParser.isExpectedToken
    package: botbuilder-lg
    summary: |
      Checks whether or not `symbol` can follow the current state in the
      ATN. The behavior of this method is equivalent to the following, but is
      implemented such that the complete context-sensitive follow set does not
      need to be explicitly constructed.
      ```
      return getExpectedTokens().contains(symbol);
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function isExpectedToken(symbol: number)'
      parameters:
        - id: symbol
          type: number
          description: the symbol type to check
      return:
        type: boolean
        description: |-
          `true` if `symbol` can follow the current state in
          the ATN, otherwise `false`.
  - name: keyValueStructureLine()
    uid: botbuilder-lg.LGTemplateParser.keyValueStructureLine
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function keyValueStructureLine()
      return:
        type: <xref uid="botbuilder-lg.KeyValueStructureLineContext" />
        description: ''
  - name: keyValueStructureValue()
    uid: botbuilder-lg.LGTemplateParser.keyValueStructureValue
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function keyValueStructureValue()
      return:
        type: <xref uid="botbuilder-lg.KeyValueStructureValueContext" />
        description: ''
  - name: match(number)
    uid: botbuilder-lg.LGTemplateParser.match
    package: botbuilder-lg
    summary: >
      Match current input symbol against `ttype`. If the symbol type

      matches, <xref:ANTLRErrorStrategy%23reportMatch> and <xref:%23consume> are

      called to complete the match process.

      If the symbol type does not match,

      <xref:ANTLRErrorStrategy%23recoverInline> is called on the current error

      strategy to attempt recovery. If <xref:%23getBuildParseTree> is

      `true` and the token index of the symbol returned by

      <xref:ANTLRErrorStrategy%23recoverInline> is -1, the symbol is added to

      the parse tree by calling
      [Token)](xref:%23createErrorNode(ParserRuleContext%2C) then

      <xref:ParserRuleContext%23addErrorNode(ErrorNode)>.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function match(ttype: number)'
      parameters:
        - id: ttype
          type: number
          description: the token type to match
      return:
        type: Token
        description: |-
          the matched symbol
          @ if the current input symbol did not match
          `ttype` and the error strategy could not recover from the
          mismatched symbol
  - name: matchWildcard()
    uid: botbuilder-lg.LGTemplateParser.matchWildcard
    package: botbuilder-lg
    summary: >
      Match current input symbol as a wildcard. If the symbol type matches

      (i.e. has a value greater than 0), <xref:ANTLRErrorStrategy%23reportMatch>

      and <xref:%23consume> are called to complete the match process.

      If the symbol type does not match,

      <xref:ANTLRErrorStrategy%23recoverInline> is called on the current error

      strategy to attempt recovery. If <xref:%23getBuildParseTree> is

      `true` and the token index of the symbol returned by

      <xref:ANTLRErrorStrategy%23recoverInline> is -1, the symbol is added to

      the parse tree by calling
      [Token)](xref:Parser%23createErrorNode(ParserRuleContext%2C) then

      <xref:ParserRuleContext%23addErrorNode(ErrorNode)>.
    isPreview: false
    isDeprecated: false
    syntax:
      content: function matchWildcard()
      return:
        type: Token
        description: >-
          the matched symbol

          @ if the current input symbol did not match

          a wildcard and the error strategy could not recover from the
          mismatched

          symbol
  - name: normalTemplateBody()
    uid: botbuilder-lg.LGTemplateParser.normalTemplateBody
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function normalTemplateBody()
      return:
        type: <xref uid="botbuilder-lg.NormalTemplateBodyContext" />
        description: ''
  - name: normalTemplateString()
    uid: botbuilder-lg.LGTemplateParser.normalTemplateString
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function normalTemplateString()
      return:
        type: <xref uid="botbuilder-lg.NormalTemplateStringContext" />
        description: ''
  - name: notifyErrorListeners(string)
    uid: botbuilder-lg.LGTemplateParser.notifyErrorListeners
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function notifyErrorListeners(msg: string)'
      parameters:
        - id: msg
          type: string
          description: ''
  - name: >-
      notifyErrorListeners(string, Token | null, RecognitionException |
      undefined)
    uid: botbuilder-lg.LGTemplateParser.notifyErrorListeners_1
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function notifyErrorListeners(msg: string, offendingToken: Token | null,
        e: RecognitionException | undefined)
      parameters:
        - id: msg
          type: string
          description: ''
        - id: offendingToken
          type: Token | null
          description: ''
        - id: e
          type: RecognitionException | undefined
          description: ''
  - name: 'precpred(RuleContext, number)'
    uid: botbuilder-lg.LGTemplateParser.precpred
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function precpred(localctx: RuleContext, precedence: number)'
      parameters:
        - id: localctx
          type: RuleContext
          description: ''
        - id: precedence
          type: number
          description: ''
      return:
        type: boolean
        description: ''
  - name: 'pushNewRecursionContext(ParserRuleContext, number, number)'
    uid: botbuilder-lg.LGTemplateParser.pushNewRecursionContext
    package: botbuilder-lg
    summary: |-
      Like <xref:%23enterRule> but for recursive rules.
       Make the current context the child of the incoming localctx.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function pushNewRecursionContext(localctx: ParserRuleContext, state:
        number, ruleIndex: number)
      parameters:
        - id: localctx
          type: ParserRuleContext
          description: ''
        - id: state
          type: number
          description: ''
        - id: ruleIndex
          type: number
          description: ''
  - name: removeErrorListener(ANTLRErrorListener<Token>)
    uid: botbuilder-lg.LGTemplateParser.removeErrorListener
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function removeErrorListener(listener: ANTLRErrorListener<Token>)'
      parameters:
        - id: listener
          type: ANTLRErrorListener&lt;Token&gt;
          description: ''
  - name: removeErrorListeners()
    uid: botbuilder-lg.LGTemplateParser.removeErrorListeners
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function removeErrorListeners()
  - name: removeParseListener(ParseTreeListener)
    uid: botbuilder-lg.LGTemplateParser.removeParseListener
    package: botbuilder-lg
    summary: |
      Remove `listener` from the list of parse listeners.
      If `listener` is `undefined` or has not been added as a parse
      listener, this method does nothing.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function removeParseListener(listener: ParseTreeListener)'
      parameters:
        - id: listener
          type: ParseTreeListener
          description: |
            the listener to remove
  - name: removeParseListeners()
    uid: botbuilder-lg.LGTemplateParser.removeParseListeners
    package: botbuilder-lg
    summary: Remove all parse listeners.
    isPreview: false
    isDeprecated: false
    syntax:
      content: function removeParseListeners()
  - name: reset()
    uid: botbuilder-lg.LGTemplateParser.reset
    package: botbuilder-lg
    summary: reset the parser's state
    isPreview: false
    isDeprecated: false
    syntax:
      content: function reset()
  - name: reset(boolean)
    uid: botbuilder-lg.LGTemplateParser.reset_1
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function reset(resetInput: boolean)'
      parameters:
        - id: resetInput
          type: boolean
          description: ''
  - name: 'sempred(RuleContext | undefined, number, number)'
    uid: botbuilder-lg.LGTemplateParser.sempred
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function sempred(_localctx: RuleContext | undefined, ruleIndex: number,
        actionIndex: number)
      parameters:
        - id: _localctx
          type: RuleContext | undefined
          description: ''
        - id: ruleIndex
          type: number
          description: ''
        - id: actionIndex
          type: number
          description: ''
      return:
        type: boolean
        description: ''
  - name: setProfile(boolean)
    uid: botbuilder-lg.LGTemplateParser.setProfile
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setProfile(profile: boolean)'
      parameters:
        - id: profile
          type: boolean
          description: ''
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: structuredBodyContentLine()
    uid: botbuilder-lg.LGTemplateParser.structuredBodyContentLine
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function structuredBodyContentLine()
      return:
        type: <xref uid="botbuilder-lg.StructuredBodyContentLineContext" />
        description: ''
  - name: structuredBodyEndLine()
    uid: botbuilder-lg.LGTemplateParser.structuredBodyEndLine
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function structuredBodyEndLine()
      return:
        type: <xref uid="botbuilder-lg.StructuredBodyEndLineContext" />
        description: ''
  - name: structuredBodyNameLine()
    uid: botbuilder-lg.LGTemplateParser.structuredBodyNameLine
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function structuredBodyNameLine()
      return:
        type: <xref uid="botbuilder-lg.StructuredBodyNameLineContext" />
        description: ''
  - name: structuredTemplateBody()
    uid: botbuilder-lg.LGTemplateParser.structuredTemplateBody
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function structuredTemplateBody()
      return:
        type: <xref uid="botbuilder-lg.StructuredTemplateBodyContext" />
        description: ''
  - name: switchCaseRule()
    uid: botbuilder-lg.LGTemplateParser.switchCaseRule
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function switchCaseRule()
      return:
        type: <xref uid="botbuilder-lg.SwitchCaseRuleContext" />
        description: ''
  - name: switchCaseStat()
    uid: botbuilder-lg.LGTemplateParser.switchCaseStat
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function switchCaseStat()
      return:
        type: <xref uid="botbuilder-lg.SwitchCaseStatContext" />
        description: ''
  - name: switchCaseTemplateBody()
    uid: botbuilder-lg.LGTemplateParser.switchCaseTemplateBody
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function switchCaseTemplateBody()
      return:
        type: <xref uid="botbuilder-lg.SwitchCaseTemplateBodyContext" />
        description: ''
  - name: template()
    uid: botbuilder-lg.LGTemplateParser.template
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function template()
      return:
        type: <xref uid="botbuilder-lg.TemplateContext" />
        description: ''
  - name: templateString()
    uid: botbuilder-lg.LGTemplateParser.templateString
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function templateString()
      return:
        type: <xref uid="botbuilder-lg.TemplateStringContext" />
        description: ''
  - name: unrollRecursionContexts(ParserRuleContext)
    uid: botbuilder-lg.LGTemplateParser.unrollRecursionContexts
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function unrollRecursionContexts(_parentctx: ParserRuleContext)'
      parameters:
        - id: _parentctx
          type: ParserRuleContext
          description: ''
extends: Parser
