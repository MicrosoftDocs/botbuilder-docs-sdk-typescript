### YamlMime:UniversalReference
items:
  - uid: botbuilder-lg.LGResource
    name: LGResource
    fullName: LGResource
    children:
      - botbuilder-lg.LGResource.addTemplate
      - botbuilder-lg.LGResource.content
      - botbuilder-lg.LGResource.deleteTemplate
      - botbuilder-lg.LGResource.discoverLGResources
      - botbuilder-lg.LGResource.id
      - botbuilder-lg.LGResource.imports
      - botbuilder-lg.LGResource.constructor
      - botbuilder-lg.LGResource.templates
      - botbuilder-lg.LGResource.toString
      - botbuilder-lg.LGResource.updateTemplate
    langs:
      - typeScript
    type: class
    summary: LG Resource
    package: botbuilder-lg
  - uid: botbuilder-lg.LGResource.addTemplate
    name: 'addTemplate(string, string[], string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Add a new template and return LG resource.
    syntax:
      content: >-
        function addTemplate(templateName: string, parameters: string[],
        templateBody: string)
      parameters:
        - id: templateName
          type:
            - string
          description: new template name.
        - id: parameters
          type:
            - 'string[]'
          description: new params.
        - id: templateBody
          type:
            - string
          description: new  template body.
      return:
        type:
          - botbuilder-lg.LGResource
        description: new lg resource.
    package: botbuilder-lg
  - uid: botbuilder-lg.LGResource.content
    name: content
    fullName: content
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'content: string'
      return:
        type:
          - string
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGResource.deleteTemplate
    name: deleteTemplate(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Delete an exist template.
    syntax:
      content: 'function deleteTemplate(templateName: string)'
      parameters:
        - id: templateName
          type:
            - string
          description: which template should delete.
      return:
        type:
          - botbuilder-lg.LGResource
        description: return the new lg resource.
    package: botbuilder-lg
  - uid: botbuilder-lg.LGResource.discoverLGResources
    name: discoverLGResources(ImportResolverDelegate)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function discoverLGResources(importResolver: ImportResolverDelegate)'
      parameters:
        - id: importResolver
          type:
            - botbuilder-lg.ImportResolverDelegate
          description: ''
      return:
        type:
          - 'botbuilder-lg.LGResource[]'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGResource.id
    name: id
    fullName: id
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'id: string'
      return:
        type:
          - string
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGResource.imports
    name: imports
    fullName: imports
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'imports: LGImport[]'
      return:
        type:
          - 'botbuilder-lg.LGImport[]'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGResource.constructor
    name: 'LGResource(LGTemplate[], LGImport[], string, string)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new LGResource(templates: LGTemplate[], imports: LGImport[], content:
        string, id?: string)
      parameters:
        - id: templates
          type:
            - 'botbuilder-lg.LGTemplate[]'
          description: ''
        - id: imports
          type:
            - 'botbuilder-lg.LGImport[]'
          description: ''
        - id: content
          type:
            - string
          description: ''
        - id: id
          type:
            - string
          description: ''
          optional: true
    package: botbuilder-lg
  - uid: botbuilder-lg.LGResource.templates
    name: templates
    fullName: templates
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'templates: LGTemplate[]'
      return:
        type:
          - 'botbuilder-lg.LGTemplate[]'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGResource.toString
    name: toString()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function toString()
      parameters: []
      return:
        type:
          - string
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.LGResource.updateTemplate
    name: 'updateTemplate(string, string, string[], string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: update an exist template.
    syntax:
      content: >-
        function updateTemplate(templateName: string, newTemplateName: string,
        parameters: string[], templateBody: string)
      parameters:
        - id: templateName
          type:
            - string
          description: origin template name. the only id of a template.
        - id: newTemplateName
          type:
            - string
          description: new template Name.
        - id: parameters
          type:
            - 'string[]'
          description: new params.
        - id: templateBody
          type:
            - string
          description: new template body.
      return:
        type:
          - botbuilder-lg.LGResource
        description: new LG resource.
    package: botbuilder-lg
references:
  - uid: 'botbuilder-lg.LGTemplate[]'
    name: 'LGTemplate[]'
    spec.typeScript:
      - name: LGTemplate
        fullName: LGTemplate
        uid: botbuilder-lg.LGTemplate
      - name: '[]'
        fullName: '[]'
  - uid: 'botbuilder-lg.LGImport[]'
    name: 'LGImport[]'
    spec.typeScript:
      - name: LGImport
        fullName: LGImport
        uid: botbuilder-lg.LGImport
      - name: '[]'
        fullName: '[]'
  - uid: botbuilder-lg.LGResource
    name: LGResource
    spec.typeScript:
      - name: LGResource
        fullName: LGResource
        uid: botbuilder-lg.LGResource
  - uid: botbuilder-lg.ImportResolverDelegate
    name: ImportResolverDelegate
    spec.typeScript:
      - name: ImportResolverDelegate
        fullName: ImportResolverDelegate
        uid: botbuilder-lg.ImportResolverDelegate
  - uid: 'botbuilder-lg.LGResource[]'
    name: 'LGResource[]'
    spec.typeScript:
      - name: LGResource
        fullName: LGResource
        uid: botbuilder-lg.LGResource
      - name: '[]'
        fullName: '[]'
