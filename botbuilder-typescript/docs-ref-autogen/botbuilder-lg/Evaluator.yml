### YamlMime:TSType
name: Evaluator
uid: botbuilder-lg.Evaluator
package: botbuilder-lg
summary: Evaluation runtime engine
fullName: Evaluator
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: 'Evaluator(Templates, EvaluationOptions)'
    uid: botbuilder-lg.Evaluator.constructor
    package: botbuilder-lg
    summary: >-
      Creates a new instance of the [Evaluator](xref:botbuilder-lg.Evaluator)
      class.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new Evaluator(templates: Templates, opt?: EvaluationOptions)'
      parameters:
        - id: templates
          type: <xref uid="botbuilder-lg.Templates" />
          description: Templates.
        - id: opt
          type: <xref uid="botbuilder-lg.EvaluationOptions" />
          description: |
            Options for LG.
properties:
  - name: activityAttachmentFunctionName
    uid: botbuilder-lg.Evaluator.activityAttachmentFunctionName
    package: botbuilder-lg
    summary: ''
    fullName: activityAttachmentFunctionName
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static activityAttachmentFunctionName: "ActivityAttachment" =
        "ActivityAttachment"
      return:
        description: ''
        type: '"ActivityAttachment"'
  - name: expandTextFunctionName
    uid: botbuilder-lg.Evaluator.expandTextFunctionName
    package: botbuilder-lg
    summary: ''
    fullName: expandTextFunctionName
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static expandTextFunctionName: "expandText" = "expandText"'
      return:
        description: ''
        type: '"expandText"'
  - name: expressionParser
    uid: botbuilder-lg.Evaluator.expressionParser
    package: botbuilder-lg
    summary: Expression parser.
    fullName: expressionParser
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'expressionParser: ExpressionParser'
      return:
        description: ''
        type: ExpressionParser
  - name: fromFileFunctionName
    uid: botbuilder-lg.Evaluator.fromFileFunctionName
    package: botbuilder-lg
    summary: ''
    fullName: fromFileFunctionName
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static fromFileFunctionName: "fromFile" = "fromFile"'
      return:
        description: ''
        type: '"fromFile"'
  - name: isTemplateFunctionName
    uid: botbuilder-lg.Evaluator.isTemplateFunctionName
    package: botbuilder-lg
    summary: ''
    fullName: isTemplateFunctionName
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static isTemplateFunctionName: "isTemplate" = "isTemplate"'
      return:
        description: ''
        type: '"isTemplate"'
  - name: LGType
    uid: botbuilder-lg.Evaluator.LGType
    package: botbuilder-lg
    summary: ''
    fullName: LGType
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static LGType: "lgType" = "lgType"'
      return:
        description: ''
        type: '"lgType"'
  - name: ReExecuteSuffix
    uid: botbuilder-lg.Evaluator.ReExecuteSuffix
    package: botbuilder-lg
    summary: ''
    fullName: ReExecuteSuffix
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static ReExecuteSuffix: "!" = "!"'
      return:
        description: ''
        type: '"!"'
  - name: templateFunctionName
    uid: botbuilder-lg.Evaluator.templateFunctionName
    package: botbuilder-lg
    summary: ''
    fullName: templateFunctionName
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static templateFunctionName: "template" = "template"'
      return:
        description: ''
        type: '"template"'
  - name: templateMap
    uid: botbuilder-lg.Evaluator.templateMap
    package: botbuilder-lg
    summary: TemplateMap.
    fullName: templateMap
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'templateMap: [key: string]: Template'
      return:
        description: ''
        type: '[key: string]\: <xref uid="botbuilder-lg.Template" />'
  - name: templates
    uid: botbuilder-lg.Evaluator.templates
    package: botbuilder-lg
    summary: Templates.
    fullName: templates
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'templates: Templates'
      return:
        description: ''
        type: <xref uid="botbuilder-lg.Templates" />
inheritedMethods:
  - name: visit(ParseTree)
    uid: botbuilder-lg.Evaluator.visit
    package: botbuilder-lg
    summary: |
      {@inheritDoc}
      The default implementation calls <xref:ParseTree%23accept> on the
      specified tree.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function visit(tree: ParseTree): unknown'
      parameters:
        - id: tree
          type: ParseTree
          description: ''
      return:
        description: ''
        type: unknown
    inheritanceDescription: <b>Inherited From</b> AbstractParseTreeVisitor.visit
  - name: visitChildren(RuleNode)
    uid: botbuilder-lg.Evaluator.visitChildren
    package: botbuilder-lg
    summary: |
      {@inheritDoc}
      The default implementation initializes the aggregate result to
      [defaultResult()](xref:%23defaultResult). Before visiting each child, it
      calls [shouldVisitNextChild](xref:%23shouldVisitNextChild); if the result
      is `false` no more children are visited and the current aggregate
      result is returned. After visiting a child, the aggregate result is
      updated by calling [aggregateResult](xref:%23aggregateResult) with the
      previous aggregate result and the result of visiting the child.

      The default implementation is not safe for use in visitors that modify
      the tree structure. Visitors that modify the tree should override this
      method to behave properly in respect to the specific algorithm in use.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function visitChildren(node: RuleNode): unknown'
      parameters:
        - id: node
          type: RuleNode
          description: ''
      return:
        description: ''
        type: unknown
    inheritanceDescription: <b>Inherited From</b> AbstractParseTreeVisitor.visitChildren
  - name: visitErrorNode(ErrorNode)
    uid: botbuilder-lg.Evaluator.visitErrorNode
    package: botbuilder-lg
    summary: |
      {@inheritDoc}
      The default implementation returns the result of
      [defaultResult](xref:%23defaultResult).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function visitErrorNode(node: ErrorNode): unknown'
      parameters:
        - id: node
          type: ErrorNode
          description: ''
      return:
        description: ''
        type: unknown
    inheritanceDescription: <b>Inherited From</b> AbstractParseTreeVisitor.visitErrorNode
  - name: visitTerminal(TerminalNode)
    uid: botbuilder-lg.Evaluator.visitTerminal
    package: botbuilder-lg
    summary: |
      {@inheritDoc}
      The default implementation returns the result of
      [defaultResult](xref:%23defaultResult).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function visitTerminal(node: TerminalNode): unknown'
      parameters:
        - id: node
          type: TerminalNode
          description: ''
      return:
        description: ''
        type: unknown
    inheritanceDescription: <b>Inherited From</b> AbstractParseTreeVisitor.visitTerminal
methods:
  - name: 'checkExpressionResult(string, string, unknown, string, string, string)'
    uid: botbuilder-lg.Evaluator.checkExpressionResult
    package: botbuilder-lg
    summary: Checks an expression result and throws the corresponding error.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function checkExpressionResult(exp: string, error: string,
        result: unknown, templateName: string, inlineContent: string,
        errorPrefix: string)
      parameters:
        - id: exp
          type: string
          description: Expression text.
        - id: error
          type: string
          description: Error message.
        - id: result
          type: unknown
          description: Result.
        - id: templateName
          type: string
          description: Template name.
        - id: inlineContent
          type: string
          description: Optional. In line content.
        - id: errorPrefix
          type: string
          description: |
            Optional. Error prefix.
  - name: 'concatErrorMsg(string, string)'
    uid: botbuilder-lg.Evaluator.concatErrorMsg
    package: botbuilder-lg
    summary: Concatenates two error messages.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function concatErrorMsg(firstError: string, secondError: string):
        string
      parameters:
        - id: firstError
          type: string
          description: First error message to concatenate.
        - id: secondError
          type: string
          description: Second error message to concatenate.
      return:
        description: The concatenated error messages.
        type: string
  - name: 'constructScope(string, unknown[], Template[])'
    uid: botbuilder-lg.Evaluator.constructScope
    package: botbuilder-lg
    summary: >-
      Constructs the scope for mapping the values of arguments to the parameters
      of the template.

      Throws errors if certain errors detected
      [TemplateErrors](xref:botbuilder-lg.TemplateErrors).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function constructScope(inputTemplateName: string, args: unknown[],
        allTemplates: Template[]): MemoryInterface
      parameters:
        - id: inputTemplateName
          type: string
          description: Template name to evaluate.
        - id: args
          type: 'unknown[]'
          description: Arguments to map to the template parameters.
        - id: allTemplates
          type: '<xref uid="botbuilder-lg.Template" />[]'
          description: All templates.
      return:
        description: >-
          The current scope if the number of arguments is 0, otherwise, returns
          a [CustomizedMemory](xref:botbuilder-lg.CustomizedMemory)

          with the mapping of the parameter name to the argument value added to
          the scope.
        type: MemoryInterface
  - name: 'evaluateTemplate(string, unknown)'
    uid: botbuilder-lg.Evaluator.evaluateTemplate
    package: botbuilder-lg
    summary: Evaluate a template with given name and scope.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function evaluateTemplate(inputTemplateName: string, scope: unknown):
        unknown
      parameters:
        - id: inputTemplateName
          type: string
          description: Template name.
        - id: scope
          type: unknown
          description: Scope.
      return:
        description: Evaluate result.
        type: unknown
  - name: visitIfElseBody(IfElseBodyContext)
    uid: botbuilder-lg.Evaluator.visitIfElseBody
    package: botbuilder-lg
    summary: >-
      Visit a parse tree produced by the ifElseBody labeled alternative in
      LGTemplateParser.body.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function visitIfElseBody(ctx: IfElseBodyContext): unknown'
      parameters:
        - id: ctx
          type: <xref uid="botbuilder-lg.IfElseBodyContext" />
          description: The parse tree.
      return:
        description: The visitor result.
        type: unknown
  - name: visitNormalBody(NormalBodyContext)
    uid: botbuilder-lg.Evaluator.visitNormalBody
    package: botbuilder-lg
    summary: >-
      Visit a parse tree produced by the normalBody labeled alternative in
      LGTemplateParser.body.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function visitNormalBody(ctx: NormalBodyContext): unknown'
      parameters:
        - id: ctx
          type: <xref uid="botbuilder-lg.NormalBodyContext" />
          description: The parse tree.
      return:
        description: The result of visiting the normal body.
        type: unknown
  - name: visitNormalTemplateBody(NormalTemplateBodyContext)
    uid: botbuilder-lg.Evaluator.visitNormalTemplateBody
    package: botbuilder-lg
    summary: Visit a parse tree produced by LGTemplateParser.normalTemplateBody.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function visitNormalTemplateBody(ctx: NormalTemplateBodyContext):
        unknown
      parameters:
        - id: ctx
          type: <xref uid="botbuilder-lg.NormalTemplateBodyContext" />
          description: The parse tree.
      return:
        description: The result of visiting the normal template body.
        type: unknown
  - name: visitNormalTemplateString(NormalTemplateStringContext)
    uid: botbuilder-lg.Evaluator.visitNormalTemplateString
    package: botbuilder-lg
    summary: Visit a parse tree produced by LGTemplateParser.normalTemplateString.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function visitNormalTemplateString(ctx: NormalTemplateStringContext):
        unknown
      parameters:
        - id: ctx
          type: <xref uid="botbuilder-lg.NormalTemplateStringContext" />
          description: The parse tree.
      return:
        description: The string result of visiting the normal template string.
        type: unknown
  - name: visitStructuredTemplateBody(StructuredTemplateBodyContext)
    uid: botbuilder-lg.Evaluator.visitStructuredTemplateBody
    package: botbuilder-lg
    summary: Visit a parse tree produced by LGTemplateParser.structuredTemplateBody.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function visitStructuredTemplateBody(ctx:
        StructuredTemplateBodyContext): unknown
      parameters:
        - id: ctx
          type: <xref uid="botbuilder-lg.StructuredTemplateBodyContext" />
          description: The parse tree.
      return:
        description: The result of visiting the structured template body.
        type: unknown
  - name: visitSwitchCaseBody(SwitchCaseBodyContext)
    uid: botbuilder-lg.Evaluator.visitSwitchCaseBody
    package: botbuilder-lg
    summary: >-
      Visit a parse tree produced by the switchCaseBody labeled alternative in
      LGTemplateParser.body.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function visitSwitchCaseBody(ctx: SwitchCaseBodyContext): unknown'
      parameters:
        - id: ctx
          type: <xref uid="botbuilder-lg.SwitchCaseBodyContext" />
          description: The parse tree.
      return:
        description: The string result of visiting the switch case body.
        type: unknown
  - name: 'wrappedEvalTextContainsExpression(string, RegExp)'
    uid: botbuilder-lg.Evaluator.wrappedEvalTextContainsExpression
    package: botbuilder-lg
    summary: Replaces an expression contained in text.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function wrappedEvalTextContainsExpression(exp: string, regex: RegExp):
        string
      parameters:
        - id: exp
          type: string
          description: Expression Text.
        - id: regex
          type: RegExp
          description: Regex to select the text to replace.
      return:
        description: Text with expression replaced.
        type: string
extends: AbstractParseTreeVisitor&lt;unknown&gt;
