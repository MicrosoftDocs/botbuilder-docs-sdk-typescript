### YamlMime:UniversalReference
items:
  - uid: botbuilder-lg.Evaluator
    name: Evaluator
    fullName: Evaluator
    children:
      - botbuilder-lg.Evaluator.activityAttachmentFunctionName
      - botbuilder-lg.Evaluator.constructScope
      - botbuilder-lg.Evaluator.escapeSeperatorReverseRegex
      - botbuilder-lg.Evaluator.evaluateTemplate
      - botbuilder-lg.Evaluator.constructor
      - botbuilder-lg.Evaluator.expressionEngine
      - botbuilder-lg.Evaluator.expressionRecognizeReverseRegex
      - botbuilder-lg.Evaluator.fromFileFunctionName
      - botbuilder-lg.Evaluator.isPureExpression
      - botbuilder-lg.Evaluator.LGType
      - botbuilder-lg.Evaluator.templateFunctionName
      - botbuilder-lg.Evaluator.templateMap
      - botbuilder-lg.Evaluator.templates
      - botbuilder-lg.Evaluator.visit
      - botbuilder-lg.Evaluator.visitChildren
      - botbuilder-lg.Evaluator.visitErrorNode
      - botbuilder-lg.Evaluator.visitIfElseBody
      - botbuilder-lg.Evaluator.visitNormalBody
      - botbuilder-lg.Evaluator.visitNormalTemplateBody
      - botbuilder-lg.Evaluator.visitNormalTemplateString
      - botbuilder-lg.Evaluator.visitStructuredTemplateBody
      - botbuilder-lg.Evaluator.visitSwitchCaseBody
      - botbuilder-lg.Evaluator.visitTemplateDefinition
      - botbuilder-lg.Evaluator.visitTerminal
      - botbuilder-lg.Evaluator.wrappedEvalTextContainsExpression
      - botbuilder-lg.Evaluator.wrappedRegExSplit
    langs:
      - typeScript
    type: class
    summary: Evaluation tuntime engine
    extends:
      name: AbstractParseTreeVisitor<any>
    package: botbuilder-lg
  - uid: botbuilder-lg.Evaluator.activityAttachmentFunctionName
    name: activityAttachmentFunctionName
    fullName: activityAttachmentFunctionName
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: >-
        static activityAttachmentFunctionName: "ActivityAttachment" =
        "ActivityAttachment"
      return:
        type:
          - '"ActivityAttachment"'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Evaluator.constructScope
    name: 'constructScope(string, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function constructScope(templateName: string, args: any[])'
      parameters:
        - id: templateName
          type:
            - string
          description: ''
        - id: args
          type:
            - 'any[]'
          description: ''
      return:
        type:
          - any
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Evaluator.escapeSeperatorReverseRegex
    name: escapeSeperatorReverseRegex
    fullName: escapeSeperatorReverseRegex
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static escapeSeperatorReverseRegex: RegExp'
      return:
        type:
          - RegExp
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Evaluator.evaluateTemplate
    name: 'evaluateTemplate(string, any)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function evaluateTemplate(templateName: string, scope: any)'
      parameters:
        - id: templateName
          type:
            - string
          description: ''
        - id: scope
          type:
            - any
          description: ''
      return:
        type:
          - any
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Evaluator.constructor
    name: 'Evaluator(LGTemplate[], ExpressionEngine)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new Evaluator(templates: LGTemplate[], expressionEngine:
        ExpressionEngine)
      parameters:
        - id: templates
          type:
            - 'botbuilder-lg.LGTemplate[]'
          description: ''
        - id: expressionEngine
          type:
            - ExpressionEngine
          description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Evaluator.expressionEngine
    name: expressionEngine
    fullName: expressionEngine
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'expressionEngine: ExpressionEngine'
      return:
        type:
          - ExpressionEngine
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Evaluator.expressionRecognizeReverseRegex
    name: expressionRecognizeReverseRegex
    fullName: expressionRecognizeReverseRegex
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static expressionRecognizeReverseRegex: RegExp'
      return:
        type:
          - RegExp
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Evaluator.fromFileFunctionName
    name: fromFileFunctionName
    fullName: fromFileFunctionName
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static fromFileFunctionName: "fromFile" = "fromFile"'
      return:
        type:
          - '"fromFile"'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Evaluator.isPureExpression
    name: isPureExpression(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'static function isPureExpression(exp: string)'
      parameters:
        - id: exp
          type:
            - string
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Evaluator.LGType
    name: LGType
    fullName: LGType
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static LGType: "lgType" = "lgType"'
      return:
        type:
          - '"lgType"'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Evaluator.templateFunctionName
    name: templateFunctionName
    fullName: templateFunctionName
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static templateFunctionName: "template" = "template"'
      return:
        type:
          - '"template"'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Evaluator.templateMap
    name: templateMap
    fullName: templateMap
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'templateMap: [key: string]: LGTemplate'
      return:
        type:
          - '[key: string]: botbuilder-lg.LGTemplate'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Evaluator.templates
    name: templates
    fullName: templates
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'templates: LGTemplate[]'
      return:
        type:
          - 'botbuilder-lg.LGTemplate[]'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Evaluator.visit
    name: visit(ParseTree)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      {@inheritDoc}
      <p>The default implementation calls <xref:ParseTree%23accept> on the
      specified tree.</p>
    syntax:
      content: 'function visit(tree: ParseTree)'
      parameters:
        - id: tree
          type:
            - ParseTree
          description: ''
      return:
        type:
          - any
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Evaluator.visitChildren
    name: visitChildren(RuleNode)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      {@inheritDoc}
      <p>The default implementation initializes the aggregate result to
      [defaultResult()](xref:%23defaultResult). Before visiting each child, it
      calls [shouldVisitNextChild](xref:%23shouldVisitNextChild); if the result
      is {@code false} no more children are visited and the current aggregate
      result is returned. After visiting a child, the aggregate result is
      updated by calling [aggregateResult](xref:%23aggregateResult) with the
      previous aggregate result and the result of visiting the child.</p>

      <p>The default implementation is not safe for use in visitors that modify
      the tree structure. Visitors that modify the tree should override this
      method to behave properly in respect to the specific algorithm in use.</p>
    syntax:
      content: 'function visitChildren(node: RuleNode)'
      parameters:
        - id: node
          type:
            - RuleNode
          description: ''
      return:
        type:
          - any
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Evaluator.visitErrorNode
    name: visitErrorNode(ErrorNode)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      {@inheritDoc}
      <p>The default implementation returns the result of
      [defaultResult](xref:%23defaultResult).</p>
    syntax:
      content: 'function visitErrorNode(node: ErrorNode)'
      parameters:
        - id: node
          type:
            - ErrorNode
          description: ''
      return:
        type:
          - any
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Evaluator.visitIfElseBody
    name: visitIfElseBody(IfElseBodyContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function visitIfElseBody(ctx: IfElseBodyContext)'
      parameters:
        - id: ctx
          type:
            - botbuilder-lg.IfElseBodyContext
          description: ''
      return:
        type:
          - any
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Evaluator.visitNormalBody
    name: visitNormalBody(NormalBodyContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function visitNormalBody(ctx: NormalBodyContext)'
      parameters:
        - id: ctx
          type:
            - botbuilder-lg.NormalBodyContext
          description: ''
      return:
        type:
          - any
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Evaluator.visitNormalTemplateBody
    name: visitNormalTemplateBody(NormalTemplateBodyContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function visitNormalTemplateBody(ctx: NormalTemplateBodyContext)'
      parameters:
        - id: ctx
          type:
            - botbuilder-lg.NormalTemplateBodyContext
          description: ''
      return:
        type:
          - any
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Evaluator.visitNormalTemplateString
    name: visitNormalTemplateString(NormalTemplateStringContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function visitNormalTemplateString(ctx: NormalTemplateStringContext)'
      parameters:
        - id: ctx
          type:
            - botbuilder-lg.NormalTemplateStringContext
          description: ''
      return:
        type:
          - string
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Evaluator.visitStructuredTemplateBody
    name: visitStructuredTemplateBody(StructuredTemplateBodyContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function visitStructuredTemplateBody(ctx: StructuredTemplateBodyContext)'
      parameters:
        - id: ctx
          type:
            - botbuilder-lg.StructuredTemplateBodyContext
          description: ''
      return:
        type:
          - any
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Evaluator.visitSwitchCaseBody
    name: visitSwitchCaseBody(SwitchCaseBodyContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function visitSwitchCaseBody(ctx: SwitchCaseBodyContext)'
      parameters:
        - id: ctx
          type:
            - botbuilder-lg.SwitchCaseBodyContext
          description: ''
      return:
        type:
          - string
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Evaluator.visitTemplateDefinition
    name: visitTemplateDefinition(TemplateDefinitionContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function visitTemplateDefinition(ctx: TemplateDefinitionContext)'
      parameters:
        - id: ctx
          type:
            - botbuilder-lg.TemplateDefinitionContext
          description: ''
      return:
        type:
          - any
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Evaluator.visitTerminal
    name: visitTerminal(TerminalNode)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      {@inheritDoc}
      <p>The default implementation returns the result of
      [defaultResult](xref:%23defaultResult).</p>
    syntax:
      content: 'function visitTerminal(node: TerminalNode)'
      parameters:
        - id: node
          type:
            - TerminalNode
          description: ''
      return:
        type:
          - any
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Evaluator.wrappedEvalTextContainsExpression
    name: 'wrappedEvalTextContainsExpression(string, RegExp)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function wrappedEvalTextContainsExpression(exp: string, regex: RegExp)'
      parameters:
        - id: exp
          type:
            - string
          description: ''
        - id: regex
          type:
            - RegExp
          description: ''
      return:
        type:
          - string
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Evaluator.wrappedRegExSplit
    name: 'wrappedRegExSplit(string, RegExp)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'static function wrappedRegExSplit(inputString: string, regex: RegExp)'
      parameters:
        - id: inputString
          type:
            - string
          description: ''
        - id: regex
          type:
            - RegExp
          description: ''
      return:
        type:
          - 'string[]'
        description: ''
    package: botbuilder-lg
references:
  - uid: 'botbuilder-lg.LGTemplate[]'
    name: 'LGTemplate[]'
    spec.typeScript:
      - name: LGTemplate
        fullName: LGTemplate
        uid: botbuilder-lg.LGTemplate
      - name: '[]'
        fullName: '[]'
  - uid: '[key: string]: botbuilder-lg.LGTemplate'
    name: LGTemplate
    spec.typeScript:
      - name: '[key: string]: '
        fullName: '[key: string]: '
      - name: LGTemplate
        fullName: LGTemplate
        uid: botbuilder-lg.LGTemplate
  - uid: botbuilder-lg.IfElseBodyContext
    name: IfElseBodyContext
    spec.typeScript:
      - name: IfElseBodyContext
        fullName: IfElseBodyContext
        uid: botbuilder-lg.IfElseBodyContext
  - uid: botbuilder-lg.NormalBodyContext
    name: NormalBodyContext
    spec.typeScript:
      - name: NormalBodyContext
        fullName: NormalBodyContext
        uid: botbuilder-lg.NormalBodyContext
  - uid: botbuilder-lg.NormalTemplateBodyContext
    name: NormalTemplateBodyContext
    spec.typeScript:
      - name: NormalTemplateBodyContext
        fullName: NormalTemplateBodyContext
        uid: botbuilder-lg.NormalTemplateBodyContext
  - uid: botbuilder-lg.NormalTemplateStringContext
    name: NormalTemplateStringContext
    spec.typeScript:
      - name: NormalTemplateStringContext
        fullName: NormalTemplateStringContext
        uid: botbuilder-lg.NormalTemplateStringContext
  - uid: botbuilder-lg.StructuredTemplateBodyContext
    name: StructuredTemplateBodyContext
    spec.typeScript:
      - name: StructuredTemplateBodyContext
        fullName: StructuredTemplateBodyContext
        uid: botbuilder-lg.StructuredTemplateBodyContext
  - uid: botbuilder-lg.SwitchCaseBodyContext
    name: SwitchCaseBodyContext
    spec.typeScript:
      - name: SwitchCaseBodyContext
        fullName: SwitchCaseBodyContext
        uid: botbuilder-lg.SwitchCaseBodyContext
  - uid: botbuilder-lg.TemplateDefinitionContext
    name: TemplateDefinitionContext
    spec.typeScript:
      - name: TemplateDefinitionContext
        fullName: TemplateDefinitionContext
        uid: botbuilder-lg.TemplateDefinitionContext
