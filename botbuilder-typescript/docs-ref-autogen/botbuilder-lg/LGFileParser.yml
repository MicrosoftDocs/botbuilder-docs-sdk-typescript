### YamlMime:TSType
name: LGFileParser
uid: botbuilder-lg.LGFileParser
package: botbuilder-lg
summary: ''
fullName: LGFileParser
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: LGFileParser(TokenStream)
    uid: botbuilder-lg.LGFileParser.constructor
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new LGFileParser(input: TokenStream)'
      parameters:
        - id: input
          type: TokenStream
          description: ''
properties:
  - name: COMMENT
    uid: botbuilder-lg.LGFileParser.COMMENT
    package: botbuilder-lg
    summary: ''
    fullName: COMMENT
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static COMMENT: 3 = 3'
      return:
        description: ''
        type: '3'
  - name: ESCAPE_CHARACTER
    uid: botbuilder-lg.LGFileParser.ESCAPE_CHARACTER
    package: botbuilder-lg
    summary: ''
    fullName: ESCAPE_CHARACTER
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static ESCAPE_CHARACTER: 11 = 11'
      return:
        description: ''
        type: '11'
  - name: grammarFileName
    uid: botbuilder-lg.LGFileParser.grammarFileName
    package: botbuilder-lg
    summary: ''
    fullName: grammarFileName
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: string grammarFileName
      return:
        description: ''
        type: string
  - name: IMPORT
    uid: botbuilder-lg.LGFileParser.IMPORT
    package: botbuilder-lg
    summary: ''
    fullName: IMPORT
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static IMPORT: 4 = 4'
      return:
        description: ''
        type: '4'
  - name: INLINE_MULTILINE
    uid: botbuilder-lg.LGFileParser.INLINE_MULTILINE
    package: botbuilder-lg
    summary: ''
    fullName: INLINE_MULTILINE
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static INLINE_MULTILINE: 6 = 6'
      return:
        description: ''
        type: '6'
  - name: INVALID_LINE
    uid: botbuilder-lg.LGFileParser.INVALID_LINE
    package: botbuilder-lg
    summary: ''
    fullName: INVALID_LINE
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static INVALID_LINE: 9 = 9'
      return:
        description: ''
        type: '9'
  - name: MULTILINE_PREFIX
    uid: botbuilder-lg.LGFileParser.MULTILINE_PREFIX
    package: botbuilder-lg
    summary: ''
    fullName: MULTILINE_PREFIX
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static MULTILINE_PREFIX: 7 = 7'
      return:
        description: ''
        type: '7'
  - name: MULTILINE_SUFFIX
    uid: botbuilder-lg.LGFileParser.MULTILINE_SUFFIX
    package: botbuilder-lg
    summary: ''
    fullName: MULTILINE_SUFFIX
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static MULTILINE_SUFFIX: 10 = 10'
      return:
        description: ''
        type: '10'
  - name: MULTILINE_TEXT
    uid: botbuilder-lg.LGFileParser.MULTILINE_TEXT
    package: botbuilder-lg
    summary: ''
    fullName: MULTILINE_TEXT
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static MULTILINE_TEXT: 12 = 12'
      return:
        description: ''
        type: '12'
  - name: NEWLINE
    uid: botbuilder-lg.LGFileParser.NEWLINE
    package: botbuilder-lg
    summary: ''
    fullName: NEWLINE
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static NEWLINE: 1 = 1'
      return:
        description: ''
        type: '1'
  - name: OPTION
    uid: botbuilder-lg.LGFileParser.OPTION
    package: botbuilder-lg
    summary: ''
    fullName: OPTION
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static OPTION: 2 = 2'
      return:
        description: ''
        type: '2'
  - name: ruleNames
    uid: botbuilder-lg.LGFileParser.ruleNames
    package: botbuilder-lg
    summary: ''
    fullName: ruleNames
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: "public static ruleNames: string[] = [\r\n\t\t\"file\", \"paragraph\", \"commentDefinition\", \"importDefinition\", \"optionDefinition\", \r\n\t\t\"errorDefinition\", \"templateDefinition\", \"templateNameLine\", \"templateBody\", \r\n\t\t\"templateBodyLine\",\r\n\t]"
      return:
        description: ''
        type: 'string[]'
  - name: ruleNames
    uid: botbuilder-lg.LGFileParser.ruleNames
    package: botbuilder-lg
    summary: ''
    fullName: ruleNames
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'string[] ruleNames'
      return:
        description: ''
        type: 'string[]'
  - name: RULE_commentDefinition
    uid: botbuilder-lg.LGFileParser.RULE_commentDefinition
    package: botbuilder-lg
    summary: ''
    fullName: RULE_commentDefinition
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_commentDefinition: 2 = 2'
      return:
        description: ''
        type: '2'
  - name: RULE_errorDefinition
    uid: botbuilder-lg.LGFileParser.RULE_errorDefinition
    package: botbuilder-lg
    summary: ''
    fullName: RULE_errorDefinition
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_errorDefinition: 5 = 5'
      return:
        description: ''
        type: '5'
  - name: RULE_file
    uid: botbuilder-lg.LGFileParser.RULE_file
    package: botbuilder-lg
    summary: ''
    fullName: RULE_file
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_file: 0 = 0'
      return:
        description: ''
        type: '0'
  - name: RULE_importDefinition
    uid: botbuilder-lg.LGFileParser.RULE_importDefinition
    package: botbuilder-lg
    summary: ''
    fullName: RULE_importDefinition
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_importDefinition: 3 = 3'
      return:
        description: ''
        type: '3'
  - name: RULE_optionDefinition
    uid: botbuilder-lg.LGFileParser.RULE_optionDefinition
    package: botbuilder-lg
    summary: ''
    fullName: RULE_optionDefinition
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_optionDefinition: 4 = 4'
      return:
        description: ''
        type: '4'
  - name: RULE_paragraph
    uid: botbuilder-lg.LGFileParser.RULE_paragraph
    package: botbuilder-lg
    summary: ''
    fullName: RULE_paragraph
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_paragraph: 1 = 1'
      return:
        description: ''
        type: '1'
  - name: RULE_templateBody
    uid: botbuilder-lg.LGFileParser.RULE_templateBody
    package: botbuilder-lg
    summary: ''
    fullName: RULE_templateBody
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_templateBody: 8 = 8'
      return:
        description: ''
        type: '8'
  - name: RULE_templateBodyLine
    uid: botbuilder-lg.LGFileParser.RULE_templateBodyLine
    package: botbuilder-lg
    summary: ''
    fullName: RULE_templateBodyLine
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_templateBodyLine: 9 = 9'
      return:
        description: ''
        type: '9'
  - name: RULE_templateDefinition
    uid: botbuilder-lg.LGFileParser.RULE_templateDefinition
    package: botbuilder-lg
    summary: ''
    fullName: RULE_templateDefinition
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_templateDefinition: 6 = 6'
      return:
        description: ''
        type: '6'
  - name: RULE_templateNameLine
    uid: botbuilder-lg.LGFileParser.RULE_templateNameLine
    package: botbuilder-lg
    summary: ''
    fullName: RULE_templateNameLine
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_templateNameLine: 7 = 7'
      return:
        description: ''
        type: '7'
  - name: serializedATN
    uid: botbuilder-lg.LGFileParser.serializedATN
    package: botbuilder-lg
    summary: ''
    fullName: serializedATN
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: string serializedATN
      return:
        description: ''
        type: string
  - name: TEMPLATE_BODY
    uid: botbuilder-lg.LGFileParser.TEMPLATE_BODY
    package: botbuilder-lg
    summary: ''
    fullName: TEMPLATE_BODY
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static TEMPLATE_BODY: 8 = 8'
      return:
        description: ''
        type: '8'
  - name: TEMPLATE_NAME_LINE
    uid: botbuilder-lg.LGFileParser.TEMPLATE_NAME_LINE
    package: botbuilder-lg
    summary: ''
    fullName: TEMPLATE_NAME_LINE
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static TEMPLATE_NAME_LINE: 5 = 5'
      return:
        description: ''
        type: '5'
  - name: VOCABULARY
    uid: botbuilder-lg.LGFileParser.VOCABULARY
    package: botbuilder-lg
    summary: ''
    fullName: VOCABULARY
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        public static VOCABULARY: Vocabulary = new
        VocabularyImpl(LGFileParser._LITERAL_NAMES,
        LGFileParser._SYMBOLIC_NAMES, [])
      return:
        description: ''
        type: Vocabulary
  - name: vocabulary
    uid: botbuilder-lg.LGFileParser.vocabulary
    package: botbuilder-lg
    summary: ''
    fullName: vocabulary
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: Vocabulary vocabulary
      return:
        description: ''
        type: Vocabulary
inheritedProperties:
  - name: atn
    uid: botbuilder-lg.LGFileParser.atn
    package: botbuilder-lg
    summary: >-
      Get the <xref:botbuilder-lg.LGFileLexer.serializedATN> used by the
      recognizer for prediction.
    fullName: atn
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'atn: ATN'
      return:
        description: ''
        type: ATN
    inheritanceDescription: <b>Inherited From</b> Recognizer.atn
  - name: buildParseTree
    uid: botbuilder-lg.LGFileParser.buildParseTree
    package: botbuilder-lg
    summary: |
      Track the <xref:ParserRuleContext> objects during the parse and hook
      them up using the <xref:ParserRuleContext%23children> list so that it
      forms a parse tree. The <xref:ParserRuleContext> returned from the start
      rule represents the root of the parse tree.
      Note that if we are not building parse trees, rule contexts only point
      upwards. When a rule exits, it returns the context but that gets garbage
      collected if nobody holds a reference. It points upwards but nobody
      points at it.

      When we build parse trees, we are adding all of these contexts to
      <xref:ParserRuleContext%23children> list. Contexts are then not candidates
      for garbage collection.
    fullName: buildParseTree
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'buildParseTree: boolean'
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> Parser.buildParseTree
  - name: context
    uid: botbuilder-lg.LGFileParser.context
    package: botbuilder-lg
    summary: ''
    fullName: context
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: ParserRuleContext'
      return:
        description: ''
        type: ParserRuleContext
    inheritanceDescription: <b>Inherited From</b> Parser.context
  - name: currentToken
    uid: botbuilder-lg.LGFileParser.currentToken
    package: botbuilder-lg
    summary: |-
      Match needs to return the current input symbol, which gets put
       into the label for the associated token ref; e.g., x=ID.
    fullName: currentToken
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'currentToken: Token'
      return:
        description: ''
        type: Token
    inheritanceDescription: <b>Inherited From</b> Parser.currentToken
  - name: EOF
    uid: botbuilder-lg.LGFileParser.EOF
    package: botbuilder-lg
    summary: ''
    fullName: EOF
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static EOF: number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Recognizer.EOF
  - name: errorHandler
    uid: botbuilder-lg.LGFileParser.errorHandler
    package: botbuilder-lg
    summary: ''
    fullName: errorHandler
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'errorHandler: ANTLRErrorStrategy'
      return:
        description: ''
        type: ANTLRErrorStrategy
    inheritanceDescription: <b>Inherited From</b> Parser.errorHandler
  - name: inputStream
    uid: botbuilder-lg.LGFileParser.inputStream
    package: botbuilder-lg
    summary: Set the token stream and reset the parser.
    fullName: inputStream
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'inputStream: TokenStream'
      return:
        description: ''
        type: TokenStream
    inheritanceDescription: <b>Inherited From</b> Parser.inputStream
  - name: interpreter
    uid: botbuilder-lg.LGFileParser.interpreter
    package: botbuilder-lg
    summary: Set the ATN interpreter used by the recognizer for prediction.
    fullName: interpreter
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'interpreter: ParserATNSimulator'
      return:
        description: ''
        type: ParserATNSimulator
    inheritanceDescription: <b>Inherited From</b> Recognizer.interpreter
  - name: isMatchedEOF
    uid: botbuilder-lg.LGFileParser.isMatchedEOF
    package: botbuilder-lg
    summary: ''
    fullName: isMatchedEOF
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'isMatchedEOF: boolean'
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> Parser.isMatchedEOF
  - name: isTrace
    uid: botbuilder-lg.LGFileParser.isTrace
    package: botbuilder-lg
    summary: |-
      During a parse is sometimes useful to listen in on the rule entry and exit
       events as well as token matches. This is for quick and dirty debugging.
    fullName: isTrace
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'isTrace: boolean'
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> Parser.isTrace
  - name: numberOfSyntaxErrors
    uid: botbuilder-lg.LGFileParser.numberOfSyntaxErrors
    package: botbuilder-lg
    summary: |-
      Gets the number of syntax errors reported during parsing. This value is
      incremented each time <xref:%23notifyErrorListeners> is called.

      See #notifyErrorListeners
    fullName: numberOfSyntaxErrors
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'numberOfSyntaxErrors: number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Parser.numberOfSyntaxErrors
  - name: parseInfo
    uid: botbuilder-lg.LGFileParser.parseInfo
    package: botbuilder-lg
    summary: ''
    fullName: parseInfo
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'parseInfo: Promise<ParseInfo | undefined>'
      return:
        description: ''
        type: Promise&lt;ParseInfo | undefined&gt;
    inheritanceDescription: <b>Inherited From</b> Parser.parseInfo
  - name: precedence
    uid: botbuilder-lg.LGFileParser.precedence
    package: botbuilder-lg
    summary: Get the precedence level for the top-most precedence rule.
    fullName: precedence
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'precedence: number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Parser.precedence
  - name: ruleContext
    uid: botbuilder-lg.LGFileParser.ruleContext
    package: botbuilder-lg
    summary: ''
    fullName: ruleContext
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ruleContext: ParserRuleContext'
      return:
        description: ''
        type: ParserRuleContext
    inheritanceDescription: <b>Inherited From</b> Parser.ruleContext
  - name: sourceName
    uid: botbuilder-lg.LGFileParser.sourceName
    package: botbuilder-lg
    summary: ''
    fullName: sourceName
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'sourceName: string'
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> Parser.sourceName
  - name: state
    uid: botbuilder-lg.LGFileParser.state
    package: botbuilder-lg
    summary: |-
      Indicate that the recognizer has changed internal state that is
       consistent with the ATN state passed in.  This way we always know
       where we are in the ATN as the parser goes along. The rule
       context objects form a stack that lets us see the stack of
       invoking rules. Combine this and we have complete ATN
       configuration information.
    fullName: state
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'state: number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Recognizer.state
  - name: tokenFactory
    uid: botbuilder-lg.LGFileParser.tokenFactory
    package: botbuilder-lg
    summary: ''
    fullName: tokenFactory
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'tokenFactory: TokenFactory'
      return:
        description: ''
        type: TokenFactory
    inheritanceDescription: <b>Inherited From</b> Parser.tokenFactory
inheritedMethods:
  - name: 'action(RuleContext | undefined, number, number)'
    uid: botbuilder-lg.LGFileParser.action
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function action(_localctx: RuleContext | undefined, ruleIndex: number,
        actionIndex: number)
      parameters:
        - id: _localctx
          type: RuleContext | undefined
          description: ''
        - id: ruleIndex
          type: number
          description: ''
        - id: actionIndex
          type: number
          description: ''
    inheritanceDescription: <b>Inherited From</b> Recognizer.action
  - name: addErrorListener(ANTLRErrorListener<Token>)
    uid: botbuilder-lg.LGFileParser.addErrorListener
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function addErrorListener(listener: ANTLRErrorListener<Token>)'
      parameters:
        - id: listener
          type: ANTLRErrorListener&lt;Token&gt;
          description: ''
    inheritanceDescription: <b>Inherited From</b> Recognizer.addErrorListener
  - name: addParseListener(ParseTreeListener)
    uid: botbuilder-lg.LGFileParser.addParseListener
    package: botbuilder-lg
    summary: |
      Registers `listener` to receive events during the parsing process.
      To support output-preserving grammar transformations (including but not
      limited to left-recursion removal, automated left-factoring, and
      optimized code generation), calls to listener methods during the parse
      may differ substantially from calls made by
      <xref:ParseTreeWalker%23DEFAULT> used after the parse is complete. In
      particular, rule entry and exit events may occur in a different order
      during the parse than after the parser. In addition, calls to certain
      rule entry methods may be omitted.

      With the following specific exceptions, calls to listener events are
      *deterministic*, i.e. for identical input the calls to listener
      methods will be the same.

      * Alterations to the grammar used to generate code may change the
        behavior of the listener calls.
      * Alterations to the command line options passed to ANTLR 4 when
        generating the parser may change the behavior of the listener calls.
      * Changing the version of the ANTLR Tool used to generate the parser
        may change the behavior of the listener calls.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function addParseListener(listener: ParseTreeListener)'
      parameters:
        - id: listener
          type: ParseTreeListener
          description: |
            the listener to add
    inheritanceDescription: <b>Inherited From</b> Parser.addParseListener
  - name: 'compileParseTreePattern(string, number)'
    uid: botbuilder-lg.LGFileParser.compileParseTreePattern
    package: botbuilder-lg
    summary: >
      The preferred method of getting a tree pattern. For example, here's a

      sample use:

      ```

      let t: ParseTree = parser.expr();

      let p: ParseTreePattern = await parser.compileParseTreePattern("<ID>+0",
      MyParser.RULE_expr);

      let m: ParseTreeMatch = p.match(t);

      let id: string = m.get("ID");

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function compileParseTreePattern(pattern: string, patternRuleIndex:
        number): Promise<ParseTreePattern>
      parameters:
        - id: pattern
          type: string
          description: ''
        - id: patternRuleIndex
          type: number
          description: ''
      return:
        description: ''
        type: Promise&lt;ParseTreePattern&gt;
    inheritanceDescription: <b>Inherited From</b> Parser.compileParseTreePattern
  - name: 'compileParseTreePattern(string, number, Lexer)'
    uid: botbuilder-lg.LGFileParser.compileParseTreePattern_1
    package: botbuilder-lg
    summary: >-
      The same as [int)](xref:%23compileParseTreePattern(String%2C) but specify
      a

      <xref:botbuilder-lg.LGFileLexer> rather than trying to deduce it from this
      parser.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function compileParseTreePattern(pattern: string, patternRuleIndex:
        number, lexer?: Lexer): Promise<ParseTreePattern>
      parameters:
        - id: pattern
          type: string
          description: ''
        - id: patternRuleIndex
          type: number
          description: ''
        - id: lexer
          type: Lexer
          description: ''
      return:
        description: ''
        type: Promise&lt;ParseTreePattern&gt;
    inheritanceDescription: <b>Inherited From</b> Parser.compileParseTreePattern
  - name: consume()
    uid: botbuilder-lg.LGFileParser.consume
    package: botbuilder-lg
    summary: >
      Consume and return the [current symbol](`currentToken`).

      E.g., given the following input with `A` being the current

      lookahead symbol, this function moves the cursor to `B` and returns

      `A`.


      ```

      A B

      ^

      ```


      If the parser is not in error recovery mode, the consumed symbol is added

      to the parse tree using <xref:ParserRuleContext%23addChild(TerminalNode)>,
      and

      <xref:ParseTreeListener%23visitTerminal> is called on any parse listeners.

      If the parser *is* in error recovery mode, the consumed symbol is

      added to the parse tree using
      [Token)](xref:%23createErrorNode(ParserRuleContext%2C) then

      <xref:ParserRuleContext%23addErrorNode(ErrorNode)> and

      <xref:ParseTreeListener%23visitErrorNode> is called on any parse

      listeners.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function consume(): Token'
      return:
        description: ''
        type: Token
    inheritanceDescription: <b>Inherited From</b> Parser.consume
  - name: 'createErrorNode(ParserRuleContext, Token)'
    uid: botbuilder-lg.LGFileParser.createErrorNode
    package: botbuilder-lg
    summary: |-
      How to create an error node, given a token, associated with a parent.
      Typically, the error node to create is not a function of the parent.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function createErrorNode(parent: ParserRuleContext, t: Token): ErrorNode'
      parameters:
        - id: parent
          type: ParserRuleContext
          description: ''
        - id: t
          type: Token
          description: ''
      return:
        description: ''
        type: ErrorNode
    inheritanceDescription: <b>Inherited From</b> Parser.createErrorNode
  - name: 'createTerminalNode(ParserRuleContext, Token)'
    uid: botbuilder-lg.LGFileParser.createTerminalNode
    package: botbuilder-lg
    summary: |-
      How to create a token leaf node associated with a parent.
      Typically, the terminal node to create is not a function of the parent.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createTerminalNode(parent: ParserRuleContext, t: Token):
        TerminalNode
      parameters:
        - id: parent
          type: ParserRuleContext
          description: ''
        - id: t
          type: Token
          description: ''
      return:
        description: ''
        type: TerminalNode
    inheritanceDescription: <b>Inherited From</b> Parser.createTerminalNode
  - name: dumpDFA()
    uid: botbuilder-lg.LGFileParser.dumpDFA
    package: botbuilder-lg
    summary: For debugging and other purposes.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function dumpDFA()
    inheritanceDescription: <b>Inherited From</b> Parser.dumpDFA
  - name: 'enterLeftFactoredRule(ParserRuleContext, number, number)'
    uid: botbuilder-lg.LGFileParser.enterLeftFactoredRule
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function enterLeftFactoredRule(localctx: ParserRuleContext, state:
        number, ruleIndex: number)
      parameters:
        - id: localctx
          type: ParserRuleContext
          description: ''
        - id: state
          type: number
          description: ''
        - id: ruleIndex
          type: number
          description: ''
    inheritanceDescription: <b>Inherited From</b> Parser.enterLeftFactoredRule
  - name: 'enterOuterAlt(ParserRuleContext, number)'
    uid: botbuilder-lg.LGFileParser.enterOuterAlt
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function enterOuterAlt(localctx: ParserRuleContext, altNum: number)'
      parameters:
        - id: localctx
          type: ParserRuleContext
          description: ''
        - id: altNum
          type: number
          description: ''
    inheritanceDescription: <b>Inherited From</b> Parser.enterOuterAlt
  - name: 'enterRecursionRule(ParserRuleContext, number, number, number)'
    uid: botbuilder-lg.LGFileParser.enterRecursionRule
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function enterRecursionRule(localctx: ParserRuleContext, state: number,
        ruleIndex: number, precedence: number)
      parameters:
        - id: localctx
          type: ParserRuleContext
          description: ''
        - id: state
          type: number
          description: ''
        - id: ruleIndex
          type: number
          description: ''
        - id: precedence
          type: number
          description: ''
    inheritanceDescription: <b>Inherited From</b> Parser.enterRecursionRule
  - name: 'enterRule(ParserRuleContext, number, number)'
    uid: botbuilder-lg.LGFileParser.enterRule
    package: botbuilder-lg
    summary: |-
      Always called by generated parsers upon entry to a rule. Access field
      <xref:%23_ctx> get the current context.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function enterRule(localctx: ParserRuleContext, state: number,
        ruleIndex: number)
      parameters:
        - id: localctx
          type: ParserRuleContext
          description: ''
        - id: state
          type: number
          description: ''
        - id: ruleIndex
          type: number
          description: ''
    inheritanceDescription: <b>Inherited From</b> Parser.enterRule
  - name: exitRule()
    uid: botbuilder-lg.LGFileParser.exitRule
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function exitRule()
    inheritanceDescription: <b>Inherited From</b> Parser.exitRule
  - name: getATNWithBypassAlts()
    uid: botbuilder-lg.LGFileParser.getATNWithBypassAlts
    package: botbuilder-lg
    summary: |
      The ATN with bypass alternatives is expensive to create so we create it
      lazily.
      @ if the current parser does not
      implement the `serializedATN` property.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getATNWithBypassAlts(): ATN'
      return:
        description: ''
        type: ATN
    inheritanceDescription: <b>Inherited From</b> Parser.getATNWithBypassAlts
  - name: getDFAStrings()
    uid: botbuilder-lg.LGFileParser.getDFAStrings
    package: botbuilder-lg
    summary: For debugging and other purposes.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getDFAStrings(): string[]'
      return:
        description: ''
        type: 'string[]'
    inheritanceDescription: <b>Inherited From</b> Parser.getDFAStrings
  - name: getErrorHeader(RecognitionException)
    uid: botbuilder-lg.LGFileParser.getErrorHeader
    package: botbuilder-lg
    summary: 'What is the error header, normally line/character position information?'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getErrorHeader(e: RecognitionException): string'
      parameters:
        - id: e
          type: RecognitionException
          description: ''
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> Recognizer.getErrorHeader
  - name: getErrorListenerDispatch()
    uid: botbuilder-lg.LGFileParser.getErrorListenerDispatch
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getErrorListenerDispatch(): ParserErrorListener'
      return:
        description: ''
        type: ParserErrorListener
    inheritanceDescription: <b>Inherited From</b> Parser.getErrorListenerDispatch
  - name: getErrorListeners()
    uid: botbuilder-lg.LGFileParser.getErrorListeners
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getErrorListeners(): Array<ANTLRErrorListener<Token>>'
      return:
        description: ''
        type: Array&lt;ANTLRErrorListener&lt;Token&gt;&gt;
    inheritanceDescription: <b>Inherited From</b> Recognizer.getErrorListeners
  - name: getExpectedTokens()
    uid: botbuilder-lg.LGFileParser.getExpectedTokens
    package: botbuilder-lg
    summary: >-
      Computes the set of input symbols which could follow the current parser

      state and context, as given by <xref:%23getState> and
      <xref:%23getContext>,

      respectively.


      See ATN#getExpectedTokens(int, RuleContext)
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getExpectedTokens(): IntervalSet'
      return:
        description: ''
        type: IntervalSet
    inheritanceDescription: <b>Inherited From</b> Parser.getExpectedTokens
  - name: getExpectedTokensWithinCurrentRule()
    uid: botbuilder-lg.LGFileParser.getExpectedTokensWithinCurrentRule
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getExpectedTokensWithinCurrentRule(): IntervalSet'
      return:
        description: ''
        type: IntervalSet
    inheritanceDescription: <b>Inherited From</b> Parser.getExpectedTokensWithinCurrentRule
  - name: getInvokingContext(number)
    uid: botbuilder-lg.LGFileParser.getInvokingContext
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getInvokingContext(ruleIndex: number): ParserRuleContext |
        undefined
      parameters:
        - id: ruleIndex
          type: number
          description: ''
      return:
        description: ''
        type: ParserRuleContext | undefined
    inheritanceDescription: <b>Inherited From</b> Parser.getInvokingContext
  - name: getParseListeners()
    uid: botbuilder-lg.LGFileParser.getParseListeners
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getParseListeners(): ParseTreeListener[]'
      return:
        description: ''
        type: 'ParseTreeListener[]'
    inheritanceDescription: <b>Inherited From</b> Parser.getParseListeners
  - name: getRuleIndex(string)
    uid: botbuilder-lg.LGFileParser.getRuleIndex
    package: botbuilder-lg
    summary: 'Get a rule''s index (i.e., `RULE_ruleName` field) or -1 if not found.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getRuleIndex(ruleName: string): number'
      parameters:
        - id: ruleName
          type: string
          description: ''
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Parser.getRuleIndex
  - name: getRuleIndexMap()
    uid: botbuilder-lg.LGFileParser.getRuleIndexMap
    package: botbuilder-lg
    summary: |
      Get a map from rule names to rule indexes.
      Used for XPath and tree pattern compilation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getRuleIndexMap(): ReadonlyMap<string, number>'
      return:
        description: ''
        type: 'ReadonlyMap&lt;string, number&gt;'
    inheritanceDescription: <b>Inherited From</b> Recognizer.getRuleIndexMap
  - name: getRuleInvocationStack(RuleContext)
    uid: botbuilder-lg.LGFileParser.getRuleInvocationStack
    package: botbuilder-lg
    summary: |
      Return List&lt;String&gt; of the rule names in your parser instance
       leading up to a call to the current rule.  You could override if
       you want more details such as the file/line info of where
       in the ATN a rule is invoked.
       This is very useful for error messages.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getRuleInvocationStack(ctx?: RuleContext): string[]'
      parameters:
        - id: ctx
          type: RuleContext
          description: ''
      return:
        description: ''
        type: 'string[]'
    inheritanceDescription: <b>Inherited From</b> Parser.getRuleInvocationStack
  - name: getTokenType(string)
    uid: botbuilder-lg.LGFileParser.getTokenType
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getTokenType(tokenName: string): number'
      parameters:
        - id: tokenName
          type: string
          description: ''
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Recognizer.getTokenType
  - name: getTokenTypeMap()
    uid: botbuilder-lg.LGFileParser.getTokenTypeMap
    package: botbuilder-lg
    summary: |
      Get a map from token names to token types.
      Used for XPath and tree pattern compilation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getTokenTypeMap(): ReadonlyMap<string, number>'
      return:
        description: ''
        type: 'ReadonlyMap&lt;string, number&gt;'
    inheritanceDescription: <b>Inherited From</b> Recognizer.getTokenTypeMap
  - name: inContext(string)
    uid: botbuilder-lg.LGFileParser.inContext
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function inContext(context: string): boolean'
      parameters:
        - id: context
          type: string
          description: ''
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> Parser.inContext
  - name: isExpectedToken(number)
    uid: botbuilder-lg.LGFileParser.isExpectedToken
    package: botbuilder-lg
    summary: |
      Checks whether or not `symbol` can follow the current state in the
      ATN. The behavior of this method is equivalent to the following, but is
      implemented such that the complete context-sensitive follow set does not
      need to be explicitly constructed.
      ```
      return getExpectedTokens().contains(symbol);
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function isExpectedToken(symbol: number): boolean'
      parameters:
        - id: symbol
          type: number
          description: the symbol type to check
      return:
        description: |-
          `true` if `symbol` can follow the current state in
          the ATN, otherwise `false`.
        type: boolean
    inheritanceDescription: <b>Inherited From</b> Parser.isExpectedToken
  - name: match(number)
    uid: botbuilder-lg.LGFileParser.match
    package: botbuilder-lg
    summary: >
      Match current input symbol against `ttype`. If the symbol type

      matches, <xref:ANTLRErrorStrategy%23reportMatch> and <xref:%23consume> are

      called to complete the match process.

      If the symbol type does not match,

      <xref:ANTLRErrorStrategy%23recoverInline> is called on the current error

      strategy to attempt recovery. If <xref:%23getBuildParseTree> is

      `true` and the token index of the symbol returned by

      <xref:ANTLRErrorStrategy%23recoverInline> is -1, the symbol is added to

      the parse tree by calling
      [Token)](xref:%23createErrorNode(ParserRuleContext%2C) then

      <xref:ParserRuleContext%23addErrorNode(ErrorNode)>.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function match(ttype: number): Token'
      parameters:
        - id: ttype
          type: number
          description: the token type to match
      return:
        description: |-
          the matched symbol
          @ if the current input symbol did not match
          `ttype` and the error strategy could not recover from the
          mismatched symbol
        type: Token
    inheritanceDescription: <b>Inherited From</b> Parser.match
  - name: matchWildcard()
    uid: botbuilder-lg.LGFileParser.matchWildcard
    package: botbuilder-lg
    summary: >
      Match current input symbol as a wildcard. If the symbol type matches

      (i.e. has a value greater than 0), <xref:ANTLRErrorStrategy%23reportMatch>

      and <xref:%23consume> are called to complete the match process.

      If the symbol type does not match,

      <xref:ANTLRErrorStrategy%23recoverInline> is called on the current error

      strategy to attempt recovery. If <xref:%23getBuildParseTree> is

      `true` and the token index of the symbol returned by

      <xref:ANTLRErrorStrategy%23recoverInline> is -1, the symbol is added to

      the parse tree by calling
      [Token)](xref:Parser%23createErrorNode(ParserRuleContext%2C) then

      <xref:ParserRuleContext%23addErrorNode(ErrorNode)>.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function matchWildcard(): Token'
      return:
        description: >-
          the matched symbol

          @ if the current input symbol did not match

          a wildcard and the error strategy could not recover from the
          mismatched

          symbol
        type: Token
    inheritanceDescription: <b>Inherited From</b> Parser.matchWildcard
  - name: notifyErrorListeners(string)
    uid: botbuilder-lg.LGFileParser.notifyErrorListeners
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function notifyErrorListeners(msg: string)'
      parameters:
        - id: msg
          type: string
          description: ''
    inheritanceDescription: <b>Inherited From</b> Parser.notifyErrorListeners
  - name: >-
      notifyErrorListeners(string, Token | null, RecognitionException |
      undefined)
    uid: botbuilder-lg.LGFileParser.notifyErrorListeners_1
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function notifyErrorListeners(msg: string, offendingToken: Token | null,
        e: RecognitionException | undefined)
      parameters:
        - id: msg
          type: string
          description: ''
        - id: offendingToken
          type: Token | null
          description: ''
        - id: e
          type: RecognitionException | undefined
          description: ''
    inheritanceDescription: <b>Inherited From</b> Parser.notifyErrorListeners
  - name: 'precpred(RuleContext, number)'
    uid: botbuilder-lg.LGFileParser.precpred
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function precpred(localctx: RuleContext, precedence: number): boolean'
      parameters:
        - id: localctx
          type: RuleContext
          description: ''
        - id: precedence
          type: number
          description: ''
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> Parser.precpred
  - name: 'pushNewRecursionContext(ParserRuleContext, number, number)'
    uid: botbuilder-lg.LGFileParser.pushNewRecursionContext
    package: botbuilder-lg
    summary: |-
      Like <xref:%23enterRule> but for recursive rules.
       Make the current context the child of the incoming localctx.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function pushNewRecursionContext(localctx: ParserRuleContext, state:
        number, ruleIndex: number)
      parameters:
        - id: localctx
          type: ParserRuleContext
          description: ''
        - id: state
          type: number
          description: ''
        - id: ruleIndex
          type: number
          description: ''
    inheritanceDescription: <b>Inherited From</b> Parser.pushNewRecursionContext
  - name: removeErrorListener(ANTLRErrorListener<Token>)
    uid: botbuilder-lg.LGFileParser.removeErrorListener
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function removeErrorListener(listener: ANTLRErrorListener<Token>)'
      parameters:
        - id: listener
          type: ANTLRErrorListener&lt;Token&gt;
          description: ''
    inheritanceDescription: <b>Inherited From</b> Recognizer.removeErrorListener
  - name: removeErrorListeners()
    uid: botbuilder-lg.LGFileParser.removeErrorListeners
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function removeErrorListeners()
    inheritanceDescription: <b>Inherited From</b> Recognizer.removeErrorListeners
  - name: removeParseListener(ParseTreeListener)
    uid: botbuilder-lg.LGFileParser.removeParseListener
    package: botbuilder-lg
    summary: |-
      Remove `listener` from the list of parse listeners.
      If `listener` is `undefined` or has not been added as a parse
      listener, this method does nothing.


      See #addParseListener
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function removeParseListener(listener: ParseTreeListener)'
      parameters:
        - id: listener
          type: ParseTreeListener
          description: |
            the listener to remove
    inheritanceDescription: <b>Inherited From</b> Parser.removeParseListener
  - name: removeParseListeners()
    uid: botbuilder-lg.LGFileParser.removeParseListeners
    package: botbuilder-lg
    summary: |-
      Remove all parse listeners.

      See #addParseListener
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function removeParseListeners()
    inheritanceDescription: <b>Inherited From</b> Parser.removeParseListeners
  - name: reset()
    uid: botbuilder-lg.LGFileParser.reset
    package: botbuilder-lg
    summary: reset the parser's state
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function reset()
    inheritanceDescription: <b>Inherited From</b> Parser.reset
  - name: reset(boolean)
    uid: botbuilder-lg.LGFileParser.reset_1
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function reset(resetInput: boolean)'
      parameters:
        - id: resetInput
          type: boolean
          description: ''
    inheritanceDescription: <b>Inherited From</b> Parser.reset
  - name: 'sempred(RuleContext | undefined, number, number)'
    uid: botbuilder-lg.LGFileParser.sempred
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function sempred(_localctx: RuleContext | undefined, ruleIndex: number,
        actionIndex: number): boolean
      parameters:
        - id: _localctx
          type: RuleContext | undefined
          description: ''
        - id: ruleIndex
          type: number
          description: ''
        - id: actionIndex
          type: number
          description: ''
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> Recognizer.sempred
  - name: setProfile(boolean)
    uid: botbuilder-lg.LGFileParser.setProfile
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setProfile(profile: boolean): Promise<void>'
      parameters:
        - id: profile
          type: boolean
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
    inheritanceDescription: <b>Inherited From</b> Parser.setProfile
  - name: unrollRecursionContexts(ParserRuleContext)
    uid: botbuilder-lg.LGFileParser.unrollRecursionContexts
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function unrollRecursionContexts(_parentctx: ParserRuleContext)'
      parameters:
        - id: _parentctx
          type: ParserRuleContext
          description: ''
    inheritanceDescription: <b>Inherited From</b> Parser.unrollRecursionContexts
methods:
  - name: commentDefinition()
    uid: botbuilder-lg.LGFileParser.commentDefinition
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function commentDefinition(): CommentDefinitionContext'
      return:
        description: ''
        type: <xref uid="botbuilder-lg.CommentDefinitionContext" />
  - name: errorDefinition()
    uid: botbuilder-lg.LGFileParser.errorDefinition
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function errorDefinition(): ErrorDefinitionContext'
      return:
        description: ''
        type: <xref uid="botbuilder-lg.ErrorDefinitionContext" />
  - name: file()
    uid: botbuilder-lg.LGFileParser.file
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function file(): FileContext'
      return:
        description: ''
        type: <xref uid="botbuilder-lg.FileContext" />
  - name: importDefinition()
    uid: botbuilder-lg.LGFileParser.importDefinition
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function importDefinition(): ImportDefinitionContext'
      return:
        description: ''
        type: <xref uid="botbuilder-lg.ImportDefinitionContext" />
  - name: optionDefinition()
    uid: botbuilder-lg.LGFileParser.optionDefinition
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function optionDefinition(): OptionDefinitionContext'
      return:
        description: ''
        type: <xref uid="botbuilder-lg.OptionDefinitionContext" />
  - name: paragraph()
    uid: botbuilder-lg.LGFileParser.paragraph
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function paragraph(): ParagraphContext'
      return:
        description: ''
        type: <xref uid="botbuilder-lg.ParagraphContext" />
  - name: templateBody()
    uid: botbuilder-lg.LGFileParser.templateBody
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function templateBody(): TemplateBodyContext'
      return:
        description: ''
        type: <xref uid="botbuilder-lg.TemplateBodyContext" />
  - name: templateBodyLine()
    uid: botbuilder-lg.LGFileParser.templateBodyLine
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function templateBodyLine(): TemplateBodyLineContext'
      return:
        description: ''
        type: <xref uid="botbuilder-lg.TemplateBodyLineContext" />
  - name: templateDefinition()
    uid: botbuilder-lg.LGFileParser.templateDefinition
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function templateDefinition(): TemplateDefinitionContext'
      return:
        description: ''
        type: <xref uid="botbuilder-lg.TemplateDefinitionContext" />
  - name: templateNameLine()
    uid: botbuilder-lg.LGFileParser.templateNameLine
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function templateNameLine(): TemplateNameLineContext'
      return:
        description: ''
        type: <xref uid="botbuilder-lg.TemplateNameLineContext" />
extends: Parser
