### YamlMime:TSType
name: LGTemplateLexer
uid: botbuilder-lg.LGTemplateLexer
package: botbuilder-lg
summary: ''
fullName: LGTemplateLexer
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: LGTemplateLexer(CharStream)
    uid: botbuilder-lg.LGTemplateLexer.constructor
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new LGTemplateLexer(input: CharStream)'
      parameters:
        - id: input
          type: CharStream
          description: ''
properties:
  - name: atn
    uid: botbuilder-lg.LGTemplateLexer.atn
    package: botbuilder-lg
    summary: 'Get the <xref:ATN> used by the recognizer for prediction.'
    fullName: atn
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'atn: ATN'
      return:
        type: ATN
        description: ''
  - name: beginOfStructureProperty
    uid: botbuilder-lg.LGTemplateLexer.beginOfStructureProperty
    package: botbuilder-lg
    summary: ''
    fullName: beginOfStructureProperty
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'beginOfStructureProperty: boolean = false'
      return:
        type: boolean
        description: ''
  - name: beginOfTemplateBody
    uid: botbuilder-lg.LGTemplateLexer.beginOfTemplateBody
    package: botbuilder-lg
    summary: ''
    fullName: beginOfTemplateBody
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'beginOfTemplateBody: boolean = true'
      return:
        type: boolean
        description: ''
  - name: beginOfTemplateLine
    uid: botbuilder-lg.LGTemplateLexer.beginOfTemplateLine
    package: botbuilder-lg
    summary: ''
    fullName: beginOfTemplateLine
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'beginOfTemplateLine: boolean = false'
      return:
        type: boolean
        description: ''
  - name: CASE
    uid: botbuilder-lg.LGTemplateLexer.CASE
    package: botbuilder-lg
    summary: ''
    fullName: CASE
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static CASE: 14 = 14'
      return:
        type: '14'
        description: ''
  - name: channel
    uid: botbuilder-lg.LGTemplateLexer.channel
    package: botbuilder-lg
    summary: ''
    fullName: channel
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'channel: number'
      return:
        type: number
        description: ''
  - name: channelNames
    uid: botbuilder-lg.LGTemplateLexer.channelNames
    package: botbuilder-lg
    summary: ''
    fullName: channelNames
    isPreview: false
    isDeprecated: false
    syntax:
      content: "public static channelNames: string[] = [\r\n\t\t\"DEFAULT_TOKEN_CHANNEL\", \"HIDDEN\",\r\n\t]"
      return:
        type: 'string[]'
        description: ''
  - name: channelNames
    uid: botbuilder-lg.LGTemplateLexer.channelNames
    package: botbuilder-lg
    summary: ''
    fullName: channelNames
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'string[] channelNames'
      return:
        type: 'string[]'
        description: ''
  - name: charIndex
    uid: botbuilder-lg.LGTemplateLexer.charIndex
    package: botbuilder-lg
    summary: What is the index of the current character of lookahead?
    fullName: charIndex
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'charIndex: number'
      return:
        type: number
        description: ''
  - name: charPositionInLine
    uid: botbuilder-lg.LGTemplateLexer.charPositionInLine
    package: botbuilder-lg
    summary: ''
    fullName: charPositionInLine
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'charPositionInLine: number'
      return:
        type: number
        description: ''
  - name: COMMENTS
    uid: botbuilder-lg.LGTemplateLexer.COMMENTS
    package: botbuilder-lg
    summary: ''
    fullName: COMMENTS
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static COMMENTS: 3 = 3'
      return:
        type: '3'
        description: ''
  - name: DASH
    uid: botbuilder-lg.LGTemplateLexer.DASH
    package: botbuilder-lg
    summary: ''
    fullName: DASH
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static DASH: 4 = 4'
      return:
        type: '4'
        description: ''
  - name: DEFAULT
    uid: botbuilder-lg.LGTemplateLexer.DEFAULT
    package: botbuilder-lg
    summary: ''
    fullName: DEFAULT
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static DEFAULT: 15 = 15'
      return:
        type: '15'
        description: ''
  - name: DEFAULT_MODE
    uid: botbuilder-lg.LGTemplateLexer.DEFAULT_MODE
    package: botbuilder-lg
    summary: ''
    fullName: DEFAULT_MODE
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static DEFAULT_MODE: number'
      return:
        type: number
        description: ''
  - name: DEFAULT_TOKEN_CHANNEL
    uid: botbuilder-lg.LGTemplateLexer.DEFAULT_TOKEN_CHANNEL
    package: botbuilder-lg
    summary: ''
    fullName: DEFAULT_TOKEN_CHANNEL
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static DEFAULT_TOKEN_CHANNEL: number'
      return:
        type: number
        description: ''
  - name: ELSE
    uid: botbuilder-lg.LGTemplateLexer.ELSE
    package: botbuilder-lg
    summary: ''
    fullName: ELSE
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static ELSE: 12 = 12'
      return:
        type: '12'
        description: ''
  - name: ELSEIF
    uid: botbuilder-lg.LGTemplateLexer.ELSEIF
    package: botbuilder-lg
    summary: ''
    fullName: ELSEIF
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static ELSEIF: 11 = 11'
      return:
        type: '11'
        description: ''
  - name: EOF
    uid: botbuilder-lg.LGTemplateLexer.EOF
    package: botbuilder-lg
    summary: ''
    fullName: EOF
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static EOF: number'
      return:
        type: number
        description: ''
  - name: ESCAPE_CHARACTER
    uid: botbuilder-lg.LGTemplateLexer.ESCAPE_CHARACTER
    package: botbuilder-lg
    summary: ''
    fullName: ESCAPE_CHARACTER
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static ESCAPE_CHARACTER: 16 = 16'
      return:
        type: '16'
        description: ''
  - name: ESCAPE_CHARACTER_IN_STRUCTURE_BODY
    uid: botbuilder-lg.LGTemplateLexer.ESCAPE_CHARACTER_IN_STRUCTURE_BODY
    package: botbuilder-lg
    summary: ''
    fullName: ESCAPE_CHARACTER_IN_STRUCTURE_BODY
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static ESCAPE_CHARACTER_IN_STRUCTURE_BODY: 31 = 31'
      return:
        type: '31'
        description: ''
  - name: EXPRESSION
    uid: botbuilder-lg.LGTemplateLexer.EXPRESSION
    package: botbuilder-lg
    summary: ''
    fullName: EXPRESSION
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static EXPRESSION: 17 = 17'
      return:
        type: '17'
        description: ''
  - name: EXPRESSION_IN_STRUCTURE_BODY
    uid: botbuilder-lg.LGTemplateLexer.EXPRESSION_IN_STRUCTURE_BODY
    package: botbuilder-lg
    summary: ''
    fullName: EXPRESSION_IN_STRUCTURE_BODY
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static EXPRESSION_IN_STRUCTURE_BODY: 32 = 32'
      return:
        type: '32'
        description: ''
  - name: grammarFileName
    uid: botbuilder-lg.LGTemplateLexer.grammarFileName
    package: botbuilder-lg
    summary: ''
    fullName: grammarFileName
    isPreview: false
    isDeprecated: false
    syntax:
      content: string grammarFileName
      return:
        type: string
        description: ''
  - name: HIDDEN
    uid: botbuilder-lg.LGTemplateLexer.HIDDEN
    package: botbuilder-lg
    summary: ''
    fullName: HIDDEN
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static HIDDEN: number'
      return:
        type: number
        description: ''
  - name: IF
    uid: botbuilder-lg.LGTemplateLexer.IF
    package: botbuilder-lg
    summary: ''
    fullName: IF
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static IF: 10 = 10'
      return:
        type: '10'
        description: ''
  - name: ignoreWS
    uid: botbuilder-lg.LGTemplateLexer.ignoreWS
    package: botbuilder-lg
    summary: ''
    fullName: ignoreWS
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ignoreWS: boolean = true'
      return:
        type: boolean
        description: ''
  - name: inMultiline
    uid: botbuilder-lg.LGTemplateLexer.inMultiline
    package: botbuilder-lg
    summary: ''
    fullName: inMultiline
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'inMultiline: boolean = false'
      return:
        type: boolean
        description: ''
  - name: inputStream
    uid: botbuilder-lg.LGTemplateLexer.inputStream
    package: botbuilder-lg
    summary: Set the char stream and reset the lexer
    fullName: inputStream
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'inputStream: CharStream'
      return:
        type: CharStream
        description: ''
  - name: inStructuredValue
    uid: botbuilder-lg.LGTemplateLexer.inStructuredValue
    package: botbuilder-lg
    summary: ''
    fullName: inStructuredValue
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'inStructuredValue: boolean = false'
      return:
        type: boolean
        description: ''
  - name: interpreter
    uid: botbuilder-lg.LGTemplateLexer.interpreter
    package: botbuilder-lg
    summary: Set the ATN interpreter used by the recognizer for prediction.
    fullName: interpreter
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'interpreter: LexerATNSimulator'
      return:
        type: LexerATNSimulator
        description: ''
  - name: INVALID_TOKEN
    uid: botbuilder-lg.LGTemplateLexer.INVALID_TOKEN
    package: botbuilder-lg
    summary: ''
    fullName: INVALID_TOKEN
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static INVALID_TOKEN: 6 = 6'
      return:
        type: '6'
        description: ''
  - name: LEFT_SQUARE_BRACKET
    uid: botbuilder-lg.LGTemplateLexer.LEFT_SQUARE_BRACKET
    package: botbuilder-lg
    summary: ''
    fullName: LEFT_SQUARE_BRACKET
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static LEFT_SQUARE_BRACKET: 5 = 5'
      return:
        type: '5'
        description: ''
  - name: line
    uid: botbuilder-lg.LGTemplateLexer.line
    package: botbuilder-lg
    summary: ''
    fullName: line
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'line: number'
      return:
        type: number
        description: ''
  - name: MAX_CHAR_VALUE
    uid: botbuilder-lg.LGTemplateLexer.MAX_CHAR_VALUE
    package: botbuilder-lg
    summary: ''
    fullName: MAX_CHAR_VALUE
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static MAX_CHAR_VALUE: number'
      return:
        type: number
        description: ''
  - name: MIN_CHAR_VALUE
    uid: botbuilder-lg.LGTemplateLexer.MIN_CHAR_VALUE
    package: botbuilder-lg
    summary: ''
    fullName: MIN_CHAR_VALUE
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static MIN_CHAR_VALUE: number'
      return:
        type: number
        description: ''
  - name: modeNames
    uid: botbuilder-lg.LGTemplateLexer.modeNames
    package: botbuilder-lg
    summary: ''
    fullName: modeNames
    isPreview: false
    isDeprecated: false
    syntax:
      content: "public static modeNames: string[] = [\r\n\t\t\"DEFAULT_MODE\", \"NORMAL_TEMPLATE_BODY_MODE\", \"MULTILINE_MODE\", \"STRUCTURE_NAME_MODE\", \r\n\t\t\"STRUCTURE_BODY_MODE\",\r\n\t]"
      return:
        type: 'string[]'
        description: ''
  - name: modeNames
    uid: botbuilder-lg.LGTemplateLexer.modeNames
    package: botbuilder-lg
    summary: ''
    fullName: modeNames
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'string[] modeNames'
      return:
        type: 'string[]'
        description: ''
  - name: MORE
    uid: botbuilder-lg.LGTemplateLexer.MORE
    package: botbuilder-lg
    summary: ''
    fullName: MORE
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static MORE: number'
      return:
        type: number
        description: ''
  - name: MULTILINE_MODE
    uid: botbuilder-lg.LGTemplateLexer.MULTILINE_MODE
    package: botbuilder-lg
    summary: ''
    fullName: MULTILINE_MODE
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static MULTILINE_MODE: 2 = 2'
      return:
        type: '2'
        description: ''
  - name: MULTILINE_PREFIX
    uid: botbuilder-lg.LGTemplateLexer.MULTILINE_PREFIX
    package: botbuilder-lg
    summary: ''
    fullName: MULTILINE_PREFIX
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static MULTILINE_PREFIX: 8 = 8'
      return:
        type: '8'
        description: ''
  - name: MULTILINE_SUFFIX
    uid: botbuilder-lg.LGTemplateLexer.MULTILINE_SUFFIX
    package: botbuilder-lg
    summary: ''
    fullName: MULTILINE_SUFFIX
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static MULTILINE_SUFFIX: 19 = 19'
      return:
        type: '19'
        description: ''
  - name: NEWLINE
    uid: botbuilder-lg.LGTemplateLexer.NEWLINE
    package: botbuilder-lg
    summary: ''
    fullName: NEWLINE
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static NEWLINE: 2 = 2'
      return:
        type: '2'
        description: ''
  - name: NEWLINE_IN_BODY
    uid: botbuilder-lg.LGTemplateLexer.NEWLINE_IN_BODY
    package: botbuilder-lg
    summary: ''
    fullName: NEWLINE_IN_BODY
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static NEWLINE_IN_BODY: 9 = 9'
      return:
        type: '9'
        description: ''
  - name: NEWLINE_IN_STRUCTURE_NAME
    uid: botbuilder-lg.LGTemplateLexer.NEWLINE_IN_STRUCTURE_NAME
    package: botbuilder-lg
    summary: ''
    fullName: NEWLINE_IN_STRUCTURE_NAME
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static NEWLINE_IN_STRUCTURE_NAME: 21 = 21'
      return:
        type: '21'
        description: ''
  - name: NORMAL_TEMPLATE_BODY_MODE
    uid: botbuilder-lg.LGTemplateLexer.NORMAL_TEMPLATE_BODY_MODE
    package: botbuilder-lg
    summary: ''
    fullName: NORMAL_TEMPLATE_BODY_MODE
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static NORMAL_TEMPLATE_BODY_MODE: 1 = 1'
      return:
        type: '1'
        description: ''
  - name: parseInfo
    uid: botbuilder-lg.LGTemplateLexer.parseInfo
    package: botbuilder-lg
    summary: |-
      If profiling during the parse/lex, this will return DecisionInfo records
       for each decision in recognizer in a ParseInfo object.
    fullName: parseInfo
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'parseInfo: Promise<ParseInfo | undefined>'
      return:
        type: Promise&lt;ParseInfo | undefined&gt;
        description: ''
  - name: ruleNames
    uid: botbuilder-lg.LGTemplateLexer.ruleNames
    package: botbuilder-lg
    summary: ''
    fullName: ruleNames
    isPreview: false
    isDeprecated: false
    syntax:
      content: "public static ruleNames: string[] = [\r\n\t\t\"A\", \"C\", \"D\", \"E\", \"F\", \"H\", \"I\", \"L\", \"S\", \"T\", \"U\", \"W\", \"LETTER\", \r\n\t\t\"NUMBER\", \"WHITESPACE\", \"STRING_LITERAL\", \"STRING_INTERPOLATION\", \"ESCAPE_CHARACTER_FRAGMENT\", \r\n\t\t\"IDENTIFIER\", \"OBJECT_DEFINITION\", \"EXPRESSION_FRAGMENT\", \"WS\", \"NEWLINE\", \r\n\t\t\"COMMENTS\", \"DASH\", \"LEFT_SQUARE_BRACKET\", \"INVALID_TOKEN\", \"WS_IN_BODY\", \r\n\t\t\"MULTILINE_PREFIX\", \"NEWLINE_IN_BODY\", \"IF\", \"ELSEIF\", \"ELSE\", \"SWITCH\", \r\n\t\t\"CASE\", \"DEFAULT\", \"ESCAPE_CHARACTER\", \"EXPRESSION\", \"TEXT\", \"MULTILINE_SUFFIX\", \r\n\t\t\"MULTILINE_ESCAPE_CHARACTER\", \"MULTILINE_EXPRESSION\", \"MULTILINE_TEXT\", \r\n\t\t\"WS_IN_STRUCTURE_NAME\", \"NEWLINE_IN_STRUCTURE_NAME\", \"STRUCTURE_NAME\", \r\n\t\t\"TEXT_IN_STRUCTURE_NAME\", \"STRUCTURED_COMMENTS\", \"WS_IN_STRUCTURE_BODY\", \r\n\t\t\"STRUCTURED_NEWLINE\", \"STRUCTURED_BODY_END\", \"STRUCTURE_IDENTIFIER\", \"STRUCTURE_EQUALS\", \r\n\t\t\"STRUCTURE_OR_MARK\", \"ESCAPE_CHARACTER_IN_STRUCTURE_BODY\", \"EXPRESSION_IN_STRUCTURE_BODY\", \r\n\t\t\"TEXT_IN_STRUCTURE_BODY\",\r\n\t]"
      return:
        type: 'string[]'
        description: ''
  - name: ruleNames
    uid: botbuilder-lg.LGTemplateLexer.ruleNames
    package: botbuilder-lg
    summary: ''
    fullName: ruleNames
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'string[] ruleNames'
      return:
        type: 'string[]'
        description: ''
  - name: serializedATN
    uid: botbuilder-lg.LGTemplateLexer.serializedATN
    package: botbuilder-lg
    summary: ''
    fullName: serializedATN
    isPreview: false
    isDeprecated: false
    syntax:
      content: string serializedATN
      return:
        type: string
        description: ''
  - name: SKIP
    uid: botbuilder-lg.LGTemplateLexer.SKIP
    package: botbuilder-lg
    summary: ''
    fullName: SKIP
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static SKIP: number'
      return:
        type: number
        description: ''
  - name: sourceName
    uid: botbuilder-lg.LGTemplateLexer.sourceName
    package: botbuilder-lg
    summary: ''
    fullName: sourceName
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'sourceName: string'
      return:
        type: string
        description: ''
  - name: state
    uid: botbuilder-lg.LGTemplateLexer.state
    package: botbuilder-lg
    summary: |-
      Indicate that the recognizer has changed internal state that is
       consistent with the ATN state passed in.  This way we always know
       where we are in the ATN as the parser goes along. The rule
       context objects form a stack that lets us see the stack of
       invoking rules. Combine this and we have complete ATN
       configuration information.
    fullName: state
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'state: number'
      return:
        type: number
        description: ''
  - name: STRUCTURED_BODY_END
    uid: botbuilder-lg.LGTemplateLexer.STRUCTURED_BODY_END
    package: botbuilder-lg
    summary: ''
    fullName: STRUCTURED_BODY_END
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static STRUCTURED_BODY_END: 27 = 27'
      return:
        type: '27'
        description: ''
  - name: STRUCTURED_COMMENTS
    uid: botbuilder-lg.LGTemplateLexer.STRUCTURED_COMMENTS
    package: botbuilder-lg
    summary: ''
    fullName: STRUCTURED_COMMENTS
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static STRUCTURED_COMMENTS: 24 = 24'
      return:
        type: '24'
        description: ''
  - name: STRUCTURED_NEWLINE
    uid: botbuilder-lg.LGTemplateLexer.STRUCTURED_NEWLINE
    package: botbuilder-lg
    summary: ''
    fullName: STRUCTURED_NEWLINE
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static STRUCTURED_NEWLINE: 26 = 26'
      return:
        type: '26'
        description: ''
  - name: STRUCTURE_BODY_MODE
    uid: botbuilder-lg.LGTemplateLexer.STRUCTURE_BODY_MODE
    package: botbuilder-lg
    summary: ''
    fullName: STRUCTURE_BODY_MODE
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static STRUCTURE_BODY_MODE: 4 = 4'
      return:
        type: '4'
        description: ''
  - name: STRUCTURE_EQUALS
    uid: botbuilder-lg.LGTemplateLexer.STRUCTURE_EQUALS
    package: botbuilder-lg
    summary: ''
    fullName: STRUCTURE_EQUALS
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static STRUCTURE_EQUALS: 29 = 29'
      return:
        type: '29'
        description: ''
  - name: STRUCTURE_IDENTIFIER
    uid: botbuilder-lg.LGTemplateLexer.STRUCTURE_IDENTIFIER
    package: botbuilder-lg
    summary: ''
    fullName: STRUCTURE_IDENTIFIER
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static STRUCTURE_IDENTIFIER: 28 = 28'
      return:
        type: '28'
        description: ''
  - name: STRUCTURE_NAME
    uid: botbuilder-lg.LGTemplateLexer.STRUCTURE_NAME
    package: botbuilder-lg
    summary: ''
    fullName: STRUCTURE_NAME
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static STRUCTURE_NAME: 22 = 22'
      return:
        type: '22'
        description: ''
  - name: STRUCTURE_NAME_MODE
    uid: botbuilder-lg.LGTemplateLexer.STRUCTURE_NAME_MODE
    package: botbuilder-lg
    summary: ''
    fullName: STRUCTURE_NAME_MODE
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static STRUCTURE_NAME_MODE: 3 = 3'
      return:
        type: '3'
        description: ''
  - name: STRUCTURE_OR_MARK
    uid: botbuilder-lg.LGTemplateLexer.STRUCTURE_OR_MARK
    package: botbuilder-lg
    summary: ''
    fullName: STRUCTURE_OR_MARK
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static STRUCTURE_OR_MARK: 30 = 30'
      return:
        type: '30'
        description: ''
  - name: SWITCH
    uid: botbuilder-lg.LGTemplateLexer.SWITCH
    package: botbuilder-lg
    summary: ''
    fullName: SWITCH
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static SWITCH: 13 = 13'
      return:
        type: '13'
        description: ''
  - name: text
    uid: botbuilder-lg.LGTemplateLexer.text
    package: botbuilder-lg
    summary: |-
      Set the complete text of this token; it wipes any previous
       changes to the text.
    fullName: text
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'text: string'
      return:
        type: string
        description: ''
  - name: TEXT
    uid: botbuilder-lg.LGTemplateLexer.TEXT
    package: botbuilder-lg
    summary: ''
    fullName: TEXT
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static TEXT: 18 = 18'
      return:
        type: '18'
        description: ''
  - name: TEXT_IN_STRUCTURE_BODY
    uid: botbuilder-lg.LGTemplateLexer.TEXT_IN_STRUCTURE_BODY
    package: botbuilder-lg
    summary: ''
    fullName: TEXT_IN_STRUCTURE_BODY
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static TEXT_IN_STRUCTURE_BODY: 33 = 33'
      return:
        type: '33'
        description: ''
  - name: TEXT_IN_STRUCTURE_NAME
    uid: botbuilder-lg.LGTemplateLexer.TEXT_IN_STRUCTURE_NAME
    package: botbuilder-lg
    summary: ''
    fullName: TEXT_IN_STRUCTURE_NAME
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static TEXT_IN_STRUCTURE_NAME: 23 = 23'
      return:
        type: '23'
        description: ''
  - name: token
    uid: botbuilder-lg.LGTemplateLexer.token
    package: botbuilder-lg
    summary: Override if emitting multiple tokens.
    fullName: token
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'token: Token | undefined'
      return:
        type: Token | undefined
        description: ''
  - name: tokenFactory
    uid: botbuilder-lg.LGTemplateLexer.tokenFactory
    package: botbuilder-lg
    summary: ''
    fullName: tokenFactory
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'tokenFactory: TokenFactory'
      return:
        type: TokenFactory
        description: ''
  - name: type
    uid: botbuilder-lg.LGTemplateLexer.type
    package: botbuilder-lg
    summary: ''
    fullName: type
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'type: number'
      return:
        type: number
        description: ''
  - name: VOCABULARY
    uid: botbuilder-lg.LGTemplateLexer.VOCABULARY
    package: botbuilder-lg
    summary: ''
    fullName: VOCABULARY
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        public static VOCABULARY: Vocabulary = new
        VocabularyImpl(LGTemplateLexer._LITERAL_NAMES,
        LGTemplateLexer._SYMBOLIC_NAMES, [])
      return:
        type: Vocabulary
        description: ''
  - name: vocabulary
    uid: botbuilder-lg.LGTemplateLexer.vocabulary
    package: botbuilder-lg
    summary: ''
    fullName: vocabulary
    isPreview: false
    isDeprecated: false
    syntax:
      content: Vocabulary vocabulary
      return:
        type: Vocabulary
        description: ''
  - name: WS
    uid: botbuilder-lg.LGTemplateLexer.WS
    package: botbuilder-lg
    summary: ''
    fullName: WS
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static WS: 1 = 1'
      return:
        type: '1'
        description: ''
  - name: WS_IN_BODY
    uid: botbuilder-lg.LGTemplateLexer.WS_IN_BODY
    package: botbuilder-lg
    summary: ''
    fullName: WS_IN_BODY
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static WS_IN_BODY: 7 = 7'
      return:
        type: '7'
        description: ''
  - name: WS_IN_STRUCTURE_BODY
    uid: botbuilder-lg.LGTemplateLexer.WS_IN_STRUCTURE_BODY
    package: botbuilder-lg
    summary: ''
    fullName: WS_IN_STRUCTURE_BODY
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static WS_IN_STRUCTURE_BODY: 25 = 25'
      return:
        type: '25'
        description: ''
  - name: WS_IN_STRUCTURE_NAME
    uid: botbuilder-lg.LGTemplateLexer.WS_IN_STRUCTURE_NAME
    package: botbuilder-lg
    summary: ''
    fullName: WS_IN_STRUCTURE_NAME
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static WS_IN_STRUCTURE_NAME: 20 = 20'
      return:
        type: '20'
        description: ''
methods:
  - name: 'action(RuleContext, number, number)'
    uid: botbuilder-lg.LGTemplateLexer.action
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function action(_localctx: RuleContext, ruleIndex: number, actionIndex:
        number)
      parameters:
        - id: _localctx
          type: RuleContext
          description: ''
        - id: ruleIndex
          type: number
          description: ''
        - id: actionIndex
          type: number
          description: ''
  - name: addErrorListener(ANTLRErrorListener<number>)
    uid: botbuilder-lg.LGTemplateLexer.addErrorListener
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function addErrorListener(listener: ANTLRErrorListener<number>)'
      parameters:
        - id: listener
          type: ANTLRErrorListener&lt;number&gt;
          description: ''
  - name: emit()
    uid: botbuilder-lg.LGTemplateLexer.emit_1
    package: botbuilder-lg
    summary: |-
      By default does not support multiple emits per nextToken invocation
       for efficiency reasons.  Subclass and override this method, nextToken,
       and getToken (to push tokens into a list and pull from that list
       rather than a single variable as this implementation does).
    isPreview: false
    isDeprecated: false
    syntax:
      content: function emit()
      return:
        type: Token
        description: ''
  - name: emit(Token)
    uid: botbuilder-lg.LGTemplateLexer.emit
    package: botbuilder-lg
    summary: |-
      The standard method called to automatically emit a token at the
       outermost lexical rule.  The token object should point into the
       char buffer start..stop.  If there is a text override in 'text',
       use that to set the token's text.  Override this method to emit
       custom Token objects or provide a new factory.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function emit(token: Token)'
      parameters:
        - id: token
          type: Token
          description: ''
      return:
        type: Token
        description: ''
  - name: emitEOF()
    uid: botbuilder-lg.LGTemplateLexer.emitEOF
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function emitEOF()
      return:
        type: Token
        description: ''
  - name: getAllTokens()
    uid: botbuilder-lg.LGTemplateLexer.getAllTokens
    package: botbuilder-lg
    summary: |-
      Return a list of all Token objects in input char stream.
       Forces load of all tokens. Does not include EOF token.
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getAllTokens()
      return:
        type: 'Token[]'
        description: ''
  - name: getCharErrorDisplay(number)
    uid: botbuilder-lg.LGTemplateLexer.getCharErrorDisplay
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getCharErrorDisplay(c: number)'
      parameters:
        - id: c
          type: number
          description: ''
      return:
        type: string
        description: ''
  - name: getErrorDisplay(string | number)
    uid: botbuilder-lg.LGTemplateLexer.getErrorDisplay
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getErrorDisplay(s: string | number)'
      parameters:
        - id: s
          type: string | number
          description: ''
      return:
        type: string
        description: ''
  - name: getErrorHeader(RecognitionException)
    uid: botbuilder-lg.LGTemplateLexer.getErrorHeader
    package: botbuilder-lg
    summary: 'What is the error header, normally line/character position information?'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getErrorHeader(e: RecognitionException)'
      parameters:
        - id: e
          type: RecognitionException
          description: ''
      return:
        type: string
        description: ''
  - name: getErrorListenerDispatch()
    uid: botbuilder-lg.LGTemplateLexer.getErrorListenerDispatch
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getErrorListenerDispatch()
      return:
        type: ANTLRErrorListener&lt;number&gt;
        description: ''
  - name: getErrorListeners()
    uid: botbuilder-lg.LGTemplateLexer.getErrorListeners
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getErrorListeners()
      return:
        type: Array&lt;ANTLRErrorListener&lt;number&gt;&gt;
        description: ''
  - name: getRuleIndexMap()
    uid: botbuilder-lg.LGTemplateLexer.getRuleIndexMap
    package: botbuilder-lg
    summary: |
      Get a map from rule names to rule indexes.
      Used for XPath and tree pattern compilation.
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getRuleIndexMap()
      return:
        type: 'ReadonlyMap&lt;string, number&gt;'
        description: ''
  - name: getTokenType(string)
    uid: botbuilder-lg.LGTemplateLexer.getTokenType
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getTokenType(tokenName: string)'
      parameters:
        - id: tokenName
          type: string
          description: ''
      return:
        type: number
        description: ''
  - name: getTokenTypeMap()
    uid: botbuilder-lg.LGTemplateLexer.getTokenTypeMap
    package: botbuilder-lg
    summary: |
      Get a map from token names to token types.
      Used for XPath and tree pattern compilation.
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getTokenTypeMap()
      return:
        type: 'ReadonlyMap&lt;string, number&gt;'
        description: ''
  - name: mode(number)
    uid: botbuilder-lg.LGTemplateLexer.mode
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function mode(m: number)'
      parameters:
        - id: m
          type: number
          description: ''
  - name: more()
    uid: botbuilder-lg.LGTemplateLexer.more
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function more()
  - name: nextToken()
    uid: botbuilder-lg.LGTemplateLexer.nextToken
    package: botbuilder-lg
    summary: |-
      Return a token from this source; i.e., match a token on the char
       stream.
    isPreview: false
    isDeprecated: false
    syntax:
      content: function nextToken()
      return:
        type: Token
        description: ''
  - name: notifyListeners(LexerNoViableAltException)
    uid: botbuilder-lg.LGTemplateLexer.notifyListeners
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function notifyListeners(e: LexerNoViableAltException)'
      parameters:
        - id: e
          type: LexerNoViableAltException
          description: ''
  - name: popMode()
    uid: botbuilder-lg.LGTemplateLexer.popMode
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function popMode()
      return:
        type: number
        description: ''
  - name: 'precpred(RuleContext | undefined, number)'
    uid: botbuilder-lg.LGTemplateLexer.precpred
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function precpred(localctx: RuleContext | undefined, precedence: number)'
      parameters:
        - id: localctx
          type: RuleContext | undefined
          description: ''
        - id: precedence
          type: number
          description: ''
      return:
        type: boolean
        description: ''
  - name: pushMode(number)
    uid: botbuilder-lg.LGTemplateLexer.pushMode
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function pushMode(m: number)'
      parameters:
        - id: m
          type: number
          description: ''
  - name: recover(LexerNoViableAltException)
    uid: botbuilder-lg.LGTemplateLexer.recover_1
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function recover(re: LexerNoViableAltException)'
      parameters:
        - id: re
          type: LexerNoViableAltException
          description: ''
  - name: recover(RecognitionException)
    uid: botbuilder-lg.LGTemplateLexer.recover
    package: botbuilder-lg
    summary: |-
      Lexers can normally match any char in it's vocabulary after matching
       a token, so do the easy thing and just kill a character and hope
       it all works out.  You can instead use the rule invocation stack
       to do sophisticated error recovery if you are in a fragment rule.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function recover(re: RecognitionException)'
      parameters:
        - id: re
          type: RecognitionException
          description: ''
  - name: removeErrorListener(ANTLRErrorListener<number>)
    uid: botbuilder-lg.LGTemplateLexer.removeErrorListener
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function removeErrorListener(listener: ANTLRErrorListener<number>)'
      parameters:
        - id: listener
          type: ANTLRErrorListener&lt;number&gt;
          description: ''
  - name: removeErrorListeners()
    uid: botbuilder-lg.LGTemplateLexer.removeErrorListeners
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function removeErrorListeners()
  - name: reset()
    uid: botbuilder-lg.LGTemplateLexer.reset
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function reset()
  - name: reset(boolean)
    uid: botbuilder-lg.LGTemplateLexer.reset_1
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function reset(resetInput: boolean)'
      parameters:
        - id: resetInput
          type: boolean
          description: ''
  - name: 'sempred(RuleContext, number, number)'
    uid: botbuilder-lg.LGTemplateLexer.sempred
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function sempred(_localctx: RuleContext, ruleIndex: number, predIndex:
        number)
      parameters:
        - id: _localctx
          type: RuleContext
          description: ''
        - id: ruleIndex
          type: number
          description: ''
        - id: predIndex
          type: number
          description: ''
      return:
        type: boolean
        description: ''
  - name: skip()
    uid: botbuilder-lg.LGTemplateLexer.skip
    package: botbuilder-lg
    summary: |-
      Instruct the lexer to skip creating a token for current lexer rule
       and look for another token.  nextToken() knows to keep looking when
       a lexer rule finishes with token set to SKIP_TOKEN.  Recall that
       if token==undefined at end of any token rule, it creates one for you
       and emits it.
    isPreview: false
    isDeprecated: false
    syntax:
      content: function skip()
extends: Lexer
