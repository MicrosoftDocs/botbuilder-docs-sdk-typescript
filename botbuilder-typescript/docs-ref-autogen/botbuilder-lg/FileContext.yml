### YamlMime:TSType
name: FileContext
uid: botbuilder-lg.FileContext
package: botbuilder-lg
summary: ''
fullName: FileContext
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: 'FileContext(ParserRuleContext | undefined, number)'
    uid: botbuilder-lg.FileContext.constructor
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new FileContext(parent: ParserRuleContext | undefined, invokingState:
        number)
      parameters:
        - id: parent
          type: ParserRuleContext | undefined
          description: ''
        - id: invokingState
          type: number
          description: ''
properties:
  - name: ruleIndex
    uid: botbuilder-lg.FileContext.ruleIndex
    package: botbuilder-lg
    summary: ''
    fullName: ruleIndex
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: number ruleIndex
      return:
        description: ''
        type: number
inheritedProperties:
  - name: altNumber
    uid: botbuilder-lg.FileContext.altNumber
    package: botbuilder-lg
    summary: |
      Set the outer alternative number for this context node. Default
       implementation does nothing to avoid backing field overhead for
       trees that don't need it.  Create
       a subclass of ParserRuleContext with backing field and set
       option contextSuperClass.
       @since 4.5.3
    fullName: altNumber
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'altNumber: number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> RuleContext.altNumber
  - name: childCount
    uid: botbuilder-lg.FileContext.childCount
    package: botbuilder-lg
    summary: ''
    fullName: childCount
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'childCount: number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> ParserRuleContext.childCount
  - name: children
    uid: botbuilder-lg.FileContext.children
    package: botbuilder-lg
    summary: |-
      If we are debugging or building a parse tree for a visitor,
       we need to track all of the tokens and rule invocations associated
       with this rule's context. This is empty for parsing w/o tree constr.
       operation because we don't the need to track the details about
       how we parse this rule.
    fullName: children
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'children?: ParseTree[]'
      return:
        description: ''
        type: 'ParseTree[]'
    inheritanceDescription: <b>Inherited From</b> ParserRuleContext.children
  - name: exception
    uid: botbuilder-lg.FileContext.exception
    package: botbuilder-lg
    summary: |-
      The exception that forced this rule to return. If the rule successfully
      completed, this is `undefined`.
    fullName: exception
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'exception?: RecognitionException'
      return:
        description: ''
        type: RecognitionException
    inheritanceDescription: <b>Inherited From</b> ParserRuleContext.exception
  - name: invokingState
    uid: botbuilder-lg.FileContext.invokingState
    package: botbuilder-lg
    summary: ''
    fullName: invokingState
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'invokingState: number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> RuleContext.invokingState
  - name: isEmpty
    uid: botbuilder-lg.FileContext.isEmpty
    package: botbuilder-lg
    summary: |-
      A context is empty if there is no invoking state; meaning nobody called
       current context.
    fullName: isEmpty
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'isEmpty: boolean'
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> RuleContext.isEmpty
  - name: parent
    uid: botbuilder-lg.FileContext.parent
    package: botbuilder-lg
    summary: ''
    fullName: parent
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'parent: ParserRuleContext | undefined'
      return:
        description: ''
        type: ParserRuleContext | undefined
    inheritanceDescription: <b>Inherited From</b> ParserRuleContext.parent
  - name: payload
    uid: botbuilder-lg.FileContext.payload
    package: botbuilder-lg
    summary: ''
    fullName: payload
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'payload: RuleContext'
      return:
        description: ''
        type: RuleContext
    inheritanceDescription: <b>Inherited From</b> RuleContext.payload
  - name: ruleContext
    uid: botbuilder-lg.FileContext.ruleContext
    package: botbuilder-lg
    summary: ''
    fullName: ruleContext
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ruleContext: this'
      return:
        description: ''
        type: this
    inheritanceDescription: <b>Inherited From</b> ParserRuleContext.ruleContext
  - name: sourceInterval
    uid: botbuilder-lg.FileContext.sourceInterval
    package: botbuilder-lg
    summary: ''
    fullName: sourceInterval
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'sourceInterval: Interval'
      return:
        description: ''
        type: Interval
    inheritanceDescription: <b>Inherited From</b> ParserRuleContext.sourceInterval
  - name: start
    uid: botbuilder-lg.FileContext.start
    package: botbuilder-lg
    summary: >-
      Get the initial token in this context.

      Note that the range from start to stop is inclusive, so for rules that do
      not consume anything

      (for example, zero length or error productions) this token may exceed
      stop.
    fullName: start
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'start: Token'
      return:
        description: ''
        type: Token
    inheritanceDescription: <b>Inherited From</b> ParserRuleContext.start
  - name: stop
    uid: botbuilder-lg.FileContext.stop
    package: botbuilder-lg
    summary: >-
      Get the final token in this context.

      Note that the range from start to stop is inclusive, so for rules that do
      not consume anything

      (for example, zero length or error productions) this token may precede
      start.
    fullName: stop
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'stop: Token | undefined'
      return:
        description: ''
        type: Token | undefined
    inheritanceDescription: <b>Inherited From</b> ParserRuleContext.stop
  - name: text
    uid: botbuilder-lg.FileContext.text
    package: botbuilder-lg
    summary: |
      Return the combined text of all child nodes. This method only considers
       tokens which have been added to the parse tree.
       Since tokens on hidden channels (e.g. whitespace or comments) are not
       added to the parse trees, they will not appear in the output of this
       method.
    fullName: text
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'text: string'
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> RuleContext.text
inheritedMethods:
  - name: addAnyChild<T>(T)
    uid: botbuilder-lg.FileContext.addAnyChild
    package: botbuilder-lg
    summary: |
      Add a parse tree node to this as a child.  Works for
       internal and leaf nodes. Does not set parent link;
       other add methods must do that. Other addChild methods
       call this.
       We cannot set the parent pointer of the incoming node
       because the existing interfaces do not have a setParent()
       method and I don't want to break backward compatibility for this.

       @since 4.7
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function addAnyChild<T>(t: T): T'
      parameters:
        - id: t
          type: T
          description: ''
      return:
        description: ''
        type: T
    inheritanceDescription: <b>Inherited From</b> ParserRuleContext.addAnyChild
  - name: addChild(RuleContext)
    uid: botbuilder-lg.FileContext.addChild_1
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function addChild(ruleInvocation: RuleContext)'
      parameters:
        - id: ruleInvocation
          type: RuleContext
          description: ''
    inheritanceDescription: <b>Inherited From</b> ParserRuleContext.addChild
  - name: addChild(TerminalNode)
    uid: botbuilder-lg.FileContext.addChild
    package: botbuilder-lg
    summary: Add a token leaf node child and force its parent to be this node.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function addChild(t: TerminalNode)'
      parameters:
        - id: t
          type: TerminalNode
          description: ''
    inheritanceDescription: <b>Inherited From</b> ParserRuleContext.addChild
  - name: addChild(Token)
    uid: botbuilder-lg.FileContext.addChild_2
    package: botbuilder-lg
    summary: >-
      Add a child to this node based upon matchedToken. It

      creates a TerminalNodeImpl rather than using

      [Token)](xref:Parser%23createTerminalNode(ParserRuleContext%2C). I'm
      leaving this

      in for compatibility but the parser doesn't use this anymore.
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: Use another overload instead.
    syntax:
      content: 'function addChild(matchedToken: Token): TerminalNode'
      parameters:
        - id: matchedToken
          type: Token
          description: ''
      return:
        description: ''
        type: TerminalNode
    inheritanceDescription: <b>Inherited From</b> ParserRuleContext.addChild
  - name: addErrorNode(ErrorNode)
    uid: botbuilder-lg.FileContext.addErrorNode
    package: botbuilder-lg
    summary: Add an error node child and force its parent to be this node.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function addErrorNode(errorNode: ErrorNode): ErrorNode'
      parameters:
        - id: errorNode
          type: ErrorNode
          description: ''
      return:
        description: ''
        type: ErrorNode
    inheritanceDescription: <b>Inherited From</b> ParserRuleContext.addErrorNode
  - name: addErrorNode(Token)
    uid: botbuilder-lg.FileContext.addErrorNode_1
    package: botbuilder-lg
    summary: >-
      Add a child to this node based upon badToken. It

      creates a ErrorNode rather than using

      [Token)](xref:Parser%23createErrorNode(ParserRuleContext%2C). I'm leaving
      this

      in for compatibility but the parser doesn't use this anymore.
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: Use another overload instead.
    syntax:
      content: 'function addErrorNode(badToken: Token): ErrorNode'
      parameters:
        - id: badToken
          type: Token
          description: ''
      return:
        description: ''
        type: ErrorNode
    inheritanceDescription: <b>Inherited From</b> ParserRuleContext.addErrorNode
  - name: copyFrom(ParserRuleContext)
    uid: botbuilder-lg.FileContext.copyFrom
    package: botbuilder-lg
    summary: |
      COPY a ctx (I'm deliberately not using copy constructor) to avoid
      confusion with creating node with parent. Does not copy children
      (except error leaves).
      This is used in the generated parser code to flip a generic XContext
      node for rule X to a YContext for alt label Y. In that sense, it is not
      really a generic copy function.

      If we do an error sync() at start of a rule, we might add error nodes
      to the generic XContext so this function must copy those nodes to the
      YContext as well else they are lost!
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function copyFrom(ctx: ParserRuleContext)'
      parameters:
        - id: ctx
          type: ParserRuleContext
          description: ''
    inheritanceDescription: <b>Inherited From</b> ParserRuleContext.copyFrom
  - name: depth()
    uid: botbuilder-lg.FileContext.depth
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function depth(): number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> RuleContext.depth
  - name: emptyContext()
    uid: botbuilder-lg.FileContext.emptyContext
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static function emptyContext(): ParserRuleContext'
      return:
        description: ''
        type: ParserRuleContext
    inheritanceDescription: <b>Inherited From</b> ParserRuleContext.emptyContext
  - name: getChild(number)
    uid: botbuilder-lg.FileContext.getChild
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getChild(i: number): ParseTree'
      parameters:
        - id: i
          type: number
          description: ''
      return:
        description: ''
        type: ParseTree
    inheritanceDescription: <b>Inherited From</b> ParserRuleContext.getChild
  - name: 'getChild<T>(number, {  })'
    uid: botbuilder-lg.FileContext.getChild_1
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getChild<T>(i: number, ctxType: {  }): T'
      parameters:
        - id: i
          type: number
          description: ''
        - id: ctxType
          type: '{  }'
          description: ''
      return:
        description: ''
        type: T
    inheritanceDescription: <b>Inherited From</b> ParserRuleContext.getChild
  - name: 'getChildContext(RuleContext, number)'
    uid: botbuilder-lg.FileContext.getChildContext
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function getChildContext(parent: RuleContext, invokingState:
        number): RuleContext
      parameters:
        - id: parent
          type: RuleContext
          description: ''
        - id: invokingState
          type: number
          description: ''
      return:
        description: ''
        type: RuleContext
    inheritanceDescription: <b>Inherited From</b> RuleContext.getChildContext
  - name: 'getRuleContext<T>(number, {  })'
    uid: botbuilder-lg.FileContext.getRuleContext
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getRuleContext<T>(i: number, ctxType: {  }): T'
      parameters:
        - id: i
          type: number
          description: ''
        - id: ctxType
          type: '{  }'
          description: ''
      return:
        description: ''
        type: T
    inheritanceDescription: <b>Inherited From</b> ParserRuleContext.getRuleContext
  - name: 'getRuleContexts<T>({  })'
    uid: botbuilder-lg.FileContext.getRuleContexts
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getRuleContexts<T>(ctxType: {  }): T[]'
      parameters:
        - id: ctxType
          type: '{  }'
          description: ''
      return:
        description: ''
        type: 'T[]'
    inheritanceDescription: <b>Inherited From</b> ParserRuleContext.getRuleContexts
  - name: 'getToken(number, number)'
    uid: botbuilder-lg.FileContext.getToken
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getToken(ttype: number, i: number): TerminalNode'
      parameters:
        - id: ttype
          type: number
          description: ''
        - id: i
          type: number
          description: ''
      return:
        description: ''
        type: TerminalNode
    inheritanceDescription: <b>Inherited From</b> ParserRuleContext.getToken
  - name: getTokens(number)
    uid: botbuilder-lg.FileContext.getTokens
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getTokens(ttype: number): TerminalNode[]'
      parameters:
        - id: ttype
          type: number
          description: ''
      return:
        description: ''
        type: 'TerminalNode[]'
    inheritanceDescription: <b>Inherited From</b> ParserRuleContext.getTokens
  - name: removeLastChild()
    uid: botbuilder-lg.FileContext.removeLastChild
    package: botbuilder-lg
    summary: |-
      Used by enterOuterAlt to toss out a RuleContext previously added as
       we entered a rule. If we have # label, we will need to remove
       generic ruleContext object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function removeLastChild()
    inheritanceDescription: <b>Inherited From</b> ParserRuleContext.removeLastChild
  - name: setParent(RuleContext)
    uid: botbuilder-lg.FileContext.setParent
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setParent(parent: RuleContext)'
      parameters:
        - id: parent
          type: RuleContext
          description: ''
    inheritanceDescription: <b>Inherited From</b> RuleContext.setParent
  - name: toInfoString(Parser)
    uid: botbuilder-lg.FileContext.toInfoString
    package: botbuilder-lg
    summary: >-
      Used for rule context info debugging during parse-time, not so much for
      ATN debugging
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function toInfoString(recognizer: Parser): string'
      parameters:
        - id: recognizer
          type: Parser
          description: ''
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> ParserRuleContext.toInfoString
  - name: toString()
    uid: botbuilder-lg.FileContext.toString
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function toString(): string'
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> RuleContext.toString
  - name: 'toString(Recognizer<any, any> | undefined)'
    uid: botbuilder-lg.FileContext.toString_1
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function toString(recog: Recognizer<any, any> | undefined): string'
      parameters:
        - id: recog
          type: 'Recognizer&lt;any, any&gt; | undefined'
          description: ''
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> RuleContext.toString
  - name: 'toString(Recognizer<any, any> | undefined, RuleContext | undefined)'
    uid: botbuilder-lg.FileContext.toString_3
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function toString(recog: Recognizer<any, any> | undefined, stop:
        RuleContext | undefined): string
      parameters:
        - id: recog
          type: 'Recognizer&lt;any, any&gt; | undefined'
          description: ''
        - id: stop
          type: RuleContext | undefined
          description: ''
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> RuleContext.toString
  - name: 'toString(string[] | undefined)'
    uid: botbuilder-lg.FileContext.toString_2
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function toString(ruleNames: string[] | undefined): string'
      parameters:
        - id: ruleNames
          type: 'string[] | undefined'
          description: ''
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> RuleContext.toString
  - name: 'toString(string[] | undefined, RuleContext | undefined)'
    uid: botbuilder-lg.FileContext.toString_4
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function toString(ruleNames: string[] | undefined, stop: RuleContext |
        undefined): string
      parameters:
        - id: ruleNames
          type: 'string[] | undefined'
          description: ''
        - id: stop
          type: RuleContext | undefined
          description: ''
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> RuleContext.toString
  - name: toStringTree()
    uid: botbuilder-lg.FileContext.toStringTree_2
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function toStringTree(): string'
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> RuleContext.toStringTree
  - name: toStringTree(Parser)
    uid: botbuilder-lg.FileContext.toStringTree
    package: botbuilder-lg
    summary: |-
      Print out a whole tree, not just a node, in LISP format
       (root child1 .. childN). Print just a node if this is a leaf.
       We have to know the recognizer so we can get rule names.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function toStringTree(recog: Parser): string'
      parameters:
        - id: recog
          type: Parser
          description: ''
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> RuleContext.toStringTree
  - name: 'toStringTree(string[] | undefined)'
    uid: botbuilder-lg.FileContext.toStringTree_1
    package: botbuilder-lg
    summary: |-
      Print out a whole tree, not just a node, in LISP format
       (root child1 .. childN). Print just a node if this is a leaf.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function toStringTree(ruleNames: string[] | undefined): string'
      parameters:
        - id: ruleNames
          type: 'string[] | undefined'
          description: ''
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> RuleContext.toStringTree
  - name: 'tryGetChild<T>(number, {  })'
    uid: botbuilder-lg.FileContext.tryGetChild
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function tryGetChild<T>(i: number, ctxType: {  }): T | undefined'
      parameters:
        - id: i
          type: number
          description: ''
        - id: ctxType
          type: '{  }'
          description: ''
      return:
        description: ''
        type: T | undefined
    inheritanceDescription: <b>Inherited From</b> ParserRuleContext.tryGetChild
  - name: 'tryGetRuleContext<T>(number, {  })'
    uid: botbuilder-lg.FileContext.tryGetRuleContext
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function tryGetRuleContext<T>(i: number, ctxType: {  }): T | undefined'
      parameters:
        - id: i
          type: number
          description: ''
        - id: ctxType
          type: '{  }'
          description: ''
      return:
        description: ''
        type: T | undefined
    inheritanceDescription: <b>Inherited From</b> ParserRuleContext.tryGetRuleContext
  - name: 'tryGetToken(number, number)'
    uid: botbuilder-lg.FileContext.tryGetToken
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function tryGetToken(ttype: number, i: number): TerminalNode | undefined'
      parameters:
        - id: ttype
          type: number
          description: ''
        - id: i
          type: number
          description: ''
      return:
        description: ''
        type: TerminalNode | undefined
    inheritanceDescription: <b>Inherited From</b> ParserRuleContext.tryGetToken
methods:
  - name: accept<Result>(LGFileParserVisitor<Result>)
    uid: botbuilder-lg.FileContext.accept
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function accept<Result>(visitor: LGFileParserVisitor<Result>): Result'
      parameters:
        - id: visitor
          type: <xref uid="botbuilder-lg.LGFileParserVisitor" />&lt;Result&gt;
          description: ''
      return:
        description: ''
        type: Result
  - name: enterRule(LGFileParserListener)
    uid: botbuilder-lg.FileContext.enterRule
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function enterRule(listener: LGFileParserListener)'
      parameters:
        - id: listener
          type: <xref uid="botbuilder-lg.LGFileParserListener" />
          description: ''
  - name: EOF()
    uid: botbuilder-lg.FileContext.EOF
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function EOF(): TerminalNode'
      return:
        description: ''
        type: TerminalNode
  - name: exitRule(LGFileParserListener)
    uid: botbuilder-lg.FileContext.exitRule
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function exitRule(listener: LGFileParserListener)'
      parameters:
        - id: listener
          type: <xref uid="botbuilder-lg.LGFileParserListener" />
          description: ''
  - name: paragraph()
    uid: botbuilder-lg.FileContext.paragraph
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function paragraph(): ParagraphContext[]'
      return:
        description: ''
        type: '<xref uid="botbuilder-lg.ParagraphContext" />[]'
  - name: paragraph(number)
    uid: botbuilder-lg.FileContext.paragraph_1
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function paragraph(i: number): ParagraphContext'
      parameters:
        - id: i
          type: number
          description: ''
      return:
        description: ''
        type: <xref uid="botbuilder-lg.ParagraphContext" />
extends: ParserRuleContext
