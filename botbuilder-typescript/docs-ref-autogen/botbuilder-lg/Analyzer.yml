### YamlMime:UniversalReference
items:
  - uid: botbuilder-lg.Analyzer
    name: Analyzer
    fullName: Analyzer
    children:
      - botbuilder-lg.Analyzer.constructor
      - botbuilder-lg.Analyzer.analyzeTemplate
      - botbuilder-lg.Analyzer.templateMap
      - botbuilder-lg.Analyzer.templates
      - botbuilder-lg.Analyzer.visit
      - botbuilder-lg.Analyzer.visitChildren
      - botbuilder-lg.Analyzer.visitErrorNode
      - botbuilder-lg.Analyzer.visitIfElseBody
      - botbuilder-lg.Analyzer.visitNormalBody
      - botbuilder-lg.Analyzer.visitNormalTemplateBody
      - botbuilder-lg.Analyzer.visitNormalTemplateString
      - botbuilder-lg.Analyzer.visitStructuredTemplateBody
      - botbuilder-lg.Analyzer.visitSwitchCaseBody
      - botbuilder-lg.Analyzer.visitTemplateDefinition
      - botbuilder-lg.Analyzer.visitTerminal
    langs:
      - typeScript
    type: class
    summary: Analyzer engine. To analyse which variable may be used
    extends:
      name: AbstractParseTreeVisitor<botbuilder-lg.AnalyzerResult>
    package: botbuilder-lg
  - uid: botbuilder-lg.Analyzer.constructor
    name: 'Analyzer(LGTemplate[], ExpressionEngine)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new Analyzer(templates: LGTemplate[], expressionEngine:
        ExpressionEngine)
      parameters:
        - id: templates
          type:
            - 'botbuilder-lg.LGTemplate[]'
          description: ''
        - id: expressionEngine
          type:
            - ExpressionEngine
          description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Analyzer.analyzeTemplate
    name: analyzeTemplate(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function analyzeTemplate(templateName: string)'
      parameters:
        - id: templateName
          type:
            - string
          description: ''
      return:
        type:
          - botbuilder-lg.AnalyzerResult
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Analyzer.templateMap
    name: templateMap
    fullName: templateMap
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'templateMap: [key: string]: LGTemplate'
      return:
        type:
          - '[key: string]: botbuilder-lg.LGTemplate'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Analyzer.templates
    name: templates
    fullName: templates
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'templates: LGTemplate[]'
      return:
        type:
          - 'botbuilder-lg.LGTemplate[]'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Analyzer.visit
    name: visit(ParseTree)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      {@inheritDoc}
      <p>The default implementation calls <xref:ParseTree%23accept> on the
      specified tree.</p>
    syntax:
      content: 'function visit(tree: ParseTree)'
      parameters:
        - id: tree
          type:
            - ParseTree
          description: ''
      return:
        type:
          - botbuilder-lg.AnalyzerResult
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Analyzer.visitChildren
    name: visitChildren(RuleNode)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      {@inheritDoc}
      <p>The default implementation initializes the aggregate result to
      [defaultResult()](xref:%23defaultResult). Before visiting each child, it
      calls [shouldVisitNextChild](xref:%23shouldVisitNextChild); if the result
      is {@code false} no more children are visited and the current aggregate
      result is returned. After visiting a child, the aggregate result is
      updated by calling [aggregateResult](xref:%23aggregateResult) with the
      previous aggregate result and the result of visiting the child.</p>

      <p>The default implementation is not safe for use in visitors that modify
      the tree structure. Visitors that modify the tree should override this
      method to behave properly in respect to the specific algorithm in use.</p>
    syntax:
      content: 'function visitChildren(node: RuleNode)'
      parameters:
        - id: node
          type:
            - RuleNode
          description: ''
      return:
        type:
          - botbuilder-lg.AnalyzerResult
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Analyzer.visitErrorNode
    name: visitErrorNode(ErrorNode)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      {@inheritDoc}
      <p>The default implementation returns the result of
      [defaultResult](xref:%23defaultResult).</p>
    syntax:
      content: 'function visitErrorNode(node: ErrorNode)'
      parameters:
        - id: node
          type:
            - ErrorNode
          description: ''
      return:
        type:
          - botbuilder-lg.AnalyzerResult
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Analyzer.visitIfElseBody
    name: visitIfElseBody(IfElseBodyContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function visitIfElseBody(ctx: IfElseBodyContext)'
      parameters:
        - id: ctx
          type:
            - botbuilder-lg.IfElseBodyContext
          description: ''
      return:
        type:
          - botbuilder-lg.AnalyzerResult
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Analyzer.visitNormalBody
    name: visitNormalBody(NormalBodyContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function visitNormalBody(ctx: NormalBodyContext)'
      parameters:
        - id: ctx
          type:
            - botbuilder-lg.NormalBodyContext
          description: ''
      return:
        type:
          - botbuilder-lg.AnalyzerResult
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Analyzer.visitNormalTemplateBody
    name: visitNormalTemplateBody(NormalTemplateBodyContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function visitNormalTemplateBody(ctx: NormalTemplateBodyContext)'
      parameters:
        - id: ctx
          type:
            - botbuilder-lg.NormalTemplateBodyContext
          description: ''
      return:
        type:
          - botbuilder-lg.AnalyzerResult
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Analyzer.visitNormalTemplateString
    name: visitNormalTemplateString(NormalTemplateStringContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function visitNormalTemplateString(ctx: NormalTemplateStringContext)'
      parameters:
        - id: ctx
          type:
            - botbuilder-lg.NormalTemplateStringContext
          description: ''
      return:
        type:
          - botbuilder-lg.AnalyzerResult
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Analyzer.visitStructuredTemplateBody
    name: visitStructuredTemplateBody(StructuredTemplateBodyContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function visitStructuredTemplateBody(ctx: StructuredTemplateBodyContext)'
      parameters:
        - id: ctx
          type:
            - botbuilder-lg.StructuredTemplateBodyContext
          description: ''
      return:
        type:
          - botbuilder-lg.AnalyzerResult
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Analyzer.visitSwitchCaseBody
    name: visitSwitchCaseBody(SwitchCaseBodyContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function visitSwitchCaseBody(ctx: SwitchCaseBodyContext)'
      parameters:
        - id: ctx
          type:
            - botbuilder-lg.SwitchCaseBodyContext
          description: ''
      return:
        type:
          - botbuilder-lg.AnalyzerResult
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Analyzer.visitTemplateDefinition
    name: visitTemplateDefinition(TemplateDefinitionContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function visitTemplateDefinition(ctx: TemplateDefinitionContext)'
      parameters:
        - id: ctx
          type:
            - botbuilder-lg.TemplateDefinitionContext
          description: ''
      return:
        type:
          - botbuilder-lg.AnalyzerResult
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.Analyzer.visitTerminal
    name: visitTerminal(TerminalNode)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      {@inheritDoc}
      <p>The default implementation returns the result of
      [defaultResult](xref:%23defaultResult).</p>
    syntax:
      content: 'function visitTerminal(node: TerminalNode)'
      parameters:
        - id: node
          type:
            - TerminalNode
          description: ''
      return:
        type:
          - botbuilder-lg.AnalyzerResult
        description: ''
    package: botbuilder-lg
references:
  - uid: AbstractParseTreeVisitor<botbuilder-lg.AnalyzerResult>
    name: AnalyzerResult>
    spec.typeScript:
      - name: AbstractParseTreeVisitor<
        fullName: AbstractParseTreeVisitor<
      - name: AnalyzerResult
        fullName: AnalyzerResult
        uid: botbuilder-lg.AnalyzerResult
      - name: '>'
        fullName: '>'
  - uid: 'botbuilder-lg.LGTemplate[]'
    name: 'LGTemplate[]'
    spec.typeScript:
      - name: LGTemplate
        fullName: LGTemplate
        uid: botbuilder-lg.LGTemplate
      - name: '[]'
        fullName: '[]'
  - uid: '[key: string]: botbuilder-lg.LGTemplate'
    name: LGTemplate
    spec.typeScript:
      - name: '[key: string]: '
        fullName: '[key: string]: '
      - name: LGTemplate
        fullName: LGTemplate
        uid: botbuilder-lg.LGTemplate
  - uid: botbuilder-lg.AnalyzerResult
    name: AnalyzerResult
    spec.typeScript:
      - name: AnalyzerResult
        fullName: AnalyzerResult
        uid: botbuilder-lg.AnalyzerResult
  - uid: botbuilder-lg.IfElseBodyContext
    name: IfElseBodyContext
    spec.typeScript:
      - name: IfElseBodyContext
        fullName: IfElseBodyContext
        uid: botbuilder-lg.IfElseBodyContext
  - uid: botbuilder-lg.NormalBodyContext
    name: NormalBodyContext
    spec.typeScript:
      - name: NormalBodyContext
        fullName: NormalBodyContext
        uid: botbuilder-lg.NormalBodyContext
  - uid: botbuilder-lg.NormalTemplateBodyContext
    name: NormalTemplateBodyContext
    spec.typeScript:
      - name: NormalTemplateBodyContext
        fullName: NormalTemplateBodyContext
        uid: botbuilder-lg.NormalTemplateBodyContext
  - uid: botbuilder-lg.NormalTemplateStringContext
    name: NormalTemplateStringContext
    spec.typeScript:
      - name: NormalTemplateStringContext
        fullName: NormalTemplateStringContext
        uid: botbuilder-lg.NormalTemplateStringContext
  - uid: botbuilder-lg.StructuredTemplateBodyContext
    name: StructuredTemplateBodyContext
    spec.typeScript:
      - name: StructuredTemplateBodyContext
        fullName: StructuredTemplateBodyContext
        uid: botbuilder-lg.StructuredTemplateBodyContext
  - uid: botbuilder-lg.SwitchCaseBodyContext
    name: SwitchCaseBodyContext
    spec.typeScript:
      - name: SwitchCaseBodyContext
        fullName: SwitchCaseBodyContext
        uid: botbuilder-lg.SwitchCaseBodyContext
  - uid: botbuilder-lg.TemplateDefinitionContext
    name: TemplateDefinitionContext
    spec.typeScript:
      - name: TemplateDefinitionContext
        fullName: TemplateDefinitionContext
        uid: botbuilder-lg.TemplateDefinitionContext
