### YamlMime:UniversalReference
items:
  - uid: botbuilder-lg.TemplateEngine
    name: TemplateEngine
    fullName: TemplateEngine
    children:
      - botbuilder-lg.TemplateEngine.addFile
      - botbuilder-lg.TemplateEngine.addFiles
      - botbuilder-lg.TemplateEngine.addText
      - botbuilder-lg.TemplateEngine.analyzeTemplate
      - botbuilder-lg.TemplateEngine.evaluate
      - botbuilder-lg.TemplateEngine.evaluateTemplate
      - botbuilder-lg.TemplateEngine.expandTemplate
      - botbuilder-lg.TemplateEngine.constructor
      - botbuilder-lg.TemplateEngine.templates
    langs:
      - typeScript
    type: class
    summary: LG parser and evaluation engine
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateEngine.addFile
    name: addFile
    fullName: addFile
    children: []
    langs:
      - typeScript
    type: property
    summary: Load single .lg file into template engine.
    syntax:
      content: >-
        addFile: (filePath: string, importResolver?: ImportResolverDelegate) =>
        TemplateEngine
      return:
        type:
          - >-
            (filePath: string, importResolver?: ImportResolverDelegate) =>
            TemplateEngine
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateEngine.addFiles
    name: addFiles
    fullName: addFiles
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Load .lg files into template engine.

      You can add one file, or mutlple file as once

      If you have multiple files referencing each other, make sure you add them
      all at once,

      otherwise static checking won't allow you to add it one by one.
    syntax:
      content: >-
        addFiles: (filePaths: string[], importResolver?: ImportResolverDelegate)
        => TemplateEngine
      return:
        type:
          - >-
            (filePaths: string[], importResolver?: ImportResolverDelegate) =>
            TemplateEngine
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateEngine.addText
    name: addText
    fullName: addText
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Add text as lg file content to template engine. A fullpath id is needed
      when importResolver is empty, or simply pass in customized importResolver.
    syntax:
      content: >-
        addText: (content: string, id?: string, importResolver?:
        ImportResolverDelegate) => TemplateEngine
      return:
        type:
          - >-
            (content: string, id?: string, importResolver?:
            ImportResolverDelegate) => TemplateEngine
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateEngine.analyzeTemplate
    name: analyzeTemplate(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function analyzeTemplate(templateName: string)'
      parameters:
        - id: templateName
          type:
            - string
          description: ''
      return:
        type:
          - botbuilder-lg.AnalyzerResult
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateEngine.evaluate
    name: 'evaluate(string, any)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function evaluate(inlineStr: string, scope?: any)'
      parameters:
        - id: inlineStr
          type:
            - string
          description: ''
        - id: scope
          type:
            - any
          description: ''
          optional: true
      return:
        type:
          - any
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateEngine.evaluateTemplate
    name: 'evaluateTemplate(string, MemoryInterface | any)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function evaluateTemplate(templateName: string, scope?: MemoryInterface
        | any)
      parameters:
        - id: templateName
          type:
            - string
          description: ''
        - id: scope
          type:
            - MemoryInterface | any
          description: ''
          optional: true
      return:
        type:
          - any
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateEngine.expandTemplate
    name: 'expandTemplate(string, any)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function expandTemplate(templateName: string, scope?: any)'
      parameters:
        - id: templateName
          type:
            - string
          description: ''
        - id: scope
          type:
            - any
          description: ''
          optional: true
      return:
        type:
          - 'string[]'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateEngine.constructor
    name: TemplateEngine(ExpressionEngine)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new TemplateEngine(expressionEngine?: ExpressionEngine)'
      parameters:
        - id: expressionEngine
          type:
            - ExpressionEngine
          description: ''
          optional: true
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateEngine.templates
    name: templates
    fullName: templates
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'templates: LGTemplate[]'
      return:
        type:
          - 'botbuilder-lg.LGTemplate[]'
        description: ''
    package: botbuilder-lg
references:
  - uid: 'botbuilder-lg.LGTemplate[]'
    name: 'LGTemplate[]'
    spec.typeScript:
      - name: LGTemplate
        fullName: LGTemplate
        uid: botbuilder-lg.LGTemplate
      - name: '[]'
        fullName: '[]'
  - uid: botbuilder-lg.AnalyzerResult
    name: AnalyzerResult
    spec.typeScript:
      - name: AnalyzerResult
        fullName: AnalyzerResult
        uid: botbuilder-lg.AnalyzerResult
