### YamlMime:TSType
name: LGFileLexer
uid: botbuilder-lg.LGFileLexer
package: botbuilder-lg
summary: ''
fullName: LGFileLexer
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: LGFileLexer(CharStream)
    uid: botbuilder-lg.LGFileLexer.constructor
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'new LGFileLexer(input: CharStream)'
      parameters:
        - id: input
          type: CharStream
          description: ''
properties:
  - name: atn
    uid: botbuilder-lg.LGFileLexer.atn
    package: botbuilder-lg
    summary: >-
      Get the <xref:botbuilder-lg.LGFileLexer.serializedATN> used by the
      recognizer for prediction.
    fullName: atn
    remarks: ''
    isDeprecated: false
    syntax:
      content: ATN atn
      return:
        description: >-
          The <xref:botbuilder-lg.LGFileLexer.serializedATN> used by the
          recognizer for prediction.
        type: ATN
  - name: channel
    uid: botbuilder-lg.LGFileLexer.channel
    package: botbuilder-lg
    summary: ''
    fullName: channel
    remarks: ''
    isDeprecated: false
    syntax:
      content: number channel
      return:
        description: ''
        type: number
  - name: channelNames
    uid: botbuilder-lg.LGFileLexer.channelNames
    package: botbuilder-lg
    summary: ''
    fullName: channelNames
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static channelNames: string[]'
      return:
        description: ''
        type: string[]
  - name: channelNames
    uid: botbuilder-lg.LGFileLexer.channelNames
    package: botbuilder-lg
    summary: ''
    fullName: channelNames
    remarks: ''
    isDeprecated: false
    syntax:
      content: string[] channelNames
      return:
        description: ''
        type: string[]
  - name: charIndex
    uid: botbuilder-lg.LGFileLexer.charIndex
    package: botbuilder-lg
    summary: What is the index of the current character of lookahead?
    fullName: charIndex
    remarks: ''
    isDeprecated: false
    syntax:
      content: number charIndex
      return:
        description: ''
        type: number
  - name: charPositionInLine
    uid: botbuilder-lg.LGFileLexer.charPositionInLine
    package: botbuilder-lg
    summary: ''
    fullName: charPositionInLine
    remarks: ''
    isDeprecated: false
    syntax:
      content: number charPositionInLine
      return:
        description: ''
        type: number
  - name: COMMENT
    uid: botbuilder-lg.LGFileLexer.COMMENT
    package: botbuilder-lg
    summary: ''
    fullName: COMMENT
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static COMMENT: 3 = 3'
      return:
        description: ''
        type: '3'
  - name: DEFAULT_TOKEN_CHANNEL
    uid: botbuilder-lg.LGFileLexer.DEFAULT_TOKEN_CHANNEL
    package: botbuilder-lg
    summary: ''
    fullName: DEFAULT_TOKEN_CHANNEL
    remarks: ''
    isDeprecated: false
    syntax:
      content: static number DEFAULT_TOKEN_CHANNEL
      return:
        description: ''
        type: number
  - name: ESCAPE_CHARACTER
    uid: botbuilder-lg.LGFileLexer.ESCAPE_CHARACTER
    package: botbuilder-lg
    summary: ''
    fullName: ESCAPE_CHARACTER
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static ESCAPE_CHARACTER: 11 = 11'
      return:
        description: ''
        type: '11'
  - name: grammarFileName
    uid: botbuilder-lg.LGFileLexer.grammarFileName
    package: botbuilder-lg
    summary: ''
    fullName: grammarFileName
    remarks: ''
    isDeprecated: false
    syntax:
      content: string grammarFileName
      return:
        description: ''
        type: string
  - name: HIDDEN
    uid: botbuilder-lg.LGFileLexer.HIDDEN
    package: botbuilder-lg
    summary: ''
    fullName: HIDDEN
    remarks: ''
    isDeprecated: false
    syntax:
      content: static number HIDDEN
      return:
        description: ''
        type: number
  - name: IMPORT
    uid: botbuilder-lg.LGFileLexer.IMPORT
    package: botbuilder-lg
    summary: ''
    fullName: IMPORT
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static IMPORT: 4 = 4'
      return:
        description: ''
        type: '4'
  - name: INLINE_MULTILINE
    uid: botbuilder-lg.LGFileLexer.INLINE_MULTILINE
    package: botbuilder-lg
    summary: ''
    fullName: INLINE_MULTILINE
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static INLINE_MULTILINE: 6 = 6'
      return:
        description: ''
        type: '6'
  - name: inputStream
    uid: botbuilder-lg.LGFileLexer.inputStream
    package: botbuilder-lg
    summary: ''
    fullName: inputStream
    remarks: ''
    isDeprecated: false
    syntax:
      content: CharStream inputStream
      return:
        description: ''
        type: CharStream
  - name: interpreter
    uid: botbuilder-lg.LGFileLexer.interpreter
    package: botbuilder-lg
    summary: Get the ATN interpreter used by the recognizer for prediction.
    fullName: interpreter
    remarks: ''
    isDeprecated: false
    syntax:
      content: ATNInterpreter interpreter
      return:
        description: The ATN interpreter used by the recognizer for prediction.
        type: ATNInterpreter
  - name: INVALID_LINE
    uid: botbuilder-lg.LGFileLexer.INVALID_LINE
    package: botbuilder-lg
    summary: ''
    fullName: INVALID_LINE
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static INVALID_LINE: 9 = 9'
      return:
        description: ''
        type: '9'
  - name: line
    uid: botbuilder-lg.LGFileLexer.line
    package: botbuilder-lg
    summary: ''
    fullName: line
    remarks: ''
    isDeprecated: false
    syntax:
      content: number line
      return:
        description: ''
        type: number
  - name: modeNames
    uid: botbuilder-lg.LGFileLexer.modeNames
    package: botbuilder-lg
    summary: ''
    fullName: modeNames
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static modeNames: string[]'
      return:
        description: ''
        type: string[]
  - name: modeNames
    uid: botbuilder-lg.LGFileLexer.modeNames
    package: botbuilder-lg
    summary: ''
    fullName: modeNames
    remarks: ''
    isDeprecated: false
    syntax:
      content: string[] modeNames
      return:
        description: ''
        type: string[]
  - name: MULTILINE_MODE
    uid: botbuilder-lg.LGFileLexer.MULTILINE_MODE
    package: botbuilder-lg
    summary: ''
    fullName: MULTILINE_MODE
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static MULTILINE_MODE: 1 = 1'
      return:
        description: ''
        type: '1'
  - name: MULTILINE_PREFIX
    uid: botbuilder-lg.LGFileLexer.MULTILINE_PREFIX
    package: botbuilder-lg
    summary: ''
    fullName: MULTILINE_PREFIX
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static MULTILINE_PREFIX: 7 = 7'
      return:
        description: ''
        type: '7'
  - name: MULTILINE_SUFFIX
    uid: botbuilder-lg.LGFileLexer.MULTILINE_SUFFIX
    package: botbuilder-lg
    summary: ''
    fullName: MULTILINE_SUFFIX
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static MULTILINE_SUFFIX: 10 = 10'
      return:
        description: ''
        type: '10'
  - name: MULTILINE_TEXT
    uid: botbuilder-lg.LGFileLexer.MULTILINE_TEXT
    package: botbuilder-lg
    summary: ''
    fullName: MULTILINE_TEXT
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static MULTILINE_TEXT: 12 = 12'
      return:
        description: ''
        type: '12'
  - name: NEWLINE
    uid: botbuilder-lg.LGFileLexer.NEWLINE
    package: botbuilder-lg
    summary: ''
    fullName: NEWLINE
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static NEWLINE: 1 = 1'
      return:
        description: ''
        type: '1'
  - name: OPTION
    uid: botbuilder-lg.LGFileLexer.OPTION
    package: botbuilder-lg
    summary: ''
    fullName: OPTION
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static OPTION: 2 = 2'
      return:
        description: ''
        type: '2'
  - name: parseInfo
    uid: botbuilder-lg.LGFileLexer.parseInfo
    package: botbuilder-lg
    summary: |-
      If profiling during the parse/lex, this will return DecisionInfo records
       for each decision in recognizer in a ParseInfo object.
    fullName: parseInfo
    remarks: ''
    isDeprecated: false
    syntax:
      content: Promise<undefined | ParseInfo> parseInfo
      return:
        description: ''
        type: Promise&lt;undefined | ParseInfo&gt;
  - name: ruleNames
    uid: botbuilder-lg.LGFileLexer.ruleNames
    package: botbuilder-lg
    summary: ''
    fullName: ruleNames
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static ruleNames: string[]'
      return:
        description: ''
        type: string[]
  - name: ruleNames
    uid: botbuilder-lg.LGFileLexer.ruleNames
    package: botbuilder-lg
    summary: ''
    fullName: ruleNames
    remarks: ''
    isDeprecated: false
    syntax:
      content: string[] ruleNames
      return:
        description: ''
        type: string[]
  - name: serializedATN
    uid: botbuilder-lg.LGFileLexer.serializedATN
    package: botbuilder-lg
    summary: ''
    fullName: serializedATN
    remarks: ''
    isDeprecated: false
    syntax:
      content: string serializedATN
      return:
        description: ''
        type: string
  - name: sourceName
    uid: botbuilder-lg.LGFileLexer.sourceName
    package: botbuilder-lg
    summary: ''
    fullName: sourceName
    remarks: ''
    isDeprecated: false
    syntax:
      content: string sourceName
      return:
        description: ''
        type: string
  - name: startTemplate
    uid: botbuilder-lg.LGFileLexer.startTemplate
    package: botbuilder-lg
    summary: ''
    fullName: startTemplate
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'startTemplate: boolean'
      return:
        description: ''
        type: boolean
  - name: state
    uid: botbuilder-lg.LGFileLexer.state
    package: botbuilder-lg
    summary: ''
    fullName: state
    remarks: ''
    isDeprecated: false
    syntax:
      content: number state
      return:
        description: ''
        type: number
  - name: TEMPLATE_BODY
    uid: botbuilder-lg.LGFileLexer.TEMPLATE_BODY
    package: botbuilder-lg
    summary: ''
    fullName: TEMPLATE_BODY
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static TEMPLATE_BODY: 8 = 8'
      return:
        description: ''
        type: '8'
  - name: TEMPLATE_NAME_LINE
    uid: botbuilder-lg.LGFileLexer.TEMPLATE_NAME_LINE
    package: botbuilder-lg
    summary: ''
    fullName: TEMPLATE_NAME_LINE
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static TEMPLATE_NAME_LINE: 5 = 5'
      return:
        description: ''
        type: '5'
  - name: text
    uid: botbuilder-lg.LGFileLexer.text
    package: botbuilder-lg
    summary: |-
      Return the text matched so far for the current token or any
       text override.
    fullName: text
    remarks: ''
    isDeprecated: false
    syntax:
      content: string text
      return:
        description: ''
        type: string
  - name: token
    uid: botbuilder-lg.LGFileLexer.token
    package: botbuilder-lg
    summary: Override if emitting multiple tokens.
    fullName: token
    remarks: ''
    isDeprecated: false
    syntax:
      content: undefined | Token token
      return:
        description: ''
        type: undefined | Token
  - name: tokenFactory
    uid: botbuilder-lg.LGFileLexer.tokenFactory
    package: botbuilder-lg
    summary: ''
    fullName: tokenFactory
    remarks: ''
    isDeprecated: false
    syntax:
      content: TokenFactory tokenFactory
      return:
        description: ''
        type: TokenFactory
  - name: type
    uid: botbuilder-lg.LGFileLexer.type
    package: botbuilder-lg
    summary: ''
    fullName: type
    remarks: ''
    isDeprecated: false
    syntax:
      content: number type
      return:
        description: ''
        type: number
  - name: VOCABULARY
    uid: botbuilder-lg.LGFileLexer.VOCABULARY
    package: botbuilder-lg
    summary: ''
    fullName: VOCABULARY
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static VOCABULARY: Vocabulary'
      return:
        description: ''
        type: Vocabulary
  - name: vocabulary
    uid: botbuilder-lg.LGFileLexer.vocabulary
    package: botbuilder-lg
    summary: ''
    fullName: vocabulary
    remarks: ''
    isDeprecated: false
    syntax:
      content: Vocabulary vocabulary
      return:
        description: ''
        type: Vocabulary
inheritedProperties:
  - name: DEFAULT_MODE
    uid: botbuilder-lg.LGFileLexer.DEFAULT_MODE
    package: botbuilder-lg
    summary: ''
    fullName: DEFAULT_MODE
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static DEFAULT_MODE: number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Lexer.DEFAULT_MODE
  - name: EOF
    uid: botbuilder-lg.LGFileLexer.EOF
    package: botbuilder-lg
    summary: ''
    fullName: EOF
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static EOF: number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Lexer.EOF
  - name: MAX_CHAR_VALUE
    uid: botbuilder-lg.LGFileLexer.MAX_CHAR_VALUE
    package: botbuilder-lg
    summary: ''
    fullName: MAX_CHAR_VALUE
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static MAX_CHAR_VALUE: number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Lexer.MAX_CHAR_VALUE
  - name: MIN_CHAR_VALUE
    uid: botbuilder-lg.LGFileLexer.MIN_CHAR_VALUE
    package: botbuilder-lg
    summary: ''
    fullName: MIN_CHAR_VALUE
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static MIN_CHAR_VALUE: number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Lexer.MIN_CHAR_VALUE
  - name: MORE
    uid: botbuilder-lg.LGFileLexer.MORE
    package: botbuilder-lg
    summary: ''
    fullName: MORE
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static MORE: number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Lexer.MORE
  - name: SKIP
    uid: botbuilder-lg.LGFileLexer.SKIP
    package: botbuilder-lg
    summary: ''
    fullName: SKIP
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static SKIP: number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Lexer.SKIP
inheritedMethods:
  - name: addErrorListener(ANTLRErrorListener<number>)
    uid: botbuilder-lg.LGFileLexer.addErrorListener
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function addErrorListener(listener: ANTLRErrorListener<number>)'
      parameters:
        - id: listener
          type: ANTLRErrorListener&lt;number&gt;
          description: ''
    inheritanceDescription: <b>Inherited From</b> Lexer.addErrorListener
  - name: emit()
    uid: botbuilder-lg.LGFileLexer.emit_1
    package: botbuilder-lg
    summary: |-
      By default does not support multiple emits per nextToken invocation
       for efficiency reasons.  Subclass and override this method, nextToken,
       and getToken (to push tokens into a list and pull from that list
       rather than a single variable as this implementation does).
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function emit(): Token'
      return:
        description: ''
        type: Token
    inheritanceDescription: <b>Inherited From</b> Lexer.emit
  - name: emit(Token)
    uid: botbuilder-lg.LGFileLexer.emit
    package: botbuilder-lg
    summary: |-
      The standard method called to automatically emit a token at the
       outermost lexical rule.  The token object should point into the
       char buffer start..stop.  If there is a text override in 'text',
       use that to set the token's text.  Override this method to emit
       custom Token objects or provide a new factory.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function emit(token: Token): Token'
      parameters:
        - id: token
          type: Token
          description: ''
      return:
        description: ''
        type: Token
    inheritanceDescription: <b>Inherited From</b> Lexer.emit
  - name: emitEOF()
    uid: botbuilder-lg.LGFileLexer.emitEOF
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function emitEOF(): Token'
      return:
        description: ''
        type: Token
    inheritanceDescription: <b>Inherited From</b> Lexer.emitEOF
  - name: getAllTokens()
    uid: botbuilder-lg.LGFileLexer.getAllTokens
    package: botbuilder-lg
    summary: |-
      Return a list of all Token objects in input char stream.
       Forces load of all tokens. Does not include EOF token.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getAllTokens(): Token[]'
      return:
        description: ''
        type: Token[]
    inheritanceDescription: <b>Inherited From</b> Lexer.getAllTokens
  - name: getCharErrorDisplay(number)
    uid: botbuilder-lg.LGFileLexer.getCharErrorDisplay
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getCharErrorDisplay(c: number): string'
      parameters:
        - id: c
          type: number
          description: ''
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> Lexer.getCharErrorDisplay
  - name: getErrorDisplay(string | number)
    uid: botbuilder-lg.LGFileLexer.getErrorDisplay
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getErrorDisplay(s: string | number): string'
      parameters:
        - id: s
          type: string | number
          description: ''
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> Lexer.getErrorDisplay
  - name: getErrorHeader(RecognitionException)
    uid: botbuilder-lg.LGFileLexer.getErrorHeader
    package: botbuilder-lg
    summary: What is the error header, normally line/character position information?
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getErrorHeader(e: RecognitionException): string'
      parameters:
        - id: e
          type: RecognitionException
          description: ''
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> Lexer.getErrorHeader
  - name: getErrorListenerDispatch()
    uid: botbuilder-lg.LGFileLexer.getErrorListenerDispatch
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getErrorListenerDispatch(): ANTLRErrorListener<number>'
      return:
        description: ''
        type: ANTLRErrorListener&lt;number&gt;
    inheritanceDescription: <b>Inherited From</b> Lexer.getErrorListenerDispatch
  - name: getErrorListeners()
    uid: botbuilder-lg.LGFileLexer.getErrorListeners
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getErrorListeners(): ANTLRErrorListener<number>[]'
      return:
        description: ''
        type: ANTLRErrorListener&lt;number&gt;[]
    inheritanceDescription: <b>Inherited From</b> Lexer.getErrorListeners
  - name: getRuleIndexMap()
    uid: botbuilder-lg.LGFileLexer.getRuleIndexMap
    package: botbuilder-lg
    summary: |-
      Get a map from rule names to rule indexes.

      Used for XPath and tree pattern compilation.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getRuleIndexMap(): ReadonlyMap<string, number>'
      return:
        description: ''
        type: ReadonlyMap&lt;string, number&gt;
    inheritanceDescription: <b>Inherited From</b> Lexer.getRuleIndexMap
  - name: getTokenType(string)
    uid: botbuilder-lg.LGFileLexer.getTokenType
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getTokenType(tokenName: string): number'
      parameters:
        - id: tokenName
          type: string
          description: ''
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Lexer.getTokenType
  - name: getTokenTypeMap()
    uid: botbuilder-lg.LGFileLexer.getTokenTypeMap
    package: botbuilder-lg
    summary: |-
      Get a map from token names to token types.

      Used for XPath and tree pattern compilation.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getTokenTypeMap(): ReadonlyMap<string, number>'
      return:
        description: ''
        type: ReadonlyMap&lt;string, number&gt;
    inheritanceDescription: <b>Inherited From</b> Lexer.getTokenTypeMap
  - name: mode(number)
    uid: botbuilder-lg.LGFileLexer.mode
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function mode(m: number)'
      parameters:
        - id: m
          type: number
          description: ''
    inheritanceDescription: <b>Inherited From</b> Lexer.mode
  - name: more()
    uid: botbuilder-lg.LGFileLexer.more
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: function more()
    inheritanceDescription: <b>Inherited From</b> Lexer.more
  - name: nextToken()
    uid: botbuilder-lg.LGFileLexer.nextToken
    package: botbuilder-lg
    summary: |-
      Return a token from this source; i.e., match a token on the char
       stream.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function nextToken(): Token'
      return:
        description: ''
        type: Token
    inheritanceDescription: <b>Inherited From</b> Lexer.nextToken
  - name: notifyListeners(LexerNoViableAltException)
    uid: botbuilder-lg.LGFileLexer.notifyListeners
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function notifyListeners(e: LexerNoViableAltException)'
      parameters:
        - id: e
          type: LexerNoViableAltException
          description: ''
    inheritanceDescription: <b>Inherited From</b> Lexer.notifyListeners
  - name: popMode()
    uid: botbuilder-lg.LGFileLexer.popMode
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function popMode(): number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Lexer.popMode
  - name: precpred(undefined | RuleContext, number)
    uid: botbuilder-lg.LGFileLexer.precpred
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function precpred(localctx: undefined | RuleContext, precedence:
        number): boolean
      parameters:
        - id: localctx
          type: undefined | RuleContext
          description: ''
        - id: precedence
          type: number
          description: ''
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> Lexer.precpred
  - name: pushMode(number)
    uid: botbuilder-lg.LGFileLexer.pushMode
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function pushMode(m: number)'
      parameters:
        - id: m
          type: number
          description: ''
    inheritanceDescription: <b>Inherited From</b> Lexer.pushMode
  - name: recover(LexerNoViableAltException)
    uid: botbuilder-lg.LGFileLexer.recover_1
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function recover(re: LexerNoViableAltException)'
      parameters:
        - id: re
          type: LexerNoViableAltException
          description: ''
    inheritanceDescription: <b>Inherited From</b> Lexer.recover
  - name: recover(RecognitionException)
    uid: botbuilder-lg.LGFileLexer.recover
    package: botbuilder-lg
    summary: |-
      Lexers can normally match any char in it's vocabulary after matching
       a token, so do the easy thing and just kill a character and hope
       it all works out.  You can instead use the rule invocation stack
       to do sophisticated error recovery if you are in a fragment rule.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function recover(re: RecognitionException)'
      parameters:
        - id: re
          type: RecognitionException
          description: ''
    inheritanceDescription: <b>Inherited From</b> Lexer.recover
  - name: removeErrorListener(ANTLRErrorListener<number>)
    uid: botbuilder-lg.LGFileLexer.removeErrorListener
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function removeErrorListener(listener: ANTLRErrorListener<number>)'
      parameters:
        - id: listener
          type: ANTLRErrorListener&lt;number&gt;
          description: ''
    inheritanceDescription: <b>Inherited From</b> Lexer.removeErrorListener
  - name: removeErrorListeners()
    uid: botbuilder-lg.LGFileLexer.removeErrorListeners
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: function removeErrorListeners()
    inheritanceDescription: <b>Inherited From</b> Lexer.removeErrorListeners
  - name: reset()
    uid: botbuilder-lg.LGFileLexer.reset
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: function reset()
    inheritanceDescription: <b>Inherited From</b> Lexer.reset
  - name: reset(boolean)
    uid: botbuilder-lg.LGFileLexer.reset_1
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function reset(resetInput: boolean)'
      parameters:
        - id: resetInput
          type: boolean
          description: ''
    inheritanceDescription: <b>Inherited From</b> Lexer.reset
  - name: skip()
    uid: botbuilder-lg.LGFileLexer.skip
    package: botbuilder-lg
    summary: |-
      Instruct the lexer to skip creating a token for current lexer rule
       and look for another token.  nextToken() knows to keep looking when
       a lexer rule finishes with token set to SKIP_TOKEN.  Recall that
       if token==undefined at end of any token rule, it creates one for you
       and emits it.
    remarks: ''
    isDeprecated: false
    syntax:
      content: function skip()
    inheritanceDescription: <b>Inherited From</b> Lexer.skip
methods:
  - name: action(RuleContext, number, number)
    uid: botbuilder-lg.LGFileLexer.action
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function action(_localctx: RuleContext, ruleIndex: number, actionIndex:
        number)
      parameters:
        - id: _localctx
          type: RuleContext
          description: ''
        - id: ruleIndex
          type: number
          description: ''
        - id: actionIndex
          type: number
          description: ''
  - name: sempred(RuleContext, number, number)
    uid: botbuilder-lg.LGFileLexer.sempred
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function sempred(_localctx: RuleContext, ruleIndex: number, predIndex:
        number): boolean
      parameters:
        - id: _localctx
          type: RuleContext
          description: ''
        - id: ruleIndex
          type: number
          description: ''
        - id: predIndex
          type: number
          description: ''
      return:
        description: ''
        type: boolean
extends: Lexer
