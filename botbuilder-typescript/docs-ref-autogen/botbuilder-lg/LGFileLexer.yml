### YamlMime:TSType
name: LGFileLexer
uid: botbuilder-lg.LGFileLexer
package: botbuilder-lg
summary: ''
fullName: LGFileLexer
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: LGFileLexer(CharStream)
    uid: botbuilder-lg.LGFileLexer.constructor
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new LGFileLexer(input: CharStream)'
      parameters:
        - id: input
          type: CharStream
          description: ''
properties:
  - name: atn
    uid: botbuilder-lg.LGFileLexer.atn
    package: botbuilder-lg
    summary: 'Get the <xref:ATN> used by the recognizer for prediction.'
    fullName: atn
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'atn: ATN'
      return:
        type: ATN
        description: ''
  - name: channel
    uid: botbuilder-lg.LGFileLexer.channel
    package: botbuilder-lg
    summary: ''
    fullName: channel
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'channel: number'
      return:
        type: number
        description: ''
  - name: channelNames
    uid: botbuilder-lg.LGFileLexer.channelNames
    package: botbuilder-lg
    summary: ''
    fullName: channelNames
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: "public static channelNames: string[] = [\r\n\t\t\"DEFAULT_TOKEN_CHANNEL\", \"HIDDEN\",\r\n\t]"
      return:
        type: 'string[]'
        description: ''
  - name: channelNames
    uid: botbuilder-lg.LGFileLexer.channelNames
    package: botbuilder-lg
    summary: ''
    fullName: channelNames
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'string[] channelNames'
      return:
        type: 'string[]'
        description: ''
  - name: charIndex
    uid: botbuilder-lg.LGFileLexer.charIndex
    package: botbuilder-lg
    summary: What is the index of the current character of lookahead?
    fullName: charIndex
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'charIndex: number'
      return:
        type: number
        description: ''
  - name: charPositionInLine
    uid: botbuilder-lg.LGFileLexer.charPositionInLine
    package: botbuilder-lg
    summary: ''
    fullName: charPositionInLine
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'charPositionInLine: number'
      return:
        type: number
        description: ''
  - name: COMMENT
    uid: botbuilder-lg.LGFileLexer.COMMENT
    package: botbuilder-lg
    summary: ''
    fullName: COMMENT
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static COMMENT: 3 = 3'
      return:
        type: '3'
        description: ''
  - name: DEFAULT_MODE
    uid: botbuilder-lg.LGFileLexer.DEFAULT_MODE
    package: botbuilder-lg
    summary: ''
    fullName: DEFAULT_MODE
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static DEFAULT_MODE: number'
      return:
        type: number
        description: ''
  - name: DEFAULT_TOKEN_CHANNEL
    uid: botbuilder-lg.LGFileLexer.DEFAULT_TOKEN_CHANNEL
    package: botbuilder-lg
    summary: ''
    fullName: DEFAULT_TOKEN_CHANNEL
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static DEFAULT_TOKEN_CHANNEL: number'
      return:
        type: number
        description: ''
  - name: EOF
    uid: botbuilder-lg.LGFileLexer.EOF
    package: botbuilder-lg
    summary: ''
    fullName: EOF
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static EOF: number'
      return:
        type: number
        description: ''
  - name: ESCAPE_CHARACTER
    uid: botbuilder-lg.LGFileLexer.ESCAPE_CHARACTER
    package: botbuilder-lg
    summary: ''
    fullName: ESCAPE_CHARACTER
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static ESCAPE_CHARACTER: 10 = 10'
      return:
        type: '10'
        description: ''
  - name: grammarFileName
    uid: botbuilder-lg.LGFileLexer.grammarFileName
    package: botbuilder-lg
    summary: ''
    fullName: grammarFileName
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: string grammarFileName
      return:
        type: string
        description: ''
  - name: HIDDEN
    uid: botbuilder-lg.LGFileLexer.HIDDEN
    package: botbuilder-lg
    summary: ''
    fullName: HIDDEN
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static HIDDEN: number'
      return:
        type: number
        description: ''
  - name: IMPORT
    uid: botbuilder-lg.LGFileLexer.IMPORT
    package: botbuilder-lg
    summary: ''
    fullName: IMPORT
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static IMPORT: 4 = 4'
      return:
        type: '4'
        description: ''
  - name: inputStream
    uid: botbuilder-lg.LGFileLexer.inputStream
    package: botbuilder-lg
    summary: Set the char stream and reset the lexer
    fullName: inputStream
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'inputStream: CharStream'
      return:
        type: CharStream
        description: ''
  - name: interpreter
    uid: botbuilder-lg.LGFileLexer.interpreter
    package: botbuilder-lg
    summary: Set the ATN interpreter used by the recognizer for prediction.
    fullName: interpreter
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'interpreter: LexerATNSimulator'
      return:
        type: LexerATNSimulator
        description: ''
  - name: INVALID_LINE
    uid: botbuilder-lg.LGFileLexer.INVALID_LINE
    package: botbuilder-lg
    summary: ''
    fullName: INVALID_LINE
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static INVALID_LINE: 8 = 8'
      return:
        type: '8'
        description: ''
  - name: line
    uid: botbuilder-lg.LGFileLexer.line
    package: botbuilder-lg
    summary: ''
    fullName: line
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'line: number'
      return:
        type: number
        description: ''
  - name: MAX_CHAR_VALUE
    uid: botbuilder-lg.LGFileLexer.MAX_CHAR_VALUE
    package: botbuilder-lg
    summary: ''
    fullName: MAX_CHAR_VALUE
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static MAX_CHAR_VALUE: number'
      return:
        type: number
        description: ''
  - name: MIN_CHAR_VALUE
    uid: botbuilder-lg.LGFileLexer.MIN_CHAR_VALUE
    package: botbuilder-lg
    summary: ''
    fullName: MIN_CHAR_VALUE
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static MIN_CHAR_VALUE: number'
      return:
        type: number
        description: ''
  - name: modeNames
    uid: botbuilder-lg.LGFileLexer.modeNames
    package: botbuilder-lg
    summary: ''
    fullName: modeNames
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: "public static modeNames: string[] = [\r\n\t\t\"DEFAULT_MODE\", \"MULTILINE_MODE\",\r\n\t]"
      return:
        type: 'string[]'
        description: ''
  - name: modeNames
    uid: botbuilder-lg.LGFileLexer.modeNames
    package: botbuilder-lg
    summary: ''
    fullName: modeNames
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'string[] modeNames'
      return:
        type: 'string[]'
        description: ''
  - name: MORE
    uid: botbuilder-lg.LGFileLexer.MORE
    package: botbuilder-lg
    summary: ''
    fullName: MORE
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static MORE: number'
      return:
        type: number
        description: ''
  - name: MULTILINE_MODE
    uid: botbuilder-lg.LGFileLexer.MULTILINE_MODE
    package: botbuilder-lg
    summary: ''
    fullName: MULTILINE_MODE
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static MULTILINE_MODE: 1 = 1'
      return:
        type: '1'
        description: ''
  - name: MULTILINE_PREFIX
    uid: botbuilder-lg.LGFileLexer.MULTILINE_PREFIX
    package: botbuilder-lg
    summary: ''
    fullName: MULTILINE_PREFIX
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static MULTILINE_PREFIX: 6 = 6'
      return:
        type: '6'
        description: ''
  - name: MULTILINE_SUFFIX
    uid: botbuilder-lg.LGFileLexer.MULTILINE_SUFFIX
    package: botbuilder-lg
    summary: ''
    fullName: MULTILINE_SUFFIX
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static MULTILINE_SUFFIX: 9 = 9'
      return:
        type: '9'
        description: ''
  - name: MULTILINE_TEXT
    uid: botbuilder-lg.LGFileLexer.MULTILINE_TEXT
    package: botbuilder-lg
    summary: ''
    fullName: MULTILINE_TEXT
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static MULTILINE_TEXT: 11 = 11'
      return:
        type: '11'
        description: ''
  - name: NEWLINE
    uid: botbuilder-lg.LGFileLexer.NEWLINE
    package: botbuilder-lg
    summary: ''
    fullName: NEWLINE
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static NEWLINE: 1 = 1'
      return:
        type: '1'
        description: ''
  - name: OPTION
    uid: botbuilder-lg.LGFileLexer.OPTION
    package: botbuilder-lg
    summary: ''
    fullName: OPTION
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static OPTION: 2 = 2'
      return:
        type: '2'
        description: ''
  - name: parseInfo
    uid: botbuilder-lg.LGFileLexer.parseInfo
    package: botbuilder-lg
    summary: |-
      If profiling during the parse/lex, this will return DecisionInfo records
       for each decision in recognizer in a ParseInfo object.
    fullName: parseInfo
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'parseInfo: Promise<ParseInfo | undefined>'
      return:
        type: Promise&lt;ParseInfo | undefined&gt;
        description: ''
  - name: ruleNames
    uid: botbuilder-lg.LGFileLexer.ruleNames
    package: botbuilder-lg
    summary: ''
    fullName: ruleNames
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: "public static ruleNames: string[] = [\r\n\t\t\"WHITESPACE\", \"NEWLINE\", \"OPTION\", \"COMMENT\", \"IMPORT\", \"TEMPLATE_NAME_LINE\", \r\n\t\t\"MULTILINE_PREFIX\", \"TEMPLATE_BODY\", \"INVALID_LINE\", \"MULTILINE_SUFFIX\", \r\n\t\t\"ESCAPE_CHARACTER\", \"MULTILINE_TEXT\",\r\n\t]"
      return:
        type: 'string[]'
        description: ''
  - name: ruleNames
    uid: botbuilder-lg.LGFileLexer.ruleNames
    package: botbuilder-lg
    summary: ''
    fullName: ruleNames
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'string[] ruleNames'
      return:
        type: 'string[]'
        description: ''
  - name: serializedATN
    uid: botbuilder-lg.LGFileLexer.serializedATN
    package: botbuilder-lg
    summary: ''
    fullName: serializedATN
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: string serializedATN
      return:
        type: string
        description: ''
  - name: SKIP
    uid: botbuilder-lg.LGFileLexer.SKIP
    package: botbuilder-lg
    summary: ''
    fullName: SKIP
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static SKIP: number'
      return:
        type: number
        description: ''
  - name: sourceName
    uid: botbuilder-lg.LGFileLexer.sourceName
    package: botbuilder-lg
    summary: ''
    fullName: sourceName
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'sourceName: string'
      return:
        type: string
        description: ''
  - name: startTemplate
    uid: botbuilder-lg.LGFileLexer.startTemplate
    package: botbuilder-lg
    summary: ''
    fullName: startTemplate
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'startTemplate: boolean = false'
      return:
        type: boolean
        description: ''
  - name: state
    uid: botbuilder-lg.LGFileLexer.state
    package: botbuilder-lg
    summary: |-
      Indicate that the recognizer has changed internal state that is
       consistent with the ATN state passed in.  This way we always know
       where we are in the ATN as the parser goes along. The rule
       context objects form a stack that lets us see the stack of
       invoking rules. Combine this and we have complete ATN
       configuration information.
    fullName: state
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'state: number'
      return:
        type: number
        description: ''
  - name: TEMPLATE_BODY
    uid: botbuilder-lg.LGFileLexer.TEMPLATE_BODY
    package: botbuilder-lg
    summary: ''
    fullName: TEMPLATE_BODY
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static TEMPLATE_BODY: 7 = 7'
      return:
        type: '7'
        description: ''
  - name: TEMPLATE_NAME_LINE
    uid: botbuilder-lg.LGFileLexer.TEMPLATE_NAME_LINE
    package: botbuilder-lg
    summary: ''
    fullName: TEMPLATE_NAME_LINE
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static TEMPLATE_NAME_LINE: 5 = 5'
      return:
        type: '5'
        description: ''
  - name: text
    uid: botbuilder-lg.LGFileLexer.text
    package: botbuilder-lg
    summary: |-
      Set the complete text of this token; it wipes any previous
       changes to the text.
    fullName: text
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'text: string'
      return:
        type: string
        description: ''
  - name: token
    uid: botbuilder-lg.LGFileLexer.token
    package: botbuilder-lg
    summary: Override if emitting multiple tokens.
    fullName: token
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'token: Token | undefined'
      return:
        type: Token | undefined
        description: ''
  - name: tokenFactory
    uid: botbuilder-lg.LGFileLexer.tokenFactory
    package: botbuilder-lg
    summary: ''
    fullName: tokenFactory
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'tokenFactory: TokenFactory'
      return:
        type: TokenFactory
        description: ''
  - name: type
    uid: botbuilder-lg.LGFileLexer.type
    package: botbuilder-lg
    summary: ''
    fullName: type
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'type: number'
      return:
        type: number
        description: ''
  - name: VOCABULARY
    uid: botbuilder-lg.LGFileLexer.VOCABULARY
    package: botbuilder-lg
    summary: ''
    fullName: VOCABULARY
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        public static VOCABULARY: Vocabulary = new
        VocabularyImpl(LGFileLexer._LITERAL_NAMES, LGFileLexer._SYMBOLIC_NAMES,
        [])
      return:
        type: Vocabulary
        description: ''
  - name: vocabulary
    uid: botbuilder-lg.LGFileLexer.vocabulary
    package: botbuilder-lg
    summary: ''
    fullName: vocabulary
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: Vocabulary vocabulary
      return:
        type: Vocabulary
        description: ''
methods:
  - name: 'action(RuleContext, number, number)'
    uid: botbuilder-lg.LGFileLexer.action
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function action(_localctx: RuleContext, ruleIndex: number, actionIndex:
        number)
      parameters:
        - id: _localctx
          type: RuleContext
          description: ''
        - id: ruleIndex
          type: number
          description: ''
        - id: actionIndex
          type: number
          description: ''
  - name: addErrorListener(ANTLRErrorListener<number>)
    uid: botbuilder-lg.LGFileLexer.addErrorListener
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function addErrorListener(listener: ANTLRErrorListener<number>)'
      parameters:
        - id: listener
          type: ANTLRErrorListener&lt;number&gt;
          description: ''
  - name: emit()
    uid: botbuilder-lg.LGFileLexer.emit_1
    package: botbuilder-lg
    summary: |-
      By default does not support multiple emits per nextToken invocation
       for efficiency reasons.  Subclass and override this method, nextToken,
       and getToken (to push tokens into a list and pull from that list
       rather than a single variable as this implementation does).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function emit()
      return:
        type: Token
        description: ''
  - name: emit(Token)
    uid: botbuilder-lg.LGFileLexer.emit
    package: botbuilder-lg
    summary: |-
      The standard method called to automatically emit a token at the
       outermost lexical rule.  The token object should point into the
       char buffer start..stop.  If there is a text override in 'text',
       use that to set the token's text.  Override this method to emit
       custom Token objects or provide a new factory.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function emit(token: Token)'
      parameters:
        - id: token
          type: Token
          description: ''
      return:
        type: Token
        description: ''
  - name: emitEOF()
    uid: botbuilder-lg.LGFileLexer.emitEOF
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function emitEOF()
      return:
        type: Token
        description: ''
  - name: getAllTokens()
    uid: botbuilder-lg.LGFileLexer.getAllTokens
    package: botbuilder-lg
    summary: |-
      Return a list of all Token objects in input char stream.
       Forces load of all tokens. Does not include EOF token.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getAllTokens()
      return:
        type: 'Token[]'
        description: ''
  - name: getCharErrorDisplay(number)
    uid: botbuilder-lg.LGFileLexer.getCharErrorDisplay
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getCharErrorDisplay(c: number)'
      parameters:
        - id: c
          type: number
          description: ''
      return:
        type: string
        description: ''
  - name: getErrorDisplay(string | number)
    uid: botbuilder-lg.LGFileLexer.getErrorDisplay
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getErrorDisplay(s: string | number)'
      parameters:
        - id: s
          type: string | number
          description: ''
      return:
        type: string
        description: ''
  - name: getErrorHeader(RecognitionException)
    uid: botbuilder-lg.LGFileLexer.getErrorHeader
    package: botbuilder-lg
    summary: 'What is the error header, normally line/character position information?'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getErrorHeader(e: RecognitionException)'
      parameters:
        - id: e
          type: RecognitionException
          description: ''
      return:
        type: string
        description: ''
  - name: getErrorListenerDispatch()
    uid: botbuilder-lg.LGFileLexer.getErrorListenerDispatch
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getErrorListenerDispatch()
      return:
        type: ANTLRErrorListener&lt;number&gt;
        description: ''
  - name: getErrorListeners()
    uid: botbuilder-lg.LGFileLexer.getErrorListeners
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getErrorListeners()
      return:
        type: Array&lt;ANTLRErrorListener&lt;number&gt;&gt;
        description: ''
  - name: getRuleIndexMap()
    uid: botbuilder-lg.LGFileLexer.getRuleIndexMap
    package: botbuilder-lg
    summary: |
      Get a map from rule names to rule indexes.
      Used for XPath and tree pattern compilation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getRuleIndexMap()
      return:
        type: 'ReadonlyMap&lt;string, number&gt;'
        description: ''
  - name: getTokenType(string)
    uid: botbuilder-lg.LGFileLexer.getTokenType
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getTokenType(tokenName: string)'
      parameters:
        - id: tokenName
          type: string
          description: ''
      return:
        type: number
        description: ''
  - name: getTokenTypeMap()
    uid: botbuilder-lg.LGFileLexer.getTokenTypeMap
    package: botbuilder-lg
    summary: |
      Get a map from token names to token types.
      Used for XPath and tree pattern compilation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getTokenTypeMap()
      return:
        type: 'ReadonlyMap&lt;string, number&gt;'
        description: ''
  - name: mode(number)
    uid: botbuilder-lg.LGFileLexer.mode
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function mode(m: number)'
      parameters:
        - id: m
          type: number
          description: ''
  - name: more()
    uid: botbuilder-lg.LGFileLexer.more
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function more()
  - name: nextToken()
    uid: botbuilder-lg.LGFileLexer.nextToken
    package: botbuilder-lg
    summary: |-
      Return a token from this source; i.e., match a token on the char
       stream.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function nextToken()
      return:
        type: Token
        description: ''
  - name: notifyListeners(LexerNoViableAltException)
    uid: botbuilder-lg.LGFileLexer.notifyListeners
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function notifyListeners(e: LexerNoViableAltException)'
      parameters:
        - id: e
          type: LexerNoViableAltException
          description: ''
  - name: popMode()
    uid: botbuilder-lg.LGFileLexer.popMode
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function popMode()
      return:
        type: number
        description: ''
  - name: 'precpred(RuleContext | undefined, number)'
    uid: botbuilder-lg.LGFileLexer.precpred
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function precpred(localctx: RuleContext | undefined, precedence: number)'
      parameters:
        - id: localctx
          type: RuleContext | undefined
          description: ''
        - id: precedence
          type: number
          description: ''
      return:
        type: boolean
        description: ''
  - name: pushMode(number)
    uid: botbuilder-lg.LGFileLexer.pushMode
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function pushMode(m: number)'
      parameters:
        - id: m
          type: number
          description: ''
  - name: recover(LexerNoViableAltException)
    uid: botbuilder-lg.LGFileLexer.recover_1
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function recover(re: LexerNoViableAltException)'
      parameters:
        - id: re
          type: LexerNoViableAltException
          description: ''
  - name: recover(RecognitionException)
    uid: botbuilder-lg.LGFileLexer.recover
    package: botbuilder-lg
    summary: |-
      Lexers can normally match any char in it's vocabulary after matching
       a token, so do the easy thing and just kill a character and hope
       it all works out.  You can instead use the rule invocation stack
       to do sophisticated error recovery if you are in a fragment rule.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function recover(re: RecognitionException)'
      parameters:
        - id: re
          type: RecognitionException
          description: ''
  - name: removeErrorListener(ANTLRErrorListener<number>)
    uid: botbuilder-lg.LGFileLexer.removeErrorListener
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function removeErrorListener(listener: ANTLRErrorListener<number>)'
      parameters:
        - id: listener
          type: ANTLRErrorListener&lt;number&gt;
          description: ''
  - name: removeErrorListeners()
    uid: botbuilder-lg.LGFileLexer.removeErrorListeners
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function removeErrorListeners()
  - name: reset()
    uid: botbuilder-lg.LGFileLexer.reset
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function reset()
  - name: reset(boolean)
    uid: botbuilder-lg.LGFileLexer.reset_1
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function reset(resetInput: boolean)'
      parameters:
        - id: resetInput
          type: boolean
          description: ''
  - name: 'sempred(RuleContext, number, number)'
    uid: botbuilder-lg.LGFileLexer.sempred
    package: botbuilder-lg
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function sempred(_localctx: RuleContext, ruleIndex: number, predIndex:
        number)
      parameters:
        - id: _localctx
          type: RuleContext
          description: ''
        - id: ruleIndex
          type: number
          description: ''
        - id: predIndex
          type: number
          description: ''
      return:
        type: boolean
        description: ''
  - name: skip()
    uid: botbuilder-lg.LGFileLexer.skip
    package: botbuilder-lg
    summary: |-
      Instruct the lexer to skip creating a token for current lexer rule
       and look for another token.  nextToken() knows to keep looking when
       a lexer rule finishes with token set to SKIP_TOKEN.  Recall that
       if token==undefined at end of any token rule, it creates one for you
       and emits it.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function skip()
extends: Lexer
