### YamlMime:UniversalReference
items:
  - uid: botbuilder-lg.TemplateNameContext
    name: TemplateNameContext
    fullName: TemplateNameContext
    children:
      - botbuilder-lg.TemplateNameContext.accept
      - botbuilder-lg.TemplateNameContext.addChild_1
      - botbuilder-lg.TemplateNameContext.addChild
      - botbuilder-lg.TemplateNameContext.addChild_2
      - botbuilder-lg.TemplateNameContext.addErrorNode
      - botbuilder-lg.TemplateNameContext.altNumber
      - botbuilder-lg.TemplateNameContext.childCount
      - botbuilder-lg.TemplateNameContext.children
      - botbuilder-lg.TemplateNameContext.copyFrom
      - botbuilder-lg.TemplateNameContext.depth
      - botbuilder-lg.TemplateNameContext.DOT
      - botbuilder-lg.TemplateNameContext.DOT_1
      - botbuilder-lg.TemplateNameContext.emptyContext
      - botbuilder-lg.TemplateNameContext.enterRule
      - botbuilder-lg.TemplateNameContext.exception
      - botbuilder-lg.TemplateNameContext.exitRule
      - botbuilder-lg.TemplateNameContext.getChild
      - botbuilder-lg.TemplateNameContext.getChild_1
      - botbuilder-lg.TemplateNameContext.getChildContext
      - botbuilder-lg.TemplateNameContext.getRuleContext
      - botbuilder-lg.TemplateNameContext.getRuleContexts
      - botbuilder-lg.TemplateNameContext.getToken
      - botbuilder-lg.TemplateNameContext.getTokens
      - botbuilder-lg.TemplateNameContext.IDENTIFIER
      - botbuilder-lg.TemplateNameContext.IDENTIFIER_1
      - botbuilder-lg.TemplateNameContext.invokingState
      - botbuilder-lg.TemplateNameContext.isEmpty
      - botbuilder-lg.TemplateNameContext.parent
      - botbuilder-lg.TemplateNameContext.payload
      - botbuilder-lg.TemplateNameContext.removeLastChild
      - botbuilder-lg.TemplateNameContext.ruleContext
      - botbuilder-lg.TemplateNameContext.ruleIndex
      - botbuilder-lg.TemplateNameContext.sourceInterval
      - botbuilder-lg.TemplateNameContext.start
      - botbuilder-lg.TemplateNameContext.stop
      - botbuilder-lg.TemplateNameContext.constructor
      - botbuilder-lg.TemplateNameContext.text
      - botbuilder-lg.TemplateNameContext.toInfoString
      - botbuilder-lg.TemplateNameContext.toString
      - botbuilder-lg.TemplateNameContext.toString_1
      - botbuilder-lg.TemplateNameContext.toString_3
      - botbuilder-lg.TemplateNameContext.toString_2
      - botbuilder-lg.TemplateNameContext.toString_4
      - botbuilder-lg.TemplateNameContext.toStringTree_2
      - botbuilder-lg.TemplateNameContext.toStringTree
      - botbuilder-lg.TemplateNameContext.toStringTree_1
      - botbuilder-lg.TemplateNameContext.tryGetChild
      - botbuilder-lg.TemplateNameContext.tryGetRuleContext
      - botbuilder-lg.TemplateNameContext.tryGetToken
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: ParserRuleContext
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.accept
    name: accept(LGFileParserVisitor<Result>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function accept<Result>(visitor: LGFileParserVisitor<Result>)'
      parameters:
        - id: visitor
          type:
            - botbuilder-lg.LGFileParserVisitor<Result>
          description: ''
      return:
        type:
          - Result
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.addChild_1
    name: addChild(RuleContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addChild(ruleInvocation: RuleContext)'
      parameters:
        - id: ruleInvocation
          type:
            - RuleContext
          description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.addChild
    name: addChild(TerminalNode)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addChild(t: TerminalNode)'
      parameters:
        - id: t
          type:
            - TerminalNode
          description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.addChild_2
    name: addChild(Token)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addChild(matchedToken: Token)'
      parameters:
        - id: matchedToken
          type:
            - Token
          description: ''
      return:
        type:
          - TerminalNode
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.addErrorNode
    name: addErrorNode(Token)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addErrorNode(badToken: Token)'
      parameters:
        - id: badToken
          type:
            - Token
          description: ''
      return:
        type:
          - ErrorNode
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.altNumber
    name: altNumber
    fullName: altNumber
    children: []
    langs:
      - typeScript
    type: property
    summary: |
      Set the outer alternative number for this context node. Default
       implementation does nothing to avoid backing field overhead for
       trees that don't need it.  Create
       a subclass of ParserRuleContext with backing field and set
       option contextSuperClass.
       @since 4.5.3
    syntax:
      content: 'altNumber: number'
      return:
        type:
          - number
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.childCount
    name: childCount
    fullName: childCount
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'childCount: number'
      return:
        type:
          - number
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.children
    name: children
    fullName: children
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      If we are debugging or building a parse tree for a visitor,
       we need to track all of the tokens and rule invocations associated
       with this rule's context. This is empty for parsing w/o tree constr.
       operation because we don't the need to track the details about
       how we parse this rule.
    optional: true
    syntax:
      content: 'children?: ParseTree[]'
      return:
        type:
          - 'ParseTree[]'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.copyFrom
    name: copyFrom(ParserRuleContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      COPY a ctx (I'm deliberately not using copy constructor) to avoid
      confusion with creating node with parent. Does not copy children.
      This is used in the generated parser code to flip a generic XContext
      node for rule X to a YContext for alt label Y. In that sense, it is not
      really a generic copy function.

      If we do an error sync() at start of a rule, we might add error nodes
      to the generic XContext so this function must copy those nodes to the
      YContext as well else they are lost!
    syntax:
      content: 'function copyFrom(ctx: ParserRuleContext)'
      parameters:
        - id: ctx
          type:
            - ParserRuleContext
          description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.depth
    name: depth()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function depth()
      parameters: []
      return:
        type:
          - number
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.DOT
    name: DOT()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function DOT()
      parameters: []
      return:
        type:
          - 'TerminalNode[]'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.DOT_1
    name: DOT(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function DOT(i: number)'
      parameters:
        - id: i
          type:
            - number
          description: ''
      return:
        type:
          - TerminalNode
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.emptyContext
    name: emptyContext()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: static function emptyContext()
      parameters: []
      return:
        type:
          - ParserRuleContext
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.enterRule
    name: enterRule(LGFileParserListener)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function enterRule(listener: LGFileParserListener)'
      parameters:
        - id: listener
          type:
            - botbuilder-lg.LGFileParserListener
          description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.exception
    name: exception
    fullName: exception
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      The exception that forced this rule to return. If the rule successfully
      completed, this is {@code null}.
    optional: true
    syntax:
      content: 'exception?: RecognitionException'
      return:
        type:
          - RecognitionException
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.exitRule
    name: exitRule(LGFileParserListener)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function exitRule(listener: LGFileParserListener)'
      parameters:
        - id: listener
          type:
            - botbuilder-lg.LGFileParserListener
          description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.getChild
    name: getChild(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getChild(i: number)'
      parameters:
        - id: i
          type:
            - number
          description: ''
      return:
        type:
          - ParseTree
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.getChild_1
    name: 'getChild(number, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getChild<T>(i: number, ctxType: Object)'
      parameters:
        - id: i
          type:
            - number
          description: ''
        - id: ctxType
          type:
            - Object
          description: ''
      return:
        type:
          - T
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.getChildContext
    name: 'getChildContext(RuleContext, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        static function getChildContext(parent: RuleContext, invokingState:
        number)
      parameters:
        - id: parent
          type:
            - RuleContext
          description: ''
        - id: invokingState
          type:
            - number
          description: ''
      return:
        type:
          - RuleContext
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.getRuleContext
    name: 'getRuleContext(number, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getRuleContext<T>(i: number, ctxType: Object)'
      parameters:
        - id: i
          type:
            - number
          description: ''
        - id: ctxType
          type:
            - Object
          description: ''
      return:
        type:
          - T
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.getRuleContexts
    name: getRuleContexts(Object)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getRuleContexts<T>(ctxType: Object)'
      parameters:
        - id: ctxType
          type:
            - Object
          description: ''
      return:
        type:
          - 'T[]'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.getToken
    name: 'getToken(number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getToken(ttype: number, i: number)'
      parameters:
        - id: ttype
          type:
            - number
          description: ''
        - id: i
          type:
            - number
          description: ''
      return:
        type:
          - TerminalNode
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.getTokens
    name: getTokens(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getTokens(ttype: number)'
      parameters:
        - id: ttype
          type:
            - number
          description: ''
      return:
        type:
          - 'TerminalNode[]'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.IDENTIFIER
    name: IDENTIFIER()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function IDENTIFIER()
      parameters: []
      return:
        type:
          - 'TerminalNode[]'
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.IDENTIFIER_1
    name: IDENTIFIER(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function IDENTIFIER(i: number)'
      parameters:
        - id: i
          type:
            - number
          description: ''
      return:
        type:
          - TerminalNode
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.invokingState
    name: invokingState
    fullName: invokingState
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'invokingState: number'
      return:
        type:
          - number
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.isEmpty
    name: isEmpty
    fullName: isEmpty
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      A context is empty if there is no invoking state; meaning nobody called
       current context.
    syntax:
      content: 'isEmpty: boolean'
      return:
        type:
          - boolean
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.parent
    name: parent
    fullName: parent
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'parent: ParserRuleContext | undefined'
      return:
        type:
          - ParserRuleContext | undefined
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.payload
    name: payload
    fullName: payload
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'payload: RuleContext'
      return:
        type:
          - RuleContext
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.removeLastChild
    name: removeLastChild()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Used by enterOuterAlt to toss out a RuleContext previously added as
       we entered a rule. If we have # label, we will need to remove
       generic ruleContext object.
    syntax:
      content: function removeLastChild()
      parameters: []
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.ruleContext
    name: ruleContext
    fullName: ruleContext
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'ruleContext: this'
      return:
        type:
          - this
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.ruleIndex
    name: ruleIndex
    fullName: ruleIndex
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'ruleIndex: number'
      return:
        type:
          - number
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.sourceInterval
    name: sourceInterval
    fullName: sourceInterval
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'sourceInterval: Interval'
      return:
        type:
          - Interval
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.start
    name: start
    fullName: start
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Get the initial token in this context.

      Note that the range from start to stop is inclusive, so for rules that do
      not consume anything

      (for example, zero length or error productions) this token may exceed
      stop.
    syntax:
      content: 'start: Token'
      return:
        type:
          - Token
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.stop
    name: stop
    fullName: stop
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Get the final token in this context.

      Note that the range from start to stop is inclusive, so for rules that do
      not consume anything

      (for example, zero length or error productions) this token may precede
      start.
    syntax:
      content: 'stop: Token | undefined'
      return:
        type:
          - Token | undefined
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.constructor
    name: 'TemplateNameContext(ParserRuleContext | undefined, number)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new TemplateNameContext(parent: ParserRuleContext | undefined,
        invokingState: number)
      parameters:
        - id: parent
          type:
            - ParserRuleContext | undefined
          description: ''
        - id: invokingState
          type:
            - number
          description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.text
    name: text
    fullName: text
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Return the combined text of all child nodes. This method only considers
       tokens which have been added to the parse tree.
       <p>
       Since tokens on hidden channels (e.g. whitespace or comments) are not
       added to the parse trees, they will not appear in the output of this
       method.
    syntax:
      content: 'text: string'
      return:
        type:
          - string
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.toInfoString
    name: toInfoString(Parser)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Used for rule context info debugging during parse-time, not so much for
      ATN debugging
    syntax:
      content: 'function toInfoString(recognizer: Parser)'
      parameters:
        - id: recognizer
          type:
            - Parser
          description: ''
      return:
        type:
          - string
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.toString
    name: toString()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function toString()
      parameters: []
      return:
        type:
          - string
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.toString_1
    name: 'toString(Recognizer<any, any> | undefined)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function toString(recog: Recognizer<any, any> | undefined)'
      parameters:
        - id: recog
          type:
            - 'Recognizer<any, any> | undefined'
          description: ''
      return:
        type:
          - string
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.toString_3
    name: 'toString(Recognizer<any, any> | undefined, RuleContext | undefined)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function toString(recog: Recognizer<any, any> | undefined, stop:
        RuleContext | undefined)
      parameters:
        - id: recog
          type:
            - 'Recognizer<any, any> | undefined'
          description: ''
        - id: stop
          type:
            - RuleContext | undefined
          description: ''
      return:
        type:
          - string
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.toString_2
    name: 'toString(string[] | undefined)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function toString(ruleNames: string[] | undefined)'
      parameters:
        - id: ruleNames
          type:
            - 'string[] | undefined'
          description: ''
      return:
        type:
          - string
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.toString_4
    name: 'toString(string[] | undefined, RuleContext | undefined)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function toString(ruleNames: string[] | undefined, stop: RuleContext |
        undefined)
      parameters:
        - id: ruleNames
          type:
            - 'string[] | undefined'
          description: ''
        - id: stop
          type:
            - RuleContext | undefined
          description: ''
      return:
        type:
          - string
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.toStringTree_2
    name: toStringTree()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Print out a whole tree, not just a node, in LISP format
       (root child1 .. childN). Print just a node if this is a leaf.
       We have to know the recognizer so we can get rule names.
    syntax:
      content: function toStringTree()
      parameters: []
      return:
        type:
          - string
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.toStringTree
    name: toStringTree(Parser)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Print out a whole tree, not just a node, in LISP format
       (root child1 .. childN). Print just a node if this is a leaf.
       We have to know the recognizer so we can get rule names.
    syntax:
      content: 'function toStringTree(recog: Parser)'
      parameters:
        - id: recog
          type:
            - Parser
          description: ''
      return:
        type:
          - string
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.toStringTree_1
    name: 'toStringTree(string[] | undefined)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Print out a whole tree, not just a node, in LISP format
       (root child1 .. childN). Print just a node if this is a leaf.
    syntax:
      content: 'function toStringTree(ruleNames: string[] | undefined)'
      parameters:
        - id: ruleNames
          type:
            - 'string[] | undefined'
          description: ''
      return:
        type:
          - string
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.tryGetChild
    name: 'tryGetChild(number, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function tryGetChild<T>(i: number, ctxType: Object)'
      parameters:
        - id: i
          type:
            - number
          description: ''
        - id: ctxType
          type:
            - Object
          description: ''
      return:
        type:
          - T | undefined
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.tryGetRuleContext
    name: 'tryGetRuleContext(number, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function tryGetRuleContext<T>(i: number, ctxType: Object)'
      parameters:
        - id: i
          type:
            - number
          description: ''
        - id: ctxType
          type:
            - Object
          description: ''
      return:
        type:
          - T | undefined
        description: ''
    package: botbuilder-lg
  - uid: botbuilder-lg.TemplateNameContext.tryGetToken
    name: 'tryGetToken(number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function tryGetToken(ttype: number, i: number)'
      parameters:
        - id: ttype
          type:
            - number
          description: ''
        - id: i
          type:
            - number
          description: ''
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botbuilder-lg
references:
  - uid: botbuilder-lg.LGFileParserVisitor<Result>
    name: LGFileParserVisitor<Result>
    spec.typeScript:
      - name: LGFileParserVisitor
        fullName: LGFileParserVisitor
        uid: botbuilder-lg.LGFileParserVisitor
      - name: <Result>
        fullName: <Result>
  - uid: botbuilder-lg.LGFileParserListener
    name: LGFileParserListener
    spec.typeScript:
      - name: LGFileParserListener
        fullName: LGFileParserListener
        uid: botbuilder-lg.LGFileParserListener
