### YamlMime:TSType
name: TemplateBodyLineContext
uid: botbuilder-lg.TemplateBodyLineContext
package: botbuilder-lg
summary: ''
fullName: TemplateBodyLineContext
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: 'TemplateBodyLineContext(ParserRuleContext | undefined, number)'
    uid: botbuilder-lg.TemplateBodyLineContext.constructor
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new TemplateBodyLineContext(parent: ParserRuleContext | undefined,
        invokingState: number)
      parameters:
        - id: parent
          type: ParserRuleContext | undefined
          description: ''
        - id: invokingState
          type: number
          description: ''
properties:
  - name: altNumber
    uid: botbuilder-lg.TemplateBodyLineContext.altNumber
    package: botbuilder-lg
    summary: |
      Set the outer alternative number for this context node. Default
       implementation does nothing to avoid backing field overhead for
       trees that don't need it.  Create
       a subclass of ParserRuleContext with backing field and set
       option contextSuperClass.
       @since 4.5.3
    fullName: altNumber
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'altNumber: number'
      return:
        type: number
        description: ''
  - name: childCount
    uid: botbuilder-lg.TemplateBodyLineContext.childCount
    package: botbuilder-lg
    summary: ''
    fullName: childCount
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'childCount: number'
      return:
        type: number
        description: ''
  - name: children
    uid: botbuilder-lg.TemplateBodyLineContext.children
    package: botbuilder-lg
    summary: |-
      If we are debugging or building a parse tree for a visitor,
       we need to track all of the tokens and rule invocations associated
       with this rule's context. This is empty for parsing w/o tree constr.
       operation because we don't the need to track the details about
       how we parse this rule.
    fullName: children
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'children?: ParseTree[]'
      return:
        type: 'ParseTree[]'
        description: ''
  - name: exception
    uid: botbuilder-lg.TemplateBodyLineContext.exception
    package: botbuilder-lg
    summary: |-
      The exception that forced this rule to return. If the rule successfully
      completed, this is `undefined`.
    fullName: exception
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'exception?: RecognitionException'
      return:
        type: RecognitionException
        description: ''
  - name: invokingState
    uid: botbuilder-lg.TemplateBodyLineContext.invokingState
    package: botbuilder-lg
    summary: ''
    fullName: invokingState
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'invokingState: number'
      return:
        type: number
        description: ''
  - name: isEmpty
    uid: botbuilder-lg.TemplateBodyLineContext.isEmpty
    package: botbuilder-lg
    summary: |-
      A context is empty if there is no invoking state; meaning nobody called
       current context.
    fullName: isEmpty
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'isEmpty: boolean'
      return:
        type: boolean
        description: ''
  - name: parent
    uid: botbuilder-lg.TemplateBodyLineContext.parent
    package: botbuilder-lg
    summary: ''
    fullName: parent
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'parent: ParserRuleContext | undefined'
      return:
        type: ParserRuleContext | undefined
        description: ''
  - name: payload
    uid: botbuilder-lg.TemplateBodyLineContext.payload
    package: botbuilder-lg
    summary: ''
    fullName: payload
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'payload: RuleContext'
      return:
        type: RuleContext
        description: ''
  - name: ruleContext
    uid: botbuilder-lg.TemplateBodyLineContext.ruleContext
    package: botbuilder-lg
    summary: ''
    fullName: ruleContext
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ruleContext: this'
      return:
        type: this
        description: ''
  - name: ruleIndex
    uid: botbuilder-lg.TemplateBodyLineContext.ruleIndex
    package: botbuilder-lg
    summary: ''
    fullName: ruleIndex
    isPreview: false
    isDeprecated: false
    syntax:
      content: number ruleIndex
      return:
        type: number
        description: ''
  - name: sourceInterval
    uid: botbuilder-lg.TemplateBodyLineContext.sourceInterval
    package: botbuilder-lg
    summary: ''
    fullName: sourceInterval
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'sourceInterval: Interval'
      return:
        type: Interval
        description: ''
  - name: start
    uid: botbuilder-lg.TemplateBodyLineContext.start
    package: botbuilder-lg
    summary: >-
      Get the initial token in this context.

      Note that the range from start to stop is inclusive, so for rules that do
      not consume anything

      (for example, zero length or error productions) this token may exceed
      stop.
    fullName: start
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'start: Token'
      return:
        type: Token
        description: ''
  - name: stop
    uid: botbuilder-lg.TemplateBodyLineContext.stop
    package: botbuilder-lg
    summary: >-
      Get the final token in this context.

      Note that the range from start to stop is inclusive, so for rules that do
      not consume anything

      (for example, zero length or error productions) this token may precede
      start.
    fullName: stop
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'stop: Token | undefined'
      return:
        type: Token | undefined
        description: ''
  - name: text
    uid: botbuilder-lg.TemplateBodyLineContext.text
    package: botbuilder-lg
    summary: |
      Return the combined text of all child nodes. This method only considers
       tokens which have been added to the parse tree.
       Since tokens on hidden channels (e.g. whitespace or comments) are not
       added to the parse trees, they will not appear in the output of this
       method.
    fullName: text
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'text: string'
      return:
        type: string
        description: ''
methods:
  - name: accept<Result>(LGFileParserVisitor<Result>)
    uid: botbuilder-lg.TemplateBodyLineContext.accept
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function accept<Result>(visitor: LGFileParserVisitor<Result>)'
      parameters:
        - id: visitor
          type: <xref uid="botbuilder-lg.LGFileParserVisitor" />&lt;Result&gt;
          description: ''
      return:
        type: Result
        description: ''
  - name: addAnyChild<T>(T)
    uid: botbuilder-lg.TemplateBodyLineContext.addAnyChild
    package: botbuilder-lg
    summary: |
      Add a parse tree node to this as a child.  Works for
       internal and leaf nodes. Does not set parent link;
       other add methods must do that. Other addChild methods
       call this.
       We cannot set the parent pointer of the incoming node
       because the existing interfaces do not have a setParent()
       method and I don't want to break backward compatibility for this.

       @since 4.7
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function addAnyChild<T>(t: T)'
      parameters:
        - id: t
          type: T
          description: ''
      return:
        type: T
        description: ''
  - name: addChild(RuleContext)
    uid: botbuilder-lg.TemplateBodyLineContext.addChild_1
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function addChild(ruleInvocation: RuleContext)'
      parameters:
        - id: ruleInvocation
          type: RuleContext
          description: ''
  - name: addChild(TerminalNode)
    uid: botbuilder-lg.TemplateBodyLineContext.addChild
    package: botbuilder-lg
    summary: Add a token leaf node child and force its parent to be this node.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function addChild(t: TerminalNode)'
      parameters:
        - id: t
          type: TerminalNode
          description: ''
  - name: addChild(Token)
    uid: botbuilder-lg.TemplateBodyLineContext.addChild_2
    package: botbuilder-lg
    summary: >-
      Add a child to this node based upon matchedToken. It

      creates a TerminalNodeImpl rather than using

      [Token)](xref:Parser%23createTerminalNode(ParserRuleContext%2C). I'm
      leaving this

      in for compatibility but the parser doesn't use this anymore.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function addChild(matchedToken: Token)'
      parameters:
        - id: matchedToken
          type: Token
          description: ''
      return:
        type: TerminalNode
        description: ''
  - name: addErrorNode(ErrorNode)
    uid: botbuilder-lg.TemplateBodyLineContext.addErrorNode
    package: botbuilder-lg
    summary: Add an error node child and force its parent to be this node.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function addErrorNode(errorNode: ErrorNode)'
      parameters:
        - id: errorNode
          type: ErrorNode
          description: ''
      return:
        type: ErrorNode
        description: ''
  - name: addErrorNode(Token)
    uid: botbuilder-lg.TemplateBodyLineContext.addErrorNode_1
    package: botbuilder-lg
    summary: >-
      Add a child to this node based upon badToken. It

      creates a ErrorNode rather than using

      [Token)](xref:Parser%23createErrorNode(ParserRuleContext%2C). I'm leaving
      this

      in for compatibility but the parser doesn't use this anymore.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function addErrorNode(badToken: Token)'
      parameters:
        - id: badToken
          type: Token
          description: ''
      return:
        type: ErrorNode
        description: ''
  - name: copyFrom(ParserRuleContext)
    uid: botbuilder-lg.TemplateBodyLineContext.copyFrom
    package: botbuilder-lg
    summary: |
      COPY a ctx (I'm deliberately not using copy constructor) to avoid
      confusion with creating node with parent. Does not copy children
      (except error leaves).
      This is used in the generated parser code to flip a generic XContext
      node for rule X to a YContext for alt label Y. In that sense, it is not
      really a generic copy function.

      If we do an error sync() at start of a rule, we might add error nodes
      to the generic XContext so this function must copy those nodes to the
      YContext as well else they are lost!
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function copyFrom(ctx: ParserRuleContext)'
      parameters:
        - id: ctx
          type: ParserRuleContext
          description: ''
  - name: depth()
    uid: botbuilder-lg.TemplateBodyLineContext.depth
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function depth()
      return:
        type: number
        description: ''
  - name: emptyContext()
    uid: botbuilder-lg.TemplateBodyLineContext.emptyContext
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: static function emptyContext()
      return:
        type: ParserRuleContext
        description: ''
  - name: enterRule(LGFileParserListener)
    uid: botbuilder-lg.TemplateBodyLineContext.enterRule
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function enterRule(listener: LGFileParserListener)'
      parameters:
        - id: listener
          type: <xref uid="botbuilder-lg.LGFileParserListener" />
          description: ''
  - name: ESCAPE_CHARACTER()
    uid: botbuilder-lg.TemplateBodyLineContext.ESCAPE_CHARACTER
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function ESCAPE_CHARACTER()
      return:
        type: 'TerminalNode[]'
        description: ''
  - name: ESCAPE_CHARACTER(number)
    uid: botbuilder-lg.TemplateBodyLineContext.ESCAPE_CHARACTER_1
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function ESCAPE_CHARACTER(i: number)'
      parameters:
        - id: i
          type: number
          description: ''
      return:
        type: TerminalNode
        description: ''
  - name: exitRule(LGFileParserListener)
    uid: botbuilder-lg.TemplateBodyLineContext.exitRule
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function exitRule(listener: LGFileParserListener)'
      parameters:
        - id: listener
          type: <xref uid="botbuilder-lg.LGFileParserListener" />
          description: ''
  - name: getChild(number)
    uid: botbuilder-lg.TemplateBodyLineContext.getChild
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getChild(i: number)'
      parameters:
        - id: i
          type: number
          description: ''
      return:
        type: ParseTree
        description: ''
  - name: 'getChild<T>(number, Object)'
    uid: botbuilder-lg.TemplateBodyLineContext.getChild_1
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getChild<T>(i: number, ctxType: Object)'
      parameters:
        - id: i
          type: number
          description: ''
        - id: ctxType
          type: Object
          description: ''
      return:
        type: T
        description: ''
  - name: 'getChildContext(RuleContext, number)'
    uid: botbuilder-lg.TemplateBodyLineContext.getChildContext
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function getChildContext(parent: RuleContext, invokingState:
        number)
      parameters:
        - id: parent
          type: RuleContext
          description: ''
        - id: invokingState
          type: number
          description: ''
      return:
        type: RuleContext
        description: ''
  - name: 'getRuleContext<T>(number, Object)'
    uid: botbuilder-lg.TemplateBodyLineContext.getRuleContext
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getRuleContext<T>(i: number, ctxType: Object)'
      parameters:
        - id: i
          type: number
          description: ''
        - id: ctxType
          type: Object
          description: ''
      return:
        type: T
        description: ''
  - name: getRuleContexts<T>(Object)
    uid: botbuilder-lg.TemplateBodyLineContext.getRuleContexts
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getRuleContexts<T>(ctxType: Object)'
      parameters:
        - id: ctxType
          type: Object
          description: ''
      return:
        type: 'T[]'
        description: ''
  - name: 'getToken(number, number)'
    uid: botbuilder-lg.TemplateBodyLineContext.getToken
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getToken(ttype: number, i: number)'
      parameters:
        - id: ttype
          type: number
          description: ''
        - id: i
          type: number
          description: ''
      return:
        type: TerminalNode
        description: ''
  - name: getTokens(number)
    uid: botbuilder-lg.TemplateBodyLineContext.getTokens
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getTokens(ttype: number)'
      parameters:
        - id: ttype
          type: number
          description: ''
      return:
        type: 'TerminalNode[]'
        description: ''
  - name: MULTILINE_PREFIX()
    uid: botbuilder-lg.TemplateBodyLineContext.MULTILINE_PREFIX
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function MULTILINE_PREFIX()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: MULTILINE_SUFFIX()
    uid: botbuilder-lg.TemplateBodyLineContext.MULTILINE_SUFFIX
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function MULTILINE_SUFFIX()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: MULTILINE_TEXT()
    uid: botbuilder-lg.TemplateBodyLineContext.MULTILINE_TEXT
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function MULTILINE_TEXT()
      return:
        type: 'TerminalNode[]'
        description: ''
  - name: MULTILINE_TEXT(number)
    uid: botbuilder-lg.TemplateBodyLineContext.MULTILINE_TEXT_1
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function MULTILINE_TEXT(i: number)'
      parameters:
        - id: i
          type: number
          description: ''
      return:
        type: TerminalNode
        description: ''
  - name: NEWLINE()
    uid: botbuilder-lg.TemplateBodyLineContext.NEWLINE
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function NEWLINE()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: removeLastChild()
    uid: botbuilder-lg.TemplateBodyLineContext.removeLastChild
    package: botbuilder-lg
    summary: |-
      Used by enterOuterAlt to toss out a RuleContext previously added as
       we entered a rule. If we have # label, we will need to remove
       generic ruleContext object.
    isPreview: false
    isDeprecated: false
    syntax:
      content: function removeLastChild()
  - name: setParent(RuleContext)
    uid: botbuilder-lg.TemplateBodyLineContext.setParent
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setParent(parent: RuleContext)'
      parameters:
        - id: parent
          type: RuleContext
          description: ''
  - name: TEMPLATE_BODY()
    uid: botbuilder-lg.TemplateBodyLineContext.TEMPLATE_BODY
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function TEMPLATE_BODY()
      return:
        type: TerminalNode | undefined
        description: ''
  - name: toInfoString(Parser)
    uid: botbuilder-lg.TemplateBodyLineContext.toInfoString
    package: botbuilder-lg
    summary: >-
      Used for rule context info debugging during parse-time, not so much for
      ATN debugging
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function toInfoString(recognizer: Parser)'
      parameters:
        - id: recognizer
          type: Parser
          description: ''
      return:
        type: string
        description: ''
  - name: toString()
    uid: botbuilder-lg.TemplateBodyLineContext.toString
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function toString()
      return:
        type: string
        description: ''
  - name: 'toString(Recognizer<any, any> | undefined)'
    uid: botbuilder-lg.TemplateBodyLineContext.toString_1
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function toString(recog: Recognizer<any, any> | undefined)'
      parameters:
        - id: recog
          type: 'Recognizer&lt;any, any&gt; | undefined'
          description: ''
      return:
        type: string
        description: ''
  - name: 'toString(Recognizer<any, any> | undefined, RuleContext | undefined)'
    uid: botbuilder-lg.TemplateBodyLineContext.toString_3
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function toString(recog: Recognizer<any, any> | undefined, stop:
        RuleContext | undefined)
      parameters:
        - id: recog
          type: 'Recognizer&lt;any, any&gt; | undefined'
          description: ''
        - id: stop
          type: RuleContext | undefined
          description: ''
      return:
        type: string
        description: ''
  - name: 'toString(string[] | undefined)'
    uid: botbuilder-lg.TemplateBodyLineContext.toString_2
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function toString(ruleNames: string[] | undefined)'
      parameters:
        - id: ruleNames
          type: 'string[] | undefined'
          description: ''
      return:
        type: string
        description: ''
  - name: 'toString(string[] | undefined, RuleContext | undefined)'
    uid: botbuilder-lg.TemplateBodyLineContext.toString_4
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function toString(ruleNames: string[] | undefined, stop: RuleContext |
        undefined)
      parameters:
        - id: ruleNames
          type: 'string[] | undefined'
          description: ''
        - id: stop
          type: RuleContext | undefined
          description: ''
      return:
        type: string
        description: ''
  - name: toStringTree()
    uid: botbuilder-lg.TemplateBodyLineContext.toStringTree_2
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function toStringTree()
      return:
        type: string
        description: ''
  - name: toStringTree(Parser)
    uid: botbuilder-lg.TemplateBodyLineContext.toStringTree
    package: botbuilder-lg
    summary: |-
      Print out a whole tree, not just a node, in LISP format
       (root child1 .. childN). Print just a node if this is a leaf.
       We have to know the recognizer so we can get rule names.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function toStringTree(recog: Parser)'
      parameters:
        - id: recog
          type: Parser
          description: ''
      return:
        type: string
        description: ''
  - name: 'toStringTree(string[] | undefined)'
    uid: botbuilder-lg.TemplateBodyLineContext.toStringTree_1
    package: botbuilder-lg
    summary: |-
      Print out a whole tree, not just a node, in LISP format
       (root child1 .. childN). Print just a node if this is a leaf.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function toStringTree(ruleNames: string[] | undefined)'
      parameters:
        - id: ruleNames
          type: 'string[] | undefined'
          description: ''
      return:
        type: string
        description: ''
  - name: 'tryGetChild<T>(number, Object)'
    uid: botbuilder-lg.TemplateBodyLineContext.tryGetChild
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function tryGetChild<T>(i: number, ctxType: Object)'
      parameters:
        - id: i
          type: number
          description: ''
        - id: ctxType
          type: Object
          description: ''
      return:
        type: T | undefined
        description: ''
  - name: 'tryGetRuleContext<T>(number, Object)'
    uid: botbuilder-lg.TemplateBodyLineContext.tryGetRuleContext
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function tryGetRuleContext<T>(i: number, ctxType: Object)'
      parameters:
        - id: i
          type: number
          description: ''
        - id: ctxType
          type: Object
          description: ''
      return:
        type: T | undefined
        description: ''
  - name: 'tryGetToken(number, number)'
    uid: botbuilder-lg.TemplateBodyLineContext.tryGetToken
    package: botbuilder-lg
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function tryGetToken(ttype: number, i: number)'
      parameters:
        - id: ttype
          type: number
          description: ''
        - id: i
          type: number
          description: ''
      return:
        type: TerminalNode | undefined
        description: ''
extends: ParserRuleContext
