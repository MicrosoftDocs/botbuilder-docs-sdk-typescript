### YamlMime:TSType
name: GetMember
uid: botbuilder-dialogs-adaptive-teams.GetMember
package: botbuilder-dialogs-adaptive-teams
summary: Calls `TeamsInfo.getMember` and sets the result to a memory property.
fullName: GetMember
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: GetMember(string)
    uid: botbuilder-dialogs-adaptive-teams.GetMember.constructor
    package: botbuilder-dialogs-adaptive-teams
    summary: >-
      Creates a new instance of the [Dialog](xref:botbuilder-dialogs.Dialog)
      class.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'new GetMember(dialogId?: string)'
      parameters:
        - id: dialogId
          type: string
          description: Optional. unique ID of the dialog.
properties:
  - name: $kind
    uid: botbuilder-dialogs-adaptive-teams.GetMember.$kind
    package: botbuilder-dialogs-adaptive-teams
    summary: Class identifier.
    fullName: $kind
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static $kind: "Teams.GetMember" = "Teams.GetMember"'
      return:
        description: ''
        type: '"<xref uid="Teams.GetMember" />"'
  - name: disabled
    uid: botbuilder-dialogs-adaptive-teams.GetMember.disabled
    package: botbuilder-dialogs-adaptive-teams
    summary: >+
      Gets or sets an optional expression which if is true will disable this
      action.


      **Example**


      ```ts

      "user.age > 18".

      ```

    fullName: disabled
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'disabled?: BoolExpression'
      return:
        description: ''
        type: BoolExpression
  - name: id
    uid: botbuilder-dialogs-adaptive-teams.GetMember.id
    package: botbuilder-dialogs-adaptive-teams
    summary: Unique ID of the dialog.
    fullName: id
    remarks: ''
    isDeprecated: false
    syntax:
      content: string id
      return:
        description: ''
        type: string
  - name: memberId
    uid: botbuilder-dialogs-adaptive-teams.GetMember.memberId
    package: botbuilder-dialogs-adaptive-teams
    summary: Gets or sets the expression to get the value to use for member id.
    fullName: memberId
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'memberId: StringExpression'
      return:
        description: ''
        type: StringExpression
  - name: property
    uid: botbuilder-dialogs-adaptive-teams.GetMember.property
    package: botbuilder-dialogs-adaptive-teams
    summary: Gets or sets property path to put the value in.
    fullName: property
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'property?: StringExpression'
      return:
        description: ''
        type: StringExpression
  - name: telemetryClient
    uid: botbuilder-dialogs-adaptive-teams.GetMember.telemetryClient
    package: botbuilder-dialogs-adaptive-teams
    summary: Gets the telemetry client for this dialog.
    fullName: telemetryClient
    remarks: ''
    isDeprecated: false
    syntax:
      content: BotTelemetryClient telemetryClient
      return:
        description: ''
        type: BotTelemetryClient
inheritedProperties:
  - name: EndOfTurn
    uid: botbuilder-dialogs-adaptive-teams.GetMember.EndOfTurn
    package: botbuilder-dialogs-adaptive-teams
    summary: Gets a default end-of-turn result.
    fullName: EndOfTurn
    remarks: >-
      This result indicates that a dialog (or a logical step within a dialog)
      has completed

      processing for the current turn, is still active, and is waiting for more
      input.
    isDeprecated: false
    syntax:
      content: 'static EndOfTurn: DialogTurnResult<any>'
      return:
        description: ''
        type: DialogTurnResult&lt;any&gt;
    inheritanceDescription: <b>Inherited From</b> Dialog.EndOfTurn
inheritedMethods:
  - name: configure(Record<string, unknown>)
    uid: botbuilder-dialogs-adaptive-teams.GetMember.configure
    package: botbuilder-dialogs-adaptive-teams
    summary: Fluent method for configuring the object.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function configure(config: Record<string, unknown>): GetMember'
      parameters:
        - id: config
          type: Record&lt;string, unknown&gt;
          description: Configuration settings to apply.
      return:
        description: ''
        type: <xref uid="botbuilder-dialogs-adaptive-teams.GetMember" />
    inheritanceDescription: <b>Inherited From</b> Dialog.configure
  - name: continueDialog(DialogContext)
    uid: botbuilder-dialogs-adaptive-teams.GetMember.continueDialog
    package: botbuilder-dialogs-adaptive-teams
    summary: When overridden in a derived class, continues the dialog.
    remarks: >-
      Derived dialogs that support multiple-turn conversations should override
      this method.

      By default, this method signals that the dialog is complete and returns.


      The [DialogContext](xref:botbuilder-dialogs.DialogContext) calls this
      method when it continues

      the dialog.


      To signal to the dialog context that this dialog has completed, await

      [DialogContext.endDialog](xref:botbuilder-dialogs.DialogContext.endDialog)
      before exiting this method.


      **See also**

      -
      [DialogContext.continueDialog](xref:botbuilder-dialogs.DialogContext.continueDialog)
    isDeprecated: false
    syntax:
      content: >-
        function continueDialog(dc: DialogContext):
        Promise<DialogTurnResult<any>>
      parameters:
        - id: dc
          type: DialogContext
          description: The context for the current dialog turn.
      return:
        description: ''
        type: Promise&lt;DialogTurnResult&lt;any&gt;&gt;
    inheritanceDescription: <b>Inherited From</b> Dialog.continueDialog
  - name: endDialog(TurnContext, DialogInstance<any>, DialogReason)
    uid: botbuilder-dialogs-adaptive-teams.GetMember.endDialog
    package: botbuilder-dialogs-adaptive-teams
    summary: >-
      When overridden in a derived class, performs clean up for the dialog
      before it ends.
    remarks: >-
      Derived dialogs that need to perform logging or cleanup before ending
      should override this method.

      By default, this method has no effect.


      The [DialogContext](xref:botbuilder-dialogs.DialogContext) calls this
      method when the current

      dialog is ending.


      **See also**

      -
      [DialogContext.cancelAllDialogs](xref:botbuilder-dialogs.DialogContext.cancelAllDialogs)

      -
      [DialogContext.endDialog](xref:botbuilder-dialogs.DialogContext.endDialog)

      -
      [DialogContext.replaceDialog](xref:botbuilder-dialogs.DialogContext.replaceDialog)
    isDeprecated: false
    syntax:
      content: >-
        function endDialog(context: TurnContext, instance: DialogInstance<any>,
        reason: DialogReason): Promise<void>
      parameters:
        - id: context
          type: TurnContext
          description: The context object for the turn.
        - id: instance
          type: DialogInstance&lt;any&gt;
          description: Current state information for this dialog.
        - id: reason
          type: DialogReason
          description: The reason the dialog is ending.
      return:
        description: ''
        type: Promise&lt;void&gt;
    inheritanceDescription: <b>Inherited From</b> Dialog.endDialog
  - name: getVersion()
    uid: botbuilder-dialogs-adaptive-teams.GetMember.getVersion
    package: botbuilder-dialogs-adaptive-teams
    summary: >-
      An encoded string used to aid in the detection of bot changes on
      re-deployment.
    remarks: >-
      This defaults to returning the dialogs [id](#id) but can be overridden to
      provide more

      precise change detection logic. Any dialog on the stack that has its
      version change will

      result in a `versionChanged` event will be raised. If this event is not
      handled by the bot,

      an error will be thrown resulting in the bots error handler logic being
      run.


      Returning an empty string will disable version tracking for the component
      all together.
    isDeprecated: false
    syntax:
      content: 'function getVersion(): string'
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> Dialog.getVersion
  - name: onDialogEvent(DialogContext, DialogEvent)
    uid: botbuilder-dialogs-adaptive-teams.GetMember.onDialogEvent
    package: botbuilder-dialogs-adaptive-teams
    summary: >-
      Called when an event has been raised, using `DialogContext.emitEvent()`,
      by either the current dialog or a dialog that the current dialog started.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function onDialogEvent(dc: DialogContext, e: DialogEvent):
        Promise<boolean>
      parameters:
        - id: dc
          type: DialogContext
          description: The dialog context for the current turn of conversation.
        - id: e
          type: DialogEvent
          description: The event being raised.
      return:
        description: >-
          True if the event is handled by the current dialog and bubbling should
          stop.
        type: Promise&lt;boolean&gt;
    inheritanceDescription: <b>Inherited From</b> Dialog.onDialogEvent
  - name: repromptDialog(TurnContext, DialogInstance<any>)
    uid: botbuilder-dialogs-adaptive-teams.GetMember.repromptDialog
    package: botbuilder-dialogs-adaptive-teams
    summary: When overridden in a derived class, reprompts the user for input.
    remarks: >-
      Derived dialogs that support validation and re-prompt logic should
      override this method.

      By default, this method has no effect.


      The [DialogContext](xref:botbuilder-dialogs.DialogContext) calls this
      method when the current

      dialog should re-request input from the user. This method is implemented
      for prompt dialogs.


      **See also**

      -
      [DialogContext.repromptDialog](xref:botbuilder-dialogs.DialogContext.repromptDialog)

      - [Prompt](xref:botbuilder-dialogs.Prompt)
    isDeprecated: false
    syntax:
      content: >-
        function repromptDialog(context: TurnContext, instance:
        DialogInstance<any>): Promise<void>
      parameters:
        - id: context
          type: TurnContext
          description: The context object for the turn.
        - id: instance
          type: DialogInstance&lt;any&gt;
          description: Current state information for this dialog.
      return:
        description: ''
        type: Promise&lt;void&gt;
    inheritanceDescription: <b>Inherited From</b> Dialog.repromptDialog
  - name: resumeDialog(DialogContext, DialogReason, any)
    uid: botbuilder-dialogs-adaptive-teams.GetMember.resumeDialog
    package: botbuilder-dialogs-adaptive-teams
    summary: >-
      When overridden in a derived class, resumes the dialog after the dialog
      above it on the stack completes.
    remarks: >-
      Derived dialogs that support multiple-turn conversations should override
      this method.

      By default, this method signals that the dialog is complete and returns.


      The [DialogContext](xref:botbuilder-dialogs.DialogContext) calls this
      method when it resumes

      the dialog. If the previous dialog on the stack returned a value, that
      value is in the `result`

      parameter.


      To start a _child_ dialog, use
      [DialogContext.beginDialog](xref:botbuilder-dialogs.DialogContext.beginDialog)

      or [DialogContext.prompt](xref:botbuilder-dialogs.DialogContext.prompt);
      however, this dialog will not

      necessarily be the one that started the child dialog.

      To signal to the dialog context that this dialog has completed, await

      [DialogContext.endDialog](xref:botbuilder-dialogs.DialogContext.endDialog)
      before exiting this method.


      **See also**

      -
      [DialogContext.endDialog](xref:botbuilder-dialogs.DialogContext.endDialog)
    isDeprecated: false
    syntax:
      content: >-
        function resumeDialog(dc: DialogContext, reason: DialogReason, result?:
        any): Promise<DialogTurnResult<any>>
      parameters:
        - id: dc
          type: DialogContext
          description: The context for the current dialog turn.
        - id: reason
          type: DialogReason
          description: |-
            The reason the dialog is resuming. This will typically be
                 [DialogReason.endCalled](xref:botbuilder-dialogs.DialogReason.endCalled)
        - id: result
          type: any
          description: Optional. The return value, if any, from the dialog that ended.
      return:
        description: ''
        type: Promise&lt;DialogTurnResult&lt;any&gt;&gt;
    inheritanceDescription: <b>Inherited From</b> Dialog.resumeDialog
methods:
  - name: beginDialog(DialogContext, Record<string, unknown>)
    uid: botbuilder-dialogs-adaptive-teams.GetMember.beginDialog
    package: botbuilder-dialogs-adaptive-teams
    summary: Called when the dialog is started and pushed onto the dialog stack.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginDialog(dc: DialogContext, _options?: Record<string,
        unknown>): Promise<DialogTurnResult<any>>
      parameters:
        - id: dc
          type: DialogContext
          description: >-
            The [DialogContext](xref:botbuilder-dialogs.DialogContext) for the
            current turn of conversation.
        - id: _options
          type: Record&lt;string, unknown&gt;
          description: Optional, initial information to pass to the dialog.
      return:
        description: A promise representing the asynchronous operation.
        type: Promise&lt;DialogTurnResult&lt;any&gt;&gt;
  - name: getConverter(keyof GetMemberConfiguration)
    uid: botbuilder-dialogs-adaptive-teams.GetMember.getConverter
    package: botbuilder-dialogs-adaptive-teams
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getConverter(property: keyof GetMemberConfiguration):
        Converter<unknown, unknown> | ConverterFactory<unknown, unknown>
      parameters:
        - id: property
          type: keyof GetMemberConfiguration
          description: ''
      return:
        description: ''
        type: >-
          Converter&lt;unknown, unknown&gt; | ConverterFactory&lt;unknown,
          unknown&gt;
extends: Dialog
