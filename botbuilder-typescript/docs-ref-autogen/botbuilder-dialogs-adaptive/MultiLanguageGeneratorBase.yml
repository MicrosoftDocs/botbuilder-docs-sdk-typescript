### YamlMime:TSType
name: MultiLanguageGeneratorBase
uid: botbuilder-dialogs-adaptive.MultiLanguageGeneratorBase
package: botbuilder-dialogs-adaptive
summary: Base class which applies language policy to tryGetGenerator.
fullName: MultiLanguageGeneratorBase<T, D>
remarks: ''
isDeprecated: false
type: class
properties:
  - name: languagePolicy
    uid: botbuilder-dialogs-adaptive.MultiLanguageGeneratorBase.languagePolicy
    package: botbuilder-dialogs-adaptive
    summary: Language policy required by language generator.
    fullName: languagePolicy
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'languagePolicy: LanguagePolicy'
      return:
        description: ''
        type: <xref uid="botbuilder-dialogs-adaptive.LanguagePolicy" />
inheritedMethods:
  - name: configure(Record<string, unknown>)
    uid: botbuilder-dialogs-adaptive.MultiLanguageGeneratorBase.configure
    package: botbuilder-dialogs-adaptive
    summary: Fluent method for configuring the object.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function configure(config: Record<string, unknown>):
        MultiLanguageGeneratorBase<T, D>
      parameters:
        - id: config
          type: Record&lt;string, unknown&gt;
          description: Configuration settings to apply.
      return:
        description: >-
          The [Configurable](xref:botbuilder-dialogs.Configurable) after the
          operation is complete.
        type: >-
          <xref uid="botbuilder-dialogs-adaptive.MultiLanguageGeneratorBase"
          />&lt;T, D&gt;
    inheritanceDescription: <b>Inherited From</b> Configurable.configure
methods:
  - name: generate(DialogContext, string, D)
    uid: botbuilder-dialogs-adaptive.MultiLanguageGeneratorBase.generate
    package: botbuilder-dialogs-adaptive
    summary: Find a language generator that matches the current context locale.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function generate(dialogContext: DialogContext, template: string, data:
        D): Promise<T>
      parameters:
        - id: dialogContext
          type: DialogContext
          description: Context for the current turn of conversation.
        - id: template
          type: string
          description: Template to use.
        - id: data
          type: D
          description: Data to bind to.
      return:
        description: A promise representing the asynchronous operation.
        type: Promise&lt;T&gt;
  - name: getConverter("languagePolicy")
    uid: botbuilder-dialogs-adaptive.MultiLanguageGeneratorBase.getConverter
    package: botbuilder-dialogs-adaptive
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getConverter(property: "languagePolicy"): Converter<unknown,
        unknown> | ConverterFactory<unknown, unknown>
      parameters:
        - id: property
          type: '"languagePolicy"'
          description: The key of the conditional selector configuration.
      return:
        description: The converter for the selector configuration.
        type: >-
          Converter&lt;unknown, unknown&gt; | ConverterFactory&lt;unknown,
          unknown&gt;
  - name: tryGetGenerator(DialogContext, string)
    uid: botbuilder-dialogs-adaptive.MultiLanguageGeneratorBase.tryGetGenerator
    package: botbuilder-dialogs-adaptive
    summary: Abstract method to get a language generator by locale.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function tryGetGenerator(dialogContext: DialogContext, locale: string):
        { exist: boolean, result: LanguageGenerator<T, D> }
      parameters:
        - id: dialogContext
          type: DialogContext
          description: DialogContext.
        - id: locale
          type: string
          description: Locale to lookup.
      return:
        description: ''
        type: '{ exist: boolean, result: LanguageGenerator&lt;T, D&gt; }'
extends: Configurable
