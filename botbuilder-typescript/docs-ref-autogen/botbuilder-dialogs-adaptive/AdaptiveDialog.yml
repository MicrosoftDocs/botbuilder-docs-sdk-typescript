### YamlMime:TSType
name: AdaptiveDialog
uid: botbuilder-dialogs-adaptive.AdaptiveDialog
package: botbuilder-dialogs-adaptive
summary: ''
fullName: AdaptiveDialog<O>
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: AdaptiveDialog(string)
    uid: botbuilder-dialogs-adaptive.AdaptiveDialog.constructor
    package: botbuilder-dialogs-adaptive
    summary: Creates a new `AdaptiveDialog` instance.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new AdaptiveDialog(dialogId?: string)'
      parameters:
        - id: dialogId
          type: string
          description: |
            (Optional) unique ID of the component within its parents dialog set.
properties:
  - name: autoEndDialog
    uid: botbuilder-dialogs-adaptive.AdaptiveDialog.autoEndDialog
    package: botbuilder-dialogs-adaptive
    summary: Whether to end the dialog when there are no actions to execute.
    fullName: autoEndDialog
    remarks: >-
      If true, when there are no actions to execute, the current dialog will
      end.

      If false, when there are no actions to execute, the current dialog will
      simply end the turn and still be active.

      Defaults to a value of true.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'autoEndDialog: boolean'
      return:
        type: boolean
        description: ''
  - name: conditionTracker
    uid: botbuilder-dialogs-adaptive.AdaptiveDialog.conditionTracker
    package: botbuilder-dialogs-adaptive
    summary: ''
    fullName: conditionTracker
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static conditionTracker: string'
      return:
        type: string
        description: ''
  - name: defaultResultProperty
    uid: botbuilder-dialogs-adaptive.AdaptiveDialog.defaultResultProperty
    package: botbuilder-dialogs-adaptive
    summary: >-
      The property to return as the result when the dialog ends when there are
      no more Actions and `AutoEndDialog = true`.
    fullName: defaultResultProperty
    remarks: Defaults to a value of `dialog.result`.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'defaultResultProperty: string'
      return:
        type: string
        description: ''
  - name: dialogs
    uid: botbuilder-dialogs-adaptive.AdaptiveDialog.dialogs
    package: botbuilder-dialogs-adaptive
    summary: The containers dialog set.
    fullName: dialogs
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'dialogs: DialogSet'
      return:
        type: DialogSet
        description: ''
  - name: EndOfTurn
    uid: botbuilder-dialogs-adaptive.AdaptiveDialog.EndOfTurn
    package: botbuilder-dialogs-adaptive
    summary: Gets a default end-of-turn result.
    fullName: EndOfTurn
    remarks: >-
      This result indicates that a dialog (or a logical step within a dialog)
      has completed

      processing for the current turn, is still active, and is waiting for more
      input.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static EndOfTurn: DialogTurnResult'
      return:
        type: DialogTurnResult
        description: ''
  - name: generator
    uid: botbuilder-dialogs-adaptive.AdaptiveDialog.generator
    package: botbuilder-dialogs-adaptive
    summary: Optional. Language Generator override.
    fullName: generator
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'generator?: LanguageGenerator'
      return:
        type: <xref uid="botbuilder-dialogs-adaptive.LanguageGenerator" />
        description: ''
  - name: id
    uid: botbuilder-dialogs-adaptive.AdaptiveDialog.id
    package: botbuilder-dialogs-adaptive
    summary: Unique ID of the dialog.
    fullName: id
    remarks: This will be automatically generated if not specified.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'id: string'
      return:
        type: string
        description: ''
  - name: recognizer
    uid: botbuilder-dialogs-adaptive.AdaptiveDialog.recognizer
    package: botbuilder-dialogs-adaptive
    summary: Optional. Recognizer used to analyze any message utterances.
    fullName: recognizer
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'recognizer?: Recognizer'
      return:
        type: <xref uid="botbuilder-dialogs-adaptive.Recognizer" />
        description: ''
  - name: schema
    uid: botbuilder-dialogs-adaptive.AdaptiveDialog.schema
    package: botbuilder-dialogs-adaptive
    summary: JSON Schema for the dialog.
    fullName: schema
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'schema: object'
      return:
        type: object
        description: ''
  - name: selector
    uid: botbuilder-dialogs-adaptive.AdaptiveDialog.selector
    package: botbuilder-dialogs-adaptive
    summary: Optional. The selector for picking the possible events to execute.
    fullName: selector
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'selector: TriggerSelector'
      return:
        type: <xref uid="botbuilder-dialogs-adaptive.TriggerSelector" />
        description: ''
  - name: telemetryClient
    uid: botbuilder-dialogs-adaptive.AdaptiveDialog.telemetryClient
    package: botbuilder-dialogs-adaptive
    summary: Get the current telemetry client.
    fullName: telemetryClient
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'telemetryClient: BotTelemetryClient'
      return:
        type: BotTelemetryClient
        description: ''
  - name: triggers
    uid: botbuilder-dialogs-adaptive.AdaptiveDialog.triggers
    package: botbuilder-dialogs-adaptive
    summary: Trigger handlers to respond to conditions which modify the executing plan.
    fullName: triggers
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'triggers: OnCondition[]'
      return:
        type: '<xref uid="botbuilder-dialogs-adaptive.OnCondition" />[]'
        description: ''
methods:
  - name: 'beginDialog(DialogContext, O)'
    uid: botbuilder-dialogs-adaptive.AdaptiveDialog.beginDialog
    package: botbuilder-dialogs-adaptive
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function beginDialog(dc: DialogContext, options?: O)'
      parameters:
        - id: dc
          type: DialogContext
          description: ''
        - id: options
          type: O
          description: ''
      return:
        type: Promise&lt;DialogTurnResult&gt;
        description: ''
  - name: configure(object)
    uid: botbuilder-dialogs-adaptive.AdaptiveDialog.configure
    package: botbuilder-dialogs-adaptive
    summary: Fluent method for configuring the object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function configure(config: object)'
      parameters:
        - id: config
          type: object
          description: |
            Configuration settings to apply.
      return:
        type: this
        description: ''
  - name: continueDialog(DialogContext)
    uid: botbuilder-dialogs-adaptive.AdaptiveDialog.continueDialog
    package: botbuilder-dialogs-adaptive
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function continueDialog(dc: DialogContext)'
      parameters:
        - id: dc
          type: DialogContext
          description: ''
      return:
        type: Promise&lt;DialogTurnResult&gt;
        description: ''
  - name: createChildContext(DialogContext)
    uid: botbuilder-dialogs-adaptive.AdaptiveDialog.createChildContext
    package: botbuilder-dialogs-adaptive
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function createChildContext(dc: DialogContext)'
      parameters:
        - id: dc
          type: DialogContext
          description: ''
      return:
        type: DialogContext
        description: ''
  - name: 'endDialog(TurnContext, DialogInstance, DialogReason)'
    uid: botbuilder-dialogs-adaptive.AdaptiveDialog.endDialog
    package: botbuilder-dialogs-adaptive
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function endDialog(turnContext: TurnContext, instance: DialogInstance,
        reason: DialogReason)
      parameters:
        - id: turnContext
          type: TurnContext
          description: ''
        - id: instance
          type: DialogInstance
          description: ''
        - id: reason
          type: DialogReason
          description: ''
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: findDialog(string)
    uid: botbuilder-dialogs-adaptive.AdaptiveDialog.findDialog
    package: botbuilder-dialogs-adaptive
    summary: Finds a child dialog that was previously added to the container.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function findDialog(dialogId: string)'
      parameters:
        - id: dialogId
          type: string
          description: |
            ID of the dialog to lookup.
      return:
        type: Dialog | undefined
        description: ''
  - name: getDependencies()
    uid: botbuilder-dialogs-adaptive.AdaptiveDialog.getDependencies
    package: botbuilder-dialogs-adaptive
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getDependencies()
      return:
        type: 'Dialog[]'
        description: ''
  - name: getVersion()
    uid: botbuilder-dialogs-adaptive.AdaptiveDialog.getVersion
    package: botbuilder-dialogs-adaptive
    summary: >-
      An encoded string used to aid in the detection of bot changes on
      re-deployment.
    remarks: >-
      This defaults to returning the dialogs [id](#id) but can be overridden to
      provide more

      precise change detection logic. Any dialog on the stack that has its
      version change will

      result in a `versionChanged` event will be raised. If this event is not
      handled by the bot,

      an error will be thrown resulting in the bots error handler logic being
      run.


      Returning an empty string will disable version tracking for the component
      all together.
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getVersion()
      return:
        type: string
        description: ''
  - name: 'onDialogEvent(DialogContext, DialogEvent)'
    uid: botbuilder-dialogs-adaptive.AdaptiveDialog.onDialogEvent
    package: botbuilder-dialogs-adaptive
    summary: |-
      Called when an event has been raised, using `DialogContext.emitEvent()`,
      by either the current dialog or a dialog that the current dialog started.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onDialogEvent(dc: DialogContext, e: DialogEvent)'
      parameters:
        - id: dc
          type: DialogContext
          description: The dialog context for the current turn of conversation.
        - id: e
          type: DialogEvent
          description: |
            The event being raised.
      return:
        type: Promise&lt;boolean&gt;
        description: ''
  - name: 'repromptDialog(DialogContext | TurnContext, DialogInstance)'
    uid: botbuilder-dialogs-adaptive.AdaptiveDialog.repromptDialog
    package: botbuilder-dialogs-adaptive
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function repromptDialog(context: DialogContext | TurnContext, instance:
        DialogInstance)
      parameters:
        - id: context
          type: DialogContext | TurnContext
          description: ''
        - id: instance
          type: DialogInstance
          description: ''
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: 'resumeDialog(DialogContext, DialogReason, any)'
    uid: botbuilder-dialogs-adaptive.AdaptiveDialog.resumeDialog
    package: botbuilder-dialogs-adaptive
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function resumeDialog(dc: DialogContext, reason: DialogReason, result?:
        any)
      parameters:
        - id: dc
          type: DialogContext
          description: ''
        - id: reason
          type: DialogReason
          description: ''
        - id: result
          type: any
          description: ''
      return:
        type: Promise&lt;DialogTurnResult&gt;
        description: ''
extends: DialogContainer&lt;O&gt;
