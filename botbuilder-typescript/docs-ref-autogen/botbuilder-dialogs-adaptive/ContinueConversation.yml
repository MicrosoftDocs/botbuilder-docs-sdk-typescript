### YamlMime:TSType
name: ContinueConversation
uid: botbuilder-dialogs-adaptive.ContinueConversation
package: botbuilder-dialogs-adaptive
summary: Action which continues a conversation using a Conversation reference.
fullName: ContinueConversation
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: ContinueConversation(string)
    uid: botbuilder-dialogs-adaptive.ContinueConversation.constructor
    package: botbuilder-dialogs-adaptive
    summary: >-
      Creates a new instance of the [Dialog](xref:botbuilder-dialogs.Dialog)
      class.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'new ContinueConversation(dialogId?: string)'
      parameters:
        - id: dialogId
          type: string
          description: Optional. unique ID of the dialog.
properties:
  - name: $kind
    uid: botbuilder-dialogs-adaptive.ContinueConversation.$kind
    package: botbuilder-dialogs-adaptive
    summary: ''
    fullName: $kind
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static $kind: string'
      return:
        description: ''
        type: string
  - name: conversationReference
    uid: botbuilder-dialogs-adaptive.ContinueConversation.conversationReference
    package: botbuilder-dialogs-adaptive
    summary: Gets or sets the conversationReference for the target conversation.
    fullName: conversationReference
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'conversationReference: ObjectExpression<ConversationReference>'
      return:
        description: ''
        type: ObjectExpression&lt;ConversationReference&gt;
  - name: disabled
    uid: botbuilder-dialogs-adaptive.ContinueConversation.disabled
    package: botbuilder-dialogs-adaptive
    summary: >-
      Gets or sets an optional expression which if true will disable this
      action.
    fullName: disabled
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'disabled: BoolExpression'
      return:
        description: ''
        type: BoolExpression
  - name: id
    uid: botbuilder-dialogs-adaptive.ContinueConversation.id
    package: botbuilder-dialogs-adaptive
    summary: Unique ID of the dialog.
    fullName: id
    remarks: ''
    isDeprecated: false
    syntax:
      content: string id
      return:
        description: The Id for the dialog.
        type: string
  - name: telemetryClient
    uid: botbuilder-dialogs-adaptive.ContinueConversation.telemetryClient
    package: botbuilder-dialogs-adaptive
    summary: Gets the telemetry client for this dialog.
    fullName: telemetryClient
    remarks: ''
    isDeprecated: false
    syntax:
      content: BotTelemetryClient telemetryClient
      return:
        description: >-
          The [BotTelemetryClient](xref:botbuilder.BotTelemetryClient) to use
          for logging.
        type: BotTelemetryClient
  - name: value
    uid: botbuilder-dialogs-adaptive.ContinueConversation.value
    package: botbuilder-dialogs-adaptive
    summary: Gets or sets an optional value to use for EventActivity.Value.
    fullName: value
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'value: ValueExpression'
      return:
        description: ''
        type: ValueExpression
inheritedProperties:
  - name: EndOfTurn
    uid: botbuilder-dialogs-adaptive.ContinueConversation.EndOfTurn
    package: botbuilder-dialogs-adaptive
    summary: Gets a default end-of-turn result.
    fullName: EndOfTurn
    remarks: >-
      This result indicates that a dialog (or a logical step within a dialog)
      has completed

      processing for the current turn, is still active, and is waiting for more
      input.
    isDeprecated: false
    syntax:
      content: 'static EndOfTurn: DialogTurnResult<any>'
      return:
        description: ''
        type: DialogTurnResult&lt;any&gt;
    inheritanceDescription: <b>Inherited From</b> Dialog.EndOfTurn
inheritedMethods:
  - name: configure(Record<string, unknown>)
    uid: botbuilder-dialogs-adaptive.ContinueConversation.configure
    package: botbuilder-dialogs-adaptive
    summary: Fluent method for configuring the object.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function configure(config: Record<string, unknown>):
        ContinueConversation
      parameters:
        - id: config
          type: Record&lt;string, unknown&gt;
          description: Configuration settings to apply.
      return:
        description: >-
          The [Configurable](xref:botbuilder-dialogs.Configurable) after the
          operation is complete.
        type: <xref uid="botbuilder-dialogs-adaptive.ContinueConversation" />
    inheritanceDescription: <b>Inherited From</b> Dialog.configure
  - name: continueDialog(DialogContext)
    uid: botbuilder-dialogs-adaptive.ContinueConversation.continueDialog
    package: botbuilder-dialogs-adaptive
    summary: When overridden in a derived class, continues the dialog.
    remarks: >-
      Derived dialogs that support multiple-turn conversations should override
      this method.

      By default, this method signals that the dialog is complete and returns.


      The [DialogContext](xref:botbuilder-dialogs.DialogContext) calls this
      method when it continues

      the dialog.


      To signal to the dialog context that this dialog has completed, await

      [DialogContext.endDialog](xref:botbuilder-dialogs.DialogContext.endDialog)
      before exiting this method.


      **See also**

      -
      [DialogContext.continueDialog](xref:botbuilder-dialogs.DialogContext.continueDialog)
    isDeprecated: false
    syntax:
      content: >-
        function continueDialog(dc: DialogContext):
        Promise<DialogTurnResult<any>>
      parameters:
        - id: dc
          type: DialogContext
          description: The context for the current dialog turn.
      return:
        description: A promise resolving to the dialog turn result.
        type: Promise&lt;DialogTurnResult&lt;any&gt;&gt;
    inheritanceDescription: <b>Inherited From</b> Dialog.continueDialog
  - name: endDialog(TurnContext, DialogInstance<any>, DialogReason)
    uid: botbuilder-dialogs-adaptive.ContinueConversation.endDialog
    package: botbuilder-dialogs-adaptive
    summary: >-
      When overridden in a derived class, performs clean up for the dialog
      before it ends.
    remarks: >-
      Derived dialogs that need to perform logging or cleanup before ending
      should override this method.

      By default, this method has no effect.


      The [DialogContext](xref:botbuilder-dialogs.DialogContext) calls this
      method when the current

      dialog is ending.


      **See also**

      -
      [DialogContext.cancelAllDialogs](xref:botbuilder-dialogs.DialogContext.cancelAllDialogs)

      -
      [DialogContext.endDialog](xref:botbuilder-dialogs.DialogContext.endDialog)

      -
      [DialogContext.replaceDialog](xref:botbuilder-dialogs.DialogContext.replaceDialog)
    isDeprecated: false
    syntax:
      content: >-
        function endDialog(_context: TurnContext, _instance:
        DialogInstance<any>, _reason: DialogReason): Promise<void>
      parameters:
        - id: _context
          type: TurnContext
          description: The context object for the turn.
        - id: _instance
          type: DialogInstance&lt;any&gt;
          description: Current state information for this dialog.
        - id: _reason
          type: DialogReason
          description: The reason the dialog is ending.
      return:
        description: ''
        type: Promise&lt;void&gt;
    inheritanceDescription: <b>Inherited From</b> Dialog.endDialog
  - name: getVersion()
    uid: botbuilder-dialogs-adaptive.ContinueConversation.getVersion
    package: botbuilder-dialogs-adaptive
    summary: >-
      An encoded string used to aid in the detection of bot changes on
      re-deployment.
    remarks: >-
      This defaults to returning the dialogs [id](#id) but can be overridden to
      provide more

      precise change detection logic. Any dialog on the stack that has its
      version change will

      result in a `versionChanged` event will be raised. If this event is not
      handled by the bot,

      an error will be thrown resulting in the bots error handler logic being
      run.


      Returning an empty string will disable version tracking for the component
      all together.
    isDeprecated: false
    syntax:
      content: 'function getVersion(): string'
      return:
        description: >-
          Unique string which should only change when dialog has changed in a
          way that should restart the dialog.
        type: string
    inheritanceDescription: <b>Inherited From</b> Dialog.getVersion
  - name: onDialogEvent(DialogContext, DialogEvent)
    uid: botbuilder-dialogs-adaptive.ContinueConversation.onDialogEvent
    package: botbuilder-dialogs-adaptive
    summary: >-
      Called when an event has been raised, using `DialogContext.emitEvent()`,
      by either the current dialog or a dialog that the current dialog started.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function onDialogEvent(dc: DialogContext, e: DialogEvent):
        Promise<boolean>
      parameters:
        - id: dc
          type: DialogContext
          description: The dialog context for the current turn of conversation.
        - id: e
          type: DialogEvent
          description: The event being raised.
      return:
        description: >-
          True if the event is handled by the current dialog and bubbling should
          stop.
        type: Promise&lt;boolean&gt;
    inheritanceDescription: <b>Inherited From</b> Dialog.onDialogEvent
  - name: repromptDialog(TurnContext, DialogInstance<any>)
    uid: botbuilder-dialogs-adaptive.ContinueConversation.repromptDialog
    package: botbuilder-dialogs-adaptive
    summary: When overridden in a derived class, reprompts the user for input.
    remarks: >-
      Derived dialogs that support validation and re-prompt logic should
      override this method.

      By default, this method has no effect.


      The [DialogContext](xref:botbuilder-dialogs.DialogContext) calls this
      method when the current

      dialog should re-request input from the user. This method is implemented
      for prompt dialogs.


      **See also**

      -
      [DialogContext.repromptDialog](xref:botbuilder-dialogs.DialogContext.repromptDialog)

      - [Prompt](xref:botbuilder-dialogs.Prompt)
    isDeprecated: false
    syntax:
      content: >-
        function repromptDialog(_context: TurnContext, _instance:
        DialogInstance<any>): Promise<void>
      parameters:
        - id: _context
          type: TurnContext
          description: The context object for the turn.
        - id: _instance
          type: DialogInstance&lt;any&gt;
          description: Current state information for this dialog.
      return:
        description: ''
        type: Promise&lt;void&gt;
    inheritanceDescription: <b>Inherited From</b> Dialog.repromptDialog
  - name: resumeDialog(DialogContext, DialogReason, any)
    uid: botbuilder-dialogs-adaptive.ContinueConversation.resumeDialog
    package: botbuilder-dialogs-adaptive
    summary: >-
      When overridden in a derived class, resumes the dialog after the dialog
      above it on the stack completes.
    remarks: >-
      Derived dialogs that support multiple-turn conversations should override
      this method.

      By default, this method signals that the dialog is complete and returns.


      The [DialogContext](xref:botbuilder-dialogs.DialogContext) calls this
      method when it resumes

      the dialog. If the previous dialog on the stack returned a value, that
      value is in the `result`

      parameter.


      To start a _child_ dialog, use
      [DialogContext.beginDialog](xref:botbuilder-dialogs.DialogContext.beginDialog)

      or [DialogContext.prompt](xref:botbuilder-dialogs.DialogContext.prompt);
      however, this dialog will not

      necessarily be the one that started the child dialog.

      To signal to the dialog context that this dialog has completed, await

      [DialogContext.endDialog](xref:botbuilder-dialogs.DialogContext.endDialog)
      before exiting this method.


      **See also**

      -
      [DialogContext.endDialog](xref:botbuilder-dialogs.DialogContext.endDialog)
    isDeprecated: false
    syntax:
      content: >-
        function resumeDialog(dc: DialogContext, reason: DialogReason, result?:
        any): Promise<DialogTurnResult<any>>
      parameters:
        - id: dc
          type: DialogContext
          description: The context for the current dialog turn.
        - id: reason
          type: DialogReason
          description: |-
            The reason the dialog is resuming. This will typically be
                 [DialogReason.endCalled](xref:botbuilder-dialogs.DialogReason.endCalled)
        - id: result
          type: any
          description: Optional. The return value, if any, from the dialog that ended.
      return:
        description: A promise resolving to the dialog turn result.
        type: Promise&lt;DialogTurnResult&lt;any&gt;&gt;
    inheritanceDescription: <b>Inherited From</b> Dialog.resumeDialog
methods:
  - name: beginDialog(DialogContext, Record<string, unknown>)
    uid: botbuilder-dialogs-adaptive.ContinueConversation.beginDialog
    package: botbuilder-dialogs-adaptive
    summary: Called when the dialog is started and pushed onto the dialog stack.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginDialog(dc: DialogContext, _options?: Record<string,
        unknown>): Promise<DialogTurnResult<any>>
      parameters:
        - id: dc
          type: DialogContext
          description: >-
            The [DialogContext](xref:botbuilder-dialogs.DialogContext) for the
            current turn of conversation.
        - id: _options
          type: Record&lt;string, unknown&gt;
          description: Optional, initial information to pass to the dialog.
      return:
        description: A promise representing the asynchronous operation.
        type: Promise&lt;DialogTurnResult&lt;any&gt;&gt;
  - name: getConverter(keyof ContinueConversationConfiguration)
    uid: botbuilder-dialogs-adaptive.ContinueConversation.getConverter
    package: botbuilder-dialogs-adaptive
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getConverter(property: keyof
        ContinueConversationConfiguration): Converter<unknown, unknown> |
        ConverterFactory<unknown, unknown>
      parameters:
        - id: property
          type: keyof ContinueConversationConfiguration
          description: The key of the conditional selector configuration.
      return:
        description: The converter for the selector configuration.
        type: >-
          Converter&lt;unknown, unknown&gt; | ConverterFactory&lt;unknown,
          unknown&gt;
extends: Dialog
