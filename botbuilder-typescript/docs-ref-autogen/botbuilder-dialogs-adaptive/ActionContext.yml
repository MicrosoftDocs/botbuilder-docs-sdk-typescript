### YamlMime:TSType
name: ActionContext
uid: botbuilder-dialogs-adaptive.ActionContext
package: botbuilder-dialogs-adaptive
summary: ''
fullName: ActionContext
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: >-
      ActionContext(DialogSet, DialogContext, DialogState, ActionState[],
      symbol)
    uid: botbuilder-dialogs-adaptive.ActionContext.constructor
    package: botbuilder-dialogs-adaptive
    summary: Initializes a new instance of the `ActionContext` class
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new ActionContext(dialogs: DialogSet, parentDialogContext:
        DialogContext, state: DialogState, actions: ActionState[], changeKey:
        symbol)
      parameters:
        - id: dialogs
          type: DialogSet
          description: The dialog set to create the action context for.
        - id: parentDialogContext
          type: DialogContext
          description: Parent dialog context.
        - id: state
          type: DialogState
          description: Current dialog state.
        - id: actions
          type: '<xref uid="botbuilder-dialogs-adaptive.ActionState" />[]'
          description: Current list of remaining actions to execute.
        - id: changeKey
          type: symbol
          description: |
            TurnState key for where to persist any changes.
properties:
  - name: actions
    uid: botbuilder-dialogs-adaptive.ActionContext.actions
    package: botbuilder-dialogs-adaptive
    summary: List of actions being executed.
    fullName: actions
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'actions: ActionState[]'
      return:
        type: '<xref uid="botbuilder-dialogs-adaptive.ActionState" />[]'
        description: ''
  - name: activeDialog
    uid: botbuilder-dialogs-adaptive.ActionContext.activeDialog
    package: botbuilder-dialogs-adaptive
    summary: >-
      Returns the state information for the dialog on the top of the dialog
      stack, or `undefined` if

      the stack is empty.
    fullName: activeDialog
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'activeDialog: DialogInstance | undefined'
      return:
        type: DialogInstance | undefined
        description: ''
  - name: changes
    uid: botbuilder-dialogs-adaptive.ActionContext.changes
    package: botbuilder-dialogs-adaptive
    summary: Gets list of changes that are queued to be applied.
    fullName: changes
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'changes: ActionChangeList[]'
      return:
        type: '<xref uid="botbuilder-dialogs-adaptive.ActionChangeList" />[]'
        description: ''
  - name: child
    uid: botbuilder-dialogs-adaptive.ActionContext.child
    package: botbuilder-dialogs-adaptive
    summary: Returns dialog context for child if the active dialog is a container.
    fullName: child
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'child: DialogContext | undefined'
      return:
        type: DialogContext | undefined
        description: ''
  - name: context
    uid: botbuilder-dialogs-adaptive.ActionContext.context
    package: botbuilder-dialogs-adaptive
    summary: Gets the context object for the turn.
    fullName: context
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: TurnContext'
      return:
        type: TurnContext
        description: ''
  - name: dialogManager
    uid: botbuilder-dialogs-adaptive.ActionContext.dialogManager
    package: botbuilder-dialogs-adaptive
    summary: Returns the current dialog manager instance.
    fullName: dialogManager
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'dialogManager: DialogManager'
      return:
        type: DialogManager
        description: ''
  - name: dialogs
    uid: botbuilder-dialogs-adaptive.ActionContext.dialogs
    package: botbuilder-dialogs-adaptive
    summary: Gets the dialogs that can be called directly from this context.
    fullName: dialogs
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'dialogs: DialogSet'
      return:
        type: DialogSet
        description: ''
  - name: parent
    uid: botbuilder-dialogs-adaptive.ActionContext.parent
    package: botbuilder-dialogs-adaptive
    summary: >-
      The parent dialog context for this dialog context, or `undefined` if this
      context doesn't have a parent.
    fullName: parent
    remarks: >-
      When it attempts to start a dialog, the dialog context searches for the
      [Dialog.id](xref:botbuilder-dialogs.Dialog.id)

      in its [dialogs](xref:botbuilder-dialogs.DialogContext.dialogs). If the
      dialog to start is not found

      in this dialog context, it searches in its parent dialog context, and so
      on.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'parent: DialogContext | undefined'
      return:
        type: DialogContext | undefined
        description: ''
  - name: services
    uid: botbuilder-dialogs-adaptive.ActionContext.services
    package: botbuilder-dialogs-adaptive
    summary: Gets the services collection which is contextual to this dialog context.
    fullName: services
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'services: TurnContextStateCollection'
      return:
        type: TurnContextStateCollection
        description: ''
  - name: stack
    uid: botbuilder-dialogs-adaptive.ActionContext.stack
    package: botbuilder-dialogs-adaptive
    summary: Gets the current dialog stack.
    fullName: stack
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'stack: DialogInstance[]'
      return:
        type: 'DialogInstance[]'
        description: ''
  - name: state
    uid: botbuilder-dialogs-adaptive.ActionContext.state
    package: botbuilder-dialogs-adaptive
    summary: Gets the DialogStateManager which manages view of all memory scopes.
    fullName: state
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'state: DialogStateManager'
      return:
        type: DialogStateManager
        description: ''
methods:
  - name: applyChanges()
    uid: botbuilder-dialogs-adaptive.ActionContext.applyChanges
    package: botbuilder-dialogs-adaptive
    summary: Applies any queued up changes.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function applyChanges()
      return:
        type: Promise&lt;boolean&gt;
        description: ''
  - name: 'beginDialog(string, object)'
    uid: botbuilder-dialogs-adaptive.ActionContext.beginDialog
    package: botbuilder-dialogs-adaptive
    summary: |-
      Starts a dialog instance and pushes it onto the dialog stack.
      Creates a new instance of the dialog and pushes it onto the stack.
    remarks: >-
      If there's already an active dialog on the stack, that dialog will be
      paused until

      it is again the top dialog on the stack.


      The [status](xref:botbuilder-dialogs.DialogTurnResult.status) of returned
      object describes

      the status of the dialog stack after this method completes.


      This method throws an exception if the requested dialog can't be found in
      this dialog context

      or any of its ancestors.


      For example:

      ```JavaScript

      const result = await dc.beginDialog('greeting', { name: user.name });

      ```


      **See also**

      - [endDialog](xref:botbuilder-dialogs.DialogContext.endDialog)

      - [prompt](xref:botbuilder-dialogs.DialogContext.prompt)

      - [replaceDialog](xref:botbuilder-dialogs.DialogContext.replaceDialog)

      - [Dialog.beginDialog](xref:botbuilder-dialogs.Dialog.beginDialog)
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function beginDialog(dialogId: string, options?: object)'
      parameters:
        - id: dialogId
          type: string
          description: ID of the dialog to start.
        - id: options
          type: object
          description: |
            Optional. Arguments to pass into the dialog when it starts.
      return:
        type: Promise&lt;DialogTurnResult&gt;
        description: ''
  - name: 'cancelAllDialogs(boolean, string, any)'
    uid: botbuilder-dialogs-adaptive.ActionContext.cancelAllDialogs
    package: botbuilder-dialogs-adaptive
    summary: 'Cancels all dialogs on the dialog stack, and clears stack.'
    remarks: >-
      This calls each dialog's
      [Dialog.endDialog](xref:botbuilder-dialogs.Dialog.endDialog) method before

      removing the dialog from the stack.


      If there were any dialogs on the stack initially, the
      [status](xref:botbuilder-dialogs.DialogTurnResult.status)

      of the return value is
      [cancelled](xref:botbuilder-dialogs.DialogTurnStatus.cancelled);
      otherwise, it's

      [empty](xref:botbuilder-dialogs.DialogTurnStatus.empty).


      This example clears a dialog stack, `dc`, before starting a 'bookFlight'
      dialog.

      ```JavaScript

      await dc.cancelAllDialogs();

      return await dc.beginDialog('bookFlight');

      ```


      **See also**

      - [endDialog](xref:botbuilder-dialogs.DialogContext.endDialog)
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function cancelAllDialogs(cancelParents?: boolean, eventName?: string,
        eventValue?: any)
      parameters:
        - id: cancelParents
          type: boolean
          description: Optional. If `true` all parent dialogs will be cancelled as well.
        - id: eventName
          type: string
          description: >-
            Optional. Name of a custom event to raise as dialogs are cancelled.
            This defaults to
            [cancelDialog](xref:botbuilder-dialogs.DialogEvents.cancelDialog).
        - id: eventValue
          type: any
          description: |
            Optional. Value to pass along with custom cancellation event.
      return:
        type: Promise&lt;DialogTurnResult&gt;
        description: ''
  - name: continueDialog()
    uid: botbuilder-dialogs-adaptive.ActionContext.continueDialog
    package: botbuilder-dialogs-adaptive
    summary: >-
      Continues execution of the active dialog, if there is one, by passing this
      dialog context to its

      [Dialog.continueDialog](xref:botbuilder-dialogs.Dialog.continueDialog)
      method.
    remarks: >-
      After the call completes, you can check the turn context's
      [responded](xref:botbuilder-core.TurnContext.responded)

      property to determine if the dialog sent a reply to the user.


      The [status](xref:botbuilder-dialogs.DialogTurnResult.status) of returned
      object describes

      the status of the dialog stack after this method completes.


      Typically, you would call this from within your bot's turn handler.


      For example:

      ```JavaScript

      const result = await dc.continueDialog();

      if (result.status == DialogTurnStatus.empty && dc.context.activity.type ==
      ActivityTypes.message) {
          // Send fallback message
          await dc.context.sendActivity(`I'm sorry. I didn't understand.`);
      }

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: function continueDialog()
      return:
        type: Promise&lt;DialogTurnResult&gt;
        description: ''
  - name: 'emitEvent(string, any, boolean, boolean)'
    uid: botbuilder-dialogs-adaptive.ActionContext.emitEvent
    package: botbuilder-dialogs-adaptive
    summary: Searches for a dialog with a given ID.
    remarks: >-
      Emits a named event for the current dialog, or someone who started it, to
      handle.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function emitEvent(name: string, value?: any, bubble?: boolean,
        fromLeaf?: boolean)
      parameters:
        - id: name
          type: string
          description: Name of the event to raise.
        - id: value
          type: any
          description: Optional. Value to send along with the event.
        - id: bubble
          type: boolean
          description: >-
            Optional. Flag to control whether the event should be bubbled to its
            parent if not handled locally. Defaults to a value of `true`.
        - id: fromLeaf
          type: boolean
          description: Optional. Whether the event is emitted from a leaf node.
      return:
        type: Promise&lt;boolean&gt;
        description: '`true` if the event was handled.'
  - name: endDialog(any)
    uid: botbuilder-dialogs-adaptive.ActionContext.endDialog
    package: botbuilder-dialogs-adaptive
    summary: >-
      Ends a dialog and pops it off the stack. Returns an optional result to the
      dialog's parent.
    remarks: >-
      The _parent_ dialog is the next dialog on the dialog stack, if there is
      one. This method

      calls the parent's
      [Dialog.resumeDialog](xref:botbuilder-dialogs.Dialog.resumeDialog) method,

      passing the result returned by the ending dialog. If there is no parent
      dialog, the turn ends

      and the result is available to the bot through the returned object's

      [result](xref:botbuilder-dialogs.DialogTurnResult.result) property.


      The [status](xref:botbuilder-dialogs.DialogTurnResult.status) of returned
      object describes

      the status of the dialog stack after this method completes.


      Typically, you would call this from within the logic for a specific dialog
      to signal back to

      the dialog context that the dialog has completed, the dialog should be
      removed from the stack,

      and the parent dialog should resume.


      For example:

      ```JavaScript

      return await dc.endDialog(returnValue);

      ```


      **See also**

      - [beginDialog](xref:botbuilder-dialogs.DialogContext.beginDialog)

      - [replaceDialog](xref:botbuilder-dialogs.DialogContext.replaceDialog)

      - [Dialog.endDialog](xref:botbuilder-dialogs.Dialog.endDialog)
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function endDialog(result?: any)'
      parameters:
        - id: result
          type: any
          description: >
            Optional. A result to pass to the parent logic. This might be the
            next dialog
                 on the stack, or if this was the last dialog on the stack, a parent dialog context or
                 the bot's turn handler.
      return:
        type: Promise&lt;DialogTurnResult&gt;
        description: ''
  - name: findDialog(string)
    uid: botbuilder-dialogs-adaptive.ActionContext.findDialog
    package: botbuilder-dialogs-adaptive
    summary: Searches for a dialog with a given ID.
    remarks: >-
      If the dialog to start is not found in the
      [DialogSet](xref:botbuilder-dialogs.DialogSet) associated

      with this dialog context, it attempts to find the dialog in its parent
      dialog context.


      **See also**

      - [dialogs](xref:botbuilder-dialogs.DialogContext.dialogs)

      - [parent](xref:botbuilder-dialogs.DialogContext.parent)
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function findDialog(dialogId: string)'
      parameters:
        - id: dialogId
          type: string
          description: |
            ID of the dialog to search for.
      return:
        type: Dialog | undefined
        description: ''
  - name: 'prompt(string, string | Partial<Activity> | PromptOptions)'
    uid: botbuilder-dialogs-adaptive.ActionContext.prompt
    package: botbuilder-dialogs-adaptive
    summary: >-
      Helper function to simplify formatting the options for calling a prompt
      dialog.
    remarks: >-
      This helper method formats the object to use as the `options` parameter,
      and then calls

      [beginDialog](xref:botbuilder-dialogs.DialogContext.beginDialog) to start
      the specified prompt dialog.


      ```JavaScript

      return await dc.prompt('confirmPrompt', `Are you sure you'd like to
      quit?`);

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function prompt(dialogId: string, promptOrOptions: string |
        Partial<Activity> | PromptOptions)
      parameters:
        - id: dialogId
          type: string
          description: ID of the prompt dialog to start.
        - id: promptOrOptions
          type: string | Partial&lt;Activity&gt; | PromptOptions
          description: |-
            The text of the initial prompt to send the user,
                 the activity to send as the initial prompt, or
                 the object with which to format the prompt dialog.
      return:
        type: Promise&lt;DialogTurnResult&gt;
        description: ''
  - name: >-
      prompt(string, string | Partial<Activity> | PromptOptions, string |
      Choice[])
    uid: botbuilder-dialogs-adaptive.ActionContext.prompt_1
    package: botbuilder-dialogs-adaptive
    summary: ''
    remarks: >-
      This helper method formats the object to use as the `options` parameter,
      and then calls

      [beginDialog](xref:botbuilder-dialogs.DialogContext.beginDialog) to start
      the specified prompt dialog.


      ```JavaScript

      return await dc.prompt('confirmPrompt', `Are you sure you'd like to
      quit?`);

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function prompt(dialogId: string, promptOrOptions: string |
        Partial<Activity> | PromptOptions, choices: string | Choice[])
      parameters:
        - id: dialogId
          type: string
          description: ''
        - id: promptOrOptions
          type: string | Partial&lt;Activity&gt; | PromptOptions
          description: ''
        - id: choices
          type: 'string | Choice[]'
          description: ''
      return:
        type: Promise&lt;DialogTurnResult&gt;
        description: ''
  - name: queueChanges(ActionChangeList)
    uid: botbuilder-dialogs-adaptive.ActionContext.queueChanges
    package: botbuilder-dialogs-adaptive
    summary: >-
      Queues up a set of changes that will be applied when applyChanges() is
      called.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function queueChanges(changes: ActionChangeList)'
      parameters:
        - id: changes
          type: <xref uid="botbuilder-dialogs-adaptive.ActionChangeList" />
          description: |
            Plan changes to queue up.
  - name: 'replaceDialog(string, object)'
    uid: botbuilder-dialogs-adaptive.ActionContext.replaceDialog
    package: botbuilder-dialogs-adaptive
    summary: Ends the active dialog and starts a new dialog in its place.
    remarks: >-
      This is particularly useful for creating a loop or redirecting to another
      dialog.


      The [status](xref:botbuilder-dialogs.DialogTurnResult.status) of returned
      object describes

      the status of the dialog stack after this method completes.


      This method is similar to ending the current dialog and immediately
      beginning the new one.

      However, the parent dialog is neither resumed nor otherwise notified.


      **See also**

      - [beginDialog](xref:botbuilder-dialogs.DialogContext.beginDialog)

      - [endDialog](xref:botbuilder-dialogs.DialogContext.endDialog)
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function replaceDialog(dialogId: string, options?: object)'
      parameters:
        - id: dialogId
          type: string
          description: ID of the dialog to start.
        - id: options
          type: object
          description: |
            Optional. Arguments to pass into the new dialog when it starts.
      return:
        type: Promise&lt;DialogTurnResult&gt;
        description: ''
  - name: repromptDialog()
    uid: botbuilder-dialogs-adaptive.ActionContext.repromptDialog
    package: botbuilder-dialogs-adaptive
    summary: Requests the active dialog to re-prompt the user for input.
    remarks: >-
      This calls the active dialog's
      [repromptDialog](xref:botbuilder-dialogs.Dialog.repromptDialog) method.


      For example:

      ```JavaScript

      await dc.repromptDialog();

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: function repromptDialog()
      return:
        type: Promise&lt;void&gt;
        description: ''
extends: DialogContext
