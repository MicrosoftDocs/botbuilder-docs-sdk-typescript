### YamlMime:TSType
name: BeginSkill
uid: botbuilder-dialogs-adaptive.BeginSkill
package: botbuilder-dialogs-adaptive
summary: Begin a Skill.
fullName: BeginSkill
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: BeginSkill(SkillDialogOptions)
    uid: botbuilder-dialogs-adaptive.BeginSkill.constructor
    package: botbuilder-dialogs-adaptive
    summary: Creates a new `BeginSkillDialog instance.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new BeginSkill(options?: SkillDialogOptions)'
      parameters:
        - id: options
          type: SkillDialogOptions
          description: |
            Optional options used to configure the skill dialog.
properties:
  - name: $kind
    uid: botbuilder-dialogs-adaptive.BeginSkill.$kind
    package: botbuilder-dialogs-adaptive
    summary: ''
    fullName: $kind
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static $kind: string'
      return:
        description: ''
        type: string
  - name: activity
    uid: botbuilder-dialogs-adaptive.BeginSkill.activity
    package: botbuilder-dialogs-adaptive
    summary: Template for the activity.
    fullName: activity
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'activity: TemplateInterface<Partial<Activity>, DialogStateManager>'
      return:
        description: ''
        type: 'TemplateInterface&lt;Partial&lt;Activity&gt;, DialogStateManager&gt;'
  - name: activityProcessed
    uid: botbuilder-dialogs-adaptive.BeginSkill.activityProcessed
    package: botbuilder-dialogs-adaptive
    summary: Value indicating whether the new dialog should process the activity.
    fullName: activityProcessed
    remarks: >-
      The default for this will be true, which means the new dialog should not
      look at the activity.

      You can set this to false to dispatch the activity to the new dialog.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'activityProcessed: BoolExpression'
      return:
        description: ''
        type: BoolExpression
  - name: allowInterruptions
    uid: botbuilder-dialogs-adaptive.BeginSkill.allowInterruptions
    package: botbuilder-dialogs-adaptive
    summary: The interruption policy.
    fullName: allowInterruptions
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'allowInterruptions: BoolExpression'
      return:
        description: ''
        type: BoolExpression
  - name: botId
    uid: botbuilder-dialogs-adaptive.BeginSkill.botId
    package: botbuilder-dialogs-adaptive
    summary: The Microsoft App ID that will be calling the skill.
    fullName: botId
    remarks: >-
      Defauls to a value of `=settings.MicrosoftAppId` which retrievs the bots
      ID from settings.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'botId: StringExpression'
      return:
        description: ''
        type: StringExpression
  - name: connectionName
    uid: botbuilder-dialogs-adaptive.BeginSkill.connectionName
    package: botbuilder-dialogs-adaptive
    summary: Optional. The OAuth Connection Name for the Parent Bot.
    fullName: connectionName
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'connectionName: StringExpression'
      return:
        description: ''
        type: StringExpression
  - name: disabled
    uid: botbuilder-dialogs-adaptive.BeginSkill.disabled
    package: botbuilder-dialogs-adaptive
    summary: Optional expression which if is true will disable this action.
    fullName: disabled
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'disabled?: BoolExpression'
      return:
        description: ''
        type: BoolExpression
  - name: resultProperty
    uid: botbuilder-dialogs-adaptive.BeginSkill.resultProperty
    package: botbuilder-dialogs-adaptive
    summary: Optional property path to store the dialog result in.
    fullName: resultProperty
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'resultProperty?: StringExpression'
      return:
        description: ''
        type: StringExpression
  - name: skillAppId
    uid: botbuilder-dialogs-adaptive.BeginSkill.skillAppId
    package: botbuilder-dialogs-adaptive
    summary: The Microsoft App ID for the skill.
    fullName: skillAppId
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'skillAppId: StringExpression'
      return:
        description: ''
        type: StringExpression
  - name: skillEndpoint
    uid: botbuilder-dialogs-adaptive.BeginSkill.skillEndpoint
    package: botbuilder-dialogs-adaptive
    summary: The `/api/messages` endpoint for the skill.
    fullName: skillEndpoint
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'skillEndpoint: StringExpression'
      return:
        description: ''
        type: StringExpression
  - name: skillHostEndpoint
    uid: botbuilder-dialogs-adaptive.BeginSkill.skillHostEndpoint
    package: botbuilder-dialogs-adaptive
    summary: The callback Url for the skill host.
    fullName: skillHostEndpoint
    remarks: >-
      Defauls to a value of `=settings.SkillHostEndpoint` which retrieves the
      endpoint from settings.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'skillHostEndpoint: StringExpression'
      return:
        description: ''
        type: StringExpression
inheritedProperties:
  - name: EndOfTurn
    uid: botbuilder-dialogs-adaptive.BeginSkill.EndOfTurn
    package: botbuilder-dialogs-adaptive
    summary: Gets a default end-of-turn result.
    fullName: EndOfTurn
    remarks: >-
      This result indicates that a dialog (or a logical step within a dialog)
      has completed

      processing for the current turn, is still active, and is waiting for more
      input.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static EndOfTurn: DialogTurnResult'
      return:
        description: ''
        type: DialogTurnResult
    inheritanceDescription: <b>Inherited From</b> Dialog.EndOfTurn
  - name: id
    uid: botbuilder-dialogs-adaptive.BeginSkill.id
    package: botbuilder-dialogs-adaptive
    summary: ''
    fullName: id
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'id: string'
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> Dialog.id
  - name: telemetryClient
    uid: botbuilder-dialogs-adaptive.BeginSkill.telemetryClient
    package: botbuilder-dialogs-adaptive
    summary: ''
    fullName: telemetryClient
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'telemetryClient: BotTelemetryClient'
      return:
        description: ''
        type: BotTelemetryClient
    inheritanceDescription: <b>Inherited From</b> Dialog.telemetryClient
inheritedMethods:
  - name: 'configure(Record<string, unknown>)'
    uid: botbuilder-dialogs-adaptive.BeginSkill.configure
    package: botbuilder-dialogs-adaptive
    summary: Fluent method for configuring the object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function configure(config: Record<string, unknown>): this'
      parameters:
        - id: config
          type: 'Record&lt;string, unknown&gt;'
          description: Configuration settings to apply.
      return:
        description: >-
          The [Configurable](xref:botbuilder-dialogs.Configurable) after the
          operation is complete.
        type: this
    inheritanceDescription: <b>Inherited From</b> Configurable.configure
  - name: getVersion()
    uid: botbuilder-dialogs-adaptive.BeginSkill.getVersion
    package: botbuilder-dialogs-adaptive
    summary: >-
      An encoded string used to aid in the detection of bot changes on
      re-deployment.
    remarks: >-
      This defaults to returning the dialogs [id](#id) but can be overridden to
      provide more

      precise change detection logic. Any dialog on the stack that has its
      version change will

      result in a `versionChanged` event will be raised. If this event is not
      handled by the bot,

      an error will be thrown resulting in the bots error handler logic being
      run.


      Returning an empty string will disable version tracking for the component
      all together.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getVersion(): string'
      return:
        description: >-
          Unique string which should only change when dialog has changed in a
          way that should restart the dialog.
        type: string
    inheritanceDescription: <b>Inherited From</b> Dialog.getVersion
  - name: 'onDialogEvent(DialogContext, DialogEvent)'
    uid: botbuilder-dialogs-adaptive.BeginSkill.onDialogEvent
    package: botbuilder-dialogs-adaptive
    summary: >-
      Called when an event has been raised, using `DialogContext.emitEvent()`,
      by either the current dialog or a dialog that the current dialog started.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function onDialogEvent(dc: DialogContext, e: DialogEvent):
        Promise<boolean>
      parameters:
        - id: dc
          type: DialogContext
          description: The dialog context for the current turn of conversation.
        - id: e
          type: DialogEvent
          description: The event being raised.
      return:
        description: >-
          True if the event is handled by the current dialog and bubbling should
          stop.
        type: Promise&lt;boolean&gt;
    inheritanceDescription: <b>Inherited From</b> Dialog.onDialogEvent
methods:
  - name: 'beginDialog(DialogContext, BeginSkillDialogOptions)'
    uid: botbuilder-dialogs-adaptive.BeginSkill.beginDialog
    package: botbuilder-dialogs-adaptive
    summary: >-
      Called when the [Dialog](xref:botbuilder-dialogs.Dialog) is started and
      pushed onto the dialog stack.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDialog(dc: DialogContext, options?:
        BeginSkillDialogOptions): Promise<DialogTurnResult>
      parameters:
        - id: dc
          type: DialogContext
          description: >-
            The [DialogContext](xref:botbuilder-dialogs.DialogContext) for the
            current turn of conversation.
        - id: options
          type: BeginSkillDialogOptions
          description: Optional. Initial information to pass to the dialog.
      return:
        description: A `Promise` representing the asynchronous operation.
        type: Promise&lt;DialogTurnResult&gt;
  - name: continueDialog(DialogContext)
    uid: botbuilder-dialogs-adaptive.BeginSkill.continueDialog
    package: botbuilder-dialogs-adaptive
    summary: >-
      Called when the [Dialog](xref:botbuilder-dialogs.Dialog) is _continued_,
      where it is the active dialog and the

      user replies with a new activity.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function continueDialog(dc: DialogContext): Promise<DialogTurnResult>'
      parameters:
        - id: dc
          type: DialogContext
          description: >-
            The [DialogContext](xref:botbuilder-dialogs.DialogContext) for the
            current turn of conversation.
      return:
        description: A `Promise` representing the asynchronous operation.
        type: Promise&lt;DialogTurnResult&gt;
  - name: 'endDialog(TurnContext, DialogInstance, DialogReason)'
    uid: botbuilder-dialogs-adaptive.BeginSkill.endDialog
    package: botbuilder-dialogs-adaptive
    summary: 'Called when the [Dialog](xref:botbuilder-dialogs.Dialog) is ending.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function endDialog(turnContext: TurnContext, instance: DialogInstance,
        reason: DialogReason): Promise<void>
      parameters:
        - id: turnContext
          type: TurnContext
          description: >-
            (xref:botbuilder-core.TurnContext), the context object for this
            turn.
        - id: instance
          type: DialogInstance
          description: >-
            (xref:botbuilder-dialogs.DialogInstance), state information
            associated with the instance of this dialog on the dialog stack.
        - id: reason
          type: DialogReason
          description: '(xref:botbuilder-dialogs.DialogReason), reason why the dialog ended.'
      return:
        description: A `Promise` representing the asynchronous operation.
        type: Promise&lt;void&gt;
  - name: getConverter(Object)
    uid: botbuilder-dialogs-adaptive.BeginSkill.getConverter
    package: botbuilder-dialogs-adaptive
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getConverter(property: Object): Converter | ConverterFactory'
      parameters:
        - id: property
          type: Object
          description: The key of the conditional selector configuration.
      return:
        description: The converter for the selector configuration.
        type: Converter | ConverterFactory
  - name: 'repromptDialog(TurnContext, DialogInstance)'
    uid: botbuilder-dialogs-adaptive.BeginSkill.repromptDialog
    package: botbuilder-dialogs-adaptive
    summary: >-
      Called when the [Dialog](xref:botbuilder-dialogs.Dialog) should re-prompt
      the user for input.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function repromptDialog(turnContext: TurnContext, instance:
        DialogInstance): Promise<void>
      parameters:
        - id: turnContext
          type: TurnContext
          description: >-
            (xref:botbuilder-core.TurnContext), the context object for this
            turn.
        - id: instance
          type: DialogInstance
          description: >-
            (xref:botbuilder-dialogs.DialogInstance), state information for this
            dialog.
      return:
        description: A `Promise` representing the asynchronous operation.
        type: Promise&lt;void&gt;
  - name: 'resumeDialog(DialogContext, DialogReason, any)'
    uid: botbuilder-dialogs-adaptive.BeginSkill.resumeDialog
    package: botbuilder-dialogs-adaptive
    summary: >-
      Called when a child [Dialog](xref:botbuilder-dialogs.Dialog) completed its
      turn, returning control to this dialog.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function resumeDialog(dc: DialogContext, reason: DialogReason, result?:
        any): Promise<DialogTurnResult<any>>
      parameters:
        - id: dc
          type: DialogContext
          description: >-
            The [DialogContext](xref:botbuilder-dialogs.DialogContext) for the
            current turn of conversation.
        - id: reason
          type: DialogReason
          description: >-
            (xref:botbuilder-dialogs.DialogReason), reason why the dialog
            resumed.
        - id: result
          type: any
          description: |-
            Optional. Value returned from the dialog that was called. The type
            of the value returned is dependent on the child dialog.
      return:
        description: A `Promise` representing the asynchronous operation.
        type: Promise&lt;DialogTurnResult&lt;any&gt;&gt;
extends: SkillDialog
