### YamlMime:TSType
name: ICredentialProvider
uid: botframework-connector.ICredentialProvider
package: botframework-connector
summary: >
  CredentialProvider interface. This interface allows Bots to provide their own

  implementation of what is, and what is not, a valid appId and password. This
  is

  useful in the case of multi-tenant bots, where the bot may need to call

  out to a service to determine if a particular appid/password pair

  is valid.

  For Single Tenant bots (the vast majority) the simple static providers

  are sufficient.
fullName: ICredentialProvider
isPreview: false
isDeprecated: false
type: interface
methods:
  - name: getAppPassword(string)
    uid: botframework-connector.ICredentialProvider.getAppPassword
    package: botframework-connector
    summary: >-
      Get the app password for a given bot appId, if it is not a valid appId,
      return Null

      This method is async to enable custom implementations

      that may need to call out to serviced to validate the appId / password
      pair.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getAppPassword(appId: string)'
      parameters:
        - id: appId
          type: string
          description: bot appid
      return:
        type: Promise&lt;string | null&gt;
        description: password or null for invalid appid
  - name: isAuthenticationDisabled()
    uid: botframework-connector.ICredentialProvider.isAuthenticationDisabled
    package: botframework-connector
    summary: >-
      Checks if bot authentication is disabled.

      Return true if bot authentication is disabled.

      This method is async to enable custom implementations

      that may need to call out to serviced to validate the appId / password
      pair.
    isPreview: false
    isDeprecated: false
    syntax:
      content: function isAuthenticationDisabled()
      return:
        type: Promise&lt;boolean&gt;
        description: true if bot authentication is disabled.
  - name: isValidAppId(string)
    uid: botframework-connector.ICredentialProvider.isValidAppId
    package: botframework-connector
    summary: >-
      Validate AppId.

      This method is async to enable custom implementations

      that may need to call out to serviced to validate the appId / password
      pair.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function isValidAppId(appId: string)'
      parameters:
        - id: appId
          type: string
          description: bot appid
      return:
        type: Promise&lt;boolean&gt;
        description: true if it is a valid AppId
