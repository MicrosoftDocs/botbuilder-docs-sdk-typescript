### YamlMime:UniversalReference
items:
  - uid: botframework-connector.ICredentialProvider
    name: ICredentialProvider
    fullName: ICredentialProvider
    children:
      - botframework-connector.ICredentialProvider.getAppPassword
      - botframework-connector.ICredentialProvider.isAuthenticationDisabled
      - botframework-connector.ICredentialProvider.isValidAppId
    langs:
      - typeScript
    type: interface
    summary: >
      CredentialProvider interface. This interface allows Bots to provide their
      own

      implementation of what is, and what is not, a valid appId and password.
      This is

      useful in the case of multi-tenant bots, where the bot may need to call

      out to a service to determine if a particular appid/password pair

      is valid.

      For Single Tenant bots (the vast majority) the simple static providers

      are sufficient.
    package: botframework-connector
  - uid: botframework-connector.ICredentialProvider.getAppPassword
    name: getAppPassword(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Get the app password for a given bot appId, if it is not a valid appId,
      return Null

      This method is async to enable custom implementations

      that may need to call out to serviced to validate the appId / password
      pair.
    syntax:
      content: 'function getAppPassword(appId: string)'
      parameters:
        - id: appId
          type:
            - string
          description: bot appid
      return:
        type:
          - Promise<string | null>
        description: password or null for invalid appid
    package: botframework-connector
  - uid: botframework-connector.ICredentialProvider.isAuthenticationDisabled
    name: isAuthenticationDisabled()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Checks if bot authentication is disabled.

      Return true if bot authentication is disabled.

      This method is async to enable custom implementations

      that may need to call out to serviced to validate the appId / password
      pair.
    syntax:
      content: function isAuthenticationDisabled()
      parameters: []
      return:
        type:
          - Promise<boolean>
        description: true if bot authentication is disabled.
    package: botframework-connector
  - uid: botframework-connector.ICredentialProvider.isValidAppId
    name: isValidAppId(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Validate AppId.

      This method is async to enable custom implementations

      that may need to call out to serviced to validate the appId / password
      pair.
    syntax:
      content: 'function isValidAppId(appId: string)'
      parameters:
        - id: appId
          type:
            - string
          description: bot appid
      return:
        type:
          - Promise<boolean>
        description: true if it is a valid AppId
    package: botframework-connector
