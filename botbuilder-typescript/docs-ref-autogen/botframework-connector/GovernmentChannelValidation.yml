### YamlMime:UniversalReference
items:
  - uid: botframework-connector.GovernmentChannelValidation
    name: GovernmentChannelValidation
    fullName: GovernmentChannelValidation
    children:
      - >-
        botframework-connector.GovernmentChannelValidation.authenticateChannelToken
      - >-
        botframework-connector.GovernmentChannelValidation.authenticateChannelTokenWithServiceUrl
      - botframework-connector.GovernmentChannelValidation.validateIdentity
    langs:
      - typeScript
    type: module
    summary: ''
    package: botframework-connector
  - uid: >-
      botframework-connector.GovernmentChannelValidation.authenticateChannelToken
    name: >-
      authenticateChannelToken(string, ICredentialProvider, string,
      AuthenticationConfiguration)
    children: []
    type: function
    langs:
      - typeScript
    summary: >-
      Validate the incoming Auth Header as a token sent from the Bot Framework
      Service.

      A token issued by the Bot Framework emulator will FAIL this check.
    syntax:
      content: >-
        function authenticateChannelToken(authHeader: string, credentials:
        ICredentialProvider, channelId: string, authConfig?:
        AuthenticationConfiguration)
      parameters:
        - id: authHeader
          type:
            - string
          description: 'The raw HTTP header in the format: "Bearer [longString]"'
        - id: credentials
          type:
            - botframework-connector.ICredentialProvider
          description: 'The user defined set of valid credentials, such as the AppId.'
        - id: channelId
          type:
            - string
          description: ''
        - id: authConfig
          type:
            - botframework-connector.AuthenticationConfiguration
          description: ''
          optional: true
      return:
        type:
          - Promise<botframework-connector.ClaimsIdentity>
        description: A valid ClaimsIdentity.
    package: botframework-connector
  - uid: >-
      botframework-connector.GovernmentChannelValidation.authenticateChannelTokenWithServiceUrl
    name: >-
      authenticateChannelTokenWithServiceUrl(string, ICredentialProvider,
      string, string)
    children: []
    type: function
    langs:
      - typeScript
    summary: >-
      Validate the incoming Auth Header as a token sent from the Bot Framework
      Service.

      A token issued by the Bot Framework emulator will FAIL this check.
    syntax:
      content: >-
        function authenticateChannelTokenWithServiceUrl(authHeader: string,
        credentials: ICredentialProvider, serviceUrl: string, channelId: string)
      parameters:
        - id: authHeader
          type:
            - string
          description: 'The raw HTTP header in the format: "Bearer [longString]"'
        - id: credentials
          type:
            - botframework-connector.ICredentialProvider
          description: 'The user defined set of valid credentials, such as the AppId.'
        - id: serviceUrl
          type:
            - string
          description: The ServiceUrl Claim value that must match in the identity.
        - id: channelId
          type:
            - string
          description: ''
      return:
        type:
          - Promise<botframework-connector.ClaimsIdentity>
        description: A valid ClaimsIdentity.
    package: botframework-connector
  - uid: botframework-connector.GovernmentChannelValidation.validateIdentity
    name: 'validateIdentity(ClaimsIdentity, ICredentialProvider)'
    children: []
    type: function
    langs:
      - typeScript
    summary: Validate the ClaimsIdentity to ensure it came from the channel service.
    syntax:
      content: >-
        function validateIdentity(identity: ClaimsIdentity, credentials:
        ICredentialProvider)
      parameters:
        - id: identity
          type:
            - botframework-connector.ClaimsIdentity
          description: The identity to validate
        - id: credentials
          type:
            - botframework-connector.ICredentialProvider
          description: 'The user defined set of valid credentials, such as the AppId.'
      return:
        type:
          - Promise<botframework-connector.ClaimsIdentity>
        description: A valid ClaimsIdentity.
    package: botframework-connector
references:
  - uid: botframework-connector.ICredentialProvider
    name: ICredentialProvider
    spec.typeScript:
      - name: ICredentialProvider
        fullName: ICredentialProvider
        uid: botframework-connector.ICredentialProvider
  - uid: botframework-connector.AuthenticationConfiguration
    name: AuthenticationConfiguration
    spec.typeScript:
      - name: AuthenticationConfiguration
        fullName: AuthenticationConfiguration
        uid: botframework-connector.AuthenticationConfiguration
  - uid: Promise<botframework-connector.ClaimsIdentity>
    name: ClaimsIdentity>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ClaimsIdentity
        fullName: ClaimsIdentity
        uid: botframework-connector.ClaimsIdentity
      - name: '>'
        fullName: '>'
  - uid: botframework-connector.ClaimsIdentity
    name: ClaimsIdentity
    spec.typeScript:
      - name: ClaimsIdentity
        fullName: ClaimsIdentity
        uid: botframework-connector.ClaimsIdentity
  - uid: >-
      botframework-connector.GovernmentChannelValidation.authenticateChannelToken
    name: authenticateChannelToken
  - uid: >-
      botframework-connector.GovernmentChannelValidation.authenticateChannelTokenWithServiceUrl
    name: authenticateChannelTokenWithServiceUrl
  - uid: botframework-connector.GovernmentChannelValidation.validateIdentity
    name: validateIdentity
