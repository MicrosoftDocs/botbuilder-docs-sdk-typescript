### YamlMime:TSType
name: Conversations
uid: botframework-connector.Conversations
package: botframework-connector
summary: Class representing a Conversations.
fullName: Conversations
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: Conversations(ConnectorClientContext)
    uid: botframework-connector.Conversations.constructor
    package: botframework-connector
    summary: Create a Conversations.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new Conversations(client: ConnectorClientContext)'
      parameters:
        - id: client
          type: <xref uid="botframework-connector.ConnectorClientContext" />
          description: |
            Reference to the service client.
methods:
  - name: 'createConversation(ConversationParameters, RequestOptionsBase)'
    uid: botframework-connector.Conversations.createConversation
    package: botframework-connector
    summary: >-
      Create a new Conversation.

      POST to this method with a

      * Bot being the bot creating the conversation

      * IsGroup set to true if this is not a direct message (default is false)

      * Array containing the members to include in the conversation


      The return value is a ResourceResponse which contains a conversation id
      which is suitable for

      use

      in the message payload and REST API uris.


      Most channels only support the semantics of bots initiating a direct
      message conversation.  An

      example of how to do that would be:


      ```

      const resource = await connector.conversations.createConversation({
          bot,
          members: [{ id: 'user1' }]
      });

      await connector.conversations.sendToConversation(resource.Id, ... );

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createConversation(parameters: ConversationParameters,
        options?: RequestOptionsBase):
        Promise<Models.ConversationsCreateConversationResponse>
      parameters:
        - id: parameters
          type: ConversationParameters
          description: Parameters to create the conversation from
        - id: options
          type: RequestOptionsBase
          description: ''
      return:
        description: Promise<Models.ConversationsCreateConversationResponse>
        type: >-
          Promise&lt;<xref uid="Models.ConversationsCreateConversationResponse"
          />&gt;
  - name: >-
      createConversation(ConversationParameters, RequestOptionsBase,
      ServiceCallback<ConversationResourceResponse>)
    uid: botframework-connector.Conversations.createConversation_2
    package: botframework-connector
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createConversation(parameters: ConversationParameters, options:
        RequestOptionsBase, callback:
        ServiceCallback<ConversationResourceResponse>)
      parameters:
        - id: parameters
          type: ConversationParameters
          description: Parameters to create the conversation from
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;ConversationResourceResponse&gt;
          description: |
            The callback
  - name: >-
      createConversation(ConversationParameters,
      ServiceCallback<ConversationResourceResponse>)
    uid: botframework-connector.Conversations.createConversation_1
    package: botframework-connector
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createConversation(parameters: ConversationParameters,
        callback: ServiceCallback<ConversationResourceResponse>)
      parameters:
        - id: parameters
          type: ConversationParameters
          description: Parameters to create the conversation from
        - id: callback
          type: ServiceCallback&lt;ConversationResourceResponse&gt;
          description: |
            The callback
  - name: 'deleteActivity(string, string, RequestOptionsBase)'
    uid: botframework-connector.Conversations.deleteActivity
    package: botframework-connector
    summary: >-
      Delete an existing activity.

      Some channels allow you to delete an existing activity, and if successful
      this method will

      remove the specified activity.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteActivity(conversationId: string, activityId: string,
        options?: RequestOptionsBase): Promise<RestResponse>
      parameters:
        - id: conversationId
          type: string
          description: Conversation ID
        - id: activityId
          type: string
          description: activityId to delete
        - id: options
          type: RequestOptionsBase
          description: ''
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;RestResponse&gt;
  - name: 'deleteActivity(string, string, RequestOptionsBase, ServiceCallback<void>)'
    uid: botframework-connector.Conversations.deleteActivity_2
    package: botframework-connector
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteActivity(conversationId: string, activityId: string,
        options: RequestOptionsBase, callback: ServiceCallback<void>)
      parameters:
        - id: conversationId
          type: string
          description: Conversation ID
        - id: activityId
          type: string
          description: activityId to delete
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'deleteActivity(string, string, ServiceCallback<void>)'
    uid: botframework-connector.Conversations.deleteActivity_1
    package: botframework-connector
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteActivity(conversationId: string, activityId: string,
        callback: ServiceCallback<void>)
      parameters:
        - id: conversationId
          type: string
          description: Conversation ID
        - id: activityId
          type: string
          description: activityId to delete
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'deleteConversationMember(string, string, RequestOptionsBase)'
    uid: botframework-connector.Conversations.deleteConversationMember
    package: botframework-connector
    summary: >-
      Deletes a member from a conversation.

      This REST API takes a ConversationId and a memberId (of type string) and
      removes that member

      from the conversation. If that member was the last member

      of the conversation, the conversation will also be deleted.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteConversationMember(conversationId: string, memberId:
        string, options?: RequestOptionsBase): Promise<RestResponse>
      parameters:
        - id: conversationId
          type: string
          description: Conversation ID
        - id: memberId
          type: string
          description: ID of the member to delete from this conversation
        - id: options
          type: RequestOptionsBase
          description: ''
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;RestResponse&gt;
  - name: >-
      deleteConversationMember(string, string, RequestOptionsBase,
      ServiceCallback<void>)
    uid: botframework-connector.Conversations.deleteConversationMember_2
    package: botframework-connector
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteConversationMember(conversationId: string, memberId:
        string, options: RequestOptionsBase, callback: ServiceCallback<void>)
      parameters:
        - id: conversationId
          type: string
          description: Conversation ID
        - id: memberId
          type: string
          description: ID of the member to delete from this conversation
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'deleteConversationMember(string, string, ServiceCallback<void>)'
    uid: botframework-connector.Conversations.deleteConversationMember_1
    package: botframework-connector
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteConversationMember(conversationId: string, memberId:
        string, callback: ServiceCallback<void>)
      parameters:
        - id: conversationId
          type: string
          description: Conversation ID
        - id: memberId
          type: string
          description: ID of the member to delete from this conversation
        - id: callback
          type: ServiceCallback&lt;void&gt;
          description: |
            The callback
  - name: 'getActivityMembers(string, string, RequestOptionsBase)'
    uid: botframework-connector.Conversations.getActivityMembers
    package: botframework-connector
    summary: >-
      Enumerate the members of an activity.

      This REST API takes a ConversationId and a ActivityId, returning an array
      of ChannelAccount

      objects representing the members of the particular activity in the
      conversation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getActivityMembers(conversationId: string, activityId: string,
        options?: RequestOptionsBase):
        Promise<Models.ConversationsGetActivityMembersResponse>
      parameters:
        - id: conversationId
          type: string
          description: Conversation ID
        - id: activityId
          type: string
          description: Activity ID
        - id: options
          type: RequestOptionsBase
          description: ''
      return:
        description: Promise<Models.ConversationsGetActivityMembersResponse>
        type: >-
          Promise&lt;<xref uid="Models.ConversationsGetActivityMembersResponse"
          />&gt;
  - name: >-
      getActivityMembers(string, string, RequestOptionsBase,
      ServiceCallback<ChannelAccount[]>)
    uid: botframework-connector.Conversations.getActivityMembers_2
    package: botframework-connector
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getActivityMembers(conversationId: string, activityId: string,
        options: RequestOptionsBase, callback:
        ServiceCallback<ChannelAccount[]>)
      parameters:
        - id: conversationId
          type: string
          description: Conversation ID
        - id: activityId
          type: string
          description: Activity ID
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: 'ServiceCallback&lt;ChannelAccount[]&gt;'
          description: |
            The callback
  - name: 'getActivityMembers(string, string, ServiceCallback<ChannelAccount[]>)'
    uid: botframework-connector.Conversations.getActivityMembers_1
    package: botframework-connector
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getActivityMembers(conversationId: string, activityId: string,
        callback: ServiceCallback<ChannelAccount[]>)
      parameters:
        - id: conversationId
          type: string
          description: Conversation ID
        - id: activityId
          type: string
          description: Activity ID
        - id: callback
          type: 'ServiceCallback&lt;ChannelAccount[]&gt;'
          description: |
            The callback
  - name: >-
      getConversationMember(string, string, RequestOptionsBase |
      ServiceCallback<ChannelAccount[]>, ServiceCallback<ChannelAccount[]>)
    uid: botframework-connector.Conversations.getConversationMember
    package: botframework-connector
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getConversationMember(conversationId: string, memberId: string,
        options?: RequestOptionsBase | ServiceCallback<ChannelAccount[]>,
        callback?: ServiceCallback<ChannelAccount[]>):
        Promise<Models.ConversationsGetConversationMemberResponse>
      parameters:
        - id: conversationId
          type: string
          description: Conversation ID
        - id: memberId
          type: string
          description: MemberId for the user
        - id: options
          type: 'RequestOptionsBase | ServiceCallback&lt;ChannelAccount[]&gt;'
          description: The optional parameters
        - id: callback
          type: 'ServiceCallback&lt;ChannelAccount[]&gt;'
          description: |
            The callback
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="Models.ConversationsGetConversationMemberResponse" />&gt;
  - name: 'getConversationMembers(string, RequestOptionsBase)'
    uid: botframework-connector.Conversations.getConversationMembers
    package: botframework-connector
    summary: >-
      Enumerate the members of a conversation.

      This REST API takes a ConversationId and returns an array of
      ChannelAccount objects representing

      the members of the conversation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getConversationMembers(conversationId: string, options?:
        RequestOptionsBase):
        Promise<Models.ConversationsGetConversationMembersResponse>
      parameters:
        - id: conversationId
          type: string
          description: Conversation ID
        - id: options
          type: RequestOptionsBase
          description: ''
      return:
        description: Promise<Models.ConversationsGetConversationMembersResponse>
        type: >-
          Promise&lt;<xref
          uid="Models.ConversationsGetConversationMembersResponse" />&gt;
  - name: >-
      getConversationMembers(string, RequestOptionsBase,
      ServiceCallback<ChannelAccount[]>)
    uid: botframework-connector.Conversations.getConversationMembers_2
    package: botframework-connector
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getConversationMembers(conversationId: string, options:
        RequestOptionsBase, callback: ServiceCallback<ChannelAccount[]>)
      parameters:
        - id: conversationId
          type: string
          description: Conversation ID
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: 'ServiceCallback&lt;ChannelAccount[]&gt;'
          description: |
            The callback
  - name: 'getConversationMembers(string, ServiceCallback<ChannelAccount[]>)'
    uid: botframework-connector.Conversations.getConversationMembers_1
    package: botframework-connector
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getConversationMembers(conversationId: string, callback:
        ServiceCallback<ChannelAccount[]>)
      parameters:
        - id: conversationId
          type: string
          description: Conversation ID
        - id: callback
          type: 'ServiceCallback&lt;ChannelAccount[]&gt;'
          description: |
            The callback
  - name: >-
      getConversationPagedMembers(string,
      ConversationsGetConversationPagedMembersOptionalParams)
    uid: botframework-connector.Conversations.getConversationPagedMembers
    package: botframework-connector
    summary: >-
      Enumerate the members of a conversation one page at a time.

      This REST API takes a ConversationId. Optionally a pageSize and/or
      continuationToken can be

      provided. It returns a PagedMembersResult, which contains an array

      of ChannelAccounts representing the members of the conversation and a
      continuation token that

      can be used to get more values.


      One page of ChannelAccounts records are returned with each call. The
      number of records in a page

      may vary between channels and calls. The pageSize parameter can be used as

      a suggestion. If there are no additional results the response will not
      contain a continuation

      token. If there are no members in the conversation the Members will be
      empty or not present in

      the response.


      A response to a request that has a continuation token from a prior request
      may rarely return

      members from a previous request.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getConversationPagedMembers(conversationId: string, options?:
        ConversationsGetConversationPagedMembersOptionalParams):
        Promise<Models.ConversationsGetConversationPagedMembersResponse>
      parameters:
        - id: conversationId
          type: string
          description: Conversation ID
        - id: options
          type: >-
            <xref
            uid="botframework-connector.ConversationsGetConversationPagedMembersOptionalParams"
            />
          description: ''
      return:
        description: Promise<Models.ConversationsGetConversationPagedMembersResponse>
        type: >-
          Promise&lt;<xref
          uid="Models.ConversationsGetConversationPagedMembersResponse" />&gt;
  - name: >-
      getConversationPagedMembers(string,
      ConversationsGetConversationPagedMembersOptionalParams,
      ServiceCallback<PagedMembersResult>)
    uid: botframework-connector.Conversations.getConversationPagedMembers_2
    package: botframework-connector
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getConversationPagedMembers(conversationId: string, options:
        ConversationsGetConversationPagedMembersOptionalParams, callback:
        ServiceCallback<PagedMembersResult>)
      parameters:
        - id: conversationId
          type: string
          description: Conversation ID
        - id: options
          type: >-
            <xref
            uid="botframework-connector.ConversationsGetConversationPagedMembersOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;PagedMembersResult&gt;
          description: |
            The callback
  - name: 'getConversationPagedMembers(string, ServiceCallback<PagedMembersResult>)'
    uid: botframework-connector.Conversations.getConversationPagedMembers_1
    package: botframework-connector
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getConversationPagedMembers(conversationId: string, callback:
        ServiceCallback<PagedMembersResult>)
      parameters:
        - id: conversationId
          type: string
          description: Conversation ID
        - id: callback
          type: ServiceCallback&lt;PagedMembersResult&gt;
          description: |
            The callback
  - name: getConversations(ConversationsGetConversationsOptionalParams)
    uid: botframework-connector.Conversations.getConversations
    package: botframework-connector
    summary: >-
      List the Conversations in which this bot has participated.

      GET from this method with a skip token


      The return value is a ConversationsResult, which contains an array of
      ConversationMembers and a

      skip token.  If the skip token is not empty, then

      there are further values to be returned. Call this method again with the
      returned token to get

      more values.


      Each ConversationMembers object contains the ID of the conversation and an
      array of

      ChannelAccounts that describe the members of the conversation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getConversations(options?:
        ConversationsGetConversationsOptionalParams):
        Promise<Models.ConversationsGetConversationsResponse>
      parameters:
        - id: options
          type: >-
            <xref
            uid="botframework-connector.ConversationsGetConversationsOptionalParams"
            />
          description: ''
      return:
        description: Promise<Models.ConversationsGetConversationsResponse>
        type: >-
          Promise&lt;<xref uid="Models.ConversationsGetConversationsResponse"
          />&gt;
  - name: >-
      getConversations(ConversationsGetConversationsOptionalParams,
      ServiceCallback<ConversationsResult>)
    uid: botframework-connector.Conversations.getConversations_2
    package: botframework-connector
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getConversations(options:
        ConversationsGetConversationsOptionalParams, callback:
        ServiceCallback<ConversationsResult>)
      parameters:
        - id: options
          type: >-
            <xref
            uid="botframework-connector.ConversationsGetConversationsOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;ConversationsResult&gt;
          description: |
            The callback
  - name: getConversations(ServiceCallback<ConversationsResult>)
    uid: botframework-connector.Conversations.getConversations_1
    package: botframework-connector
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getConversations(callback:
        ServiceCallback<ConversationsResult>)
      parameters:
        - id: callback
          type: ServiceCallback&lt;ConversationsResult&gt;
          description: |
            The callback
  - name: 'replyToActivity(string, string, Partial<Activity>, RequestOptionsBase)'
    uid: botframework-connector.Conversations.replyToActivity
    package: botframework-connector
    summary: >-
      This method allows you to reply to an activity.

      This is slightly different from SendToConversation().

      * SendToConversation(conversationId) - will append the activity to the end
      of the conversation

      according to the timestamp or semantics of the channel.

      * ReplyToActivity(conversationId,ActivityId) - adds the activity as a
      reply to another activity,

      if the channel supports it. If the channel does not support nested
      replies, ReplyToActivity

      falls back to SendToConversation.


      Use ReplyToActivity when replying to a specific activity in the
      conversation.


      Use SendToConversation in all other cases.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function replyToActivity(conversationId: string, activityId: string,
        activity: Partial<Activity>, options?: RequestOptionsBase):
        Promise<Models.ConversationsReplyToActivityResponse>
      parameters:
        - id: conversationId
          type: string
          description: Conversation ID
        - id: activityId
          type: string
          description: activityId the reply is to (OPTIONAL)
        - id: activity
          type: Partial&lt;Activity&gt;
          description: Activity to send
        - id: options
          type: RequestOptionsBase
          description: ''
      return:
        description: Promise<Models.ConversationsReplyToActivityResponse>
        type: >-
          Promise&lt;<xref uid="Models.ConversationsReplyToActivityResponse"
          />&gt;
  - name: >-
      replyToActivity(string, string, Partial<Activity>, RequestOptionsBase,
      ServiceCallback<ResourceResponse>)
    uid: botframework-connector.Conversations.replyToActivity_2
    package: botframework-connector
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function replyToActivity(conversationId: string, activityId: string,
        activity: Partial<Activity>, options: RequestOptionsBase, callback:
        ServiceCallback<ResourceResponse>)
      parameters:
        - id: conversationId
          type: string
          description: Conversation ID
        - id: activityId
          type: string
          description: activityId the reply is to (OPTIONAL)
        - id: activity
          type: Partial&lt;Activity&gt;
          description: Activity to send
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;ResourceResponse&gt;
          description: |
            The callback
  - name: >-
      replyToActivity(string, string, Partial<Activity>,
      ServiceCallback<ResourceResponse>)
    uid: botframework-connector.Conversations.replyToActivity_1
    package: botframework-connector
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function replyToActivity(conversationId: string, activityId: string,
        activity: Partial<Activity>, callback:
        ServiceCallback<ResourceResponse>)
      parameters:
        - id: conversationId
          type: string
          description: Conversation ID
        - id: activityId
          type: string
          description: activityId the reply is to (OPTIONAL)
        - id: activity
          type: Partial&lt;Activity&gt;
          description: Activity to send
        - id: callback
          type: ServiceCallback&lt;ResourceResponse&gt;
          description: |
            The callback
  - name: 'sendConversationHistory(string, Transcript, RequestOptionsBase)'
    uid: botframework-connector.Conversations.sendConversationHistory
    package: botframework-connector
    summary: >-
      This method allows you to upload the historic activities to the
      conversation.

      Sender must ensure that the historic activities have unique ids and
      appropriate timestamps. The

      ids are used by the client to deal with duplicate activities and the
      timestamps are used by the

      client to render the activities in the right order.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function sendConversationHistory(conversationId: string, history:
        Transcript, options?: RequestOptionsBase):
        Promise<Models.ConversationsSendConversationHistoryResponse>
      parameters:
        - id: conversationId
          type: string
          description: Conversation ID
        - id: history
          type: Transcript
          description: Historic activities
        - id: options
          type: RequestOptionsBase
          description: ''
      return:
        description: Promise<Models.ConversationsSendConversationHistoryResponse>
        type: >-
          Promise&lt;<xref
          uid="Models.ConversationsSendConversationHistoryResponse" />&gt;
  - name: >-
      sendConversationHistory(string, Transcript, RequestOptionsBase,
      ServiceCallback<ResourceResponse>)
    uid: botframework-connector.Conversations.sendConversationHistory_2
    package: botframework-connector
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function sendConversationHistory(conversationId: string, history:
        Transcript, options: RequestOptionsBase, callback:
        ServiceCallback<ResourceResponse>)
      parameters:
        - id: conversationId
          type: string
          description: Conversation ID
        - id: history
          type: Transcript
          description: Historic activities
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;ResourceResponse&gt;
          description: |
            The callback
  - name: >-
      sendConversationHistory(string, Transcript,
      ServiceCallback<ResourceResponse>)
    uid: botframework-connector.Conversations.sendConversationHistory_1
    package: botframework-connector
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function sendConversationHistory(conversationId: string, history:
        Transcript, callback: ServiceCallback<ResourceResponse>)
      parameters:
        - id: conversationId
          type: string
          description: Conversation ID
        - id: history
          type: Transcript
          description: Historic activities
        - id: callback
          type: ServiceCallback&lt;ResourceResponse&gt;
          description: |
            The callback
  - name: 'sendToConversation(string, Partial<Activity>, RequestOptionsBase)'
    uid: botframework-connector.Conversations.sendToConversation
    package: botframework-connector
    summary: >-
      This method allows you to send an activity to the end of a conversation.

      This is slightly different from ReplyToActivity().

      * SendToConversation(conversationId) - will append the activity to the end
      of the conversation

      according to the timestamp or semantics of the channel.

      * ReplyToActivity(conversationId,ActivityId) - adds the activity as a
      reply to another activity,

      if the channel supports it. If the channel does not support nested
      replies, ReplyToActivity

      falls back to SendToConversation.


      Use ReplyToActivity when replying to a specific activity in the
      conversation.


      Use SendToConversation in all other cases.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function sendToConversation(conversationId: string, activity:
        Partial<Activity>, options?: RequestOptionsBase):
        Promise<Models.ConversationsSendToConversationResponse>
      parameters:
        - id: conversationId
          type: string
          description: Conversation ID
        - id: activity
          type: Partial&lt;Activity&gt;
          description: Activity to send
        - id: options
          type: RequestOptionsBase
          description: ''
      return:
        description: Promise<Models.ConversationsSendToConversationResponse>
        type: >-
          Promise&lt;<xref uid="Models.ConversationsSendToConversationResponse"
          />&gt;
  - name: >-
      sendToConversation(string, Partial<Activity>, RequestOptionsBase,
      ServiceCallback<ResourceResponse>)
    uid: botframework-connector.Conversations.sendToConversation_2
    package: botframework-connector
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function sendToConversation(conversationId: string, activity:
        Partial<Activity>, options: RequestOptionsBase, callback:
        ServiceCallback<ResourceResponse>)
      parameters:
        - id: conversationId
          type: string
          description: Conversation ID
        - id: activity
          type: Partial&lt;Activity&gt;
          description: Activity to send
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;ResourceResponse&gt;
          description: |
            The callback
  - name: >-
      sendToConversation(string, Partial<Activity>,
      ServiceCallback<ResourceResponse>)
    uid: botframework-connector.Conversations.sendToConversation_1
    package: botframework-connector
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function sendToConversation(conversationId: string, activity:
        Partial<Activity>, callback: ServiceCallback<ResourceResponse>)
      parameters:
        - id: conversationId
          type: string
          description: Conversation ID
        - id: activity
          type: Partial&lt;Activity&gt;
          description: Activity to send
        - id: callback
          type: ServiceCallback&lt;ResourceResponse&gt;
          description: |
            The callback
  - name: 'updateActivity(string, string, Partial<Activity>, RequestOptionsBase)'
    uid: botframework-connector.Conversations.updateActivity
    package: botframework-connector
    summary: >-
      Edit an existing activity.

      Some channels allow you to edit an existing activity to reflect the new
      state of a bot

      conversation.


      For example, you can remove buttons after someone has clicked "Approve"
      button.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updateActivity(conversationId: string, activityId: string,
        activity: Partial<Activity>, options?: RequestOptionsBase):
        Promise<Models.ConversationsUpdateActivityResponse>
      parameters:
        - id: conversationId
          type: string
          description: Conversation ID
        - id: activityId
          type: string
          description: activityId to update
        - id: activity
          type: Partial&lt;Activity&gt;
          description: replacement Activity
        - id: options
          type: RequestOptionsBase
          description: ''
      return:
        description: Promise<Models.ConversationsUpdateActivityResponse>
        type: >-
          Promise&lt;<xref uid="Models.ConversationsUpdateActivityResponse"
          />&gt;
  - name: >-
      updateActivity(string, string, Partial<Activity>, RequestOptionsBase,
      ServiceCallback<ResourceResponse>)
    uid: botframework-connector.Conversations.updateActivity_2
    package: botframework-connector
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updateActivity(conversationId: string, activityId: string,
        activity: Partial<Activity>, options: RequestOptionsBase, callback:
        ServiceCallback<ResourceResponse>)
      parameters:
        - id: conversationId
          type: string
          description: Conversation ID
        - id: activityId
          type: string
          description: activityId to update
        - id: activity
          type: Partial&lt;Activity&gt;
          description: replacement Activity
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;ResourceResponse&gt;
          description: |
            The callback
  - name: >-
      updateActivity(string, string, Partial<Activity>,
      ServiceCallback<ResourceResponse>)
    uid: botframework-connector.Conversations.updateActivity_1
    package: botframework-connector
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updateActivity(conversationId: string, activityId: string,
        activity: Partial<Activity>, callback:
        ServiceCallback<ResourceResponse>)
      parameters:
        - id: conversationId
          type: string
          description: Conversation ID
        - id: activityId
          type: string
          description: activityId to update
        - id: activity
          type: Partial&lt;Activity&gt;
          description: replacement Activity
        - id: callback
          type: ServiceCallback&lt;ResourceResponse&gt;
          description: |
            The callback
  - name: 'uploadAttachment(string, AttachmentData, RequestOptionsBase)'
    uid: botframework-connector.Conversations.uploadAttachment
    package: botframework-connector
    summary: >-
      Upload an attachment directly into a channel's blob storage.

      This is useful because it allows you to store data in a compliant store
      when dealing with

      enterprises.


      The response is a ResourceResponse which contains an AttachmentId which is
      suitable for using

      with the attachments API.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function uploadAttachment(conversationId: string, attachmentUpload:
        AttachmentData, options?: RequestOptionsBase):
        Promise<Models.ConversationsUploadAttachmentResponse>
      parameters:
        - id: conversationId
          type: string
          description: Conversation ID
        - id: attachmentUpload
          type: AttachmentData
          description: Attachment data
        - id: options
          type: RequestOptionsBase
          description: ''
      return:
        description: Promise<Models.ConversationsUploadAttachmentResponse>
        type: >-
          Promise&lt;<xref uid="Models.ConversationsUploadAttachmentResponse"
          />&gt;
  - name: >-
      uploadAttachment(string, AttachmentData, RequestOptionsBase,
      ServiceCallback<ResourceResponse>)
    uid: botframework-connector.Conversations.uploadAttachment_2
    package: botframework-connector
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function uploadAttachment(conversationId: string, attachmentUpload:
        AttachmentData, options: RequestOptionsBase, callback:
        ServiceCallback<ResourceResponse>)
      parameters:
        - id: conversationId
          type: string
          description: Conversation ID
        - id: attachmentUpload
          type: AttachmentData
          description: Attachment data
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;ResourceResponse&gt;
          description: |
            The callback
  - name: >-
      uploadAttachment(string, AttachmentData,
      ServiceCallback<ResourceResponse>)
    uid: botframework-connector.Conversations.uploadAttachment_1
    package: botframework-connector
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function uploadAttachment(conversationId: string, attachmentUpload:
        AttachmentData, callback: ServiceCallback<ResourceResponse>)
      parameters:
        - id: conversationId
          type: string
          description: Conversation ID
        - id: attachmentUpload
          type: AttachmentData
          description: Attachment data
        - id: callback
          type: ServiceCallback&lt;ResourceResponse&gt;
          description: |
            The callback
