### YamlMime:UniversalReference
items:
  - uid: botframework-connector.SkillValidation
    name: SkillValidation
    fullName: SkillValidation
    children:
      - botframework-connector.SkillValidation.authenticateChannelToken
      - botframework-connector.SkillValidation.isSkillClaim
      - botframework-connector.SkillValidation.isSkillToken
    langs:
      - typeScript
    type: module
    summary: Validates JWT tokens sent to and from a Skill.
    package: botframework-connector
  - uid: botframework-connector.SkillValidation.authenticateChannelToken
    name: >-
      authenticateChannelToken(string, ICredentialProvider, string, string,
      AuthenticationConfiguration)
    children: []
    type: function
    langs:
      - typeScript
    summary: >-
      Validates that the incoming Auth Header is a token sent from a bot to a
      skill or from a skill to a bot.
    syntax:
      content: >-
        function authenticateChannelToken(authHeader: string, credentials:
        ICredentialProvider, channelService: string, channelId: string,
        authConfig: AuthenticationConfiguration)
      parameters:
        - id: authHeader
          type:
            - string
          description: 'The raw HTTP header in the format: "Bearer [longString]".'
        - id: credentials
          type:
            - botframework-connector.ICredentialProvider
          description: 'The user defined set of valid credentials, such as the AppId.'
        - id: channelService
          type:
            - string
          description: >-
            The channelService value that distinguishes public Azure from US
            Government Azure.
        - id: channelId
          type:
            - string
          description: The ID of the channel to validate.
        - id: authConfig
          type:
            - botframework-connector.AuthenticationConfiguration
          description: The authentication configuration.
      return:
        type:
          - Promise<botframework-connector.ClaimsIdentity>
        description: A "ClaimsIdentity" instance if the validation is successful.
    package: botframework-connector
  - uid: botframework-connector.SkillValidation.isSkillClaim
    name: 'isSkillClaim(Claim[])'
    children: []
    type: function
    langs:
      - typeScript
    summary: Checks if the given object of claims represents a skill.
    syntax:
      content: 'function isSkillClaim(claims: Claim[])'
      parameters:
        - id: claims
          type:
            - 'botframework-connector.Claim[]'
          description: An object of claims.
      return:
        type:
          - boolean
        description: 'True if the object of claims is a skill claim, false if is not.'
    package: botframework-connector
    remarks: >-
      A skill claim should contain:
          An "AuthenticationConstants.VersionClaim" claim.
          An "AuthenticationConstants.AudienceClaim" claim.
          An "AuthenticationConstants.AppIdClaim" claim (v1) or an a "AuthenticationConstants.AuthorizedParty" claim (v2).
      And the appId claim should be different than the audience claim.

      The audience claim should be a guid, indicating that it is from another
      bot/skill.
  - uid: botframework-connector.SkillValidation.isSkillToken
    name: isSkillToken(string)
    children: []
    type: function
    langs:
      - typeScript
    summary: >-
      Determines if a given Auth header is from a skill to bot or bot to skill
      request.
    syntax:
      content: 'function isSkillToken(authHeader: string)'
      parameters:
        - id: authHeader
          type:
            - string
          description: 'Bearer Token, in the "Bearer [Long String]" Format.'
      return:
        type:
          - boolean
        description: >-
          True, if the token was issued for a skill to bot communication.
          Otherwise, false.
    package: botframework-connector
references:
  - uid: botframework-connector.ICredentialProvider
    name: ICredentialProvider
    spec.typeScript:
      - name: ICredentialProvider
        fullName: ICredentialProvider
        uid: botframework-connector.ICredentialProvider
  - uid: botframework-connector.AuthenticationConfiguration
    name: AuthenticationConfiguration
    spec.typeScript:
      - name: AuthenticationConfiguration
        fullName: AuthenticationConfiguration
        uid: botframework-connector.AuthenticationConfiguration
  - uid: Promise<botframework-connector.ClaimsIdentity>
    name: ClaimsIdentity>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ClaimsIdentity
        fullName: ClaimsIdentity
        uid: botframework-connector.ClaimsIdentity
      - name: '>'
        fullName: '>'
  - uid: 'botframework-connector.Claim[]'
    name: 'Claim[]'
    spec.typeScript:
      - name: Claim
        fullName: Claim
        uid: botframework-connector.Claim
      - name: '[]'
        fullName: '[]'
  - uid: botframework-connector.SkillValidation.authenticateChannelToken
    name: authenticateChannelToken
  - uid: botframework-connector.SkillValidation.isSkillClaim
    name: isSkillClaim
  - uid: botframework-connector.SkillValidation.isSkillToken
    name: isSkillToken
