### YamlMime:TSPackage
uid: botframework-connector.SkillValidation
name: SkillValidation
type: module
package: botframework-connector
summary: ''
functions:
  - name: >-
      authenticateChannelToken(string, ICredentialProvider, string, string,
      AuthenticationConfiguration)
    uid: botframework-connector.SkillValidation.authenticateChannelToken
    package: botframework-connector
    summary: >-
      Validates that the incoming Auth Header is a token sent from a bot to a
      skill or from a skill to a bot.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function authenticateChannelToken(authHeader: string, credentials:
        ICredentialProvider, channelService: string, channelId: string,
        authConfig: AuthenticationConfiguration): Promise<ClaimsIdentity>
      parameters:
        - id: authHeader
          type: string
          description: 'The raw HTTP header in the format: "Bearer [longString]".'
        - id: credentials
          type: <xref uid="botframework-connector.ICredentialProvider" />
          description: The user defined set of valid credentials, such as the AppId.
        - id: channelService
          type: string
          description: >-
            The channelService value that distinguishes public Azure from US
            Government Azure.
        - id: channelId
          type: string
          description: The ID of the channel to validate.
        - id: authConfig
          type: <xref uid="botframework-connector.AuthenticationConfiguration" />
          description: The authentication configuration.
      return:
        description: A "ClaimsIdentity" instance if the validation is successful.
        type: Promise&lt;<xref uid="botframework-connector.ClaimsIdentity" />&gt;
  - name: createAnonymousSkillClaim()
    uid: botframework-connector.SkillValidation.createAnonymousSkillClaim
    package: botframework-connector
    summary: >-
      Creates a set of claims that represent an anonymous skill. Useful for
      testing bots locally in the emulator
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function createAnonymousSkillClaim(): ClaimsIdentity'
      return:
        description: >-
          A [ClaimsIdentity](xref.botframework-connector.ClaimsIdentity)
          instance with authentication type set to
          [AuthenticationConstants.AnonymousAuthType](xref.botframework-connector.AuthenticationConstants)
          and a reserved
          [AuthenticationConstants.AnonymousSkillAppId](xref.botframework-connector.AuthenticationConstants)
          claim.
        type: <xref uid="botframework-connector.ClaimsIdentity" />
  - name: isSkillClaim(Claim[])
    uid: botframework-connector.SkillValidation.isSkillClaim
    package: botframework-connector
    summary: Checks if the given object of claims represents a skill.
    remarks: >-
      A skill claim should contain:
          An "AuthenticationConstants.VersionClaim" claim.
          An "AuthenticationConstants.AudienceClaim" claim.
          An "AuthenticationConstants.AppIdClaim" claim (v1) or an a "AuthenticationConstants.AuthorizedParty" claim (v2).
      And the appId claim should be different than the audience claim.

      The audience claim should be a guid, indicating that it is from another
      bot/skill.
    isDeprecated: false
    syntax:
      content: 'function isSkillClaim(claims: Claim[]): boolean'
      parameters:
        - id: claims
          type: <xref uid="botframework-connector.Claim" />[]
          description: An object of claims.
      return:
        description: True if the object of claims is a skill claim, false if is not.
        type: boolean
  - name: isSkillToken(string)
    uid: botframework-connector.SkillValidation.isSkillToken
    package: botframework-connector
    summary: >-
      Determines if a given Auth header is from a skill to bot or bot to skill
      request.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function isSkillToken(authHeader: string): boolean'
      parameters:
        - id: authHeader
          type: string
          description: Bearer Token, in the "Bearer [Long String]" Format.
      return:
        description: >-
          True, if the token was issued for a skill to bot communication.
          Otherwise, false.
        type: boolean
