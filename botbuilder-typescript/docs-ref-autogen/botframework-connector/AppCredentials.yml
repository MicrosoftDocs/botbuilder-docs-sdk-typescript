### YamlMime:TSType
name: AppCredentials
uid: botframework-connector.AppCredentials
package: botframework-connector
summary: |-
  General AppCredentials auth implementation and cache.
  Subclasses can implement refreshToken to acquire the token.
fullName: AppCredentials
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: AppCredentials(string, string, string)
    uid: botframework-connector.AppCredentials.constructor
    package: botframework-connector
    summary: >-
      Initializes a new instance of the
      [AppCredentials](xref:botframework-connector.AppCredentials) class.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new AppCredentials(appId: string, channelAuthTenant?: string,
        oAuthScope?: string)
      parameters:
        - id: appId
          type: string
          description: The App ID.
        - id: channelAuthTenant
          type: string
          description: >-
            Tenant ID of the Azure AD tenant where the bot is created.
              * Required for SingleTenant app types.
              * Optional for MultiTenant app types. **Note**: '_botframework.com_' is the default tenant when no value is provided.

            More information:
            https://learn.microsoft.com/en-us/security/zero-trust/develop/identity-supported-account-types.
        - id: oAuthScope
          type: string
          description: The scope for the token.
properties:
  - name: appId
    uid: botframework-connector.AppCredentials.appId
    package: botframework-connector
    summary: ''
    fullName: appId
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'appId: string'
      return:
        description: ''
        type: string
  - name: oAuthEndpoint
    uid: botframework-connector.AppCredentials.oAuthEndpoint
    package: botframework-connector
    summary: Gets the OAuth endpoint to use.
    fullName: oAuthEndpoint
    remarks: ''
    isDeprecated: false
    syntax:
      content: string oAuthEndpoint
      return:
        description: The OAuthEndpoint to use.
        type: string
  - name: oAuthScope
    uid: botframework-connector.AppCredentials.oAuthScope
    package: botframework-connector
    summary: Gets the OAuth scope to use.
    fullName: oAuthScope
    remarks: ''
    isDeprecated: false
    syntax:
      content: string oAuthScope
      return:
        description: The OAuth scope to use.
        type: string
  - name: tokenCacheKey
    uid: botframework-connector.AppCredentials.tokenCacheKey
    package: botframework-connector
    summary: ''
    fullName: tokenCacheKey
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'tokenCacheKey: string'
      return:
        description: ''
        type: string
methods:
  - name: getToken(boolean)
    uid: botframework-connector.AppCredentials.getToken
    package: botframework-connector
    summary: Gets an OAuth access token.
    remarks: If the promise is successful, the result contains the access token string.
    isDeprecated: false
    syntax:
      content: 'function getToken(forceRefresh?: boolean): Promise<string>'
      parameters:
        - id: forceRefresh
          type: boolean
          description: |-
            True to force a refresh of the token; or false to get
            a cached token if it exists.
      return:
        description: A Promise that represents the work queued to execute.
        type: Promise&lt;string&gt;
  - name: isTrustedServiceUrl(string)
    uid: botframework-connector.AppCredentials.isTrustedServiceUrl
    package: botframework-connector
    summary: Checks if the service url is for a trusted host or not.
    remarks: ''
    isDeprecated: true
    customDeprecatedMessage: ''
    syntax:
      content: 'static function isTrustedServiceUrl(serviceUrl: string): boolean'
      parameters:
        - id: serviceUrl
          type: string
          description: The service url
      return:
        description: True if the host of the service url is trusted; False otherwise.
        type: boolean
  - name: signRequest(WebResource)
    uid: botframework-connector.AppCredentials.signRequest
    package: botframework-connector
    summary: Apply the credentials to the HTTP request.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function signRequest(webResource: WebResource): Promise<WebResource>'
      parameters:
        - id: webResource
          type: <xref uid="@azure/core-http.WebResource" />
          description: The WebResource HTTP request.
      return:
        description: A Promise representing the asynchronous operation.
        type: Promise&lt;<xref uid="@azure/core-http.WebResource" />&gt;
  - name: trustServiceUrl(string, Date)
    uid: botframework-connector.AppCredentials.trustServiceUrl
    package: botframework-connector
    summary: >-
      Adds the host of service url to trusted hosts.

      If expiration time is not provided, the expiration date will be current
      (utc) date + 1 day.
    remarks: ''
    isDeprecated: true
    customDeprecatedMessage: ''
    syntax:
      content: 'static function trustServiceUrl(serviceUrl: string, expiration?: Date)'
      parameters:
        - id: serviceUrl
          type: string
          description: The service url
        - id: expiration
          type: Date
          description: ''
