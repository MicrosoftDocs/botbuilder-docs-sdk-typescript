### YamlMime:TSPackage
uid: botframework-connector.ChannelValidation
name: ChannelValidation
type: module
package: botframework-connector
summary: ''
functions:
  - name: >-
      authenticateChannelToken(string, ICredentialProvider, string,
      AuthenticationConfiguration)
    uid: botframework-connector.ChannelValidation.authenticateChannelToken
    package: botframework-connector
    summary: >-
      Validate the incoming Auth Header as a token sent from the Bot Framework
      Service.

      A token issued by the Bot Framework emulator will FAIL this check.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function authenticateChannelToken(authHeader: string, credentials:
        ICredentialProvider, channelId: string, authConfig:
        AuthenticationConfiguration)
      parameters:
        - id: authHeader
          type: string
          description: 'The raw HTTP header in the format: "Bearer [longString]"'
        - id: credentials
          type: <xref uid="botframework-connector.ICredentialProvider" />
          description: 'The user defined set of valid credentials, such as the AppId.'
        - id: channelId
          type: string
          description: ''
        - id: authConfig
          type: <xref uid="botframework-connector.AuthenticationConfiguration" />
          description: ''
      return:
        type: Promise&lt;<xref uid="botframework-connector.ClaimsIdentity" />&gt;
        description: A valid ClaimsIdentity.
  - name: >-
      authenticateChannelTokenWithServiceUrl(string, ICredentialProvider,
      string, string, AuthenticationConfiguration)
    uid: >-
      botframework-connector.ChannelValidation.authenticateChannelTokenWithServiceUrl
    package: botframework-connector
    summary: >-
      Validate the incoming Auth Header as a token sent from the Bot Framework
      Service.

      A token issued by the Bot Framework emulator will FAIL this check.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function authenticateChannelTokenWithServiceUrl(authHeader: string,
        credentials: ICredentialProvider, serviceUrl: string, channelId: string,
        authConfig: AuthenticationConfiguration)
      parameters:
        - id: authHeader
          type: string
          description: 'The raw HTTP header in the format: "Bearer [longString]"'
        - id: credentials
          type: <xref uid="botframework-connector.ICredentialProvider" />
          description: 'The user defined set of valid credentials, such as the AppId.'
        - id: serviceUrl
          type: string
          description: The ServiceUrl Claim value that must match in the identity.
        - id: channelId
          type: string
          description: ''
        - id: authConfig
          type: <xref uid="botframework-connector.AuthenticationConfiguration" />
          description: ''
      return:
        type: Promise&lt;<xref uid="botframework-connector.ClaimsIdentity" />&gt;
        description: A valid ClaimsIdentity.
  - name: 'validateIdentity(ClaimsIdentity, ICredentialProvider)'
    uid: botframework-connector.ChannelValidation.validateIdentity
    package: botframework-connector
    summary: Validate the ClaimsIdentity to ensure it came from the channel service.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function validateIdentity(identity: ClaimsIdentity, credentials:
        ICredentialProvider)
      parameters:
        - id: identity
          type: <xref uid="botframework-connector.ClaimsIdentity" />
          description: The identity to validate
        - id: credentials
          type: <xref uid="botframework-connector.ICredentialProvider" />
          description: 'The user defined set of valid credentials, such as the AppId.'
      return:
        type: Promise&lt;<xref uid="botframework-connector.ClaimsIdentity" />&gt;
        description: A valid ClaimsIdentity.
