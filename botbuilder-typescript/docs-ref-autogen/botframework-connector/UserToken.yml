### YamlMime:TSType
name: UserToken
uid: botframework-connector.UserToken
package: botframework-connector
summary: Class representing a UserToken.
fullName: UserToken
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: UserToken(TokenApiClientContext)
    uid: botframework-connector.UserToken.constructor
    package: botframework-connector
    summary: Create a UserToken.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new UserToken(client: TokenApiClientContext)'
      parameters:
        - id: client
          type: <xref uid="botframework-connector.TokenApiClientContext" />
          description: |
            Reference to the service client.
methods:
  - name: >-
      exchangeAsync(string, string, string, TokenExchangeRequest,
      RequestOptionsBase)
    uid: botframework-connector.UserToken.exchangeAsync
    package: botframework-connector
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function exchangeAsync(userId: string, connectionName: string,
        channelId: string, exchangeRequest: TokenExchangeRequest, options?:
        RequestOptionsBase)
      parameters:
        - id: userId
          type: string
          description: ''
        - id: connectionName
          type: string
          description: ''
        - id: channelId
          type: string
          description: ''
        - id: exchangeRequest
          type: TokenExchangeRequest
          description: ''
        - id: options
          type: RequestOptionsBase
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.UserTokenExchangeAsyncResponse" />&gt;
        description: Promise<Models.UserTokenExchangeAsyncResponse>
  - name: >-
      exchangeAsync(string, string, string, TokenExchangeRequest,
      RequestOptionsBase, ServiceCallback<any>)
    uid: botframework-connector.UserToken.exchangeAsync_2
    package: botframework-connector
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function exchangeAsync(userId: string, connectionName: string,
        channelId: string, exchangeRequest: TokenExchangeRequest, options:
        RequestOptionsBase, callback: ServiceCallback<any>)
      parameters:
        - id: userId
          type: string
          description: ''
        - id: connectionName
          type: string
          description: ''
        - id: channelId
          type: string
          description: ''
        - id: exchangeRequest
          type: TokenExchangeRequest
          description: ''
        - id: options
          type: RequestOptionsBase
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;any&gt;
          description: |
            The callback
  - name: >-
      exchangeAsync(string, string, string, TokenExchangeRequest,
      ServiceCallback<any>)
    uid: botframework-connector.UserToken.exchangeAsync_1
    package: botframework-connector
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function exchangeAsync(userId: string, connectionName: string,
        channelId: string, exchangeRequest: TokenExchangeRequest, callback:
        ServiceCallback<any>)
      parameters:
        - id: userId
          type: string
          description: ''
        - id: connectionName
          type: string
          description: ''
        - id: channelId
          type: string
          description: ''
        - id: exchangeRequest
          type: TokenExchangeRequest
          description: ''
        - id: callback
          type: ServiceCallback&lt;any&gt;
          description: |
            The callback
  - name: >-
      getAadTokens(string, string, AadResourceUrls, ServiceCallback<[key:
      string]: TokenResponse>)
    uid: botframework-connector.UserToken.getAadTokens_1
    package: botframework-connector
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAadTokens(userId: string, connectionName: string,
        aadResourceUrls: AadResourceUrls, callback: ServiceCallback<[key:
        string]: TokenResponse>)
      parameters:
        - id: userId
          type: string
          description: ''
        - id: connectionName
          type: string
          description: ''
        - id: aadResourceUrls
          type: <xref uid="botframework-connector.AadResourceUrls" />
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;[key: string]: <xref
            uid="botframework-connector.TokenResponse" />&gt;
          description: |
            The callback
  - name: >-
      getAadTokens(string, string, AadResourceUrls,
      UserTokenGetAadTokensOptionalParams)
    uid: botframework-connector.UserToken.getAadTokens
    package: botframework-connector
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAadTokens(userId: string, connectionName: string,
        aadResourceUrls: AadResourceUrls, options?:
        UserTokenGetAadTokensOptionalParams)
      parameters:
        - id: userId
          type: string
          description: ''
        - id: connectionName
          type: string
          description: ''
        - id: aadResourceUrls
          type: <xref uid="botframework-connector.AadResourceUrls" />
          description: ''
        - id: options
          type: >-
            <xref
            uid="botframework-connector.UserTokenGetAadTokensOptionalParams" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.UserTokenGetAadTokensResponse" />&gt;
        description: Promise<Models.UserTokenGetAadTokensResponse>
  - name: >-
      getAadTokens(string, string, AadResourceUrls,
      UserTokenGetAadTokensOptionalParams, ServiceCallback<[key: string]:
      TokenResponse>)
    uid: botframework-connector.UserToken.getAadTokens_2
    package: botframework-connector
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAadTokens(userId: string, connectionName: string,
        aadResourceUrls: AadResourceUrls, options:
        UserTokenGetAadTokensOptionalParams, callback: ServiceCallback<[key:
        string]: TokenResponse>)
      parameters:
        - id: userId
          type: string
          description: ''
        - id: connectionName
          type: string
          description: ''
        - id: aadResourceUrls
          type: <xref uid="botframework-connector.AadResourceUrls" />
          description: ''
        - id: options
          type: >-
            <xref
            uid="botframework-connector.UserTokenGetAadTokensOptionalParams" />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;[key: string]: <xref
            uid="botframework-connector.TokenResponse" />&gt;
          description: |
            The callback
  - name: 'getToken(string, string, ServiceCallback<TokenResponse>)'
    uid: botframework-connector.UserToken.getToken_1
    package: botframework-connector
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getToken(userId: string, connectionName: string, callback:
        ServiceCallback<TokenResponse>)
      parameters:
        - id: userId
          type: string
          description: ''
        - id: connectionName
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="botframework-connector.TokenResponse"
            />&gt;
          description: |
            The callback
  - name: 'getToken(string, string, UserTokenGetTokenOptionalParams)'
    uid: botframework-connector.UserToken.getToken
    package: botframework-connector
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getToken(userId: string, connectionName: string, options?:
        UserTokenGetTokenOptionalParams)
      parameters:
        - id: userId
          type: string
          description: ''
        - id: connectionName
          type: string
          description: ''
        - id: options
          type: >-
            <xref uid="botframework-connector.UserTokenGetTokenOptionalParams"
            />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.UserTokenGetTokenResponse" />&gt;
        description: Promise<Models.UserTokenGetTokenResponse>
  - name: >-
      getToken(string, string, UserTokenGetTokenOptionalParams,
      ServiceCallback<TokenResponse>)
    uid: botframework-connector.UserToken.getToken_2
    package: botframework-connector
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getToken(userId: string, connectionName: string, options:
        UserTokenGetTokenOptionalParams, callback:
        ServiceCallback<TokenResponse>)
      parameters:
        - id: userId
          type: string
          description: ''
        - id: connectionName
          type: string
          description: ''
        - id: options
          type: >-
            <xref uid="botframework-connector.UserTokenGetTokenOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="botframework-connector.TokenResponse"
            />&gt;
          description: |
            The callback
  - name: 'getTokenStatus(string, ServiceCallback<TokenStatus[]>)'
    uid: botframework-connector.UserToken.getTokenStatus_1
    package: botframework-connector
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getTokenStatus(userId: string, callback:
        ServiceCallback<TokenStatus[]>)
      parameters:
        - id: userId
          type: string
          description: ''
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="botframework-connector.TokenStatus"
            />[]&gt;
          description: |
            The callback
  - name: 'getTokenStatus(string, UserTokenGetTokenStatusOptionalParams)'
    uid: botframework-connector.UserToken.getTokenStatus
    package: botframework-connector
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getTokenStatus(userId: string, options?:
        UserTokenGetTokenStatusOptionalParams)
      parameters:
        - id: userId
          type: string
          description: ''
        - id: options
          type: >-
            <xref
            uid="botframework-connector.UserTokenGetTokenStatusOptionalParams"
            />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.UserTokenGetTokenStatusResponse" />&gt;
        description: Promise<Models.UserTokenGetTokenStatusResponse>
  - name: >-
      getTokenStatus(string, UserTokenGetTokenStatusOptionalParams,
      ServiceCallback<TokenStatus[]>)
    uid: botframework-connector.UserToken.getTokenStatus_2
    package: botframework-connector
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getTokenStatus(userId: string, options:
        UserTokenGetTokenStatusOptionalParams, callback:
        ServiceCallback<TokenStatus[]>)
      parameters:
        - id: userId
          type: string
          description: ''
        - id: options
          type: >-
            <xref
            uid="botframework-connector.UserTokenGetTokenStatusOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            ServiceCallback&lt;<xref uid="botframework-connector.TokenStatus"
            />[]&gt;
          description: |
            The callback
  - name: 'signOut(string, ServiceCallback<any>)'
    uid: botframework-connector.UserToken.signOut_1
    package: botframework-connector
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function signOut(userId: string, callback: ServiceCallback<any>)'
      parameters:
        - id: userId
          type: string
          description: ''
        - id: callback
          type: ServiceCallback&lt;any&gt;
          description: |
            The callback
  - name: 'signOut(string, UserTokenSignOutOptionalParams)'
    uid: botframework-connector.UserToken.signOut
    package: botframework-connector
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function signOut(userId: string, options?:
        UserTokenSignOutOptionalParams)
      parameters:
        - id: userId
          type: string
          description: ''
        - id: options
          type: <xref uid="botframework-connector.UserTokenSignOutOptionalParams" />
          description: ''
      return:
        type: Promise&lt;<xref uid="Models.UserTokenSignOutResponse" />&gt;
        description: Promise<Models.UserTokenSignOutResponse>
  - name: 'signOut(string, UserTokenSignOutOptionalParams, ServiceCallback<any>)'
    uid: botframework-connector.UserToken.signOut_2
    package: botframework-connector
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function signOut(userId: string, options:
        UserTokenSignOutOptionalParams, callback: ServiceCallback<any>)
      parameters:
        - id: userId
          type: string
          description: ''
        - id: options
          type: <xref uid="botframework-connector.UserTokenSignOutOptionalParams" />
          description: The optional parameters
        - id: callback
          type: ServiceCallback&lt;any&gt;
          description: |
            The callback
