### YamlMime:UniversalReference
items:
  - uid: botframework-expressions.BuiltInFunctions
    name: BuiltInFunctions
    fullName: BuiltInFunctions
    children:
      - botframework-expressions.BuiltInFunctions.apply
      - botframework-expressions.BuiltInFunctions.applySequence
      - botframework-expressions.BuiltInFunctions.applyWithError
      - botframework-expressions.BuiltInFunctions.comparison
      - botframework-expressions.BuiltInFunctions.DefaultDateTimeFormat
      - botframework-expressions.BuiltInFunctions.evaluateChildren
      - botframework-expressions.BuiltInFunctions.lookup
      - botframework-expressions.BuiltInFunctions.multivariateNumeric
      - botframework-expressions.BuiltInFunctions.numeric
      - botframework-expressions.BuiltInFunctions.parseTimestamp
      - botframework-expressions.BuiltInFunctions.stringTransform
      - botframework-expressions.BuiltInFunctions.timestampFormatter
      - botframework-expressions.BuiltInFunctions.timeTransform
      - botframework-expressions.BuiltInFunctions.timeUnitTransformer
      - botframework-expressions.BuiltInFunctions.UnixMilliSecondToTicksConstant
      - botframework-expressions.BuiltInFunctions.validateArityAndAnyType
      - botframework-expressions.BuiltInFunctions.validateAtLeastOne
      - botframework-expressions.BuiltInFunctions.validateBinary
      - botframework-expressions.BuiltInFunctions.validateBinaryNumber
      - botframework-expressions.BuiltInFunctions.validateBinaryNumberOrString
      - botframework-expressions.BuiltInFunctions.validateNumber
      - botframework-expressions.BuiltInFunctions.validateOrder
      - botframework-expressions.BuiltInFunctions.validateString
      - >-
        botframework-expressions.BuiltInFunctions.validateTwoOrMoreThanTwoNumbers
      - botframework-expressions.BuiltInFunctions.validateUnary
      - botframework-expressions.BuiltInFunctions.validateUnaryBoolean
      - botframework-expressions.BuiltInFunctions.validateUnaryString
      - botframework-expressions.BuiltInFunctions.verifyBoolean
      - botframework-expressions.BuiltInFunctions.verifyContainer
      - botframework-expressions.BuiltInFunctions.verifyInteger
      - botframework-expressions.BuiltInFunctions.verifyISOTimestamp
      - botframework-expressions.BuiltInFunctions.verifyList
      - botframework-expressions.BuiltInFunctions.verifyNumber
      - botframework-expressions.BuiltInFunctions.verifyNumberOrString
      - botframework-expressions.BuiltInFunctions.verifyNumericList
      - botframework-expressions.BuiltInFunctions.verifyString
      - botframework-expressions.BuiltInFunctions.verifyStringOrNull
      - botframework-expressions.BuiltInFunctions.verifyTimestamp
    langs:
      - typeScript
    type: class
    summary: |-
      <summary>
       Definition of default built-in functions for expressions.
       </summary>
       <remarks>
       These functions are largely from WDL https://docs.microsoft.com/en-us/azure/logic-apps/workflow-definition-language-functions-reference
       with a few extensions like infix operators for math, logic and comparisons.
       This class also has some methods that are useful to use when defining custom functions.
       You can always construct a <see cref="ExpressionEvaluator"/> directly which gives the maximum amount of control over validation and evaluation.
       Validators are static checkers that should throw an exception if something is not valid statically.
       Evaluators are called to evaluate an expression and should try not to throw.
       There are some evaluators in this file that take in a verifier that is called at runtime to verify arguments are proper.
       </remarks>
    package: botframework-expressions
  - uid: botframework-expressions.BuiltInFunctions.apply
    name: 'apply((arg0: any[]) => any, VerifyExpression)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Generate an expression delegate that applies function after verifying all
      children.
    syntax:
      content: >-
        static function apply(func: (arg0: any[]) => any, verify?:
        VerifyExpression)
      parameters:
        - id: func
          type:
            - '(arg0: any[]) => any'
          description: Function to apply.
        - id: verify
          type:
            - botframework-expressions.VerifyExpression
          description: Function to check each arg for validity.
          optional: true
      return:
        type:
          - botframework-expressions.EvaluateExpressionDelegate
        description: Delegate for evaluating an expression.
    package: botframework-expressions
  - uid: botframework-expressions.BuiltInFunctions.applySequence
    name: 'applySequence((arg0: any[]) => any, VerifyExpression)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Generate an expression delegate that applies function on the accumulated
      value after verifying all children.
    syntax:
      content: >-
        static function applySequence(func: (arg0: any[]) => any, verify?:
        VerifyExpression)
      parameters:
        - id: func
          type:
            - '(arg0: any[]) => any'
          description: Function to apply.
        - id: verify
          type:
            - botframework-expressions.VerifyExpression
          description: Function to check each arg for validity.
          optional: true
      return:
        type:
          - botframework-expressions.EvaluateExpressionDelegate
        description: Delegate for evaluating an expression.
    package: botframework-expressions
  - uid: botframework-expressions.BuiltInFunctions.applyWithError
    name: 'applyWithError((arg0: any[]) => any, VerifyExpression)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Generate an expression delegate that applies function after verifying all
      children.
    syntax:
      content: >-
        static function applyWithError(func: (arg0: any[]) => any, verify?:
        VerifyExpression)
      parameters:
        - id: func
          type:
            - '(arg0: any[]) => any'
          description: Function to apply.
        - id: verify
          type:
            - botframework-expressions.VerifyExpression
          description: Function to check each arg for validity.
          optional: true
      return:
        type:
          - botframework-expressions.EvaluateExpressionDelegate
        description: Delegate for evaluating an expression.
    package: botframework-expressions
  - uid: botframework-expressions.BuiltInFunctions.comparison
    name: >-
      comparison(string, (arg0: any[]) => boolean, ValidateExpressionDelegate,
      VerifyExpression)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      A comparison operator returns false if the comparison is false, or there
      is an error. This prevents errors from short-circuiting boolean
      expressions.
    syntax:
      content: >-
        static function comparison(type: string, func: (arg0: any[]) => boolean,
        validator: ValidateExpressionDelegate, verify?: VerifyExpression)
      parameters:
        - id: type
          type:
            - string
          description: Expression type.
        - id: func
          type:
            - '(arg0: any[]) => boolean'
          description: Function to apply.
        - id: validator
          type:
            - botframework-expressions.ValidateExpressionDelegate
          description: Function to validate expression.
        - id: verify
          type:
            - botframework-expressions.VerifyExpression
          description: Function to verify arguments to expression.
          optional: true
      return:
        type:
          - botframework-expressions.ExpressionEvaluator
        description: Delegate for evaluating an expression.
    package: botframework-expressions
  - uid: botframework-expressions.BuiltInFunctions.DefaultDateTimeFormat
    name: DefaultDateTimeFormat
    fullName: DefaultDateTimeFormat
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static DefaultDateTimeFormat: string'
      return:
        type:
          - string
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.BuiltInFunctions.evaluateChildren
    name: 'evaluateChildren(Expression, MemoryInterface, VerifyExpression)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Evaluate expression children and return them.
    syntax:
      content: >-
        static function evaluateChildren(expression: Expression, state:
        MemoryInterface, verify?: VerifyExpression)
      parameters:
        - id: expression
          type:
            - botframework-expressions.Expression
          description: Expression with children.
        - id: state
          type:
            - botframework-expressions.MemoryInterface
          description: Global state.
        - id: verify
          type:
            - botframework-expressions.VerifyExpression
          description: Optional function to verify each child's result.
          optional: true
      return:
        type:
          - Object
        description: List of child values or error message.
    package: botframework-expressions
  - uid: botframework-expressions.BuiltInFunctions.lookup
    name: lookup(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Lookup a built-in function information by type.
    syntax:
      content: 'static function lookup(type: string)'
      parameters:
        - id: type
          type:
            - string
          description: |
            Type to look up.
      return:
        type:
          - botframework-expressions.ExpressionEvaluator
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.BuiltInFunctions.multivariateNumeric
    name: 'multivariateNumeric(string, (arg0: any[]) => any, VerifyExpression)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Numeric operators that can have 2 or more args.
    syntax:
      content: >-
        static function multivariateNumeric(type: string, func: (arg0: any[]) =>
        any, verify?: VerifyExpression)
      parameters:
        - id: type
          type:
            - string
          description: Expression type.
        - id: func
          type:
            - '(arg0: any[]) => any'
          description: |
            Function to apply.
        - id: verify
          type:
            - botframework-expressions.VerifyExpression
          description: ''
          optional: true
      return:
        type:
          - botframework-expressions.ExpressionEvaluator
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.BuiltInFunctions.numeric
    name: 'numeric(string, (arg0: any[]) => any)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Numeric operators that can have 1 or more args.
    syntax:
      content: 'static function numeric(type: string, func: (arg0: any[]) => any)'
      parameters:
        - id: type
          type:
            - string
          description: Expression type.
        - id: func
          type:
            - '(arg0: any[]) => any'
          description: |
            Function to apply.
      return:
        type:
          - botframework-expressions.ExpressionEvaluator
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.BuiltInFunctions.parseTimestamp
    name: 'parseTimestamp(string, (arg0: Moment) => any)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        static function parseTimestamp(timeStamp: string, transform?: (arg0:
        Moment) => any)
      parameters:
        - id: timeStamp
          type:
            - string
          description: ''
        - id: transform
          type:
            - '(arg0: Moment) => any'
          description: ''
          optional: true
      return:
        type:
          - Object
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.BuiltInFunctions.stringTransform
    name: 'stringTransform(string, (arg0: any[]) => any)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Transform a string into another string.
    syntax:
      content: >-
        static function stringTransform(type: string, func: (arg0: any[]) =>
        any)
      parameters:
        - id: type
          type:
            - string
          description: Expression type.
        - id: func
          type:
            - '(arg0: any[]) => any'
          description: |
            Function to apply.
      return:
        type:
          - botframework-expressions.ExpressionEvaluator
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.BuiltInFunctions.timestampFormatter
    name: timestampFormatter(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'static function timestampFormatter(formatter: string)'
      parameters:
        - id: formatter
          type:
            - string
          description: ''
      return:
        type:
          - string
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.BuiltInFunctions.timeTransform
    name: >-
      timeTransform(string, (timestamp: Moment, numOfTransformation: any) =>
      any)
    children: []
    type: method
    langs:
      - typeScript
    summary: Transform a datetime into another datetime.
    syntax:
      content: >-
        static function timeTransform(type: string, func: (timestamp: Moment,
        numOfTransformation: any) => any)
      parameters:
        - id: type
          type:
            - string
          description: Expression type.
        - id: func
          type:
            - '(timestamp: Moment, numOfTransformation: any) => any'
          description: Transformer.
      return:
        type:
          - botframework-expressions.ExpressionEvaluator
        description: Delegate for evaluating expression.
    package: botframework-expressions
  - uid: botframework-expressions.BuiltInFunctions.timeUnitTransformer
    name: 'timeUnitTransformer(number, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'static function timeUnitTransformer(duration: number, cSharpStr: string)'
      parameters:
        - id: duration
          type:
            - number
          description: ''
        - id: cSharpStr
          type:
            - string
          description: ''
      return:
        type:
          - Object
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.BuiltInFunctions.UnixMilliSecondToTicksConstant
    name: UnixMilliSecondToTicksConstant
    fullName: UnixMilliSecondToTicksConstant
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static UnixMilliSecondToTicksConstant: number'
      return:
        type:
          - number
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.BuiltInFunctions.validateArityAndAnyType
    name: 'validateArityAndAnyType(Expression, number, number, ReturnType[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Validate that expression has a certain number of children that are of any
      of the supported types.
    syntax:
      content: >-
        static function validateArityAndAnyType(expression: Expression,
        minArity: number, maxArity: number, types: ReturnType[])
      parameters:
        - id: expression
          type:
            - botframework-expressions.Expression
          description: Expression to validate.
        - id: minArity
          type:
            - number
          description: Minimum number of children.
        - id: maxArity
          type:
            - number
          description: Maximum number of children.
        - id: types
          type:
            - 'botframework-expressions.ReturnType[]'
          description: >
            Allowed return types for children.

            If a child has a return type of Object then validation will happen
            at runtime.
    package: botframework-expressions
  - uid: botframework-expressions.BuiltInFunctions.validateAtLeastOne
    name: validateAtLeastOne(Expression)
    children: []
    type: method
    langs:
      - typeScript
    summary: Validate at least 1 argument of any type.
    syntax:
      content: 'static function validateAtLeastOne(expression: Expression)'
      parameters:
        - id: expression
          type:
            - botframework-expressions.Expression
          description: |
            Expression to validate.
    package: botframework-expressions
  - uid: botframework-expressions.BuiltInFunctions.validateBinary
    name: validateBinary(Expression)
    children: []
    type: method
    langs:
      - typeScript
    summary: Validate there are two children.
    syntax:
      content: 'static function validateBinary(expression: Expression)'
      parameters:
        - id: expression
          type:
            - botframework-expressions.Expression
          description: |
            Expression to validate.
    package: botframework-expressions
  - uid: botframework-expressions.BuiltInFunctions.validateBinaryNumber
    name: validateBinaryNumber(Expression)
    children: []
    type: method
    langs:
      - typeScript
    summary: Validate 2 numeric arguments.
    syntax:
      content: 'static function validateBinaryNumber(expression: Expression)'
      parameters:
        - id: expression
          type:
            - botframework-expressions.Expression
          description: |
            Expression to validate.
    package: botframework-expressions
  - uid: botframework-expressions.BuiltInFunctions.validateBinaryNumberOrString
    name: validateBinaryNumberOrString(Expression)
    children: []
    type: method
    langs:
      - typeScript
    summary: Validate there are 2 numeric or string arguments.
    syntax:
      content: 'static function validateBinaryNumberOrString(expression: Expression)'
      parameters:
        - id: expression
          type:
            - botframework-expressions.Expression
          description: |
            Expression to validate.
    package: botframework-expressions
  - uid: botframework-expressions.BuiltInFunctions.validateNumber
    name: validateNumber(Expression)
    children: []
    type: method
    langs:
      - typeScript
    summary: Validate 1 or more numeric arguments.
    syntax:
      content: 'static function validateNumber(expression: Expression)'
      parameters:
        - id: expression
          type:
            - botframework-expressions.Expression
          description: |
            Expression to validate.
    package: botframework-expressions
  - uid: botframework-expressions.BuiltInFunctions.validateOrder
    name: 'validateOrder(Expression, ReturnType[], ReturnType[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: Validate the number and type of arguments to a function.
    syntax:
      content: >-
        static function validateOrder(expression: Expression, optional:
        ReturnType[], types: ReturnType[])
      parameters:
        - id: expression
          type:
            - botframework-expressions.Expression
          description: Expression to validate.
        - id: optional
          type:
            - 'botframework-expressions.ReturnType[]'
          description: Optional types in order.
        - id: types
          type:
            - 'botframework-expressions.ReturnType[]'
          description: |
            Expected types in order.
    package: botframework-expressions
  - uid: botframework-expressions.BuiltInFunctions.validateString
    name: validateString(Expression)
    children: []
    type: method
    langs:
      - typeScript
    summary: Validate 1 or more string arguments.
    syntax:
      content: 'static function validateString(expression: Expression)'
      parameters:
        - id: expression
          type:
            - botframework-expressions.Expression
          description: |
            Expression to validate.
    package: botframework-expressions
  - uid: botframework-expressions.BuiltInFunctions.validateTwoOrMoreThanTwoNumbers
    name: validateTwoOrMoreThanTwoNumbers(Expression)
    children: []
    type: method
    langs:
      - typeScript
    summary: Validate 2 or more than 2 numeric arguments.
    syntax:
      content: 'static function validateTwoOrMoreThanTwoNumbers(expression: Expression)'
      parameters:
        - id: expression
          type:
            - botframework-expressions.Expression
          description: |
            Expression to validate.
    package: botframework-expressions
  - uid: botframework-expressions.BuiltInFunctions.validateUnary
    name: validateUnary(Expression)
    children: []
    type: method
    langs:
      - typeScript
    summary: Validate there is a single argument.
    syntax:
      content: 'static function validateUnary(expression: Expression)'
      parameters:
        - id: expression
          type:
            - botframework-expressions.Expression
          description: |
            Expression to validate.
    package: botframework-expressions
  - uid: botframework-expressions.BuiltInFunctions.validateUnaryBoolean
    name: validateUnaryBoolean(Expression)
    children: []
    type: method
    langs:
      - typeScript
    summary: Validate there is a single boolean argument.
    syntax:
      content: 'static function validateUnaryBoolean(expression: Expression)'
      parameters:
        - id: expression
          type:
            - botframework-expressions.Expression
          description: |
            Expression to validate.
    package: botframework-expressions
  - uid: botframework-expressions.BuiltInFunctions.validateUnaryString
    name: validateUnaryString(Expression)
    children: []
    type: method
    langs:
      - typeScript
    summary: Validate there is a single string argument.
    syntax:
      content: 'static function validateUnaryString(expression: Expression)'
      parameters:
        - id: expression
          type:
            - botframework-expressions.Expression
          description: |
            Expression to validate.
    package: botframework-expressions
  - uid: botframework-expressions.BuiltInFunctions.verifyBoolean
    name: 'verifyBoolean(any, Expression, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Verify value is boolean.
    syntax:
      content: >-
        static function verifyBoolean(value: any, expression: Expression, _:
        number)
      parameters:
        - id: value
          type:
            - any
          description: alue to check.
        - id: expression
          type:
            - botframework-expressions.Expression
          description: Expression that led to value.
        - id: _
          type:
            - number
          description: ''
      return:
        type:
          - string
        description: Error or undefined if invalid.
    package: botframework-expressions
  - uid: botframework-expressions.BuiltInFunctions.verifyContainer
    name: 'verifyContainer(any, Expression, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Verify value contains elements.
    syntax:
      content: >-
        static function verifyContainer(value: any, expression: Expression, _:
        number)
      parameters:
        - id: value
          type:
            - any
          description: alue to check.
        - id: expression
          type:
            - botframework-expressions.Expression
          description: Expression that led to value.
        - id: _
          type:
            - number
          description: ''
      return:
        type:
          - string
        description: Error or undefined if invalid.
    package: botframework-expressions
  - uid: botframework-expressions.BuiltInFunctions.verifyInteger
    name: 'verifyInteger(any, Expression, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Verify value is an integer.
    syntax:
      content: >-
        static function verifyInteger(value: any, expression: Expression, _:
        number)
      parameters:
        - id: value
          type:
            - any
          description: alue to check.
        - id: expression
          type:
            - botframework-expressions.Expression
          description: Expression that led to value.
        - id: _
          type:
            - number
          description: ''
      return:
        type:
          - string
        description: Error or undefined if invalid.
    package: botframework-expressions
  - uid: botframework-expressions.BuiltInFunctions.verifyISOTimestamp
    name: verifyISOTimestamp(any)
    children: []
    type: method
    langs:
      - typeScript
    summary: Verify a timestamp string is valid ISO timestamp format.
    syntax:
      content: 'static function verifyISOTimestamp(value: any)'
      parameters:
        - id: value
          type:
            - any
          description: timestamp string to check.
      return:
        type:
          - string
        description: Error or undefined if invalid.
    package: botframework-expressions
  - uid: botframework-expressions.BuiltInFunctions.verifyList
    name: 'verifyList(any, Expression)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Verify value is an list.
    syntax:
      content: 'static function verifyList(value: any, expression: Expression)'
      parameters:
        - id: value
          type:
            - any
          description: alue to check.
        - id: expression
          type:
            - botframework-expressions.Expression
          description: Expression that led to value.
      return:
        type:
          - string
        description: Error or undefined if invalid.
    package: botframework-expressions
  - uid: botframework-expressions.BuiltInFunctions.verifyNumber
    name: 'verifyNumber(any, Expression, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Verify value is numeric.
    syntax:
      content: >-
        static function verifyNumber(value: any, expression: Expression, _:
        number)
      parameters:
        - id: value
          type:
            - any
          description: alue to check.
        - id: expression
          type:
            - botframework-expressions.Expression
          description: Expression that led to value.
        - id: _
          type:
            - number
          description: ''
      return:
        type:
          - string
        description: Error or undefined if invalid.
    package: botframework-expressions
  - uid: botframework-expressions.BuiltInFunctions.verifyNumberOrString
    name: 'verifyNumberOrString(any, Expression, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Verify value is a number or string.
    syntax:
      content: >-
        static function verifyNumberOrString(value: any, expression: Expression,
        _: number)
      parameters:
        - id: value
          type:
            - any
          description: alue to check.
        - id: expression
          type:
            - botframework-expressions.Expression
          description: Expression that led to value.
        - id: _
          type:
            - number
          description: ''
      return:
        type:
          - string
        description: Error or undefined if invalid.
    package: botframework-expressions
  - uid: botframework-expressions.BuiltInFunctions.verifyNumericList
    name: 'verifyNumericList(any, Expression, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Verify value is numeric list.
    syntax:
      content: >-
        static function verifyNumericList(value: any, expression: Expression, _:
        number)
      parameters:
        - id: value
          type:
            - any
          description: alue to check.
        - id: expression
          type:
            - botframework-expressions.Expression
          description: Expression that led to value.
        - id: _
          type:
            - number
          description: ''
      return:
        type:
          - string
        description: Error or undefined if invalid.
    package: botframework-expressions
  - uid: botframework-expressions.BuiltInFunctions.verifyString
    name: 'verifyString(any, Expression, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Verify value is a string.
    syntax:
      content: >-
        static function verifyString(value: any, expression: Expression, _:
        number)
      parameters:
        - id: value
          type:
            - any
          description: alue to check.
        - id: expression
          type:
            - botframework-expressions.Expression
          description: Expression that led to value.
        - id: _
          type:
            - number
          description: ''
      return:
        type:
          - string
        description: Error or undefined if invalid.
    package: botframework-expressions
  - uid: botframework-expressions.BuiltInFunctions.verifyStringOrNull
    name: 'verifyStringOrNull(any, Expression, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        static function verifyStringOrNull(value: any, expression: Expression,
        _: number)
      parameters:
        - id: value
          type:
            - any
          description: ''
        - id: expression
          type:
            - botframework-expressions.Expression
          description: ''
        - id: _
          type:
            - number
          description: ''
      return:
        type:
          - string
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.BuiltInFunctions.verifyTimestamp
    name: verifyTimestamp(any)
    children: []
    type: method
    langs:
      - typeScript
    summary: Verify a timestamp string is valid timestamp format.
    syntax:
      content: 'static function verifyTimestamp(value: any)'
      parameters:
        - id: value
          type:
            - any
          description: timestamp string to check.
      return:
        type:
          - string
        description: Error or undefined if invalid.
    package: botframework-expressions
references:
  - uid: botframework-expressions.VerifyExpression
    name: VerifyExpression
    spec.typeScript:
      - name: VerifyExpression
        fullName: VerifyExpression
        uid: botframework-expressions.VerifyExpression
  - uid: botframework-expressions.EvaluateExpressionDelegate
    name: EvaluateExpressionDelegate
    spec.typeScript:
      - name: EvaluateExpressionDelegate
        fullName: EvaluateExpressionDelegate
        uid: botframework-expressions.EvaluateExpressionDelegate
  - uid: botframework-expressions.ValidateExpressionDelegate
    name: ValidateExpressionDelegate
    spec.typeScript:
      - name: ValidateExpressionDelegate
        fullName: ValidateExpressionDelegate
        uid: botframework-expressions.ValidateExpressionDelegate
  - uid: botframework-expressions.ExpressionEvaluator
    name: ExpressionEvaluator
    spec.typeScript:
      - name: ExpressionEvaluator
        fullName: ExpressionEvaluator
        uid: botframework-expressions.ExpressionEvaluator
  - uid: botframework-expressions.Expression
    name: Expression
    spec.typeScript:
      - name: Expression
        fullName: Expression
        uid: botframework-expressions.Expression
  - uid: botframework-expressions.MemoryInterface
    name: MemoryInterface
    spec.typeScript:
      - name: MemoryInterface
        fullName: MemoryInterface
        uid: botframework-expressions.MemoryInterface
  - uid: 'botframework-expressions.ReturnType[]'
    name: 'ReturnType[]'
    spec.typeScript:
      - name: ReturnType
        fullName: ReturnType
        uid: botframework-expressions.ReturnType
      - name: '[]'
        fullName: '[]'
