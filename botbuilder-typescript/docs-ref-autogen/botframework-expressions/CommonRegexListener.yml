### YamlMime:UniversalReference
items:
  - uid: botframework-expressions.CommonRegexListener
    name: CommonRegexListener
    fullName: CommonRegexListener
    children:
      - botframework-expressions.CommonRegexListener.enterAlpha_nums
      - botframework-expressions.CommonRegexListener.enterAlternation
      - botframework-expressions.CommonRegexListener.enterAtom
      - botframework-expressions.CommonRegexListener.enterCapture
      - botframework-expressions.CommonRegexListener.enterCc_atom
      - botframework-expressions.CommonRegexListener.enterCc_literal
      - botframework-expressions.CommonRegexListener.enterCharacter_class
      - botframework-expressions.CommonRegexListener.enterDigit
      - botframework-expressions.CommonRegexListener.enterDigits
      - botframework-expressions.CommonRegexListener.enterElement
      - botframework-expressions.CommonRegexListener.enterEveryRule
      - botframework-expressions.CommonRegexListener.enterExpr
      - botframework-expressions.CommonRegexListener.enterLetter
      - botframework-expressions.CommonRegexListener.enterLiteral
      - botframework-expressions.CommonRegexListener.enterName
      - botframework-expressions.CommonRegexListener.enterNon_capture
      - botframework-expressions.CommonRegexListener.enterNon_close_paren
      - botframework-expressions.CommonRegexListener.enterNon_close_parens
      - botframework-expressions.CommonRegexListener.enterNumber
      - botframework-expressions.CommonRegexListener.enterOctal_char
      - botframework-expressions.CommonRegexListener.enterOctal_digit
      - botframework-expressions.CommonRegexListener.enterOption
      - botframework-expressions.CommonRegexListener.enterOption_flag
      - botframework-expressions.CommonRegexListener.enterParse
      - botframework-expressions.CommonRegexListener.enterQuantifier
      - botframework-expressions.CommonRegexListener.enterQuantifier_type
      - botframework-expressions.CommonRegexListener.enterShared_atom
      - botframework-expressions.CommonRegexListener.enterShared_literal
      - botframework-expressions.CommonRegexListener.exitAlpha_nums
      - botframework-expressions.CommonRegexListener.exitAlternation
      - botframework-expressions.CommonRegexListener.exitAtom
      - botframework-expressions.CommonRegexListener.exitCapture
      - botframework-expressions.CommonRegexListener.exitCc_atom
      - botframework-expressions.CommonRegexListener.exitCc_literal
      - botframework-expressions.CommonRegexListener.exitCharacter_class
      - botframework-expressions.CommonRegexListener.exitDigit
      - botframework-expressions.CommonRegexListener.exitDigits
      - botframework-expressions.CommonRegexListener.exitElement
      - botframework-expressions.CommonRegexListener.exitEveryRule
      - botframework-expressions.CommonRegexListener.exitExpr
      - botframework-expressions.CommonRegexListener.exitLetter
      - botframework-expressions.CommonRegexListener.exitLiteral
      - botframework-expressions.CommonRegexListener.exitName
      - botframework-expressions.CommonRegexListener.exitNon_capture
      - botframework-expressions.CommonRegexListener.exitNon_close_paren
      - botframework-expressions.CommonRegexListener.exitNon_close_parens
      - botframework-expressions.CommonRegexListener.exitNumber
      - botframework-expressions.CommonRegexListener.exitOctal_char
      - botframework-expressions.CommonRegexListener.exitOctal_digit
      - botframework-expressions.CommonRegexListener.exitOption
      - botframework-expressions.CommonRegexListener.exitOption_flag
      - botframework-expressions.CommonRegexListener.exitParse
      - botframework-expressions.CommonRegexListener.exitQuantifier
      - botframework-expressions.CommonRegexListener.exitQuantifier_type
      - botframework-expressions.CommonRegexListener.exitShared_atom
      - botframework-expressions.CommonRegexListener.exitShared_literal
      - botframework-expressions.CommonRegexListener.visitErrorNode
      - botframework-expressions.CommonRegexListener.visitTerminal
    langs:
      - typeScript
    type: interface
    summary: |-
      This interface defines a complete listener for a parse tree produced by
      `CommonRegexParser`.
    extends:
      name: ParseTreeListener
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.enterAlpha_nums
    name: enterAlpha_nums
    fullName: enterAlpha_nums
    children: []
    langs:
      - typeScript
    type: property
    summary: Enter a parse tree produced by `CommonRegexParser.alpha_nums`.
    optional: true
    syntax:
      content: 'enterAlpha_nums?: (ctx: Alpha_numsContext) => void'
      return:
        type:
          - '(ctx: Alpha_numsContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.enterAlternation
    name: enterAlternation
    fullName: enterAlternation
    children: []
    langs:
      - typeScript
    type: property
    summary: Enter a parse tree produced by `CommonRegexParser.alternation`.
    optional: true
    syntax:
      content: 'enterAlternation?: (ctx: AlternationContext) => void'
      return:
        type:
          - '(ctx: AlternationContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.enterAtom
    name: enterAtom
    fullName: enterAtom
    children: []
    langs:
      - typeScript
    type: property
    summary: Enter a parse tree produced by `CommonRegexParser.atom`.
    optional: true
    syntax:
      content: 'enterAtom?: (ctx: AtomContext) => void'
      return:
        type:
          - '(ctx: AtomContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.enterCapture
    name: enterCapture
    fullName: enterCapture
    children: []
    langs:
      - typeScript
    type: property
    summary: Enter a parse tree produced by `CommonRegexParser.capture`.
    optional: true
    syntax:
      content: 'enterCapture?: (ctx: CaptureContext) => void'
      return:
        type:
          - '(ctx: CaptureContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.enterCc_atom
    name: enterCc_atom
    fullName: enterCc_atom
    children: []
    langs:
      - typeScript
    type: property
    summary: Enter a parse tree produced by `CommonRegexParser.cc_atom`.
    optional: true
    syntax:
      content: 'enterCc_atom?: (ctx: Cc_atomContext) => void'
      return:
        type:
          - '(ctx: Cc_atomContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.enterCc_literal
    name: enterCc_literal
    fullName: enterCc_literal
    children: []
    langs:
      - typeScript
    type: property
    summary: Enter a parse tree produced by `CommonRegexParser.cc_literal`.
    optional: true
    syntax:
      content: 'enterCc_literal?: (ctx: Cc_literalContext) => void'
      return:
        type:
          - '(ctx: Cc_literalContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.enterCharacter_class
    name: enterCharacter_class
    fullName: enterCharacter_class
    children: []
    langs:
      - typeScript
    type: property
    summary: Enter a parse tree produced by `CommonRegexParser.character_class`.
    optional: true
    syntax:
      content: 'enterCharacter_class?: (ctx: Character_classContext) => void'
      return:
        type:
          - '(ctx: Character_classContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.enterDigit
    name: enterDigit
    fullName: enterDigit
    children: []
    langs:
      - typeScript
    type: property
    summary: Enter a parse tree produced by `CommonRegexParser.digit`.
    optional: true
    syntax:
      content: 'enterDigit?: (ctx: DigitContext) => void'
      return:
        type:
          - '(ctx: DigitContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.enterDigits
    name: enterDigits
    fullName: enterDigits
    children: []
    langs:
      - typeScript
    type: property
    summary: Enter a parse tree produced by `CommonRegexParser.digits`.
    optional: true
    syntax:
      content: 'enterDigits?: (ctx: DigitsContext) => void'
      return:
        type:
          - '(ctx: DigitsContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.enterElement
    name: enterElement
    fullName: enterElement
    children: []
    langs:
      - typeScript
    type: property
    summary: Enter a parse tree produced by `CommonRegexParser.element`.
    optional: true
    syntax:
      content: 'enterElement?: (ctx: ElementContext) => void'
      return:
        type:
          - '(ctx: ElementContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.enterEveryRule
    name: enterEveryRule
    fullName: enterEveryRule
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'enterEveryRule?: (ctx: ParserRuleContext) => void'
      return:
        type:
          - '(ctx: ParserRuleContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.enterExpr
    name: enterExpr
    fullName: enterExpr
    children: []
    langs:
      - typeScript
    type: property
    summary: Enter a parse tree produced by `CommonRegexParser.expr`.
    optional: true
    syntax:
      content: 'enterExpr?: (ctx: ExprContext) => void'
      return:
        type:
          - '(ctx: ExprContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.enterLetter
    name: enterLetter
    fullName: enterLetter
    children: []
    langs:
      - typeScript
    type: property
    summary: Enter a parse tree produced by `CommonRegexParser.letter`.
    optional: true
    syntax:
      content: 'enterLetter?: (ctx: LetterContext) => void'
      return:
        type:
          - '(ctx: LetterContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.enterLiteral
    name: enterLiteral
    fullName: enterLiteral
    children: []
    langs:
      - typeScript
    type: property
    summary: Enter a parse tree produced by `CommonRegexParser.literal`.
    optional: true
    syntax:
      content: 'enterLiteral?: (ctx: LiteralContext) => void'
      return:
        type:
          - '(ctx: LiteralContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.enterName
    name: enterName
    fullName: enterName
    children: []
    langs:
      - typeScript
    type: property
    summary: Enter a parse tree produced by `CommonRegexParser.name`.
    optional: true
    syntax:
      content: 'enterName?: (ctx: NameContext) => void'
      return:
        type:
          - '(ctx: NameContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.enterNon_capture
    name: enterNon_capture
    fullName: enterNon_capture
    children: []
    langs:
      - typeScript
    type: property
    summary: Enter a parse tree produced by `CommonRegexParser.non_capture`.
    optional: true
    syntax:
      content: 'enterNon_capture?: (ctx: Non_captureContext) => void'
      return:
        type:
          - '(ctx: Non_captureContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.enterNon_close_paren
    name: enterNon_close_paren
    fullName: enterNon_close_paren
    children: []
    langs:
      - typeScript
    type: property
    summary: Enter a parse tree produced by `CommonRegexParser.non_close_paren`.
    optional: true
    syntax:
      content: 'enterNon_close_paren?: (ctx: Non_close_parenContext) => void'
      return:
        type:
          - '(ctx: Non_close_parenContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.enterNon_close_parens
    name: enterNon_close_parens
    fullName: enterNon_close_parens
    children: []
    langs:
      - typeScript
    type: property
    summary: Enter a parse tree produced by `CommonRegexParser.non_close_parens`.
    optional: true
    syntax:
      content: 'enterNon_close_parens?: (ctx: Non_close_parensContext) => void'
      return:
        type:
          - '(ctx: Non_close_parensContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.enterNumber
    name: enterNumber
    fullName: enterNumber
    children: []
    langs:
      - typeScript
    type: property
    summary: Enter a parse tree produced by `CommonRegexParser.number`.
    optional: true
    syntax:
      content: 'enterNumber?: (ctx: NumberContext) => void'
      return:
        type:
          - '(ctx: NumberContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.enterOctal_char
    name: enterOctal_char
    fullName: enterOctal_char
    children: []
    langs:
      - typeScript
    type: property
    summary: Enter a parse tree produced by `CommonRegexParser.octal_char`.
    optional: true
    syntax:
      content: 'enterOctal_char?: (ctx: Octal_charContext) => void'
      return:
        type:
          - '(ctx: Octal_charContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.enterOctal_digit
    name: enterOctal_digit
    fullName: enterOctal_digit
    children: []
    langs:
      - typeScript
    type: property
    summary: Enter a parse tree produced by `CommonRegexParser.octal_digit`.
    optional: true
    syntax:
      content: 'enterOctal_digit?: (ctx: Octal_digitContext) => void'
      return:
        type:
          - '(ctx: Octal_digitContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.enterOption
    name: enterOption
    fullName: enterOption
    children: []
    langs:
      - typeScript
    type: property
    summary: Enter a parse tree produced by `CommonRegexParser.option`.
    optional: true
    syntax:
      content: 'enterOption?: (ctx: OptionContext) => void'
      return:
        type:
          - '(ctx: OptionContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.enterOption_flag
    name: enterOption_flag
    fullName: enterOption_flag
    children: []
    langs:
      - typeScript
    type: property
    summary: Enter a parse tree produced by `CommonRegexParser.option_flag`.
    optional: true
    syntax:
      content: 'enterOption_flag?: (ctx: Option_flagContext) => void'
      return:
        type:
          - '(ctx: Option_flagContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.enterParse
    name: enterParse
    fullName: enterParse
    children: []
    langs:
      - typeScript
    type: property
    summary: Enter a parse tree produced by `CommonRegexParser.parse`.
    optional: true
    syntax:
      content: 'enterParse?: (ctx: ParseContext) => void'
      return:
        type:
          - '(ctx: ParseContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.enterQuantifier
    name: enterQuantifier
    fullName: enterQuantifier
    children: []
    langs:
      - typeScript
    type: property
    summary: Enter a parse tree produced by `CommonRegexParser.quantifier`.
    optional: true
    syntax:
      content: 'enterQuantifier?: (ctx: QuantifierContext) => void'
      return:
        type:
          - '(ctx: QuantifierContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.enterQuantifier_type
    name: enterQuantifier_type
    fullName: enterQuantifier_type
    children: []
    langs:
      - typeScript
    type: property
    summary: Enter a parse tree produced by `CommonRegexParser.quantifier_type`.
    optional: true
    syntax:
      content: 'enterQuantifier_type?: (ctx: Quantifier_typeContext) => void'
      return:
        type:
          - '(ctx: Quantifier_typeContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.enterShared_atom
    name: enterShared_atom
    fullName: enterShared_atom
    children: []
    langs:
      - typeScript
    type: property
    summary: Enter a parse tree produced by `CommonRegexParser.shared_atom`.
    optional: true
    syntax:
      content: 'enterShared_atom?: (ctx: Shared_atomContext) => void'
      return:
        type:
          - '(ctx: Shared_atomContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.enterShared_literal
    name: enterShared_literal
    fullName: enterShared_literal
    children: []
    langs:
      - typeScript
    type: property
    summary: Enter a parse tree produced by `CommonRegexParser.shared_literal`.
    optional: true
    syntax:
      content: 'enterShared_literal?: (ctx: Shared_literalContext) => void'
      return:
        type:
          - '(ctx: Shared_literalContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.exitAlpha_nums
    name: exitAlpha_nums
    fullName: exitAlpha_nums
    children: []
    langs:
      - typeScript
    type: property
    summary: Exit a parse tree produced by `CommonRegexParser.alpha_nums`.
    optional: true
    syntax:
      content: 'exitAlpha_nums?: (ctx: Alpha_numsContext) => void'
      return:
        type:
          - '(ctx: Alpha_numsContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.exitAlternation
    name: exitAlternation
    fullName: exitAlternation
    children: []
    langs:
      - typeScript
    type: property
    summary: Exit a parse tree produced by `CommonRegexParser.alternation`.
    optional: true
    syntax:
      content: 'exitAlternation?: (ctx: AlternationContext) => void'
      return:
        type:
          - '(ctx: AlternationContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.exitAtom
    name: exitAtom
    fullName: exitAtom
    children: []
    langs:
      - typeScript
    type: property
    summary: Exit a parse tree produced by `CommonRegexParser.atom`.
    optional: true
    syntax:
      content: 'exitAtom?: (ctx: AtomContext) => void'
      return:
        type:
          - '(ctx: AtomContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.exitCapture
    name: exitCapture
    fullName: exitCapture
    children: []
    langs:
      - typeScript
    type: property
    summary: Exit a parse tree produced by `CommonRegexParser.capture`.
    optional: true
    syntax:
      content: 'exitCapture?: (ctx: CaptureContext) => void'
      return:
        type:
          - '(ctx: CaptureContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.exitCc_atom
    name: exitCc_atom
    fullName: exitCc_atom
    children: []
    langs:
      - typeScript
    type: property
    summary: Exit a parse tree produced by `CommonRegexParser.cc_atom`.
    optional: true
    syntax:
      content: 'exitCc_atom?: (ctx: Cc_atomContext) => void'
      return:
        type:
          - '(ctx: Cc_atomContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.exitCc_literal
    name: exitCc_literal
    fullName: exitCc_literal
    children: []
    langs:
      - typeScript
    type: property
    summary: Exit a parse tree produced by `CommonRegexParser.cc_literal`.
    optional: true
    syntax:
      content: 'exitCc_literal?: (ctx: Cc_literalContext) => void'
      return:
        type:
          - '(ctx: Cc_literalContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.exitCharacter_class
    name: exitCharacter_class
    fullName: exitCharacter_class
    children: []
    langs:
      - typeScript
    type: property
    summary: Exit a parse tree produced by `CommonRegexParser.character_class`.
    optional: true
    syntax:
      content: 'exitCharacter_class?: (ctx: Character_classContext) => void'
      return:
        type:
          - '(ctx: Character_classContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.exitDigit
    name: exitDigit
    fullName: exitDigit
    children: []
    langs:
      - typeScript
    type: property
    summary: Exit a parse tree produced by `CommonRegexParser.digit`.
    optional: true
    syntax:
      content: 'exitDigit?: (ctx: DigitContext) => void'
      return:
        type:
          - '(ctx: DigitContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.exitDigits
    name: exitDigits
    fullName: exitDigits
    children: []
    langs:
      - typeScript
    type: property
    summary: Exit a parse tree produced by `CommonRegexParser.digits`.
    optional: true
    syntax:
      content: 'exitDigits?: (ctx: DigitsContext) => void'
      return:
        type:
          - '(ctx: DigitsContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.exitElement
    name: exitElement
    fullName: exitElement
    children: []
    langs:
      - typeScript
    type: property
    summary: Exit a parse tree produced by `CommonRegexParser.element`.
    optional: true
    syntax:
      content: 'exitElement?: (ctx: ElementContext) => void'
      return:
        type:
          - '(ctx: ElementContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.exitEveryRule
    name: exitEveryRule
    fullName: exitEveryRule
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'exitEveryRule?: (ctx: ParserRuleContext) => void'
      return:
        type:
          - '(ctx: ParserRuleContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.exitExpr
    name: exitExpr
    fullName: exitExpr
    children: []
    langs:
      - typeScript
    type: property
    summary: Exit a parse tree produced by `CommonRegexParser.expr`.
    optional: true
    syntax:
      content: 'exitExpr?: (ctx: ExprContext) => void'
      return:
        type:
          - '(ctx: ExprContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.exitLetter
    name: exitLetter
    fullName: exitLetter
    children: []
    langs:
      - typeScript
    type: property
    summary: Exit a parse tree produced by `CommonRegexParser.letter`.
    optional: true
    syntax:
      content: 'exitLetter?: (ctx: LetterContext) => void'
      return:
        type:
          - '(ctx: LetterContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.exitLiteral
    name: exitLiteral
    fullName: exitLiteral
    children: []
    langs:
      - typeScript
    type: property
    summary: Exit a parse tree produced by `CommonRegexParser.literal`.
    optional: true
    syntax:
      content: 'exitLiteral?: (ctx: LiteralContext) => void'
      return:
        type:
          - '(ctx: LiteralContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.exitName
    name: exitName
    fullName: exitName
    children: []
    langs:
      - typeScript
    type: property
    summary: Exit a parse tree produced by `CommonRegexParser.name`.
    optional: true
    syntax:
      content: 'exitName?: (ctx: NameContext) => void'
      return:
        type:
          - '(ctx: NameContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.exitNon_capture
    name: exitNon_capture
    fullName: exitNon_capture
    children: []
    langs:
      - typeScript
    type: property
    summary: Exit a parse tree produced by `CommonRegexParser.non_capture`.
    optional: true
    syntax:
      content: 'exitNon_capture?: (ctx: Non_captureContext) => void'
      return:
        type:
          - '(ctx: Non_captureContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.exitNon_close_paren
    name: exitNon_close_paren
    fullName: exitNon_close_paren
    children: []
    langs:
      - typeScript
    type: property
    summary: Exit a parse tree produced by `CommonRegexParser.non_close_paren`.
    optional: true
    syntax:
      content: 'exitNon_close_paren?: (ctx: Non_close_parenContext) => void'
      return:
        type:
          - '(ctx: Non_close_parenContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.exitNon_close_parens
    name: exitNon_close_parens
    fullName: exitNon_close_parens
    children: []
    langs:
      - typeScript
    type: property
    summary: Exit a parse tree produced by `CommonRegexParser.non_close_parens`.
    optional: true
    syntax:
      content: 'exitNon_close_parens?: (ctx: Non_close_parensContext) => void'
      return:
        type:
          - '(ctx: Non_close_parensContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.exitNumber
    name: exitNumber
    fullName: exitNumber
    children: []
    langs:
      - typeScript
    type: property
    summary: Exit a parse tree produced by `CommonRegexParser.number`.
    optional: true
    syntax:
      content: 'exitNumber?: (ctx: NumberContext) => void'
      return:
        type:
          - '(ctx: NumberContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.exitOctal_char
    name: exitOctal_char
    fullName: exitOctal_char
    children: []
    langs:
      - typeScript
    type: property
    summary: Exit a parse tree produced by `CommonRegexParser.octal_char`.
    optional: true
    syntax:
      content: 'exitOctal_char?: (ctx: Octal_charContext) => void'
      return:
        type:
          - '(ctx: Octal_charContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.exitOctal_digit
    name: exitOctal_digit
    fullName: exitOctal_digit
    children: []
    langs:
      - typeScript
    type: property
    summary: Exit a parse tree produced by `CommonRegexParser.octal_digit`.
    optional: true
    syntax:
      content: 'exitOctal_digit?: (ctx: Octal_digitContext) => void'
      return:
        type:
          - '(ctx: Octal_digitContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.exitOption
    name: exitOption
    fullName: exitOption
    children: []
    langs:
      - typeScript
    type: property
    summary: Exit a parse tree produced by `CommonRegexParser.option`.
    optional: true
    syntax:
      content: 'exitOption?: (ctx: OptionContext) => void'
      return:
        type:
          - '(ctx: OptionContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.exitOption_flag
    name: exitOption_flag
    fullName: exitOption_flag
    children: []
    langs:
      - typeScript
    type: property
    summary: Exit a parse tree produced by `CommonRegexParser.option_flag`.
    optional: true
    syntax:
      content: 'exitOption_flag?: (ctx: Option_flagContext) => void'
      return:
        type:
          - '(ctx: Option_flagContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.exitParse
    name: exitParse
    fullName: exitParse
    children: []
    langs:
      - typeScript
    type: property
    summary: Exit a parse tree produced by `CommonRegexParser.parse`.
    optional: true
    syntax:
      content: 'exitParse?: (ctx: ParseContext) => void'
      return:
        type:
          - '(ctx: ParseContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.exitQuantifier
    name: exitQuantifier
    fullName: exitQuantifier
    children: []
    langs:
      - typeScript
    type: property
    summary: Exit a parse tree produced by `CommonRegexParser.quantifier`.
    optional: true
    syntax:
      content: 'exitQuantifier?: (ctx: QuantifierContext) => void'
      return:
        type:
          - '(ctx: QuantifierContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.exitQuantifier_type
    name: exitQuantifier_type
    fullName: exitQuantifier_type
    children: []
    langs:
      - typeScript
    type: property
    summary: Exit a parse tree produced by `CommonRegexParser.quantifier_type`.
    optional: true
    syntax:
      content: 'exitQuantifier_type?: (ctx: Quantifier_typeContext) => void'
      return:
        type:
          - '(ctx: Quantifier_typeContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.exitShared_atom
    name: exitShared_atom
    fullName: exitShared_atom
    children: []
    langs:
      - typeScript
    type: property
    summary: Exit a parse tree produced by `CommonRegexParser.shared_atom`.
    optional: true
    syntax:
      content: 'exitShared_atom?: (ctx: Shared_atomContext) => void'
      return:
        type:
          - '(ctx: Shared_atomContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.exitShared_literal
    name: exitShared_literal
    fullName: exitShared_literal
    children: []
    langs:
      - typeScript
    type: property
    summary: Exit a parse tree produced by `CommonRegexParser.shared_literal`.
    optional: true
    syntax:
      content: 'exitShared_literal?: (ctx: Shared_literalContext) => void'
      return:
        type:
          - '(ctx: Shared_literalContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.visitErrorNode
    name: visitErrorNode
    fullName: visitErrorNode
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'visitErrorNode?: (node: ErrorNode) => void'
      return:
        type:
          - '(node: ErrorNode) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.CommonRegexListener.visitTerminal
    name: visitTerminal
    fullName: visitTerminal
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'visitTerminal?: (node: TerminalNode) => void'
      return:
        type:
          - '(node: TerminalNode) => void'
        description: ''
    package: botframework-expressions
