### YamlMime:UniversalReference
items:
  - uid: botframework-expressions.ExpressionVisitor
    name: ExpressionVisitor
    fullName: ExpressionVisitor<Result>
    children:
      - botframework-expressions.ExpressionVisitor.visit
      - botframework-expressions.ExpressionVisitor.visitArgsList
      - botframework-expressions.ExpressionVisitor.visitBinaryOpExp
      - botframework-expressions.ExpressionVisitor.visitChildren
      - botframework-expressions.ExpressionVisitor.visitErrorNode
      - botframework-expressions.ExpressionVisitor.visitExpression
      - botframework-expressions.ExpressionVisitor.visitFile
      - botframework-expressions.ExpressionVisitor.visitFuncInvokeExp
      - botframework-expressions.ExpressionVisitor.visitIdAtom
      - botframework-expressions.ExpressionVisitor.visitIndexAccessExp
      - botframework-expressions.ExpressionVisitor.visitMemberAccessExp
      - botframework-expressions.ExpressionVisitor.visitNumericAtom
      - botframework-expressions.ExpressionVisitor.visitParenthesisExp
      - botframework-expressions.ExpressionVisitor.visitPrimaryExp
      - botframework-expressions.ExpressionVisitor.visitPrimaryExpression
      - botframework-expressions.ExpressionVisitor.visitStringAtom
      - botframework-expressions.ExpressionVisitor.visitTerminal
      - botframework-expressions.ExpressionVisitor.visitUnaryOpExp
    langs:
      - typeScript
    type: interface
    summary: >-
      This interface defines a complete generic visitor for a parse tree
      produced

      by `ExpressionParser`.
    extends:
      name: ParseTreeVisitor<Result>
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionVisitor.visit
    name: visit(ParseTree)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Visit a parse tree, and return a user-defined result of the operation.'
    syntax:
      content: 'function visit(tree: ParseTree)'
      parameters:
        - id: tree
          type:
            - ParseTree
          description: 'The <xref:ParseTree> to visit.'
      return:
        type:
          - Result
        description: The result of visiting the parse tree.
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionVisitor.visitArgsList
    name: visitArgsList
    fullName: visitArgsList
    children: []
    langs:
      - typeScript
    type: property
    summary: Visit a parse tree produced by `ExpressionParser.argsList`.
    optional: true
    syntax:
      content: 'visitArgsList?: (ctx: ArgsListContext) => Result'
      return:
        type:
          - '(ctx: ArgsListContext) => Result'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionVisitor.visitBinaryOpExp
    name: visitBinaryOpExp
    fullName: visitBinaryOpExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Visit a parse tree produced by the `binaryOpExp`
      labeled alternative in `ExpressionParser.expression`.
    optional: true
    syntax:
      content: 'visitBinaryOpExp?: (ctx: BinaryOpExpContext) => Result'
      return:
        type:
          - '(ctx: BinaryOpExpContext) => Result'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionVisitor.visitChildren
    name: visitChildren(RuleNode)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Visit the children of a node, and return a user-defined result
      of the operation.
    syntax:
      content: 'function visitChildren(node: RuleNode)'
      parameters:
        - id: node
          type:
            - RuleNode
          description: 'The <xref:RuleNode> whose children should be visited.'
      return:
        type:
          - Result
        description: The result of visiting the children of the node.
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionVisitor.visitErrorNode
    name: visitErrorNode(ErrorNode)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Visit an error node, and return a user-defined result of the operation.'
    syntax:
      content: 'function visitErrorNode(node: ErrorNode)'
      parameters:
        - id: node
          type:
            - ErrorNode
          description: 'The <xref:ErrorNode> to visit.'
      return:
        type:
          - Result
        description: The result of visiting the node.
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionVisitor.visitExpression
    name: visitExpression
    fullName: visitExpression
    children: []
    langs:
      - typeScript
    type: property
    summary: Visit a parse tree produced by `ExpressionParser.expression`.
    optional: true
    syntax:
      content: 'visitExpression?: (ctx: ExpressionContext) => Result'
      return:
        type:
          - '(ctx: ExpressionContext) => Result'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionVisitor.visitFile
    name: visitFile
    fullName: visitFile
    children: []
    langs:
      - typeScript
    type: property
    summary: Visit a parse tree produced by `ExpressionParser.file`.
    optional: true
    syntax:
      content: 'visitFile?: (ctx: FileContext) => Result'
      return:
        type:
          - '(ctx: FileContext) => Result'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionVisitor.visitFuncInvokeExp
    name: visitFuncInvokeExp
    fullName: visitFuncInvokeExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Visit a parse tree produced by the `funcInvokeExp`
      labeled alternative in `ExpressionParser.primaryExpression`.
    optional: true
    syntax:
      content: 'visitFuncInvokeExp?: (ctx: FuncInvokeExpContext) => Result'
      return:
        type:
          - '(ctx: FuncInvokeExpContext) => Result'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionVisitor.visitIdAtom
    name: visitIdAtom
    fullName: visitIdAtom
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Visit a parse tree produced by the `idAtom`
      labeled alternative in `ExpressionParser.primaryExpression`.
    optional: true
    syntax:
      content: 'visitIdAtom?: (ctx: IdAtomContext) => Result'
      return:
        type:
          - '(ctx: IdAtomContext) => Result'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionVisitor.visitIndexAccessExp
    name: visitIndexAccessExp
    fullName: visitIndexAccessExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Visit a parse tree produced by the `indexAccessExp`
      labeled alternative in `ExpressionParser.primaryExpression`.
    optional: true
    syntax:
      content: 'visitIndexAccessExp?: (ctx: IndexAccessExpContext) => Result'
      return:
        type:
          - '(ctx: IndexAccessExpContext) => Result'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionVisitor.visitMemberAccessExp
    name: visitMemberAccessExp
    fullName: visitMemberAccessExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Visit a parse tree produced by the `memberAccessExp`
      labeled alternative in `ExpressionParser.primaryExpression`.
    optional: true
    syntax:
      content: 'visitMemberAccessExp?: (ctx: MemberAccessExpContext) => Result'
      return:
        type:
          - '(ctx: MemberAccessExpContext) => Result'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionVisitor.visitNumericAtom
    name: visitNumericAtom
    fullName: visitNumericAtom
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Visit a parse tree produced by the `numericAtom`
      labeled alternative in `ExpressionParser.primaryExpression`.
    optional: true
    syntax:
      content: 'visitNumericAtom?: (ctx: NumericAtomContext) => Result'
      return:
        type:
          - '(ctx: NumericAtomContext) => Result'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionVisitor.visitParenthesisExp
    name: visitParenthesisExp
    fullName: visitParenthesisExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Visit a parse tree produced by the `parenthesisExp`
      labeled alternative in `ExpressionParser.primaryExpression`.
    optional: true
    syntax:
      content: 'visitParenthesisExp?: (ctx: ParenthesisExpContext) => Result'
      return:
        type:
          - '(ctx: ParenthesisExpContext) => Result'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionVisitor.visitPrimaryExp
    name: visitPrimaryExp
    fullName: visitPrimaryExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Visit a parse tree produced by the `primaryExp`
      labeled alternative in `ExpressionParser.expression`.
    optional: true
    syntax:
      content: 'visitPrimaryExp?: (ctx: PrimaryExpContext) => Result'
      return:
        type:
          - '(ctx: PrimaryExpContext) => Result'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionVisitor.visitPrimaryExpression
    name: visitPrimaryExpression
    fullName: visitPrimaryExpression
    children: []
    langs:
      - typeScript
    type: property
    summary: Visit a parse tree produced by `ExpressionParser.primaryExpression`.
    optional: true
    syntax:
      content: 'visitPrimaryExpression?: (ctx: PrimaryExpressionContext) => Result'
      return:
        type:
          - '(ctx: PrimaryExpressionContext) => Result'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionVisitor.visitStringAtom
    name: visitStringAtom
    fullName: visitStringAtom
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Visit a parse tree produced by the `stringAtom`
      labeled alternative in `ExpressionParser.primaryExpression`.
    optional: true
    syntax:
      content: 'visitStringAtom?: (ctx: StringAtomContext) => Result'
      return:
        type:
          - '(ctx: StringAtomContext) => Result'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionVisitor.visitTerminal
    name: visitTerminal(TerminalNode)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Visit a terminal node, and return a user-defined result of the operation.'
    syntax:
      content: 'function visitTerminal(node: TerminalNode)'
      parameters:
        - id: node
          type:
            - TerminalNode
          description: 'The <xref:TerminalNode> to visit.'
      return:
        type:
          - Result
        description: The result of visiting the node.
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionVisitor.visitUnaryOpExp
    name: visitUnaryOpExp
    fullName: visitUnaryOpExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Visit a parse tree produced by the `unaryOpExp`
      labeled alternative in `ExpressionParser.expression`.
    optional: true
    syntax:
      content: 'visitUnaryOpExp?: (ctx: UnaryOpExpContext) => Result'
      return:
        type:
          - '(ctx: UnaryOpExpContext) => Result'
        description: ''
    package: botframework-expressions
