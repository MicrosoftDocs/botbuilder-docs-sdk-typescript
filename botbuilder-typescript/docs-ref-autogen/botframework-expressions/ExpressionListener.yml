### YamlMime:UniversalReference
items:
  - uid: botframework-expressions.ExpressionListener
    name: ExpressionListener
    fullName: ExpressionListener
    children:
      - botframework-expressions.ExpressionListener.enterArgsList
      - botframework-expressions.ExpressionListener.enterBinaryOpExp
      - botframework-expressions.ExpressionListener.enterEveryRule
      - botframework-expressions.ExpressionListener.enterExpression
      - botframework-expressions.ExpressionListener.enterFile
      - botframework-expressions.ExpressionListener.enterFuncInvokeExp
      - botframework-expressions.ExpressionListener.enterIdAtom
      - botframework-expressions.ExpressionListener.enterIndexAccessExp
      - botframework-expressions.ExpressionListener.enterMemberAccessExp
      - botframework-expressions.ExpressionListener.enterNumericAtom
      - botframework-expressions.ExpressionListener.enterParenthesisExp
      - botframework-expressions.ExpressionListener.enterPrimaryExp
      - botframework-expressions.ExpressionListener.enterPrimaryExpression
      - botframework-expressions.ExpressionListener.enterStringAtom
      - botframework-expressions.ExpressionListener.enterUnaryOpExp
      - botframework-expressions.ExpressionListener.exitArgsList
      - botframework-expressions.ExpressionListener.exitBinaryOpExp
      - botframework-expressions.ExpressionListener.exitEveryRule
      - botframework-expressions.ExpressionListener.exitExpression
      - botframework-expressions.ExpressionListener.exitFile
      - botframework-expressions.ExpressionListener.exitFuncInvokeExp
      - botframework-expressions.ExpressionListener.exitIdAtom
      - botframework-expressions.ExpressionListener.exitIndexAccessExp
      - botframework-expressions.ExpressionListener.exitMemberAccessExp
      - botframework-expressions.ExpressionListener.exitNumericAtom
      - botframework-expressions.ExpressionListener.exitParenthesisExp
      - botframework-expressions.ExpressionListener.exitPrimaryExp
      - botframework-expressions.ExpressionListener.exitPrimaryExpression
      - botframework-expressions.ExpressionListener.exitStringAtom
      - botframework-expressions.ExpressionListener.exitUnaryOpExp
      - botframework-expressions.ExpressionListener.visitErrorNode
      - botframework-expressions.ExpressionListener.visitTerminal
    langs:
      - typeScript
    type: interface
    summary: |-
      This interface defines a complete listener for a parse tree produced by
      `ExpressionParser`.
    extends:
      name: ParseTreeListener
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionListener.enterArgsList
    name: enterArgsList
    fullName: enterArgsList
    children: []
    langs:
      - typeScript
    type: property
    summary: Enter a parse tree produced by `ExpressionParser.argsList`.
    optional: true
    syntax:
      content: 'enterArgsList?: (ctx: ArgsListContext) => void'
      return:
        type:
          - '(ctx: ArgsListContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionListener.enterBinaryOpExp
    name: enterBinaryOpExp
    fullName: enterBinaryOpExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Enter a parse tree produced by the `binaryOpExp`
      labeled alternative in `ExpressionParser.expression`.
    optional: true
    syntax:
      content: 'enterBinaryOpExp?: (ctx: BinaryOpExpContext) => void'
      return:
        type:
          - '(ctx: BinaryOpExpContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionListener.enterEveryRule
    name: enterEveryRule
    fullName: enterEveryRule
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'enterEveryRule?: (ctx: ParserRuleContext) => void'
      return:
        type:
          - '(ctx: ParserRuleContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionListener.enterExpression
    name: enterExpression
    fullName: enterExpression
    children: []
    langs:
      - typeScript
    type: property
    summary: Enter a parse tree produced by `ExpressionParser.expression`.
    optional: true
    syntax:
      content: 'enterExpression?: (ctx: ExpressionContext) => void'
      return:
        type:
          - '(ctx: ExpressionContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionListener.enterFile
    name: enterFile
    fullName: enterFile
    children: []
    langs:
      - typeScript
    type: property
    summary: Enter a parse tree produced by `ExpressionParser.file`.
    optional: true
    syntax:
      content: 'enterFile?: (ctx: FileContext) => void'
      return:
        type:
          - '(ctx: FileContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionListener.enterFuncInvokeExp
    name: enterFuncInvokeExp
    fullName: enterFuncInvokeExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Enter a parse tree produced by the `funcInvokeExp`
      labeled alternative in `ExpressionParser.primaryExpression`.
    optional: true
    syntax:
      content: 'enterFuncInvokeExp?: (ctx: FuncInvokeExpContext) => void'
      return:
        type:
          - '(ctx: FuncInvokeExpContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionListener.enterIdAtom
    name: enterIdAtom
    fullName: enterIdAtom
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Enter a parse tree produced by the `idAtom`
      labeled alternative in `ExpressionParser.primaryExpression`.
    optional: true
    syntax:
      content: 'enterIdAtom?: (ctx: IdAtomContext) => void'
      return:
        type:
          - '(ctx: IdAtomContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionListener.enterIndexAccessExp
    name: enterIndexAccessExp
    fullName: enterIndexAccessExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Enter a parse tree produced by the `indexAccessExp`
      labeled alternative in `ExpressionParser.primaryExpression`.
    optional: true
    syntax:
      content: 'enterIndexAccessExp?: (ctx: IndexAccessExpContext) => void'
      return:
        type:
          - '(ctx: IndexAccessExpContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionListener.enterMemberAccessExp
    name: enterMemberAccessExp
    fullName: enterMemberAccessExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Enter a parse tree produced by the `memberAccessExp`
      labeled alternative in `ExpressionParser.primaryExpression`.
    optional: true
    syntax:
      content: 'enterMemberAccessExp?: (ctx: MemberAccessExpContext) => void'
      return:
        type:
          - '(ctx: MemberAccessExpContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionListener.enterNumericAtom
    name: enterNumericAtom
    fullName: enterNumericAtom
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Enter a parse tree produced by the `numericAtom`
      labeled alternative in `ExpressionParser.primaryExpression`.
    optional: true
    syntax:
      content: 'enterNumericAtom?: (ctx: NumericAtomContext) => void'
      return:
        type:
          - '(ctx: NumericAtomContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionListener.enterParenthesisExp
    name: enterParenthesisExp
    fullName: enterParenthesisExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Enter a parse tree produced by the `parenthesisExp`
      labeled alternative in `ExpressionParser.primaryExpression`.
    optional: true
    syntax:
      content: 'enterParenthesisExp?: (ctx: ParenthesisExpContext) => void'
      return:
        type:
          - '(ctx: ParenthesisExpContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionListener.enterPrimaryExp
    name: enterPrimaryExp
    fullName: enterPrimaryExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Enter a parse tree produced by the `primaryExp`
      labeled alternative in `ExpressionParser.expression`.
    optional: true
    syntax:
      content: 'enterPrimaryExp?: (ctx: PrimaryExpContext) => void'
      return:
        type:
          - '(ctx: PrimaryExpContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionListener.enterPrimaryExpression
    name: enterPrimaryExpression
    fullName: enterPrimaryExpression
    children: []
    langs:
      - typeScript
    type: property
    summary: Enter a parse tree produced by `ExpressionParser.primaryExpression`.
    optional: true
    syntax:
      content: 'enterPrimaryExpression?: (ctx: PrimaryExpressionContext) => void'
      return:
        type:
          - '(ctx: PrimaryExpressionContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionListener.enterStringAtom
    name: enterStringAtom
    fullName: enterStringAtom
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Enter a parse tree produced by the `stringAtom`
      labeled alternative in `ExpressionParser.primaryExpression`.
    optional: true
    syntax:
      content: 'enterStringAtom?: (ctx: StringAtomContext) => void'
      return:
        type:
          - '(ctx: StringAtomContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionListener.enterUnaryOpExp
    name: enterUnaryOpExp
    fullName: enterUnaryOpExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Enter a parse tree produced by the `unaryOpExp`
      labeled alternative in `ExpressionParser.expression`.
    optional: true
    syntax:
      content: 'enterUnaryOpExp?: (ctx: UnaryOpExpContext) => void'
      return:
        type:
          - '(ctx: UnaryOpExpContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionListener.exitArgsList
    name: exitArgsList
    fullName: exitArgsList
    children: []
    langs:
      - typeScript
    type: property
    summary: Exit a parse tree produced by `ExpressionParser.argsList`.
    optional: true
    syntax:
      content: 'exitArgsList?: (ctx: ArgsListContext) => void'
      return:
        type:
          - '(ctx: ArgsListContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionListener.exitBinaryOpExp
    name: exitBinaryOpExp
    fullName: exitBinaryOpExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Exit a parse tree produced by the `binaryOpExp`
      labeled alternative in `ExpressionParser.expression`.
    optional: true
    syntax:
      content: 'exitBinaryOpExp?: (ctx: BinaryOpExpContext) => void'
      return:
        type:
          - '(ctx: BinaryOpExpContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionListener.exitEveryRule
    name: exitEveryRule
    fullName: exitEveryRule
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'exitEveryRule?: (ctx: ParserRuleContext) => void'
      return:
        type:
          - '(ctx: ParserRuleContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionListener.exitExpression
    name: exitExpression
    fullName: exitExpression
    children: []
    langs:
      - typeScript
    type: property
    summary: Exit a parse tree produced by `ExpressionParser.expression`.
    optional: true
    syntax:
      content: 'exitExpression?: (ctx: ExpressionContext) => void'
      return:
        type:
          - '(ctx: ExpressionContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionListener.exitFile
    name: exitFile
    fullName: exitFile
    children: []
    langs:
      - typeScript
    type: property
    summary: Exit a parse tree produced by `ExpressionParser.file`.
    optional: true
    syntax:
      content: 'exitFile?: (ctx: FileContext) => void'
      return:
        type:
          - '(ctx: FileContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionListener.exitFuncInvokeExp
    name: exitFuncInvokeExp
    fullName: exitFuncInvokeExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Exit a parse tree produced by the `funcInvokeExp`
      labeled alternative in `ExpressionParser.primaryExpression`.
    optional: true
    syntax:
      content: 'exitFuncInvokeExp?: (ctx: FuncInvokeExpContext) => void'
      return:
        type:
          - '(ctx: FuncInvokeExpContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionListener.exitIdAtom
    name: exitIdAtom
    fullName: exitIdAtom
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Exit a parse tree produced by the `idAtom`
      labeled alternative in `ExpressionParser.primaryExpression`.
    optional: true
    syntax:
      content: 'exitIdAtom?: (ctx: IdAtomContext) => void'
      return:
        type:
          - '(ctx: IdAtomContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionListener.exitIndexAccessExp
    name: exitIndexAccessExp
    fullName: exitIndexAccessExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Exit a parse tree produced by the `indexAccessExp`
      labeled alternative in `ExpressionParser.primaryExpression`.
    optional: true
    syntax:
      content: 'exitIndexAccessExp?: (ctx: IndexAccessExpContext) => void'
      return:
        type:
          - '(ctx: IndexAccessExpContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionListener.exitMemberAccessExp
    name: exitMemberAccessExp
    fullName: exitMemberAccessExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Exit a parse tree produced by the `memberAccessExp`
      labeled alternative in `ExpressionParser.primaryExpression`.
    optional: true
    syntax:
      content: 'exitMemberAccessExp?: (ctx: MemberAccessExpContext) => void'
      return:
        type:
          - '(ctx: MemberAccessExpContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionListener.exitNumericAtom
    name: exitNumericAtom
    fullName: exitNumericAtom
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Exit a parse tree produced by the `numericAtom`
      labeled alternative in `ExpressionParser.primaryExpression`.
    optional: true
    syntax:
      content: 'exitNumericAtom?: (ctx: NumericAtomContext) => void'
      return:
        type:
          - '(ctx: NumericAtomContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionListener.exitParenthesisExp
    name: exitParenthesisExp
    fullName: exitParenthesisExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Exit a parse tree produced by the `parenthesisExp`
      labeled alternative in `ExpressionParser.primaryExpression`.
    optional: true
    syntax:
      content: 'exitParenthesisExp?: (ctx: ParenthesisExpContext) => void'
      return:
        type:
          - '(ctx: ParenthesisExpContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionListener.exitPrimaryExp
    name: exitPrimaryExp
    fullName: exitPrimaryExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Exit a parse tree produced by the `primaryExp`
      labeled alternative in `ExpressionParser.expression`.
    optional: true
    syntax:
      content: 'exitPrimaryExp?: (ctx: PrimaryExpContext) => void'
      return:
        type:
          - '(ctx: PrimaryExpContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionListener.exitPrimaryExpression
    name: exitPrimaryExpression
    fullName: exitPrimaryExpression
    children: []
    langs:
      - typeScript
    type: property
    summary: Exit a parse tree produced by `ExpressionParser.primaryExpression`.
    optional: true
    syntax:
      content: 'exitPrimaryExpression?: (ctx: PrimaryExpressionContext) => void'
      return:
        type:
          - '(ctx: PrimaryExpressionContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionListener.exitStringAtom
    name: exitStringAtom
    fullName: exitStringAtom
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Exit a parse tree produced by the `stringAtom`
      labeled alternative in `ExpressionParser.primaryExpression`.
    optional: true
    syntax:
      content: 'exitStringAtom?: (ctx: StringAtomContext) => void'
      return:
        type:
          - '(ctx: StringAtomContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionListener.exitUnaryOpExp
    name: exitUnaryOpExp
    fullName: exitUnaryOpExp
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Exit a parse tree produced by the `unaryOpExp`
      labeled alternative in `ExpressionParser.expression`.
    optional: true
    syntax:
      content: 'exitUnaryOpExp?: (ctx: UnaryOpExpContext) => void'
      return:
        type:
          - '(ctx: UnaryOpExpContext) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionListener.visitErrorNode
    name: visitErrorNode
    fullName: visitErrorNode
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'visitErrorNode?: (node: ErrorNode) => void'
      return:
        type:
          - '(node: ErrorNode) => void'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.ExpressionListener.visitTerminal
    name: visitTerminal
    fullName: visitTerminal
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'visitTerminal?: (node: TerminalNode) => void'
      return:
        type:
          - '(node: TerminalNode) => void'
        description: ''
    package: botframework-expressions
