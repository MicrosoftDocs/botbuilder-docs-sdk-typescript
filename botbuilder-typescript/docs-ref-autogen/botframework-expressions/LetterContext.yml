### YamlMime:UniversalReference
items:
  - uid: botframework-expressions.LetterContext
    name: LetterContext
    fullName: LetterContext
    children:
      - botframework-expressions.LetterContext.accept
      - botframework-expressions.LetterContext.addChild_1
      - botframework-expressions.LetterContext.addChild
      - botframework-expressions.LetterContext.addChild_2
      - botframework-expressions.LetterContext.addErrorNode
      - botframework-expressions.LetterContext.ALC
      - botframework-expressions.LetterContext.altNumber
      - botframework-expressions.LetterContext.AUC
      - botframework-expressions.LetterContext.BLC
      - botframework-expressions.LetterContext.BUC
      - botframework-expressions.LetterContext.childCount
      - botframework-expressions.LetterContext.children
      - botframework-expressions.LetterContext.CLC
      - botframework-expressions.LetterContext.copyFrom
      - botframework-expressions.LetterContext.CUC
      - botframework-expressions.LetterContext.depth
      - botframework-expressions.LetterContext.DLC
      - botframework-expressions.LetterContext.DUC
      - botframework-expressions.LetterContext.ELC
      - botframework-expressions.LetterContext.emptyContext
      - botframework-expressions.LetterContext.enterRule
      - botframework-expressions.LetterContext.EUC
      - botframework-expressions.LetterContext.exception
      - botframework-expressions.LetterContext.exitRule
      - botframework-expressions.LetterContext.FLC
      - botframework-expressions.LetterContext.FUC
      - botframework-expressions.LetterContext.getChild
      - botframework-expressions.LetterContext.getChild_1
      - botframework-expressions.LetterContext.getChildContext
      - botframework-expressions.LetterContext.getRuleContext
      - botframework-expressions.LetterContext.getRuleContexts
      - botframework-expressions.LetterContext.getToken
      - botframework-expressions.LetterContext.getTokens
      - botframework-expressions.LetterContext.GLC
      - botframework-expressions.LetterContext.GUC
      - botframework-expressions.LetterContext.HLC
      - botframework-expressions.LetterContext.HUC
      - botframework-expressions.LetterContext.ILC
      - botframework-expressions.LetterContext.invokingState
      - botframework-expressions.LetterContext.isEmpty
      - botframework-expressions.LetterContext.IUC
      - botframework-expressions.LetterContext.JLC
      - botframework-expressions.LetterContext.JUC
      - botframework-expressions.LetterContext.KLC
      - botframework-expressions.LetterContext.KUC
      - botframework-expressions.LetterContext.constructor
      - botframework-expressions.LetterContext.LLC
      - botframework-expressions.LetterContext.LUC
      - botframework-expressions.LetterContext.MLC
      - botframework-expressions.LetterContext.MUC
      - botframework-expressions.LetterContext.NLC
      - botframework-expressions.LetterContext.NUC
      - botframework-expressions.LetterContext.OLC
      - botframework-expressions.LetterContext.OUC
      - botframework-expressions.LetterContext.parent
      - botframework-expressions.LetterContext.payload
      - botframework-expressions.LetterContext.PLC
      - botframework-expressions.LetterContext.PUC
      - botframework-expressions.LetterContext.QLC
      - botframework-expressions.LetterContext.QUC
      - botframework-expressions.LetterContext.removeLastChild
      - botframework-expressions.LetterContext.RLC
      - botframework-expressions.LetterContext.RUC
      - botframework-expressions.LetterContext.ruleContext
      - botframework-expressions.LetterContext.ruleIndex
      - botframework-expressions.LetterContext.SLC
      - botframework-expressions.LetterContext.sourceInterval
      - botframework-expressions.LetterContext.start
      - botframework-expressions.LetterContext.stop
      - botframework-expressions.LetterContext.SUC
      - botframework-expressions.LetterContext.text
      - botframework-expressions.LetterContext.TLC
      - botframework-expressions.LetterContext.toInfoString
      - botframework-expressions.LetterContext.toString
      - botframework-expressions.LetterContext.toString_1
      - botframework-expressions.LetterContext.toString_3
      - botframework-expressions.LetterContext.toString_2
      - botframework-expressions.LetterContext.toString_4
      - botframework-expressions.LetterContext.toStringTree_2
      - botframework-expressions.LetterContext.toStringTree
      - botframework-expressions.LetterContext.toStringTree_1
      - botframework-expressions.LetterContext.tryGetChild
      - botframework-expressions.LetterContext.tryGetRuleContext
      - botframework-expressions.LetterContext.tryGetToken
      - botframework-expressions.LetterContext.TUC
      - botframework-expressions.LetterContext.ULC
      - botframework-expressions.LetterContext.UUC
      - botframework-expressions.LetterContext.VLC
      - botframework-expressions.LetterContext.VUC
      - botframework-expressions.LetterContext.WLC
      - botframework-expressions.LetterContext.WUC
      - botframework-expressions.LetterContext.XLC
      - botframework-expressions.LetterContext.XUC
      - botframework-expressions.LetterContext.YLC
      - botframework-expressions.LetterContext.YUC
      - botframework-expressions.LetterContext.ZLC
      - botframework-expressions.LetterContext.ZUC
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: ParserRuleContext
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.accept
    name: accept(CommonRegexVisitor<Result>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function accept<Result>(visitor: CommonRegexVisitor<Result>)'
      parameters:
        - id: visitor
          type:
            - botframework-expressions.CommonRegexVisitor<Result>
          description: ''
      return:
        type:
          - Result
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.addChild_1
    name: addChild(RuleContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addChild(ruleInvocation: RuleContext)'
      parameters:
        - id: ruleInvocation
          type:
            - RuleContext
          description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.addChild
    name: addChild(TerminalNode)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addChild(t: TerminalNode)'
      parameters:
        - id: t
          type:
            - TerminalNode
          description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.addChild_2
    name: addChild(Token)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addChild(matchedToken: Token)'
      parameters:
        - id: matchedToken
          type:
            - Token
          description: ''
      return:
        type:
          - TerminalNode
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.addErrorNode
    name: addErrorNode(Token)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addErrorNode(badToken: Token)'
      parameters:
        - id: badToken
          type:
            - Token
          description: ''
      return:
        type:
          - ErrorNode
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.ALC
    name: ALC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function ALC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.altNumber
    name: altNumber
    fullName: altNumber
    children: []
    langs:
      - typeScript
    type: property
    summary: |
      Set the outer alternative number for this context node. Default
       implementation does nothing to avoid backing field overhead for
       trees that don't need it.  Create
       a subclass of ParserRuleContext with backing field and set
       option contextSuperClass.
       @since 4.5.3
    syntax:
      content: 'altNumber: number'
      return:
        type:
          - number
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.AUC
    name: AUC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function AUC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.BLC
    name: BLC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function BLC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.BUC
    name: BUC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function BUC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.childCount
    name: childCount
    fullName: childCount
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'childCount: number'
      return:
        type:
          - number
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.children
    name: children
    fullName: children
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      If we are debugging or building a parse tree for a visitor,
       we need to track all of the tokens and rule invocations associated
       with this rule's context. This is empty for parsing w/o tree constr.
       operation because we don't the need to track the details about
       how we parse this rule.
    optional: true
    syntax:
      content: 'children?: ParseTree[]'
      return:
        type:
          - 'ParseTree[]'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.CLC
    name: CLC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function CLC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.copyFrom
    name: copyFrom(ParserRuleContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      COPY a ctx (I'm deliberately not using copy constructor) to avoid
      confusion with creating node with parent. Does not copy children.
      This is used in the generated parser code to flip a generic XContext
      node for rule X to a YContext for alt label Y. In that sense, it is not
      really a generic copy function.

      If we do an error sync() at start of a rule, we might add error nodes
      to the generic XContext so this function must copy those nodes to the
      YContext as well else they are lost!
    syntax:
      content: 'function copyFrom(ctx: ParserRuleContext)'
      parameters:
        - id: ctx
          type:
            - ParserRuleContext
          description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.CUC
    name: CUC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function CUC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.depth
    name: depth()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function depth()
      parameters: []
      return:
        type:
          - number
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.DLC
    name: DLC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function DLC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.DUC
    name: DUC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function DUC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.ELC
    name: ELC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function ELC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.emptyContext
    name: emptyContext()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: static function emptyContext()
      parameters: []
      return:
        type:
          - ParserRuleContext
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.enterRule
    name: enterRule(CommonRegexListener)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function enterRule(listener: CommonRegexListener)'
      parameters:
        - id: listener
          type:
            - botframework-expressions.CommonRegexListener
          description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.EUC
    name: EUC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function EUC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.exception
    name: exception
    fullName: exception
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      The exception that forced this rule to return. If the rule successfully
      completed, this is {@code null}.
    optional: true
    syntax:
      content: 'exception?: RecognitionException'
      return:
        type:
          - RecognitionException
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.exitRule
    name: exitRule(CommonRegexListener)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function exitRule(listener: CommonRegexListener)'
      parameters:
        - id: listener
          type:
            - botframework-expressions.CommonRegexListener
          description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.FLC
    name: FLC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function FLC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.FUC
    name: FUC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function FUC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.getChild
    name: getChild(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getChild(i: number)'
      parameters:
        - id: i
          type:
            - number
          description: ''
      return:
        type:
          - ParseTree
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.getChild_1
    name: 'getChild(number, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getChild<T>(i: number, ctxType: Object)'
      parameters:
        - id: i
          type:
            - number
          description: ''
        - id: ctxType
          type:
            - Object
          description: ''
      return:
        type:
          - T
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.getChildContext
    name: 'getChildContext(RuleContext, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        static function getChildContext(parent: RuleContext, invokingState:
        number)
      parameters:
        - id: parent
          type:
            - RuleContext
          description: ''
        - id: invokingState
          type:
            - number
          description: ''
      return:
        type:
          - RuleContext
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.getRuleContext
    name: 'getRuleContext(number, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getRuleContext<T>(i: number, ctxType: Object)'
      parameters:
        - id: i
          type:
            - number
          description: ''
        - id: ctxType
          type:
            - Object
          description: ''
      return:
        type:
          - T
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.getRuleContexts
    name: getRuleContexts(Object)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getRuleContexts<T>(ctxType: Object)'
      parameters:
        - id: ctxType
          type:
            - Object
          description: ''
      return:
        type:
          - 'T[]'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.getToken
    name: 'getToken(number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getToken(ttype: number, i: number)'
      parameters:
        - id: ttype
          type:
            - number
          description: ''
        - id: i
          type:
            - number
          description: ''
      return:
        type:
          - TerminalNode
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.getTokens
    name: getTokens(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getTokens(ttype: number)'
      parameters:
        - id: ttype
          type:
            - number
          description: ''
      return:
        type:
          - 'TerminalNode[]'
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.GLC
    name: GLC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function GLC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.GUC
    name: GUC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function GUC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.HLC
    name: HLC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function HLC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.HUC
    name: HUC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function HUC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.ILC
    name: ILC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function ILC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.invokingState
    name: invokingState
    fullName: invokingState
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'invokingState: number'
      return:
        type:
          - number
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.isEmpty
    name: isEmpty
    fullName: isEmpty
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      A context is empty if there is no invoking state; meaning nobody called
       current context.
    syntax:
      content: 'isEmpty: boolean'
      return:
        type:
          - boolean
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.IUC
    name: IUC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function IUC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.JLC
    name: JLC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function JLC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.JUC
    name: JUC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function JUC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.KLC
    name: KLC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function KLC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.KUC
    name: KUC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function KUC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.constructor
    name: 'LetterContext(ParserRuleContext | undefined, number)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new LetterContext(parent: ParserRuleContext | undefined, invokingState:
        number)
      parameters:
        - id: parent
          type:
            - ParserRuleContext | undefined
          description: ''
        - id: invokingState
          type:
            - number
          description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.LLC
    name: LLC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function LLC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.LUC
    name: LUC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function LUC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.MLC
    name: MLC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function MLC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.MUC
    name: MUC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function MUC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.NLC
    name: NLC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function NLC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.NUC
    name: NUC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function NUC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.OLC
    name: OLC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function OLC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.OUC
    name: OUC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function OUC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.parent
    name: parent
    fullName: parent
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'parent: ParserRuleContext | undefined'
      return:
        type:
          - ParserRuleContext | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.payload
    name: payload
    fullName: payload
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'payload: RuleContext'
      return:
        type:
          - RuleContext
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.PLC
    name: PLC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function PLC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.PUC
    name: PUC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function PUC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.QLC
    name: QLC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function QLC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.QUC
    name: QUC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function QUC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.removeLastChild
    name: removeLastChild()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Used by enterOuterAlt to toss out a RuleContext previously added as
       we entered a rule. If we have # label, we will need to remove
       generic ruleContext object.
    syntax:
      content: function removeLastChild()
      parameters: []
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.RLC
    name: RLC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function RLC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.RUC
    name: RUC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function RUC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.ruleContext
    name: ruleContext
    fullName: ruleContext
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'ruleContext: this'
      return:
        type:
          - this
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.ruleIndex
    name: ruleIndex
    fullName: ruleIndex
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'ruleIndex: number'
      return:
        type:
          - number
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.SLC
    name: SLC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function SLC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.sourceInterval
    name: sourceInterval
    fullName: sourceInterval
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'sourceInterval: Interval'
      return:
        type:
          - Interval
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.start
    name: start
    fullName: start
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Get the initial token in this context.

      Note that the range from start to stop is inclusive, so for rules that do
      not consume anything

      (for example, zero length or error productions) this token may exceed
      stop.
    syntax:
      content: 'start: Token'
      return:
        type:
          - Token
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.stop
    name: stop
    fullName: stop
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Get the final token in this context.

      Note that the range from start to stop is inclusive, so for rules that do
      not consume anything

      (for example, zero length or error productions) this token may precede
      start.
    syntax:
      content: 'stop: Token | undefined'
      return:
        type:
          - Token | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.SUC
    name: SUC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function SUC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.text
    name: text
    fullName: text
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Return the combined text of all child nodes. This method only considers
       tokens which have been added to the parse tree.
       <p>
       Since tokens on hidden channels (e.g. whitespace or comments) are not
       added to the parse trees, they will not appear in the output of this
       method.
    syntax:
      content: 'text: string'
      return:
        type:
          - string
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.TLC
    name: TLC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function TLC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.toInfoString
    name: toInfoString(Parser)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Used for rule context info debugging during parse-time, not so much for
      ATN debugging
    syntax:
      content: 'function toInfoString(recognizer: Parser)'
      parameters:
        - id: recognizer
          type:
            - Parser
          description: ''
      return:
        type:
          - string
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.toString
    name: toString()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function toString()
      parameters: []
      return:
        type:
          - string
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.toString_1
    name: 'toString(Recognizer<any, any> | undefined)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function toString(recog: Recognizer<any, any> | undefined)'
      parameters:
        - id: recog
          type:
            - 'Recognizer<any, any> | undefined'
          description: ''
      return:
        type:
          - string
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.toString_3
    name: 'toString(Recognizer<any, any> | undefined, RuleContext | undefined)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function toString(recog: Recognizer<any, any> | undefined, stop:
        RuleContext | undefined)
      parameters:
        - id: recog
          type:
            - 'Recognizer<any, any> | undefined'
          description: ''
        - id: stop
          type:
            - RuleContext | undefined
          description: ''
      return:
        type:
          - string
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.toString_2
    name: 'toString(string[] | undefined)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function toString(ruleNames: string[] | undefined)'
      parameters:
        - id: ruleNames
          type:
            - 'string[] | undefined'
          description: ''
      return:
        type:
          - string
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.toString_4
    name: 'toString(string[] | undefined, RuleContext | undefined)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function toString(ruleNames: string[] | undefined, stop: RuleContext |
        undefined)
      parameters:
        - id: ruleNames
          type:
            - 'string[] | undefined'
          description: ''
        - id: stop
          type:
            - RuleContext | undefined
          description: ''
      return:
        type:
          - string
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.toStringTree_2
    name: toStringTree()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Print out a whole tree, not just a node, in LISP format
       (root child1 .. childN). Print just a node if this is a leaf.
       We have to know the recognizer so we can get rule names.
    syntax:
      content: function toStringTree()
      parameters: []
      return:
        type:
          - string
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.toStringTree
    name: toStringTree(Parser)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Print out a whole tree, not just a node, in LISP format
       (root child1 .. childN). Print just a node if this is a leaf.
       We have to know the recognizer so we can get rule names.
    syntax:
      content: 'function toStringTree(recog: Parser)'
      parameters:
        - id: recog
          type:
            - Parser
          description: ''
      return:
        type:
          - string
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.toStringTree_1
    name: 'toStringTree(string[] | undefined)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Print out a whole tree, not just a node, in LISP format
       (root child1 .. childN). Print just a node if this is a leaf.
    syntax:
      content: 'function toStringTree(ruleNames: string[] | undefined)'
      parameters:
        - id: ruleNames
          type:
            - 'string[] | undefined'
          description: ''
      return:
        type:
          - string
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.tryGetChild
    name: 'tryGetChild(number, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function tryGetChild<T>(i: number, ctxType: Object)'
      parameters:
        - id: i
          type:
            - number
          description: ''
        - id: ctxType
          type:
            - Object
          description: ''
      return:
        type:
          - T | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.tryGetRuleContext
    name: 'tryGetRuleContext(number, Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function tryGetRuleContext<T>(i: number, ctxType: Object)'
      parameters:
        - id: i
          type:
            - number
          description: ''
        - id: ctxType
          type:
            - Object
          description: ''
      return:
        type:
          - T | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.tryGetToken
    name: 'tryGetToken(number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function tryGetToken(ttype: number, i: number)'
      parameters:
        - id: ttype
          type:
            - number
          description: ''
        - id: i
          type:
            - number
          description: ''
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.TUC
    name: TUC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function TUC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.ULC
    name: ULC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function ULC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.UUC
    name: UUC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function UUC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.VLC
    name: VLC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function VLC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.VUC
    name: VUC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function VUC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.WLC
    name: WLC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function WLC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.WUC
    name: WUC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function WUC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.XLC
    name: XLC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function XLC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.XUC
    name: XUC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function XUC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.YLC
    name: YLC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function YLC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.YUC
    name: YUC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function YUC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.ZLC
    name: ZLC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function ZLC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
  - uid: botframework-expressions.LetterContext.ZUC
    name: ZUC()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function ZUC()
      parameters: []
      return:
        type:
          - TerminalNode | undefined
        description: ''
    package: botframework-expressions
references:
  - uid: botframework-expressions.CommonRegexVisitor<Result>
    name: CommonRegexVisitor<Result>
    spec.typeScript:
      - name: CommonRegexVisitor
        fullName: CommonRegexVisitor
        uid: botframework-expressions.CommonRegexVisitor
      - name: <Result>
        fullName: <Result>
  - uid: botframework-expressions.CommonRegexListener
    name: CommonRegexListener
    spec.typeScript:
      - name: CommonRegexListener
        fullName: CommonRegexListener
        uid: botframework-expressions.CommonRegexListener
