### YamlMime:UniversalReference
items:
  - uid: botbuilder-ai.LuisResult
    name: LuisResult
    fullName: LuisResult
    children:
      - botbuilder-ai.LuisResult.alteredQuery
      - botbuilder-ai.LuisResult.compositeEntities
      - botbuilder-ai.LuisResult.dialog
      - botbuilder-ai.LuisResult.entities
      - botbuilder-ai.LuisResult.intents
      - botbuilder-ai.LuisResult.query
      - botbuilder-ai.LuisResult.topScoringIntent
    langs:
      - typeScript
    type: interface
    summary: ''
    package: botbuilder-ai
  - uid: botbuilder-ai.LuisResult.alteredQuery
    name: alteredQuery
    fullName: alteredQuery
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'alteredQuery?: string'
      return:
        type:
          - string
    package: botbuilder-ai
  - uid: botbuilder-ai.LuisResult.compositeEntities
    name: compositeEntities
    fullName: compositeEntities
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'compositeEntities?: CompositeEntity[]'
      return:
        type:
          - 'botbuilder-ai.CompositeEntity[]'
    package: botbuilder-ai
  - uid: botbuilder-ai.LuisResult.dialog
    name: dialog
    fullName: dialog
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'dialog?: DialogResponse'
      return:
        type:
          - botbuilder-ai.DialogResponse
    package: botbuilder-ai
  - uid: botbuilder-ai.LuisResult.entities
    name: entities
    fullName: entities
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'entities: Entity[]'
      return:
        type:
          - 'botbuilder-ai.Entity[]'
    package: botbuilder-ai
  - uid: botbuilder-ai.LuisResult.intents
    name: intents
    fullName: intents
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'intents?: Intent[]'
      return:
        type:
          - 'botbuilder-ai.Intent[]'
    package: botbuilder-ai
  - uid: botbuilder-ai.LuisResult.query
    name: query
    fullName: query
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'query: string'
      return:
        type:
          - string
    package: botbuilder-ai
  - uid: botbuilder-ai.LuisResult.topScoringIntent
    name: topScoringIntent
    fullName: topScoringIntent
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'topScoringIntent?: Intent'
      return:
        type:
          - botbuilder-ai.Intent
    package: botbuilder-ai
references:
  - uid: 'botbuilder-ai.CompositeEntity[]'
    name: 'CompositeEntity[]'
    spec.typeScript:
      - name: CompositeEntity
        fullName: CompositeEntity
        uid: botbuilder-ai.CompositeEntity
      - name: '[]'
        fullName: '[]'
  - uid: botbuilder-ai.DialogResponse
    name: DialogResponse
    spec.typeScript:
      - name: DialogResponse
        fullName: DialogResponse
        uid: botbuilder-ai.DialogResponse
  - uid: 'botbuilder-ai.Entity[]'
    name: 'Entity[]'
    spec.typeScript:
      - name: Entity
        fullName: Entity
        uid: botbuilder-ai.Entity
      - name: '[]'
        fullName: '[]'
  - uid: 'botbuilder-ai.Intent[]'
    name: 'Intent[]'
    spec.typeScript:
      - name: Intent
        fullName: Intent
        uid: botbuilder-ai.Intent
      - name: '[]'
        fullName: '[]'
  - uid: botbuilder-ai.Intent
    name: Intent
    spec.typeScript:
      - name: Intent
        fullName: Intent
        uid: botbuilder-ai.Intent
