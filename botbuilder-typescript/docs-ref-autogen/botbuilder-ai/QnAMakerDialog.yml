### YamlMime:TSType
name: QnAMakerDialog
uid: botbuilder-ai.QnAMakerDialog
package: botbuilder-ai
summary: A dialog that supports multi-step and adaptive-learning QnA Maker services.
fullName: QnAMakerDialog<O>
remarks: >-
  An instance of this class targets a specific QnA Maker knowledge base.

  It supports knowledge bases that include follow-up prompt and active learning
  features.

  The dialog will also present user with appropriate multi-turn prompt or active
  learning options.
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: >-
      QnAMakerDialog(string, string, string, Activity, number, string, string,
      number, Activity, QnAMakerMetadata[], string)
    uid: botbuilder-ai.QnAMakerDialog.constructor
    package: botbuilder-ai
    summary: >-
      Initializes a new instance of the [QnAMakerDialog](xref:QnAMakerDialog)
      class.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new QnAMakerDialog(knowledgeBaseId: string, endpointKey: string,
        hostName: string, noAnswer?: Activity, threshold: number,
        activeLearningCardTitle: string, cardNoMatchText: string, top: number,
        cardNoMatchResponse?: Activity, strictFilters?: QnAMakerMetadata[],
        dialogId: string)
      parameters:
        - id: knowledgeBaseId
          type: string
          description: The ID of the QnA Maker knowledge base to query.
        - id: endpointKey
          type: string
          description: The QnA Maker endpoint key to use to query the knowledge base.
        - id: hostName
          type: string
          description: >-
            The QnA Maker host URL for the knowledge base, starting with
            "https://" and ending with "/qnamaker".
        - id: noAnswer
          type: Activity
          description: >-
            (Optional) The activity to send the user when QnA Maker does not
            find an answer.
        - id: threshold
          type: number
          description: >-
            (Optional) The threshold above which to treat answers found from the
            knowledgebase as a match.
        - id: activeLearningCardTitle
          type: string
          description: >-
            (Optional) The card title to use when showing active learning
            options to the user, if active learning is enabled.
        - id: cardNoMatchText
          type: string
          description: >-
            (Optional) The button text to use with active learning options,
            allowing a user to indicate none of the options are applicable.
        - id: top
          type: number
          description: >-
            (Optional) Maximum number of answers to return from the knowledge
            base.
        - id: cardNoMatchResponse
          type: Activity
          description: >-
            (Optional) The activity to send the user if they select the no match
            option on an active learning card.
        - id: strictFilters
          type: '<xref uid="botbuilder-ai.QnAMakerMetadata" />[]'
          description: >-
            (Optional) QnA Maker metadata with which to filter or boost queries
            to the knowledge base; or null to apply none.
        - id: dialogId
          type: string
          description: |
            (Optional) Id of the created dialog. Default is 'QnAMakerDialog'.
properties:
  - name: EndOfTurn
    uid: botbuilder-ai.QnAMakerDialog.EndOfTurn
    package: botbuilder-ai
    summary: Gets a default end-of-turn result.
    fullName: EndOfTurn
    remarks: >-
      This result indicates that a dialog (or a logical step within a dialog)
      has completed

      processing for the current turn, is still active, and is waiting for more
      input.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static EndOfTurn: DialogTurnResult'
      return:
        type: DialogTurnResult
        description: ''
  - name: id
    uid: botbuilder-ai.QnAMakerDialog.id
    package: botbuilder-ai
    summary: Unique ID of the dialog.
    fullName: id
    remarks: This will be automatically generated if not specified.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'id: string'
      return:
        type: string
        description: ''
  - name: telemetryClient
    uid: botbuilder-ai.QnAMakerDialog.telemetryClient
    package: botbuilder-ai
    summary: Sets the telemetry client for this dialog.
    fullName: telemetryClient
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'telemetryClient: BotTelemetryClient'
      return:
        type: BotTelemetryClient
        description: ''
methods:
  - name: addStep(WaterfallStep<O>)
    uid: botbuilder-ai.QnAMakerDialog.addStep
    package: botbuilder-ai
    summary: Adds a new step to the waterfall.
    remarks: >-
      All step functions should be asynchronous and return a `DialogTurnResult`.
      The

      `WaterfallStepContext` passed into your function derives from
      `DialogContext` and contains

      numerous stack manipulation methods which return a `DialogTurnResult` so
      you can typically

      just return the result from the DialogContext method you call.


      The step function itself can be either an asynchronous closure:


      ```JavaScript

      const helloDialog = new WaterfallDialog('hello');


      helloDialog.addStep(async (step) => {
          await step.context.sendActivity(`Hello World!`);
          return await step.endDialog();
      });

      ```


      A named async function:


      ```JavaScript

      async function helloWorldStep(step) {
          await step.context.sendActivity(`Hello World!`);
          return await step.endDialog();
      }


      helloDialog.addStep(helloWorldStep);

      ```


      Or a class method that's been bound to its `this` pointer:


      ```JavaScript

      helloDialog.addStep(this.helloWorldStep.bind(this));

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function addStep(step: WaterfallStep<O>)'
      parameters:
        - id: step
          type: WaterfallStep&lt;O&gt;
          description: |
            Asynchronous step function to call.
      return:
        type: this
        description: ''
  - name: 'beginDialog(DialogContext, object)'
    uid: botbuilder-ai.QnAMakerDialog.beginDialog
    package: botbuilder-ai
    summary: Called when the dialog is started and pushed onto the dialog stack.
    remarks: >-
      If the task is successful, the result indicates whether the dialog is
      still

      active after the turn has been processed by the dialog.


      You can use the [options](#options) parameter to include the QnA Maker
      context data,

      which represents context from the previous query. To do so, the value
      should include a

      `context` property of type [QnAResponseContext](#QnAResponseContext).
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function beginDialog(dc: DialogContext, options?: object)'
      parameters:
        - id: dc
          type: DialogContext
          description: >-
            The [DialogContext](xref:botbuilder-dialogs.DialogContext) for the
            current turn of conversation.
        - id: options
          type: object
          description: |
            (Optional) Initial information to pass to the dialog.
      return:
        type: Promise&lt;DialogTurnResult&gt;
        description: ''
  - name: configure(object)
    uid: botbuilder-ai.QnAMakerDialog.configure
    package: botbuilder-ai
    summary: Fluent method for configuring the object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function configure(config: object)'
      parameters:
        - id: config
          type: object
          description: |
            Configuration settings to apply.
      return:
        type: this
        description: ''
  - name: continueDialog(DialogContext)
    uid: botbuilder-ai.QnAMakerDialog.continueDialog
    package: botbuilder-ai
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function continueDialog(dc: DialogContext)'
      parameters:
        - id: dc
          type: DialogContext
          description: ''
      return:
        type: Promise&lt;DialogTurnResult&gt;
        description: ''
  - name: 'endDialog(TurnContext, DialogInstance, DialogReason)'
    uid: botbuilder-ai.QnAMakerDialog.endDialog
    package: botbuilder-ai
    summary: Called when the dialog is ending.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function endDialog(context: TurnContext, instance: DialogInstance,
        reason: DialogReason)
      parameters:
        - id: context
          type: TurnContext
          description: Context for the current turn of conversation.
        - id: instance
          type: DialogInstance
          description: The instance of the current dialog.
        - id: reason
          type: DialogReason
          description: |
            The reason the dialog is ending.
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: getVersion()
    uid: botbuilder-ai.QnAMakerDialog.getVersion
    package: botbuilder-ai
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getVersion()
      return:
        type: string
        description: ''
  - name: 'onDialogEvent(DialogContext, DialogEvent)'
    uid: botbuilder-ai.QnAMakerDialog.onDialogEvent
    package: botbuilder-ai
    summary: >-
      Called when an event has been raised, using `DialogContext.emitEvent()`,
      by either the current dialog or a dialog that the current dialog started.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onDialogEvent(dc: DialogContext, e: DialogEvent)'
      parameters:
        - id: dc
          type: DialogContext
          description: The dialog context for the current turn of conversation.
        - id: e
          type: DialogEvent
          description: The event being raised.
      return:
        type: Promise&lt;boolean&gt;
        description: >-
          True if the event is handled by the current dialog and bubbling should
          stop.
  - name: 'repromptDialog(TurnContext, DialogInstance)'
    uid: botbuilder-ai.QnAMakerDialog.repromptDialog
    package: botbuilder-ai
    summary: 'When overridden in a derived class, reprompts the user for input.'
    remarks: >-
      Derived dialogs that support validation and re-prompt logic should
      override this method.

      By default, this method has no effect.


      The [DialogContext](xref:botbuilder-dialogs.DialogContext) calls this
      method when the current

      dialog should re-request input from the user. This method is implemented
      for prompt dialogs.


      **See also**

      -
      [DialogContext.repromptDialog](xref:botbuilder-dialogs.DialogContext.repromptDialog)

      - [Prompt](xref:botbuilder-dialogs.Prompt)
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function repromptDialog(context: TurnContext, instance: DialogInstance)'
      parameters:
        - id: context
          type: TurnContext
          description: The context object for the turn.
        - id: instance
          type: DialogInstance
          description: |
            Current state information for this dialog.
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: 'resumeDialog(DialogContext, DialogReason, any)'
    uid: botbuilder-ai.QnAMakerDialog.resumeDialog
    package: botbuilder-ai
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function resumeDialog(dc: DialogContext, reason: DialogReason, result?:
        any)
      parameters:
        - id: dc
          type: DialogContext
          description: ''
        - id: reason
          type: DialogReason
          description: ''
        - id: result
          type: any
          description: ''
      return:
        type: Promise&lt;DialogTurnResult&gt;
        description: ''
extends: WaterfallDialog
