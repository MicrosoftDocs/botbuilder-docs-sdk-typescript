### YamlMime:TSType
name: DialogContext
uid: botbuilder-dialogs.DialogContext
package: botbuilder-dialogs
summary: >-
  The context for the current dialog turn with respect to a specific
  [DialogSet](xref:botbuilder-dialogs.DialogSet).
fullName: DialogContext
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: 'DialogContext(DialogSet, DialogContext, DialogState)'
    uid: botbuilder-dialogs.DialogContext.constructor_1
    package: botbuilder-dialogs
    summary: >-
      Creates an new instance of the
      [DialogContext](xref:botbuilder-dialogs.DialogContext) class.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new DialogContext(dialogs: DialogSet, contextOrDC: DialogContext, state:
        DialogState)
      parameters:
        - id: dialogs
          type: <xref uid="botbuilder-dialogs.DialogSet" />
          description: The dialog set for which to create the dialog context.
        - id: contextOrDC
          type: <xref uid="botbuilder-dialogs.DialogContext" />
          description: The context object for the current turn of the bot.
        - id: state
          type: <xref uid="botbuilder-dialogs.DialogState" />
          description: |
            The state object to use to read and write dialog state to storage.
  - name: 'DialogContext(DialogSet, TurnContext, DialogState)'
    uid: botbuilder-dialogs.DialogContext.constructor
    package: botbuilder-dialogs
    summary: >-
      Creates an new instance of the
      [DialogContext](xref:botbuilder-dialogs.DialogContext) class.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new DialogContext(dialogs: DialogSet, contextOrDC: TurnContext, state:
        DialogState)
      parameters:
        - id: dialogs
          type: <xref uid="botbuilder-dialogs.DialogSet" />
          description: The dialog set for which to create the dialog context.
        - id: contextOrDC
          type: TurnContext
          description: The context object for the current turn of the bot.
        - id: state
          type: <xref uid="botbuilder-dialogs.DialogState" />
          description: |
            The state object to use to read and write dialog state to storage.
properties:
  - name: activeDialog
    uid: botbuilder-dialogs.DialogContext.activeDialog
    package: botbuilder-dialogs
    summary: >-
      Returns the state information for the dialog on the top of the dialog
      stack, or `undefined` if

      the stack is empty.
    fullName: activeDialog
    isPreview: false
    isDeprecated: false
    syntax:
      content: DialogInstance | undefined activeDialog
      return:
        type: <xref uid="botbuilder-dialogs.DialogInstance" /> | undefined
        description: ''
  - name: child
    uid: botbuilder-dialogs.DialogContext.child
    package: botbuilder-dialogs
    summary: Returns dialog context for child if the active dialog is a container.
    fullName: child
    isPreview: false
    isDeprecated: false
    syntax:
      content: DialogContext | undefined child
      return:
        type: <xref uid="botbuilder-dialogs.DialogContext" /> | undefined
        description: ''
  - name: context
    uid: botbuilder-dialogs.DialogContext.context
    package: botbuilder-dialogs
    summary: Gets the context object for the turn.
    fullName: context
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public context: TurnContext'
      return:
        type: TurnContext
        description: ''
  - name: dialogManager
    uid: botbuilder-dialogs.DialogContext.dialogManager
    package: botbuilder-dialogs
    summary: Returns the current dialog manager instance.
    fullName: dialogManager
    isPreview: false
    isDeprecated: false
    syntax:
      content: DialogManager dialogManager
      return:
        type: <xref uid="botbuilder-dialogs.DialogManager" />
        description: ''
  - name: dialogs
    uid: botbuilder-dialogs.DialogContext.dialogs
    package: botbuilder-dialogs
    summary: Gets the dialogs that can be called directly from this context.
    fullName: dialogs
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public dialogs: DialogSet'
      return:
        type: <xref uid="botbuilder-dialogs.DialogSet" />
        description: ''
  - name: parent
    uid: botbuilder-dialogs.DialogContext.parent
    package: botbuilder-dialogs
    summary: >-
      The parent dialog context for this dialog context, or `undefined` if this
      context doesn't have a parent.
    fullName: parent
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public parent: DialogContext | undefined'
      return:
        type: <xref uid="botbuilder-dialogs.DialogContext" /> | undefined
        description: ''
  - name: services
    uid: botbuilder-dialogs.DialogContext.services
    package: botbuilder-dialogs
    summary: Gets the services collection which is contextual to this dialog context.
    fullName: services
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        public services: TurnContextStateCollection = new
        TurnContextStateCollection()
      return:
        type: TurnContextStateCollection
        description: ''
  - name: stack
    uid: botbuilder-dialogs.DialogContext.stack
    package: botbuilder-dialogs
    summary: Gets the current dialog stack.
    fullName: stack
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public stack: DialogInstance[]'
      return:
        type: '<xref uid="botbuilder-dialogs.DialogInstance" />[]'
        description: ''
  - name: state
    uid: botbuilder-dialogs.DialogContext.state
    package: botbuilder-dialogs
    summary: Gets the DialogStateManager which manages view of all memory scopes.
    fullName: state
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public state: DialogStateManager'
      return:
        type: <xref uid="botbuilder-dialogs.DialogStateManager" />
        description: ''
methods:
  - name: 'beginDialog(string, object)'
    uid: botbuilder-dialogs.DialogContext.beginDialog
    package: botbuilder-dialogs
    summary: |-
      Starts a dialog instance and pushes it onto the dialog stack.
      Creates a new instance of the dialog and pushes it onto the stack.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function beginDialog(dialogId: string, options?: object)'
      parameters:
        - id: dialogId
          type: string
          description: ID of the dialog to start.
        - id: options
          type: object
          description: |
            Optional. Arguments to pass into the dialog when it starts.
      return:
        type: Promise&lt;<xref uid="botbuilder-dialogs.DialogTurnResult" />&gt;
        description: ''
  - name: 'cancelAllDialogs(boolean, string, any)'
    uid: botbuilder-dialogs.DialogContext.cancelAllDialogs
    package: botbuilder-dialogs
    summary: 'Cancels all dialogs on the dialog stack, and clears stack.'
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function cancelAllDialogs(cancelParents: boolean, eventName?: string,
        eventValue?: any)
      parameters:
        - id: cancelParents
          type: boolean
          description: Optional. If `true` all parent dialogs will be cancelled as well.
        - id: eventName
          type: string
          description: >-
            Optional. Name of a custom event to raise as dialogs are cancelled.
            This defaults to
            [cancelDialog](xref:botbuilder-dialogs.DialogEvents.cancelDialog).
        - id: eventValue
          type: any
          description: |
            Optional. Value to pass along with custom cancellation event.
      return:
        type: Promise&lt;<xref uid="botbuilder-dialogs.DialogTurnResult" />&gt;
        description: ''
  - name: continueDialog()
    uid: botbuilder-dialogs.DialogContext.continueDialog
    package: botbuilder-dialogs
    summary: >-
      Continues execution of the active dialog, if there is one, by passing this
      dialog context to its

      [Dialog.continueDialog](xref:botbuilder-dialogs.Dialog.continueDialog)
      method.
    isPreview: false
    isDeprecated: false
    syntax:
      content: function continueDialog()
      return:
        type: Promise&lt;<xref uid="botbuilder-dialogs.DialogTurnResult" />&gt;
        description: ''
  - name: 'emitEvent(string, any, boolean, boolean)'
    uid: botbuilder-dialogs.DialogContext.emitEvent
    package: botbuilder-dialogs
    summary: Searches for a dialog with a given ID.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function emitEvent(name: string, value?: any, bubble: boolean, fromLeaf:
        boolean)
      parameters:
        - id: name
          type: string
          description: Name of the event to raise.
        - id: value
          type: any
          description: Optional. Value to send along with the event.
        - id: bubble
          type: boolean
          description: >-
            Optional. Flag to control whether the event should be bubbled to its
            parent if not handled locally. Defaults to a value of `true`.
        - id: fromLeaf
          type: boolean
          description: Optional. Whether the event is emitted from a leaf node.
      return:
        type: Promise&lt;boolean&gt;
        description: '`true` if the event was handled.'
  - name: endDialog(any)
    uid: botbuilder-dialogs.DialogContext.endDialog
    package: botbuilder-dialogs
    summary: >-
      Ends a dialog and pops it off the stack. Returns an optional result to the
      dialog's parent.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function endDialog(result?: any)'
      parameters:
        - id: result
          type: any
          description: >
            Optional. A result to pass to the parent logic. This might be the
            next dialog
                 on the stack, or if this was the last dialog on the stack, a parent dialog context or
                 the bot's turn handler.
      return:
        type: Promise&lt;<xref uid="botbuilder-dialogs.DialogTurnResult" />&gt;
        description: ''
  - name: findDialog(string)
    uid: botbuilder-dialogs.DialogContext.findDialog
    package: botbuilder-dialogs
    summary: Searches for a dialog with a given ID.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function findDialog(dialogId: string)'
      parameters:
        - id: dialogId
          type: string
          description: |
            ID of the dialog to search for.
      return:
        type: <xref uid="botbuilder-dialogs.Dialog" /> | undefined
        description: ''
  - name: 'prompt(string, string | Partial<Activity> | PromptOptions)'
    uid: botbuilder-dialogs.DialogContext.prompt
    package: botbuilder-dialogs
    summary: >-
      Helper function to simplify formatting the options for calling a prompt
      dialog.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function prompt(dialogId: string, promptOrOptions: string |
        Partial<Activity> | PromptOptions)
      parameters:
        - id: dialogId
          type: string
          description: ID of the prompt dialog to start.
        - id: promptOrOptions
          type: >-
            string | Partial&lt;Activity&gt; | <xref
            uid="botbuilder-dialogs.PromptOptions" />
          description: |-
            The text of the initial prompt to send the user,
                 the activity to send as the initial prompt, or
                 the object with which to format the prompt dialog.
      return:
        type: Promise&lt;<xref uid="botbuilder-dialogs.DialogTurnResult" />&gt;
        description: ''
  - name: >-
      prompt(string, string | Partial<Activity> | PromptOptions, string |
      Choice[])
    uid: botbuilder-dialogs.DialogContext.prompt_1
    package: botbuilder-dialogs
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function prompt(dialogId: string, promptOrOptions: string |
        Partial<Activity> | PromptOptions, choices: string | Choice[])
      parameters:
        - id: dialogId
          type: string
          description: ''
        - id: promptOrOptions
          type: >-
            string | Partial&lt;Activity&gt; | <xref
            uid="botbuilder-dialogs.PromptOptions" />
          description: ''
        - id: choices
          type: 'string | <xref uid="botbuilder-dialogs.Choice" />[]'
          description: ''
      return:
        type: Promise&lt;<xref uid="botbuilder-dialogs.DialogTurnResult" />&gt;
        description: ''
  - name: 'replaceDialog(string, object)'
    uid: botbuilder-dialogs.DialogContext.replaceDialog
    package: botbuilder-dialogs
    summary: Ends the active dialog and starts a new dialog in its place.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function replaceDialog(dialogId: string, options?: object)'
      parameters:
        - id: dialogId
          type: string
          description: ID of the dialog to start.
        - id: options
          type: object
          description: |
            Optional. Arguments to pass into the new dialog when it starts.
      return:
        type: Promise&lt;<xref uid="botbuilder-dialogs.DialogTurnResult" />&gt;
        description: ''
  - name: repromptDialog()
    uid: botbuilder-dialogs.DialogContext.repromptDialog
    package: botbuilder-dialogs
    summary: Requests the active dialog to re-prompt the user for input.
    isPreview: false
    isDeprecated: false
    syntax:
      content: function repromptDialog()
      return:
        type: Promise&lt;void&gt;
        description: ''
