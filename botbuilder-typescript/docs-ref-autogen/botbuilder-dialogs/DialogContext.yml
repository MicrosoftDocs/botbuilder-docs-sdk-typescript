### YamlMime:UniversalReference
items:
  - uid: botbuilder-dialogs.DialogContext
    name: DialogContext
    fullName: DialogContext
    children:
      - botbuilder-dialogs.DialogContext.activeDialog
      - botbuilder-dialogs.DialogContext.beginDialog
      - botbuilder-dialogs.DialogContext.cancelAllDialogs
      - botbuilder-dialogs.DialogContext.context
      - botbuilder-dialogs.DialogContext.continueDialog
      - botbuilder-dialogs.DialogContext.constructor
      - botbuilder-dialogs.DialogContext.dialogs
      - botbuilder-dialogs.DialogContext.endDialog
      - botbuilder-dialogs.DialogContext.prompt
      - botbuilder-dialogs.DialogContext.replaceDialog
      - botbuilder-dialogs.DialogContext.repromptDialog
      - botbuilder-dialogs.DialogContext.stack
    langs:
      - typeScript
    type: class
    summary: A context object used to manipulate a dialog stack.
    package: botbuilder-dialogs
    remarks: >-
      This is typically created through a call to `DialogSet.createContext()`
      and is then passed

      through to all of the bots dialogs and waterfall steps.


      ```JavaScript

      const dc = await dialogs.createContext(turnContext);

      ```
  - uid: botbuilder-dialogs.DialogContext.activeDialog
    name: activeDialog
    fullName: activeDialog
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Returns the cached instance of the active dialog on the top of the stack
      or `undefined` if

      the stack is empty.
    syntax:
      content: DialogInstance | undefined activeDialog
      return:
        type:
          - botbuilder-dialogs.DialogInstance | undefined
    package: botbuilder-dialogs
    remarks: >-
      Within a dialog or waterfall step this can be used to access the active
      dialogs state object:


      ```JavaScript

      dc.activeDialog.state.profile = {};

      ```


      Within the bots routing logic this can be used to determine if there's an
      active dialog on

      the stack:


      ```JavaScript

      if (!dc.activeDialog) {
          await dc.context.sendActivity(`No dialog is active`);
          return;
      }

      ```
  - uid: botbuilder-dialogs.DialogContext.beginDialog
    name: beginDialog
    children: []
    type: method
    langs:
      - typeScript
    summary: Pushes a new dialog onto the dialog stack.
    syntax:
      content: 'function beginDialog(dialogId: string, options?: object)'
      parameters:
        - id: dialogId
          type:
            - string
          description: ID of the dialog to start.
        - id: options
          type:
            - object
          description: >
            (Optional) additional argument(s) to pass to the dialog being
            started.
          optional: true
      return:
        type:
          - Promise<botbuilder-dialogs.DialogTurnResult>
    package: botbuilder-dialogs
    remarks: >-
      This example starts a 'greeting' dialog and passes it the current user
      object:


      ```JavaScript

      await dc.beginDialog('greeting', user);

      ```
  - uid: botbuilder-dialogs.DialogContext.cancelAllDialogs
    name: cancelAllDialogs
    children: []
    type: method
    langs:
      - typeScript
    summary: Cancels all dialogs on the stack resulting in an empty stack.
    syntax:
      content: function cancelAllDialogs()
      parameters: []
      return:
        type:
          - Promise<botbuilder-dialogs.DialogTurnResult>
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.DialogContext.context
    name: context
    fullName: context
    children: []
    langs:
      - typeScript
    type: property
    summary: Context for the current turn of conversation.
    syntax:
      content: 'public context: TurnContext'
      return:
        type:
          - TurnContext
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.DialogContext.continueDialog
    name: continueDialog
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Continues execution of the active dialog, if there is one.'
    syntax:
      content: function continueDialog()
      parameters: []
      return:
        type:
          - Promise<botbuilder-dialogs.DialogTurnResult>
    package: botbuilder-dialogs
    remarks: >-
      The stack will be inspected and the active dialog will be retrieved using
      `DialogSet.find()`.

      The dialog will then have its optional `continueDialog()` method executed.
      You can check

      `context.responded` after the call completes to determine if a dialog was
      run and a reply

      was sent to the user.


      > [!NOTE]

      > If the active dialog fails to implement `continueDialog()` the
      [end()](#end) method will

      > be automatically called. This is done as a safety mechanism to avoid
      users getting trapped

      > within a dialog.


      ```JavaScript

      await dc.continueDialog();

      if (!context.responded) {
          await dc.context.sendActivity(`I'm sorry. I didn't understand.`);
      }

      ```
  - uid: botbuilder-dialogs.DialogContext.constructor
    name: DialogContext
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates a new DialogContext instance.
    syntax:
      content: >-
        new DialogContext(dialogs: DialogSet, context: TurnContext, state:
        DialogState)
      parameters:
        - id: dialogs
          type:
            - botbuilder-dialogs.DialogSet
          description: Parent dialog set.
        - id: context
          type:
            - TurnContext
          description: Context for the current turn of conversation with the user.
        - id: state
          type:
            - botbuilder-dialogs.DialogState
          description: |
            State object being used to persist the dialog stack.
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.DialogContext.dialogs
    name: dialogs
    fullName: dialogs
    children: []
    langs:
      - typeScript
    type: property
    summary: Set of dialogs that can be called from this context.
    syntax:
      content: 'public dialogs: DialogSet'
      return:
        type:
          - botbuilder-dialogs.DialogSet
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.DialogContext.endDialog
    name: endDialog
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Ends a dialog by popping it off the stack and returns an optional result
      to the dialogs

      parent.
    syntax:
      content: 'function endDialog(result?: any)'
      parameters:
        - id: result
          type:
            - any
          description: >
            (Optional) result to pass to the parent dialogs `Dialog.resume()`
            method.
          optional: true
      return:
        type:
          - Promise<botbuilder-dialogs.DialogTurnResult>
    package: botbuilder-dialogs
    remarks: >-
      The parent dialog is the dialog the started the one being ended via a call
      to either

      [begin()](#begin) or [prompt()](#prompt).


      The parent dialog will have its `resumeDialog()` method invoked with any
      returned result.

      If the parent dialog hasn't implemented resumeDialog() then it will be
      popped off the stack

      as well and any result will be passed it its parent. If there are no more
      parent dialogs on

      the stack then processing of the turn will end.
  - uid: botbuilder-dialogs.DialogContext.prompt
    name: prompt
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Helper function to simplify formatting the options for calling a prompt
      dialog.
    syntax:
      content: >-
        function prompt(dialogId: string, promptOrOptions: string |
        Partial<Activity> | PromptOptions)
      parameters:
        - id: dialogId
          type:
            - string
          description: ID of the prompt to start.
        - id: promptOrOptions
          type:
            - string | Partial<Activity> | botbuilder-dialogs.PromptOptions
          description: >-
            Initial prompt to send the user or a set of options to configure the
            prompt with..
      return:
        type:
          - Promise<botbuilder-dialogs.DialogTurnResult>
    package: botbuilder-dialogs
    remarks: >-
      This is a lightweight wrapper abound [begin()](#begin). It fills in a
      `PromptOptions`

      structure and then passes it through to `dc.beginDialog(dialogId,
      options)`.


      ```JavaScript

      await dc.prompt('confirmPrompt', `Are you sure you'd like to quit?`);

      ```
  - uid: botbuilder-dialogs.DialogContext.replaceDialog
    name: replaceDialog
    children: []
    type: method
    langs:
      - typeScript
    summary: Ends the active dialog and starts a new dialog in its place.
    syntax:
      content: 'function replaceDialog(dialogId: string, options?: object)'
      parameters:
        - id: dialogId
          type:
            - string
          description: ID of the new dialog to start.
        - id: options
          type:
            - object
          description: |
            (Optional) additional argument(s) to pass to the new dialog.
          optional: true
      return:
        type:
          - Promise<botbuilder-dialogs.DialogTurnResult>
    package: botbuilder-dialogs
    remarks: >-
      This method is particularly useful for creating conversational loops
      within your bot:
  - uid: botbuilder-dialogs.DialogContext.repromptDialog
    name: repromptDialog
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Requests the [activeDialog](#activeDialog) to re-prompt the user for
      input.
    syntax:
      content: function repromptDialog()
      parameters: []
      return:
        type:
          - Promise<void>
    package: botbuilder-dialogs
    remarks: >-
      The `Dialog.repromptDialog()` method is optional for dialogs so if there's
      no active dialog

      or the active dialog doesn't support re-prompting, this method will
      effectively be a no-op.
  - uid: botbuilder-dialogs.DialogContext.stack
    name: stack
    fullName: stack
    children: []
    langs:
      - typeScript
    type: property
    summary: Current dialog stack.
    syntax:
      content: 'public stack: DialogInstance[]'
      return:
        type:
          - 'botbuilder-dialogs.DialogInstance[]'
    package: botbuilder-dialogs
references:
  - uid: botbuilder-dialogs.DialogSet
    name: DialogSet
    spec.typeScript:
      - name: DialogSet
        fullName: DialogSet
        uid: botbuilder-dialogs.DialogSet
  - uid: botbuilder-dialogs.DialogState
    name: DialogState
    spec.typeScript:
      - name: DialogState
        fullName: DialogState
        uid: botbuilder-dialogs.DialogState
  - uid: 'botbuilder-dialogs.DialogInstance[]'
    name: 'DialogInstance[]'
    spec.typeScript:
      - name: DialogInstance
        fullName: DialogInstance
        uid: botbuilder-dialogs.DialogInstance
      - name: '[]'
        fullName: '[]'
  - uid: botbuilder-dialogs.DialogInstance | undefined
    name: DialogInstance | undefined
    spec.typeScript:
      - name: DialogInstance
        fullName: DialogInstance
        uid: botbuilder-dialogs.DialogInstance
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: Promise<botbuilder-dialogs.DialogTurnResult>
    name: DialogTurnResult>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: DialogTurnResult
        fullName: DialogTurnResult
        uid: botbuilder-dialogs.DialogTurnResult
      - name: '>'
        fullName: '>'
  - uid: string | Partial<Activity> | botbuilder-dialogs.PromptOptions
    name: PromptOptions
    spec.typeScript:
      - name: 'string | Partial<Activity> | '
        fullName: 'string | Partial<Activity> | '
      - name: PromptOptions
        fullName: PromptOptions
        uid: botbuilder-dialogs.PromptOptions
