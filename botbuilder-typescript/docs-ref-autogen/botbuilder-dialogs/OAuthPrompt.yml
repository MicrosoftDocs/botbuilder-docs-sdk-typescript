### YamlMime:UniversalReference
items:
  - uid: botbuilder-dialogs.OAuthPrompt
    name: OAuthPrompt
    fullName: OAuthPrompt<O>
    children:
      - botbuilder-dialogs.OAuthPrompt.beginDialog
      - botbuilder-dialogs.OAuthPrompt.configure
      - botbuilder-dialogs.OAuthPrompt.continueDialog
      - botbuilder-dialogs.OAuthPrompt.endDialog
      - botbuilder-dialogs.OAuthPrompt.EndOfTurn
      - botbuilder-dialogs.OAuthPrompt.getUserToken
      - botbuilder-dialogs.OAuthPrompt.id
      - botbuilder-dialogs.OAuthPrompt.constructor
      - botbuilder-dialogs.OAuthPrompt.onDialogEvent
      - botbuilder-dialogs.OAuthPrompt.repromptDialog
      - botbuilder-dialogs.OAuthPrompt.resumeDialog
      - botbuilder-dialogs.OAuthPrompt.signOutUser
      - botbuilder-dialogs.OAuthPrompt.telemetryClient
    langs:
      - typeScript
    type: class
    summary: >-
      Creates a new prompt that asks the user to sign in using the Bot
      Frameworks Single Sign On (SSO)

      service.
    extends:
      name: botbuilder-dialogs.Dialog
    package: botbuilder-dialogs
    remarks: >-
      The prompt will attempt to retrieve the users current token and if the
      user isn't signed in, it

      will send them an `OAuthCard` containing a button they can press to
      signin. Depending on the

      channel, the user will be sent through one of two possible signin flows:


      - The automatic signin flow where once the user signs in and the SSO
      service will forward the bot

      the users access token using either an `event` or `invoke` activity.

      - The "magic code" flow where where once the user signs in they will be
      prompted by the SSO

      service to send the bot a six digit code confirming their identity. This
      code will be sent as a

      standard `message` activity.


      Both flows are automatically supported by the `OAuthPrompt` and the only
      thing you need to be

      careful of is that you don't block the `event` and `invoke` activities
      that the prompt might

      be waiting on.


      > [!NOTE]

      > You should avoid persisting the access token with your bots other state.
      The Bot Frameworks

      > SSO service will securely store the token on your behalf. If you store
      it in your bots state

      > it could expire or be revoked in between turns.

      >

      > When calling the prompt from within a waterfall step you should use the
      token within the step

      > following the prompt and then let the token go out of scope at the end
      of your function.


      #### Prompt Usage


      When used with your bots `DialogSet` you can simply add a new instance of
      the prompt as a named

      dialog using `DialogSet.add()`. You can then start the prompt from a
      waterfall step using either

      `DialogContext.beginDialog()` or `DialogContext.prompt()`. The user will
      be prompted to signin as

      needed and their access token will be passed as an argument to the callers
      next waterfall step:


      ```JavaScript

      const { ConversationState, MemoryStorage, OAuthLoginTimeoutMsValue } =
      require('botbuilder');

      const { DialogSet, OAuthPrompt, WaterfallDialog } =
      require('botbuilder-dialogs');


      const convoState = new ConversationState(new MemoryStorage());

      const dialogState = convoState.createProperty('dialogState');

      const dialogs = new DialogSet(dialogState);


      dialogs.add(new OAuthPrompt('loginPrompt', {
         connectionName: 'GitConnection',
         title: 'Login To GitHub',
         timeout: OAuthLoginTimeoutMsValue   // User has 15 minutes to login
      }));


      dialogs.add(new WaterfallDialog('taskNeedingLogin', [
           async (step) => {
               return await step.beginDialog('loginPrompt');
           },
           async (step) => {
               const token = step.result;
               if (token) {

                   // ... continue with task needing access token ...

               } else {
                   await step.context.sendActivity(`Sorry... We couldn't log you in. Try again later.`);
                   return await step.endDialog();
               }
           }
      ]));

      ```
  - uid: botbuilder-dialogs.OAuthPrompt.beginDialog
    name: 'beginDialog(DialogContext, PromptOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function beginDialog(dc: DialogContext, options?: PromptOptions)'
      parameters:
        - id: dc
          type:
            - botbuilder-dialogs.DialogContext
          description: ''
        - id: options
          type:
            - botbuilder-dialogs.PromptOptions
          description: ''
          optional: true
      return:
        type:
          - Promise<botbuilder-dialogs.DialogTurnResult>
        description: ''
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.OAuthPrompt.configure
    name: configure(object)
    children: []
    type: method
    langs:
      - typeScript
    summary: Fluent method for configuring the object.
    syntax:
      content: 'function configure(config: object)'
      parameters:
        - id: config
          type:
            - object
          description: |
            Configuration settings to apply.
      return:
        type:
          - this
        description: ''
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.OAuthPrompt.continueDialog
    name: continueDialog(DialogContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function continueDialog(dc: DialogContext)'
      parameters:
        - id: dc
          type:
            - botbuilder-dialogs.DialogContext
          description: ''
      return:
        type:
          - Promise<botbuilder-dialogs.DialogTurnResult>
        description: ''
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.OAuthPrompt.endDialog
    name: 'endDialog(TurnContext, DialogInstance, DialogReason)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Called when the dialog is ending.
    syntax:
      content: >-
        function endDialog(context: TurnContext, instance: DialogInstance,
        reason: DialogReason)
      parameters:
        - id: context
          type:
            - TurnContext
          description: Context for the current turn of conversation.
        - id: instance
          type:
            - botbuilder-dialogs.DialogInstance
          description: The instance of the current dialog.
        - id: reason
          type:
            - botbuilder-dialogs.DialogReason
          description: |
            The reason the dialog is ending.
      return:
        type:
          - Promise<void>
        description: ''
    package: botbuilder-dialogs
    remarks: >-
      SHOULD be overridden by dialogs that wish to perform some logging or
      cleanup action anytime

      the dialog ends.
  - uid: botbuilder-dialogs.OAuthPrompt.EndOfTurn
    name: EndOfTurn
    fullName: EndOfTurn
    children: []
    langs:
      - typeScript
    type: property
    summary: Signals the end of a turn by a dialog method or waterfall/sequence step.
    syntax:
      content: 'static EndOfTurn: DialogTurnResult'
      return:
        type:
          - botbuilder-dialogs.DialogTurnResult
        description: ''
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.OAuthPrompt.getUserToken
    name: 'getUserToken(TurnContext, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Attempts to retrieve the stored token for the current user.
    syntax:
      content: 'function getUserToken(context: TurnContext, code?: string)'
      parameters:
        - id: context
          type:
            - TurnContext
          description: Context reference the user that's being looked up.
        - id: code
          type:
            - string
          description: |
            (Optional) login code received from the user.
          optional: true
      return:
        type:
          - Promise<TokenResponse | undefined>
        description: ''
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.OAuthPrompt.id
    name: id
    fullName: id
    children: []
    langs:
      - typeScript
    type: property
    summary: Unique ID of the dialog.
    syntax:
      content: 'id: string'
      return:
        type:
          - string
        description: ''
    package: botbuilder-dialogs
    remarks: This will be automatically generated if not specified.
  - uid: botbuilder-dialogs.OAuthPrompt.constructor
    name: 'OAuthPrompt(string, OAuthPromptSettings, PromptValidator<TokenResponse>)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates a new OAuthPrompt instance.
    syntax:
      content: >-
        new OAuthPrompt(dialogId: string, settings: OAuthPromptSettings,
        validator?: PromptValidator<TokenResponse>)
      parameters:
        - id: dialogId
          type:
            - string
          description: >-
            Unique ID of the dialog within its parent `DialogSet` or
            `ComponentDialog`.
        - id: settings
          type:
            - botbuilder-dialogs.OAuthPromptSettings
          description: Settings used to configure the prompt.
        - id: validator
          type:
            - botbuilder-dialogs.PromptValidator<TokenResponse>
          description: >
            (Optional) validator that will be called each time the user responds
            to the prompt.
          optional: true
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.OAuthPrompt.onDialogEvent
    name: 'onDialogEvent(DialogContext, DialogEvent)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function onDialogEvent(dc: DialogContext, e: DialogEvent)'
      parameters:
        - id: dc
          type:
            - botbuilder-dialogs.DialogContext
          description: ''
        - id: e
          type:
            - botbuilder-dialogs.DialogEvent
          description: ''
      return:
        type:
          - Promise<boolean>
        description: ''
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.OAuthPrompt.repromptDialog
    name: 'repromptDialog(TurnContext, DialogInstance)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Called when the dialog has been requested to re-prompt the user for input.
    syntax:
      content: 'function repromptDialog(context: TurnContext, instance: DialogInstance)'
      parameters:
        - id: context
          type:
            - TurnContext
          description: Context for the current turn of conversation.
        - id: instance
          type:
            - botbuilder-dialogs.DialogInstance
          description: |
            The instance of the current dialog.
      return:
        type:
          - Promise<void>
        description: ''
    package: botbuilder-dialogs
    remarks: >-
      SHOULD be overridden by multi-turn dialogs that wish to provide custom
      re-prompt logic. The

      default implementation performs no action.
  - uid: botbuilder-dialogs.OAuthPrompt.resumeDialog
    name: 'resumeDialog(DialogContext, DialogReason, any)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Called when an instance of the dialog is being returned to from another
      dialog.
    syntax:
      content: >-
        function resumeDialog(dc: DialogContext, reason: DialogReason, result?:
        any)
      parameters:
        - id: dc
          type:
            - botbuilder-dialogs.DialogContext
          description: The dialog context for the current turn of conversation.
        - id: reason
          type:
            - botbuilder-dialogs.DialogReason
          description: >-
            The reason the dialog is being resumed. This will typically be a
            value of `DialogReason.endCalled`.
        - id: result
          type:
            - any
          description: >
            (Optional) value returned from the dialog that was called. The type
            of the value returned is dependant on the dialog that was called.
          optional: true
      return:
        type:
          - Promise<botbuilder-dialogs.DialogTurnResult>
        description: ''
    package: botbuilder-dialogs
    remarks: >-
      SHOULD be overridden by multi-turn dialogs that start other dialogs using

      `DialogContext.beginDialog()` or `DialogContext.prompt()`. The default
      implementation calls

      `DialogContext.endDialog()` with any results returned from the ending
      dialog.
  - uid: botbuilder-dialogs.OAuthPrompt.signOutUser
    name: signOutUser(TurnContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: Signs the user out of the service.
    syntax:
      content: 'function signOutUser(context: TurnContext)'
      parameters:
        - id: context
          type:
            - TurnContext
          description: |
            Context referencing the user that's being signed out.
      return:
        type:
          - Promise<void>
        description: ''
    package: botbuilder-dialogs
    remarks: >-
      This example shows creating an instance of the prompt and then signing out
      the user.


      ```JavaScript

      const prompt = new OAuthPrompt({
         connectionName: 'GitConnection',
         title: 'Login To GitHub'
      });

      await prompt.signOutUser(context);

      ```
  - uid: botbuilder-dialogs.OAuthPrompt.telemetryClient
    name: telemetryClient
    fullName: telemetryClient
    children: []
    langs:
      - typeScript
    type: property
    summary: Set the telemetry client for this dialog.
    syntax:
      content: 'telemetryClient: BotTelemetryClient'
      return:
        type:
          - BotTelemetryClient
        description: ''
    package: botbuilder-dialogs
references:
  - uid: botbuilder-dialogs.Dialog
    name: Dialog
    spec.typeScript:
      - name: Dialog
        fullName: Dialog
        uid: botbuilder-dialogs.Dialog
  - uid: botbuilder-dialogs.OAuthPromptSettings
    name: OAuthPromptSettings
    spec.typeScript:
      - name: OAuthPromptSettings
        fullName: OAuthPromptSettings
        uid: botbuilder-dialogs.OAuthPromptSettings
  - uid: botbuilder-dialogs.PromptValidator<TokenResponse>
    name: PromptValidator<TokenResponse>
    spec.typeScript:
      - name: PromptValidator
        fullName: PromptValidator
        uid: botbuilder-dialogs.PromptValidator
      - name: <TokenResponse>
        fullName: <TokenResponse>
  - uid: botbuilder-dialogs.DialogTurnResult
    name: DialogTurnResult
    spec.typeScript:
      - name: DialogTurnResult
        fullName: DialogTurnResult
        uid: botbuilder-dialogs.DialogTurnResult
  - uid: botbuilder-dialogs.DialogContext
    name: DialogContext
    spec.typeScript:
      - name: DialogContext
        fullName: DialogContext
        uid: botbuilder-dialogs.DialogContext
  - uid: botbuilder-dialogs.PromptOptions
    name: PromptOptions
    spec.typeScript:
      - name: PromptOptions
        fullName: PromptOptions
        uid: botbuilder-dialogs.PromptOptions
  - uid: Promise<botbuilder-dialogs.DialogTurnResult>
    name: DialogTurnResult>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: DialogTurnResult
        fullName: DialogTurnResult
        uid: botbuilder-dialogs.DialogTurnResult
      - name: '>'
        fullName: '>'
  - uid: botbuilder-dialogs.DialogInstance
    name: DialogInstance
    spec.typeScript:
      - name: DialogInstance
        fullName: DialogInstance
        uid: botbuilder-dialogs.DialogInstance
  - uid: botbuilder-dialogs.DialogReason
    name: DialogReason
    spec.typeScript:
      - name: DialogReason
        fullName: DialogReason
        uid: botbuilder-dialogs.DialogReason
  - uid: botbuilder-dialogs.DialogEvent
    name: DialogEvent
    spec.typeScript:
      - name: DialogEvent
        fullName: DialogEvent
        uid: botbuilder-dialogs.DialogEvent
