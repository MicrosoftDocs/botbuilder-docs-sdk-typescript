### YamlMime:TSType
name: OAuthPrompt
uid: botbuilder-dialogs.OAuthPrompt
package: botbuilder-dialogs
summary: >-
  Creates a new prompt that asks the user to sign in using the Bot Frameworks
  Single Sign On (SSO)

  service.
fullName: OAuthPrompt<O>
remarks: >-
  The prompt will attempt to retrieve the users current token and if the user
  isn't signed in, it

  will send them an `OAuthCard` containing a button they can press to signin.
  Depending on the

  channel, the user will be sent through one of two possible signin flows:


  - The automatic signin flow where once the user signs in and the SSO service
  will forward the bot

  the users access token using either an `event` or `invoke` activity.

  - The "magic code" flow where where once the user signs in they will be
  prompted by the SSO

  service to send the bot a six digit code confirming their identity. This code
  will be sent as a

  standard `message` activity.


  Both flows are automatically supported by the `OAuthPrompt` and the only thing
  you need to be

  careful of is that you don't block the `event` and `invoke` activities that
  the prompt might

  be waiting on.


  > [!NOTE]

  > You should avoid persisting the access token with your bots other state. The
  Bot Frameworks

  > SSO service will securely store the token on your behalf. If you store it in
  your bots state

  > it could expire or be revoked in between turns.

  >

  > When calling the prompt from within a waterfall step you should use the
  token within the step

  > following the prompt and then let the token go out of scope at the end of
  your function.


  #### Prompt Usage


  When used with your bots `DialogSet` you can simply add a new instance of the
  prompt as a named

  dialog using `DialogSet.add()`. You can then start the prompt from a waterfall
  step using either

  `DialogContext.beginDialog()` or `DialogContext.prompt()`. The user will be
  prompted to signin as

  needed and their access token will be passed as an argument to the callers
  next waterfall step:


  ```JavaScript

  const { ConversationState, MemoryStorage, OAuthLoginTimeoutMsValue } =
  require('botbuilder');

  const { DialogSet, OAuthPrompt, WaterfallDialog } =
  require('botbuilder-dialogs');


  const convoState = new ConversationState(new MemoryStorage());

  const dialogState = convoState.createProperty('dialogState');

  const dialogs = new DialogSet(dialogState);


  dialogs.add(new OAuthPrompt('loginPrompt', {
     connectionName: 'GitConnection',
     title: 'Login To GitHub',
     timeout: OAuthLoginTimeoutMsValue   // User has 15 minutes to login
  }));


  dialogs.add(new WaterfallDialog('taskNeedingLogin', [
       async (step) => {
           return await step.beginDialog('loginPrompt');
       },
       async (step) => {
           const token = step.result;
           if (token) {

               // ... continue with task needing access token ...

           } else {
               await step.context.sendActivity(`Sorry... We couldn't log you in. Try again later.`);
               return await step.endDialog();
           }
       }
  ]));

  ```
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: 'OAuthPrompt(string, OAuthPromptSettings, PromptValidator<TokenResponse>)'
    uid: botbuilder-dialogs.OAuthPrompt.constructor
    package: botbuilder-dialogs
    summary: Creates a new OAuthPrompt instance.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new OAuthPrompt(dialogId: string, settings: OAuthPromptSettings,
        validator?: PromptValidator<TokenResponse>)
      parameters:
        - id: dialogId
          type: string
          description: >-
            Unique ID of the dialog within its parent `DialogSet` or
            `ComponentDialog`.
        - id: settings
          type: <xref uid="botbuilder-dialogs.OAuthPromptSettings" />
          description: Settings used to configure the prompt.
        - id: validator
          type: >-
            <xref uid="botbuilder-dialogs.PromptValidator"
            />&lt;TokenResponse&gt;
          description: >
            (Optional) validator that will be called each time the user responds
            to the prompt.
properties:
  - name: id
    uid: botbuilder-dialogs.OAuthPrompt.id
    package: botbuilder-dialogs
    summary: |-
      Unique ID of the dialog.
      Sets the unique ID of the dialog.
    fullName: id
    remarks: This will be automatically generated if not specified.
    isPreview: false
    isDeprecated: false
    syntax:
      content: string id
      return:
        description: The Id for the dialog.
        type: string
  - name: telemetryClient
    uid: botbuilder-dialogs.OAuthPrompt.telemetryClient
    package: botbuilder-dialogs
    summary: |-
      Gets the telemetry client for this dialog.
      Sets the telemetry client for this dialog.
    fullName: telemetryClient
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: BotTelemetryClient telemetryClient
      return:
        description: >-
          The [BotTelemetryClient](xref:botbuilder.BotTelemetryClient) to use
          for logging.
        type: BotTelemetryClient
inheritedProperties:
  - name: EndOfTurn
    uid: botbuilder-dialogs.OAuthPrompt.EndOfTurn
    package: botbuilder-dialogs
    summary: Gets a default end-of-turn result.
    fullName: EndOfTurn
    remarks: >-
      This result indicates that a dialog (or a logical step within a dialog)
      has completed

      processing for the current turn, is still active, and is waiting for more
      input.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static EndOfTurn: DialogTurnResult'
      return:
        description: ''
        type: <xref uid="botbuilder-dialogs.DialogTurnResult" />
    inheritanceDescription: >-
      <b>Inherited From</b>
      [Dialog.EndOfTurn](xref:botbuilder-dialogs.Dialog.EndOfTurn)
inheritedMethods:
  - name: 'configure(Record<string, unknown>)'
    uid: botbuilder-dialogs.OAuthPrompt.configure
    package: botbuilder-dialogs
    summary: Fluent method for configuring the object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function configure(config: Record<string, unknown>): this'
      parameters:
        - id: config
          type: 'Record&lt;string, unknown&gt;'
          description: Configuration settings to apply.
      return:
        description: >-
          The [Configurable](xref:botbuilder-dialogs.Configurable) after the
          operation is complete.
        type: this
    inheritanceDescription: >-
      <b>Inherited From</b>
      [Configurable.configure](xref:botbuilder-dialogs.Configurable.configure)
  - name: 'endDialog(TurnContext, DialogInstance, DialogReason)'
    uid: botbuilder-dialogs.OAuthPrompt.endDialog
    package: botbuilder-dialogs
    summary: >-
      When overridden in a derived class, performs clean up for the dialog
      before it ends.
    remarks: >-
      Derived dialogs that need to perform logging or cleanup before ending
      should override this method.

      By default, this method has no effect.


      The [DialogContext](xref:botbuilder-dialogs.DialogContext) calls this
      method when the current

      dialog is ending.


      **See also**

      -
      [DialogContext.cancelAllDialogs](xref:botbuilder-dialogs.DialogContext.cancelAllDialogs)

      -
      [DialogContext.endDialog](xref:botbuilder-dialogs.DialogContext.endDialog)

      -
      [DialogContext.replaceDialog](xref:botbuilder-dialogs.DialogContext.replaceDialog)
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function endDialog(_context: TurnContext, _instance: DialogInstance,
        _reason: DialogReason): Promise<void>
      parameters:
        - id: _context
          type: TurnContext
          description: The context object for the turn.
        - id: _instance
          type: <xref uid="botbuilder-dialogs.DialogInstance" />
          description: Current state information for this dialog.
        - id: _reason
          type: <xref uid="botbuilder-dialogs.DialogReason" />
          description: |
            The reason the dialog is ending.
      return:
        description: ''
        type: Promise&lt;void&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [Dialog.endDialog](xref:botbuilder-dialogs.Dialog.endDialog)
  - name: getConverter(string)
    uid: botbuilder-dialogs.OAuthPrompt.getConverter
    package: botbuilder-dialogs
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getConverter(_property: string): Converter | ConverterFactory'
      parameters:
        - id: _property
          type: string
          description: The key of the conditional selector configuration.
      return:
        description: The converter for the selector configuration.
        type: >-
          <xref uid="botbuilder-dialogs.Converter" /> | <xref
          uid="botbuilder-dialogs.ConverterFactory" />
    inheritanceDescription: >-
      <b>Inherited From</b>
      [Configurable.getConverter](xref:botbuilder-dialogs.Configurable.getConverter)
  - name: getVersion()
    uid: botbuilder-dialogs.OAuthPrompt.getVersion
    package: botbuilder-dialogs
    summary: >-
      An encoded string used to aid in the detection of bot changes on
      re-deployment.
    remarks: >-
      This defaults to returning the dialogs [id](#id) but can be overridden to
      provide more

      precise change detection logic. Any dialog on the stack that has its
      version change will

      result in a `versionChanged` event will be raised. If this event is not
      handled by the bot,

      an error will be thrown resulting in the bots error handler logic being
      run.


      Returning an empty string will disable version tracking for the component
      all together.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getVersion(): string'
      return:
        description: >-
          Unique string which should only change when dialog has changed in a
          way that should restart the dialog.
        type: string
    inheritanceDescription: >-
      <b>Inherited From</b>
      [Dialog.getVersion](xref:botbuilder-dialogs.Dialog.getVersion)
  - name: 'onDialogEvent(DialogContext, DialogEvent)'
    uid: botbuilder-dialogs.OAuthPrompt.onDialogEvent
    package: botbuilder-dialogs
    summary: >-
      Called when an event has been raised, using `DialogContext.emitEvent()`,
      by either the current dialog or a dialog that the current dialog started.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function onDialogEvent(dc: DialogContext, e: DialogEvent):
        Promise<boolean>
      parameters:
        - id: dc
          type: <xref uid="botbuilder-dialogs.DialogContext" />
          description: The dialog context for the current turn of conversation.
        - id: e
          type: <xref uid="botbuilder-dialogs.DialogEvent" />
          description: The event being raised.
      return:
        description: >-
          True if the event is handled by the current dialog and bubbling should
          stop.
        type: Promise&lt;boolean&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [Dialog.onDialogEvent](xref:botbuilder-dialogs.Dialog.onDialogEvent)
  - name: 'repromptDialog(TurnContext, DialogInstance)'
    uid: botbuilder-dialogs.OAuthPrompt.repromptDialog
    package: botbuilder-dialogs
    summary: 'When overridden in a derived class, reprompts the user for input.'
    remarks: >-
      Derived dialogs that support validation and re-prompt logic should
      override this method.

      By default, this method has no effect.


      The [DialogContext](xref:botbuilder-dialogs.DialogContext) calls this
      method when the current

      dialog should re-request input from the user. This method is implemented
      for prompt dialogs.


      **See also**

      -
      [DialogContext.repromptDialog](xref:botbuilder-dialogs.DialogContext.repromptDialog)

      - [Prompt](xref:botbuilder-dialogs.Prompt)
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function repromptDialog(_context: TurnContext, _instance:
        DialogInstance): Promise<void>
      parameters:
        - id: _context
          type: TurnContext
          description: The context object for the turn.
        - id: _instance
          type: <xref uid="botbuilder-dialogs.DialogInstance" />
          description: |
            Current state information for this dialog.
      return:
        description: ''
        type: Promise&lt;void&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [Dialog.repromptDialog](xref:botbuilder-dialogs.Dialog.repromptDialog)
  - name: 'resumeDialog(DialogContext, DialogReason, any)'
    uid: botbuilder-dialogs.OAuthPrompt.resumeDialog
    package: botbuilder-dialogs
    summary: >-
      When overridden in a derived class, resumes the dialog after the dialog
      above it on the stack completes.
    remarks: >-
      Derived dialogs that support multiple-turn conversations should override
      this method.

      By default, this method signals that the dialog is complete and returns.


      The [DialogContext](xref:botbuilder-dialogs.DialogContext) calls this
      method when it resumes

      the dialog. If the previous dialog on the stack returned a value, that
      value is in the `result`

      parameter.


      To start a _child_ dialog, use
      [DialogContext.beginDialog](xref:botbuilder-dialogs.DialogContext.beginDialog)

      or [DialogContext.prompt](xref:botbuilder-dialogs.DialogContext.prompt);
      however, this dialog will not

      necessarily be the one that started the child dialog.

      To signal to the dialog context that this dialog has completed, await

      [DialogContext.endDialog](xref:botbuilder-dialogs.DialogContext.endDialog)
      before exiting this method.


      **See also**

      -
      [DialogContext.endDialog](xref:botbuilder-dialogs.DialogContext.endDialog)
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function resumeDialog(dc: DialogContext, reason: DialogReason, result?:
        any): Promise<DialogTurnResult>
      parameters:
        - id: dc
          type: <xref uid="botbuilder-dialogs.DialogContext" />
          description: The context for the current dialog turn.
        - id: reason
          type: <xref uid="botbuilder-dialogs.DialogReason" />
          description: |-
            The reason the dialog is resuming. This will typically be
                 [DialogReason.endCalled](xref:botbuilder-dialogs.DialogReason.endCalled)
        - id: result
          type: any
          description: |
            Optional. The return value, if any, from the dialog that ended.
      return:
        description: A promise resolving to the dialog turn result.
        type: Promise&lt;<xref uid="botbuilder-dialogs.DialogTurnResult" />&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [Dialog.resumeDialog](xref:botbuilder-dialogs.Dialog.resumeDialog)
methods:
  - name: 'beginDialog(DialogContext, PromptOptions)'
    uid: botbuilder-dialogs.OAuthPrompt.beginDialog
    package: botbuilder-dialogs
    summary: >-
      Called when a prompt dialog is pushed onto the dialog stack and is being
      activated.
    remarks: >-
      If the task is successful, the result indicates whether the prompt is
      still

      active after the turn has been processed by the prompt.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDialog(dc: DialogContext, options?: PromptOptions):
        Promise<DialogTurnResult>
      parameters:
        - id: dc
          type: <xref uid="botbuilder-dialogs.DialogContext" />
          description: >-
            The [DialogContext](xref:botbuilder-dialogs.DialogContext) for the
            current

            turn of the conversation.
        - id: options
          type: <xref uid="botbuilder-dialogs.PromptOptions" />
          description: |-
            Optional. [PromptOptions](xref:botbuilder-dialogs.PromptOptions),
            additional information to pass to the prompt being started.
      return:
        description: A `Promise` representing the asynchronous operation.
        type: Promise&lt;<xref uid="botbuilder-dialogs.DialogTurnResult" />&gt;
  - name: continueDialog(DialogContext)
    uid: botbuilder-dialogs.OAuthPrompt.continueDialog
    package: botbuilder-dialogs
    summary: >-
      Called when a prompt dialog is the active dialog and the user replied with
      a new activity.
    remarks: >-
      If the task is successful, the result indicates whether the dialog is
      still

      active after the turn has been processed by the dialog.

      The prompt generally continues to receive the user's replies until it
      accepts the

      user's reply as valid input for the prompt.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function continueDialog(dc: DialogContext): Promise<DialogTurnResult>'
      parameters:
        - id: dc
          type: <xref uid="botbuilder-dialogs.DialogContext" />
          description: >-
            The [DialogContext](xref:botbuilder-dialogs.DialogContext) for the
            current turn

            of the conversation.
      return:
        description: A `Promise` representing the asynchronous operation.
        type: Promise&lt;<xref uid="botbuilder-dialogs.DialogTurnResult" />&gt;
  - name: 'getUserToken(TurnContext, string)'
    uid: botbuilder-dialogs.OAuthPrompt.getUserToken
    package: botbuilder-dialogs
    summary: Attempts to retrieve the stored token for the current user.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getUserToken(context: TurnContext, code?: string):
        Promise<TokenResponse | undefined>
      parameters:
        - id: context
          type: TurnContext
          description: Context reference the user that's being looked up.
        - id: code
          type: string
          description: (Optional) login code received from the user.
      return:
        description: The token response.
        type: Promise&lt;TokenResponse | undefined&gt;
  - name: recognizeToken(DialogContext)
    uid: botbuilder-dialogs.OAuthPrompt.recognizeToken
    package: botbuilder-dialogs
    summary: >-
      Shared implementation of the RecognizeTokenAsync function. This is
      intended for internal use, to consolidate

      the implementation of the OAuthPrompt and OAuthInput. Application logic
      should use those dialog classes.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function recognizeToken(dc: DialogContext):
        Promise<PromptRecognizerResult<TokenResponse>>
      parameters:
        - id: dc
          type: <xref uid="botbuilder-dialogs.DialogContext" />
          description: >-
            The [DialogContext](xref:botbuilder-dialogs.DialogContext) for the
            current turn of the conversation.
      return:
        description: A Promise that resolves to the result
        type: >-
          Promise&lt;<xref uid="botbuilder-dialogs.PromptRecognizerResult"
          />&lt;TokenResponse&gt;&gt;
  - name: >-
      sendOAuthCard(OAuthPromptSettings, TurnContext, string |
      Partial<Activity>)
    uid: botbuilder-dialogs.OAuthPrompt.sendOAuthCard
    package: botbuilder-dialogs
    summary: Sends an OAuth card.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function sendOAuthCard(settings: OAuthPromptSettings,
        turnContext: TurnContext, prompt?: string | Partial<Activity>):
        Promise<void>
      parameters:
        - id: settings
          type: <xref uid="botbuilder-dialogs.OAuthPromptSettings" />
          description: OAuth settings.
        - id: turnContext
          type: TurnContext
          description: Turn context.
        - id: prompt
          type: string | Partial&lt;Activity&gt;
          description: |
            Message activity.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: signOutUser(TurnContext)
    uid: botbuilder-dialogs.OAuthPrompt.signOutUser
    package: botbuilder-dialogs
    summary: Signs the user out of the service.
    remarks: >-
      This example shows creating an instance of the prompt and then signing out
      the user.


      ```JavaScript

      const prompt = new OAuthPrompt({
         connectionName: 'GitConnection',
         title: 'Login To GitHub'
      });

      await prompt.signOutUser(context);

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function signOutUser(context: TurnContext): Promise<void>'
      parameters:
        - id: context
          type: TurnContext
          description: Context referencing the user that's being signed out.
      return:
        description: A promise representing the asynchronous operation.
        type: Promise&lt;void&gt;
extends: <xref uid="botbuilder-dialogs.Dialog" />
