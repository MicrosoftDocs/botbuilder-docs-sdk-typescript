### YamlMime:TSType
name: WaterfallDialog
uid: botbuilder-dialogs.WaterfallDialog
package: botbuilder-dialogs
summary: >-
  A waterfall is a dialog that's optimized for prompting a user with a series of
  questions.
fullName: WaterfallDialog<O>
remarks: >-
  Waterfalls accept a stack of functions which will be executed in sequence.
  Each waterfall step

  can ask a question of the user and the user's response will be passed to the
  next step in the

  waterfall via `step.result`. A special `step.value` object can be used to
  persist values between

  steps:


  ```JavaScript

  const { ComponentDialog, WaterfallDialog, TextPrompt, NumberPrompt } =
  require('botbuilder-dialogs);


  class FillProfileDialog extends ComponentDialog {
      constructor(dialogId) {
          super(dialogId);

          // Add control flow dialogs
          this.addDialog(new WaterfallDialog('start', [
              async (step) => {
                  // Ask user their name
                  return await step.prompt('namePrompt', `What's your name?`);
              },
              async (step) => {
                  // Remember the users answer
                  step.values['name'] = step.result;

                  // Ask user their age.
                  return await step.prompt('agePrompt', `Hi ${step.values['name']}. How old are you?`);
              },
              async (step) => {
                  // Remember the users answer
                  step.values['age'] = step.result;

                  // End the component and return the completed profile.
                  return await step.endDialog(step.values);
              }
          ]));

          // Add prompts
          this.addDialog(new TextPrompt('namePrompt'));
          this.addDialog(new NumberPrompt('agePrompt'))
      }
  }

  module.exports.FillProfileDialog = FillProfileDialog;

  ```
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: 'WaterfallDialog(string, WaterfallStep<O>[])'
    uid: botbuilder-dialogs.WaterfallDialog.constructor
    package: botbuilder-dialogs
    summary: Creates a new waterfall dialog containing the given array of steps.
    remarks: >-
      See the [addStep()](#addstep) function for details on creating a valid
      step function.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new WaterfallDialog(dialogId: string, steps?: WaterfallStep<O>[])'
      parameters:
        - id: dialogId
          type: string
          description: >-
            Unique ID of the dialog within the component or set its being added
            to.
        - id: steps
          type: '<xref uid="botbuilder-dialogs.WaterfallStep" />&lt;O&gt;[]'
          description: |
            (Optional) array of asynchronous waterfall step functions.
properties:
  - name: id
    uid: botbuilder-dialogs.WaterfallDialog.id
    package: botbuilder-dialogs
    summary: Unique ID of the dialog.
    fullName: id
    remarks: This will be automatically generated if not specified.
    isPreview: false
    isDeprecated: false
    syntax:
      content: string id
      return:
        type: string
        description: ''
  - name: telemetryClient
    uid: botbuilder-dialogs.WaterfallDialog.telemetryClient
    package: botbuilder-dialogs
    summary: |-
      Gets the telemetry client for this dialog.
      Sets the telemetry client for this dialog.
    fullName: telemetryClient
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: BotTelemetryClient telemetryClient
      return:
        type: BotTelemetryClient
        description: ''
methods:
  - name: addStep(WaterfallStep<O>)
    uid: botbuilder-dialogs.WaterfallDialog.addStep
    package: botbuilder-dialogs
    summary: Adds a new step to the waterfall.
    remarks: >-
      All step functions should be asynchronous and return a `DialogTurnResult`.
      The

      `WaterfallStepContext` passed into your function derives from
      `DialogContext` and contains

      numerous stack manipulation methods which return a `DialogTurnResult` so
      you can typically

      just return the result from the DialogContext method you call.


      The step function itself can be either an asynchronous closure:


      ```JavaScript

      const helloDialog = new WaterfallDialog('hello');


      helloDialog.addStep(async (step) => {
          await step.context.sendActivity(`Hello World!`);
          return await step.endDialog();
      });

      ```


      A named async function:


      ```JavaScript

      async function helloWorldStep(step) {
          await step.context.sendActivity(`Hello World!`);
          return await step.endDialog();
      }


      helloDialog.addStep(helloWorldStep);

      ```


      Or a class method that's been bound to its `this` pointer:


      ```JavaScript

      helloDialog.addStep(this.helloWorldStep.bind(this));

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function addStep(step: WaterfallStep<O>)'
      parameters:
        - id: step
          type: <xref uid="botbuilder-dialogs.WaterfallStep" />&lt;O&gt;
          description: |
            Asynchronous step function to call.
      return:
        type: this
        description: ''
  - name: 'beginDialog(DialogContext, O)'
    uid: botbuilder-dialogs.WaterfallDialog.beginDialog
    package: botbuilder-dialogs
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function beginDialog(dc: DialogContext, options?: O)'
      parameters:
        - id: dc
          type: <xref uid="botbuilder-dialogs.DialogContext" />
          description: ''
        - id: options
          type: O
          description: ''
      return:
        type: Promise&lt;<xref uid="botbuilder-dialogs.DialogTurnResult" />&gt;
        description: ''
  - name: configure(object)
    uid: botbuilder-dialogs.WaterfallDialog.configure
    package: botbuilder-dialogs
    summary: Fluent method for configuring the object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function configure(config: object)'
      parameters:
        - id: config
          type: object
          description: |
            Configuration settings to apply.
      return:
        type: this
        description: ''
  - name: continueDialog(DialogContext)
    uid: botbuilder-dialogs.WaterfallDialog.continueDialog
    package: botbuilder-dialogs
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function continueDialog(dc: DialogContext)'
      parameters:
        - id: dc
          type: <xref uid="botbuilder-dialogs.DialogContext" />
          description: ''
      return:
        type: Promise&lt;<xref uid="botbuilder-dialogs.DialogTurnResult" />&gt;
        description: ''
  - name: 'endDialog(TurnContext, DialogInstance, DialogReason)'
    uid: botbuilder-dialogs.WaterfallDialog.endDialog
    package: botbuilder-dialogs
    summary: Called when the dialog is ending.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function endDialog(context: TurnContext, instance: DialogInstance,
        reason: DialogReason)
      parameters:
        - id: context
          type: TurnContext
          description: Context for the current turn of conversation.
        - id: instance
          type: <xref uid="botbuilder-dialogs.DialogInstance" />
          description: The instance of the current dialog.
        - id: reason
          type: <xref uid="botbuilder-dialogs.DialogReason" />
          description: |
            The reason the dialog is ending.
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: getVersion()
    uid: botbuilder-dialogs.WaterfallDialog.getVersion
    package: botbuilder-dialogs
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getVersion()
      return:
        type: string
        description: ''
  - name: 'onDialogEvent(DialogContext, DialogEvent)'
    uid: botbuilder-dialogs.WaterfallDialog.onDialogEvent
    package: botbuilder-dialogs
    summary: >-
      Called when an event has been raised, using `DialogContext.emitEvent()`,
      by either the current dialog or a dialog that the current dialog started.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onDialogEvent(dc: DialogContext, e: DialogEvent)'
      parameters:
        - id: dc
          type: <xref uid="botbuilder-dialogs.DialogContext" />
          description: The dialog context for the current turn of conversation.
        - id: e
          type: <xref uid="botbuilder-dialogs.DialogEvent" />
          description: The event being raised.
      return:
        type: Promise&lt;boolean&gt;
        description: >-
          True if the event is handled by the current dialog and bubbling should
          stop.
  - name: 'repromptDialog(TurnContext, DialogInstance)'
    uid: botbuilder-dialogs.WaterfallDialog.repromptDialog
    package: botbuilder-dialogs
    summary: 'When overridden in a derived class, reprompts the user for input.'
    remarks: >-
      Derived dialogs that support validation and re-prompt logic should
      override this method.

      By default, this method has no effect.


      The [DialogContext](xref:botbuilder-dialogs.DialogContext) calls this
      method when the current

      dialog should re-request input from the user. This method is implemented
      for prompt dialogs.


      **See also**

      -
      [DialogContext.repromptDialog](xref:botbuilder-dialogs.DialogContext.repromptDialog)

      - [Prompt](xref:botbuilder-dialogs.Prompt)
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function repromptDialog(context: TurnContext, instance: DialogInstance)'
      parameters:
        - id: context
          type: TurnContext
          description: The context object for the turn.
        - id: instance
          type: <xref uid="botbuilder-dialogs.DialogInstance" />
          description: |
            Current state information for this dialog.
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: 'resumeDialog(DialogContext, DialogReason, any)'
    uid: botbuilder-dialogs.WaterfallDialog.resumeDialog
    package: botbuilder-dialogs
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function resumeDialog(dc: DialogContext, reason: DialogReason, result?:
        any)
      parameters:
        - id: dc
          type: <xref uid="botbuilder-dialogs.DialogContext" />
          description: ''
        - id: reason
          type: <xref uid="botbuilder-dialogs.DialogReason" />
          description: ''
        - id: result
          type: any
          description: ''
      return:
        type: Promise&lt;<xref uid="botbuilder-dialogs.DialogTurnResult" />&gt;
        description: ''
extends: <xref uid="botbuilder-dialogs.Dialog" />&lt;O&gt;
