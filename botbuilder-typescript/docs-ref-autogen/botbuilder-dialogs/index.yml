### YamlMime:TSPackage
uid: botbuilder-dialogs
name: botbuilder-dialogs
summary: ''
type: package
enums:
  - botbuilder-dialogs.DialogReason
  - botbuilder-dialogs.DialogTurnStatus
  - botbuilder-dialogs.ListStyle
classes:
  - botbuilder-dialogs.ActivityPrompt
  - botbuilder-dialogs.AliasPathResolver
  - botbuilder-dialogs.AtAtPathResolver
  - botbuilder-dialogs.AtPathResolver
  - botbuilder-dialogs.AttachmentPrompt
  - botbuilder-dialogs.BotStateMemoryScope
  - botbuilder-dialogs.ChoiceFactory
  - botbuilder-dialogs.ChoicePrompt
  - botbuilder-dialogs.ClassMemoryScope
  - botbuilder-dialogs.ComponentDialog
  - botbuilder-dialogs.Configurable
  - botbuilder-dialogs.ConfirmPrompt
  - botbuilder-dialogs.ConversationMemoryScope
  - botbuilder-dialogs.DateTimePrompt
  - botbuilder-dialogs.Dialog
  - botbuilder-dialogs.DialogClassMemoryScope
  - botbuilder-dialogs.DialogContainer
  - botbuilder-dialogs.DialogContext
  - botbuilder-dialogs.DialogContextError
  - botbuilder-dialogs.DialogContextMemoryScope
  - botbuilder-dialogs.DialogEvents
  - botbuilder-dialogs.DialogManager
  - botbuilder-dialogs.DialogMemoryScope
  - botbuilder-dialogs.DialogPath
  - botbuilder-dialogs.DialogSet
  - botbuilder-dialogs.DialogStateManager
  - botbuilder-dialogs.DialogTurnStateConstants
  - botbuilder-dialogs.DialogsBotComponent
  - botbuilder-dialogs.DollarPathResolver
  - botbuilder-dialogs.HashPathResolver
  - botbuilder-dialogs.MemoryScope
  - botbuilder-dialogs.NumberPrompt
  - botbuilder-dialogs.OAuthPrompt
  - botbuilder-dialogs.PercentPathResolver
  - botbuilder-dialogs.Prompt
  - botbuilder-dialogs.PromptCultureModels
  - botbuilder-dialogs.Recognizer
  - botbuilder-dialogs.ScopePath
  - botbuilder-dialogs.SettingsMemoryScope
  - botbuilder-dialogs.SkillDialog
  - botbuilder-dialogs.TextPrompt
  - botbuilder-dialogs.ThisMemoryScope
  - botbuilder-dialogs.ThisPath
  - botbuilder-dialogs.TurnMemoryScope
  - botbuilder-dialogs.TurnPath
  - botbuilder-dialogs.UserMemoryScope
  - botbuilder-dialogs.WaterfallDialog
  - botbuilder-dialogs.WaterfallStepContext
interfaces:
  - botbuilder-dialogs.BeginSkillDialogOptions
  - botbuilder-dialogs.Choice
  - botbuilder-dialogs.ChoiceFactoryOptions
  - botbuilder-dialogs.ComponentMemoryScopes
  - botbuilder-dialogs.ComponentPathResolvers
  - botbuilder-dialogs.Converter
  - botbuilder-dialogs.DateTimeResolution
  - botbuilder-dialogs.DialogConfiguration
  - botbuilder-dialogs.DialogDependencies
  - botbuilder-dialogs.DialogEvent
  - botbuilder-dialogs.DialogInstance
  - botbuilder-dialogs.DialogManagerConfiguration
  - botbuilder-dialogs.DialogManagerResult
  - botbuilder-dialogs.DialogState
  - botbuilder-dialogs.DialogStateManagerConfiguration
  - botbuilder-dialogs.DialogTurnResult
  - botbuilder-dialogs.FindChoicesOptions
  - botbuilder-dialogs.FindValuesOptions
  - botbuilder-dialogs.FoundChoice
  - botbuilder-dialogs.FoundValue
  - botbuilder-dialogs.ModelResult
  - botbuilder-dialogs.OAuthPromptSettings
  - botbuilder-dialogs.PathResolver
  - botbuilder-dialogs.PromptCultureModel
  - botbuilder-dialogs.PromptOptions
  - botbuilder-dialogs.PromptRecognizerResult
  - botbuilder-dialogs.PromptValidatorContext
  - botbuilder-dialogs.RecognizerConfiguration
  - botbuilder-dialogs.SkillDialogOptions
  - botbuilder-dialogs.SortedValue
  - botbuilder-dialogs.TemplateInterface
  - botbuilder-dialogs.Token
  - botbuilder-dialogs.WaterfallStepInfo
typeAliases:
  - botbuilder-dialogs.ConverterFactory
  - botbuilder-dialogs.PromptValidator
  - botbuilder-dialogs.TokenizerFunction
  - botbuilder-dialogs.WaterfallStep
functions:
  - name: defaultTokenizer(string, string)
    uid: botbuilder-dialogs.defaultTokenizer
    package: botbuilder-dialogs
    summary: Simple tokenizer that breaks on spaces and punctuation.
    remarks: >-
      The only normalization done is to lowercase the tokens. Developers can
      wrap this tokenizer with

      their own function to perform additional normalization like
      [stemming](https://github.com/words/stemmer).


      ```JavaScript

      const { recognizeChoices, defaultTokenizer } =
      require('botbuilder-choices');

      const stemmer = require('stemmer');


      function customTokenizer(text, locale) {
         const tokens = defaultTokenizer(text, locale);
         tokens.forEach((t) => {
             t.normalized = stemmer(t.normalized);
         });
         return tokens;
      }


      const choices = ['red', 'green', 'blue'];

      const utterance = context.activity.text;

      const results = recognizeChoices(utterance, choices, { tokenizer:
      customTokenizer });

      ```
    isDeprecated: false
    syntax:
      content: 'function defaultTokenizer(text: string, _locale?: string): Token[]'
      parameters:
        - id: text
          type: string
          description: The input text.
        - id: _locale
          type: string
          description: Optional, identifies the locale of the input text.
      return:
        description: A list of tokens.
        type: <xref uid="botbuilder-dialogs.Token" />[]
  - name: findChoices(string, (string | Choice)[], FindChoicesOptions)
    uid: botbuilder-dialogs.findChoices
    package: botbuilder-dialogs
    summary: Mid-level search function for recognizing a choice in an utterance.
    remarks: >-
      This function is layered above `findValues()` and simply determines all of
      the synonyms that

      should be searched for before calling `findValues()` to perform the actual
      search. The

      `recognizeChoices()` function is layered above this function and adds the
      ability to select a

      choice by index or ordinal position in the list. Calling this particular
      function is useful

      when you don't want the index and ordinal position recognition done by
      `recognizeChoices()`.


      ```JavaScript

      const { findChoices } = require('botbuilder-choices');


      const choices = ['red', 'green', 'blue'];

      const utterance = context.activity.text;

      const results = findChoices(utterance, choices);

      if (results.length == 1) {
          await context.sendActivity(`I like ${results[0].resolution.value} too!`);
      } else if (results.length > 1) {
          const ambiguous = results.map((r) => r.resolution.value);
          await context.sendActivity(ChoiceFactory.forChannel(context, ambiguous, `Which one?`));
      } else {
          await context.sendActivity(ChoiceFactory.forChannel(context, choices, `I didn't get that... Which color?`));
      }

      ```
    isDeprecated: false
    syntax:
      content: >-
        function findChoices(utterance: string, choices: (string | Choice)[],
        options?: FindChoicesOptions): ModelResult<FoundChoice>[]
      parameters:
        - id: utterance
          type: string
          description: >-
            The text or user utterance to search over. For an incoming 'message'
            activity you can simply use `context.activity.text`.
        - id: choices
          type: (string | <xref uid="botbuilder-dialogs.Choice" />)[]
          description: List of choices to search over.
        - id: options
          type: <xref uid="botbuilder-dialogs.FindChoicesOptions" />
          description: (Optional) options used to tweak the search that's performed.
      return:
        description: A list of found choices, sorted by most relevant first.
        type: >-
          <xref uid="botbuilder-dialogs.ModelResult" />&lt;<xref
          uid="botbuilder-dialogs.FoundChoice" />&gt;[]
  - name: findValues(string, SortedValue[], FindValuesOptions)
    uid: botbuilder-dialogs.findValues
    package: botbuilder-dialogs
    summary: >-
      INTERNAL: Low-level function that searches for a set of values within an
      utterance. Higher level

      functions like `findChoices()` and `recognizeChoices()` are layered above
      this function.  In most

      cases its easier to just call one of the higher level functions instead
      but this function contains

      the fuzzy search algorithm that drives choice recognition.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function findValues(utterance: string, values: SortedValue[], options?:
        FindValuesOptions): ModelResult<FoundValue>[]
      parameters:
        - id: utterance
          type: string
          description: The text or user utterance to search over.
        - id: values
          type: <xref uid="botbuilder-dialogs.SortedValue" />[]
          description: List of values to search over.
        - id: options
          type: <xref uid="botbuilder-dialogs.FindValuesOptions" />
          description: (Optional) options used to tweak the search that's performed.
      return:
        description: A list of found values.
        type: >-
          <xref uid="botbuilder-dialogs.ModelResult" />&lt;<xref
          uid="botbuilder-dialogs.FoundValue" />&gt;[]
  - name: isComponentMemoryScopes(unknown)
    uid: botbuilder-dialogs.isComponentMemoryScopes
    package: botbuilder-dialogs
    summary: >-
      Check if a
      [ComponentRegistration](xref:botbuilder-core.ComponentRegistration) is

      [ComponentMemoryScopes](xref:botbuilder-dialogs.ComponentMemoryScopes) or
      not.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function isComponentMemoryScopes(component: unknown): component'
      parameters:
        - id: component
          type: unknown
          description: The component registration.
      return:
        description: Type check result.
        type: component
  - name: isComponentPathResolvers(unknown)
    uid: botbuilder-dialogs.isComponentPathResolvers
    package: botbuilder-dialogs
    summary: >-
      Check if a
      [ComponentRegistration](xref:botbuilder-core.ComponentRegistration) is

      [ComponentPathResolvers](xref:botbuilder-dialogs.ComponentPathResolvers)
      or not.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function isComponentPathResolvers(component: unknown): component'
      parameters:
        - id: component
          type: unknown
          description: The component registration.
      return:
        description: Type check result.
        type: component
  - name: recognizeChoices(string, (string | Choice)[], FindChoicesOptions)
    uid: botbuilder-dialogs.recognizeChoices
    package: botbuilder-dialogs
    summary: High level function for recognizing a choice in a users utterance.
    remarks: >-
      This is layered above the `findChoices()` function and adds logic to let
      the user specify their

      choice by index (they can say "one" to pick `choice[0]`) or ordinal
      position (they can say "the

      second one" to pick `choice[1]`.) The users utterance is recognized in the
      following order:


      - By name using `findChoices()`.

      - By 1's based ordinal position.

      - By 1's based index position.


      ```JavaScript

      const { recognizeChoices } = require('botbuilder-choices');


      const choices = ['red', 'green', 'blue'];

      const utterance = context.activity.text;

      const results = recognizeChoices(utterance, choices);

      if (results.length == 1) {
          await context.sendActivity(`I like ${results[0].resolution.value} too!`);
      } else if (results.length > 1) {
          const ambiguous = results.map((r) => r.resolution.value);
          await context.sendActivity(ChoiceFactory.forChannel(context, ambiguous, `Which one?`));
      } else {
          await context.sendActivity(ChoiceFactory.forChannel(context, choices, `I didn't get that... Which color?`));
      }

      ```
    isDeprecated: false
    syntax:
      content: >-
        function recognizeChoices(utterance: string, choices: (string |
        Choice)[], options?: FindChoicesOptions): ModelResult<FoundChoice>[]
      parameters:
        - id: utterance
          type: string
          description: >-
            The text or user utterance to search over. For an incoming 'message'
            activity you can simply use `context.activity.text`.
        - id: choices
          type: (string | <xref uid="botbuilder-dialogs.Choice" />)[]
          description: List of choices to search over.
        - id: options
          type: <xref uid="botbuilder-dialogs.FindChoicesOptions" />
          description: (Optional) options used to tweak the search that's performed.
      return:
        description: A list of found choices, sorted by most relevant first.
        type: >-
          <xref uid="botbuilder-dialogs.ModelResult" />&lt;<xref
          uid="botbuilder-dialogs.FoundChoice" />&gt;[]
  - name: runDialog(Dialog<{}>, TurnContext, StatePropertyAccessor<DialogState>)
    uid: botbuilder-dialogs.runDialog
    package: botbuilder-dialogs
    summary: Runs a dialog from a given context and accessor.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function runDialog(dialog: Dialog<{}>, context: TurnContext, accessor:
        StatePropertyAccessor<DialogState>): Promise<void>
      parameters:
        - id: dialog
          type: <xref uid="botbuilder-dialogs.Dialog" />&lt;{}&gt;
          description: The [Dialog](xref:botbuilder-dialogs.Dialog) to run.
        - id: context
          type: TurnContext
          description: >-
            [TurnContext](xref:botbuilder-core.TurnContext) object for the
            current turn of conversation with the user.
        - id: accessor
          type: >-
            StatePropertyAccessor&lt;<xref uid="botbuilder-dialogs.DialogState"
            />&gt;
          description: >-
            Defined methods for accessing the state property created in a
            BotState object.
      return:
        description: ''
        type: Promise&lt;void&gt;
