### YamlMime:TSType
name: ChoiceFactory
uid: botbuilder-dialogs.ChoiceFactory
package: botbuilder-dialogs
summary: >-
  A set of utility functions to assist with the formatting a 'message' activity
  containing a list

  of choices.
fullName: ChoiceFactory
remarks: >-
  This example shows creating a message containing a list of choices that has
  been conditionally

  formatted based on the capabilities of the underlying channel:


  ```JavaScript

  const { ChoiceFactory } = require('botbuilder-choices');


  const message = ChoiceFactory.forChannel(context, ['red', 'green', 'blue'],
  `Pick a color.`);

  await context.sendActivity(message);

  ```
isPreview: false
isDeprecated: false
type: class
methods:
  - name: >-
      forChannel(string | TurnContext, string | Choice[], string, string,
      ChoiceFactoryOptions)
    uid: botbuilder-dialogs.ChoiceFactory.forChannel
    package: botbuilder-dialogs
    summary: >-
      Returns a 'message' activity containing a list of choices that has been
      automatically

      formatted based on the capabilities of a given channel.
    remarks: >-
      The algorithm prefers to format the supplied list of choices as suggested
      actions but can

      decide to use a text based list if suggested actions aren't natively
      supported by the

      channel, there are too many choices for the channel to display, or the
      title of any choice

      is too long.


      If the algorithm decides to use a list it will use an inline list if there
      are 3 or less

      choices and all have short titles. Otherwise, a numbered list is used.


      ```JavaScript

      const message = ChoiceFactory.forChannel(context, [
         { value: 'red', action: { type: 'imBack', title: 'The Red Pill', value: 'red pill' } },
         { value: 'blue', action: { type: 'imBack', title: 'The Blue Pill', value: 'blue pill' } },
      ], `Which do you choose?`);

      await context.sendActivity(message);

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function forChannel(channelOrContext: string | TurnContext,
        choices: string | Choice[], text?: string, speak?: string, options?:
        ChoiceFactoryOptions)
      parameters:
        - id: channelOrContext
          type: string | TurnContext
          description: Channel ID or context object for the current turn of conversation.
        - id: choices
          type: 'string | <xref uid="botbuilder-dialogs.Choice" />[]'
          description: List of choices to render.
        - id: text
          type: string
          description: (Optional) text of the message.
        - id: speak
          type: string
          description: (Optional) SSML to speak for the message.
        - id: options
          type: <xref uid="botbuilder-dialogs.ChoiceFactoryOptions" />
          description: |
            (Optional) formatting options to use when rendering as a list.
      return:
        type: Partial&lt;Activity&gt;
        description: ''
  - name: 'heroCard(string | Choice[], string, string)'
    uid: botbuilder-dialogs.ChoiceFactory.heroCard
    package: botbuilder-dialogs
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function heroCard(choices: string | Choice[], text: string,
        speak: string)
      parameters:
        - id: choices
          type: 'string | <xref uid="botbuilder-dialogs.Choice" />[]'
          description: ''
        - id: text
          type: string
          description: ''
        - id: speak
          type: string
          description: ''
      return:
        type: Activity
        description: ''
  - name: 'inline(string | Choice[], string, string, ChoiceFactoryOptions)'
    uid: botbuilder-dialogs.ChoiceFactory.inline
    package: botbuilder-dialogs
    summary: >-
      Returns a 'message' activity containing a list of choices that has been
      formatted as an

      inline list.
    remarks: >-
      This example generates a message text of "Pick a color: (1. red, 2. green,
      or 3. blue)":


      ```JavaScript

      const message = ChoiceFactory.inline(['red', 'green', 'blue'], `Pick a
      color:`);

      await context.sendActivity(message);

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function inline(choices: string | Choice[], text?: string,
        speak?: string, options?: ChoiceFactoryOptions)
      parameters:
        - id: choices
          type: 'string | <xref uid="botbuilder-dialogs.Choice" />[]'
          description: List of choices to render.
        - id: text
          type: string
          description: (Optional) text of the message.
        - id: speak
          type: string
          description: (Optional) SSML to speak for the message.
        - id: options
          type: <xref uid="botbuilder-dialogs.ChoiceFactoryOptions" />
          description: |
            (Optional) formatting options to tweak rendering of list.
      return:
        type: Partial&lt;Activity&gt;
        description: ''
  - name: 'list(string | Choice[], string, string, ChoiceFactoryOptions)'
    uid: botbuilder-dialogs.ChoiceFactory.list
    package: botbuilder-dialogs
    summary: >-
      Returns a 'message' activity containing a list of choices that has been
      formatted as an

      numbered or bulleted list.
    remarks: >-
      This example generates a message with the choices presented as a numbered
      list:


      ```JavaScript

      const message = ChoiceFactory.list(['red', 'green', 'blue'], `Pick a
      color:`);

      await context.sendActivity(message);

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function list(choices: string | Choice[], text?: string, speak?:
        string, options?: ChoiceFactoryOptions)
      parameters:
        - id: choices
          type: 'string | <xref uid="botbuilder-dialogs.Choice" />[]'
          description: List of choices to render.
        - id: text
          type: string
          description: (Optional) text of the message.
        - id: speak
          type: string
          description: (Optional) SSML to speak for the message.
        - id: options
          type: <xref uid="botbuilder-dialogs.ChoiceFactoryOptions" />
          description: |
            (Optional) formatting options to tweak rendering of list.
      return:
        type: Partial&lt;Activity&gt;
        description: ''
  - name: 'suggestedAction(string | Choice[], string, string)'
    uid: botbuilder-dialogs.ChoiceFactory.suggestedAction
    package: botbuilder-dialogs
    summary: >-
      Returns a 'message' activity containing a list of choices that have been
      added as suggested

      actions.
    remarks: >-
      This example generates a message with the choices presented as suggested
      action buttons:


      ```JavaScript

      const message = ChoiceFactory.suggestedAction(['red', 'green', 'blue'],
      `Pick a color:`);

      await context.sendActivity(message);

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function suggestedAction(choices: string | Choice[], text?:
        string, speak?: string)
      parameters:
        - id: choices
          type: 'string | <xref uid="botbuilder-dialogs.Choice" />[]'
          description: List of choices to add.
        - id: text
          type: string
          description: (Optional) text of the message.
        - id: speak
          type: string
          description: |
            (Optional) SSML to speak for the message.
      return:
        type: Partial&lt;Activity&gt;
        description: ''
  - name: 'toChoices(string | Choice[] | undefined)'
    uid: botbuilder-dialogs.ChoiceFactory.toChoices
    package: botbuilder-dialogs
    summary: >-
      Takes a mixed list of `string` and `Choice` based choices and returns them
      as a `Choice[]`.
    remarks: >-
      This example converts a simple array of string based choices to a properly
      formated `Choice[]`.


      If the `Choice` has a `Partial<CardAction>` for `Choice.action`,
      `.toChoices()` will attempt to

      fill the `Choice.action`.


      ```JavaScript

      const choices = ChoiceFactory.toChoices(['red', 'green', 'blue']);

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static function toChoices(choices: string | Choice[] | undefined)'
      parameters:
        - id: choices
          type: 'string | <xref uid="botbuilder-dialogs.Choice" />[] | undefined'
          description: |
            List of choices to add.
      return:
        type: '<xref uid="botbuilder-dialogs.Choice" />[]'
        description: ''
