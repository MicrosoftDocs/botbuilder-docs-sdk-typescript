### YamlMime:UniversalReference
items:
  - uid: botbuilder-dialogs.WaterfallStepContext
    name: WaterfallStepContext
    fullName: WaterfallStepContext<O>
    children:
      - botbuilder-dialogs.WaterfallStepContext.activeDialog
      - botbuilder-dialogs.WaterfallStepContext.beginDialog
      - botbuilder-dialogs.WaterfallStepContext.cancelAllDialogs
      - botbuilder-dialogs.WaterfallStepContext.child
      - botbuilder-dialogs.WaterfallStepContext.context
      - botbuilder-dialogs.WaterfallStepContext.continueDialog
      - botbuilder-dialogs.WaterfallStepContext.dialogs
      - botbuilder-dialogs.WaterfallStepContext.emitEvent
      - botbuilder-dialogs.WaterfallStepContext.endDialog
      - botbuilder-dialogs.WaterfallStepContext.findDialog
      - botbuilder-dialogs.WaterfallStepContext.index
      - botbuilder-dialogs.WaterfallStepContext.next
      - botbuilder-dialogs.WaterfallStepContext.options
      - botbuilder-dialogs.WaterfallStepContext.parent
      - botbuilder-dialogs.WaterfallStepContext.prompt
      - botbuilder-dialogs.WaterfallStepContext.prompt_1
      - botbuilder-dialogs.WaterfallStepContext.reason
      - botbuilder-dialogs.WaterfallStepContext.replaceDialog
      - botbuilder-dialogs.WaterfallStepContext.repromptDialog
      - botbuilder-dialogs.WaterfallStepContext.result
      - botbuilder-dialogs.WaterfallStepContext.stack
      - botbuilder-dialogs.WaterfallStepContext.state
      - botbuilder-dialogs.WaterfallStepContext.values
      - botbuilder-dialogs.WaterfallStepContext.constructor
    langs:
      - typeScript
    type: class
    summary: Context object passed in to a `WaterfallStep`.
    extends:
      name: botbuilder-dialogs.DialogContext
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.WaterfallStepContext.activeDialog
    name: activeDialog
    fullName: activeDialog
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Returns the state information for the dialog on the top of the dialog
      stack, or `undefined` if

      the stack is empty.
    syntax:
      content: 'activeDialog: DialogInstance | undefined'
      return:
        type:
          - botbuilder-dialogs.DialogInstance | undefined
        description: ''
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.WaterfallStepContext.beginDialog
    name: 'beginDialog(string, object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Starts a dialog instance and pushes it onto the dialog stack.
      Creates a new instance of the dialog and pushes it onto the stack.
    syntax:
      content: 'function beginDialog(dialogId: string, options?: object)'
      parameters:
        - id: dialogId
          type:
            - string
          description: ID of the dialog to start.
        - id: options
          type:
            - object
          description: |
            Optional. Arguments to pass into the dialog when it starts.
          optional: true
      return:
        type:
          - Promise<botbuilder-dialogs.DialogTurnResult>
        description: ''
    package: botbuilder-dialogs
    remarks: >-
      If there's already an active dialog on the stack, that dialog will be
      paused until

      it is again the top dialog on the stack.


      The [status](xref:botbuilder-dialogs.DialogTurnResult.status) of returned
      object describes

      the status of the dialog stack after this method completes.


      This method throws an exception if the requested dialog can't be found in
      this dialog context

      or any of its ancestors.


      For example:

      ```JavaScript

      const result = await dc.beginDialog('greeting', { name: user.name });

      ```


      **See also**

      - [endDialog](xref:botbuilder-dialogs.DialogContext.endDialog)

      - [prompt](xref:botbuilder-dialogs.DialogContext.prompt)

      - [replaceDialog](xref:botbuilder-dialogs.DialogContext.replaceDialog)

      - [Dialog.beginDialog](xref:botbuilder-dialogs.Dialog.beginDialog)
  - uid: botbuilder-dialogs.WaterfallStepContext.cancelAllDialogs
    name: 'cancelAllDialogs(boolean, string, any)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Cancels all dialogs on the dialog stack, and clears stack.'
    syntax:
      content: >-
        function cancelAllDialogs(cancelParents?: boolean, eventName?: string,
        eventValue?: any)
      parameters:
        - id: cancelParents
          type:
            - boolean
          description: Optional. If `true` all parent dialogs will be cancelled as well.
          optional: true
        - id: eventName
          type:
            - string
          description: >-
            Optional. Name of a custom event to raise as dialogs are cancelled.
            This defaults to
            [cancelDialog](xref:botbuilder-dialogs.DialogEvents.cancelDialog).
          optional: true
        - id: eventValue
          type:
            - any
          description: |
            Optional. Value to pass along with custom cancellation event.
          optional: true
      return:
        type:
          - Promise<botbuilder-dialogs.DialogTurnResult>
        description: ''
    package: botbuilder-dialogs
    remarks: >-
      This calls each dialog's
      [Dialog.endDialog](xref:botbuilder-dialogs.Dialog.endDialog) method before

      removing the dialog from the stack.


      If there were any dialogs on the stack initially, the
      [status](xref:botbuilder-dialogs.DialogTurnResult.status)

      of the return value is
      [cancelled](xref:botbuilder-dialogs.DialogTurnStatus.cancelled);
      otherwise, it's

      [empty](xref:botbuilder-dialogs.DialogTurnStatus.empty).


      This example clears a dialog stack, `dc`, before starting a 'bookFlight'
      dialog.

      ```JavaScript

      await dc.cancelAllDialogs();

      return await dc.beginDialog('bookFlight');

      ```


      **See also**

      - [endDialog](xref:botbuilder-dialogs.DialogContext.endDialog)
  - uid: botbuilder-dialogs.WaterfallStepContext.child
    name: child
    fullName: child
    children: []
    langs:
      - typeScript
    type: property
    summary: Returns dialog context for child if the active dialog is a container.
    syntax:
      content: 'child: DialogContext | undefined'
      return:
        type:
          - botbuilder-dialogs.DialogContext | undefined
        description: ''
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.WaterfallStepContext.context
    name: context
    fullName: context
    children: []
    langs:
      - typeScript
    type: property
    summary: Gets the context object for the turn.
    syntax:
      content: 'context: TurnContext'
      return:
        type:
          - TurnContext
        description: ''
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.WaterfallStepContext.continueDialog
    name: continueDialog()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Continues execution of the active dialog, if there is one, by passing this
      dialog context to its

      [Dialog.continueDialog](xref:botbuilder-dialogs.Dialog.continueDialog)
      method.
    syntax:
      content: function continueDialog()
      parameters: []
      return:
        type:
          - Promise<botbuilder-dialogs.DialogTurnResult>
        description: ''
    package: botbuilder-dialogs
    remarks: >-
      After the call completes, you can check the turn context's
      [responded](xref:botbuilder-core.TurnContext.responded)

      property to determine if the dialog sent a reply to the user.


      The [status](xref:botbuilder-dialogs.DialogTurnResult.status) of returned
      object describes

      the status of the dialog stack after this method completes.


      Typically, you would call this from within your bot's turn handler.


      For example:

      ```JavaScript

      const result = await dc.continueDialog();

      if (result.status == DialogTurnStatus.empty && dc.context.activity.type ==
      ActivityTypes.message) {
          // Send fallback message
          await dc.context.sendActivity(`I'm sorry. I didn't understand.`);
      }

      ```
  - uid: botbuilder-dialogs.WaterfallStepContext.dialogs
    name: dialogs
    fullName: dialogs
    children: []
    langs:
      - typeScript
    type: property
    summary: Gets the dialogs that can be called directly from this context.
    syntax:
      content: 'dialogs: DialogSet'
      return:
        type:
          - botbuilder-dialogs.DialogSet
        description: ''
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.WaterfallStepContext.emitEvent
    name: 'emitEvent(string, any, boolean, boolean)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function emitEvent(name: string, value?: any, bubble?: boolean,
        fromLeaf?: boolean)
      parameters:
        - id: name
          type:
            - string
          description: ''
        - id: value
          type:
            - any
          description: ''
          optional: true
        - id: bubble
          type:
            - boolean
          description: ''
          optional: true
        - id: fromLeaf
          type:
            - boolean
          description: ''
          optional: true
      return:
        type:
          - Promise<boolean>
        description: ''
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.WaterfallStepContext.endDialog
    name: endDialog(any)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Ends a dialog and pops it off the stack. Returns an optional result to the
      dialog's parent.
    syntax:
      content: 'function endDialog(result?: any)'
      parameters:
        - id: result
          type:
            - any
          description: >
            Optional. A result to pass to the parent logic. This might be the
            next dialog
                 on the stack, or it might be the bot's turn handler, if this was the last dialog on the stack.
          optional: true
      return:
        type:
          - Promise<botbuilder-dialogs.DialogTurnResult>
        description: ''
    package: botbuilder-dialogs
    remarks: >-
      The _parent_ dialog is the next dialog on the dialog stack, if there is
      one. This method

      calls the parent's
      [Dialog.resumeDialog](xref:botbuilder-dialogs.Dialog.resumeDialog) method,

      passing the result returned by the ending dialog. If there is no parent
      dialog, the turn ends

      and the result is available to the bot through the returned object's

      [result](xref:botbuilder-dialogs.DialogTurnResult.result) property.


      The [status](xref:botbuilder-dialogs.DialogTurnResult.status) of returned
      object describes

      the status of the dialog stack after this method completes.


      Typically, you would call this from within the logic for a specific dialog
      to signal back to

      the dialog context that the dialog has completed, the dialog should be
      removed from the stack,

      and the parent dialog should resume.


      For example:

      ```JavaScript

      return await dc.endDialog(returnValue);

      ```


      **See also**

      - [beginDialog](xref:botbuilder-dialogs.DialogContext.beginDialog)

      - [replaceDialog](xref:botbuilder-dialogs.DialogContext.replaceDialog)

      - [Dialog.endDialog](xref:botbuilder-dialogs.Dialog.endDialog)
  - uid: botbuilder-dialogs.WaterfallStepContext.findDialog
    name: findDialog(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Searches for a dialog with a given ID.
    syntax:
      content: 'function findDialog(dialogId: string)'
      parameters:
        - id: dialogId
          type:
            - string
          description: |
            ID of the dialog to search for.
      return:
        type:
          - botbuilder-dialogs.Dialog | undefined
        description: ''
    package: botbuilder-dialogs
    remarks: >-
      If the dialog to start is not found in the
      [DialogSet](xref:botbuilder-dialogs.DialogSet) associated

      with this dialog context, it attempts to find the dialog in its parent
      dialog context.


      **See also**

      - [dialogs](xref:botbuilder-dialogs.DialogContext.dialogs)

      - [parent](xref:botbuilder-dialogs.DialogContext.parent)
  - uid: botbuilder-dialogs.WaterfallStepContext.index
    name: index
    fullName: index
    children: []
    langs:
      - typeScript
    type: property
    summary: The index of the current waterfall step being executed.
    syntax:
      content: 'index: number'
      return:
        type:
          - number
        description: ''
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.WaterfallStepContext.next
    name: next(any)
    children: []
    type: method
    langs:
      - typeScript
    summary: Skips to the next waterfall step.
    syntax:
      content: 'function next(result?: any)'
      parameters:
        - id: result
          type:
            - any
          description: |
            (Optional) result to pass to the next step.
          optional: true
      return:
        type:
          - Promise<botbuilder-dialogs.DialogTurnResult>
        description: ''
    package: botbuilder-dialogs
    remarks: |-
      ```JavaScript
      return await step.skip();
      ```
  - uid: botbuilder-dialogs.WaterfallStepContext.options
    name: options
    fullName: options
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Any options passed to the steps waterfall dialog when it was started with
      `DialogContext.beginDialog()`.
    syntax:
      content: 'options: O'
      return:
        type:
          - O
        description: ''
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.WaterfallStepContext.parent
    name: parent
    fullName: parent
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The parent dialog context for this dialog context, or `undefined` if this
      context doesn't have a parent.
    syntax:
      content: 'parent: DialogContext | undefined'
      return:
        type:
          - botbuilder-dialogs.DialogContext | undefined
        description: ''
    package: botbuilder-dialogs
    remarks: >-
      When it attempts to start a dialog, the dialog context searches for the
      [Dialog.id](xref:botbuilder-dialogs.Dialog.id)

      in its [dialogs](xref:botbuilder-dialogs.DialogContext.dialogs). If the
      dialog to start is not found

      in this dialog context, it searches in its parent dialog context, and so
      on.
  - uid: botbuilder-dialogs.WaterfallStepContext.prompt
    name: 'prompt(string, string | Partial<Activity> | PromptOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Helper function to simplify formatting the options for calling a prompt
      dialog.
    syntax:
      content: >-
        function prompt(dialogId: string, promptOrOptions: string |
        Partial<Activity> | PromptOptions)
      parameters:
        - id: dialogId
          type:
            - string
          description: ID of the prompt dialog to start.
        - id: promptOrOptions
          type:
            - string | Partial<Activity> | botbuilder-dialogs.PromptOptions
          description: |-
            The text of the initial prompt to send the user,
                 the activity to send as the initial prompt, or
                 the object with which to format the prompt dialog.
      return:
        type:
          - Promise<botbuilder-dialogs.DialogTurnResult>
        description: ''
    package: botbuilder-dialogs
    remarks: >-
      This helper method formats the object to use as the `options` parameter,
      and then calls

      [beginDialog](xref:botbuilder-dialogs.DialogContext.beginDialog) to start
      the specified prompt dialog.


      ```JavaScript

      return await dc.prompt('confirmPrompt', `Are you sure you'd like to
      quit?`);

      ```
  - uid: botbuilder-dialogs.WaterfallStepContext.prompt_1
    name: >-
      prompt(string, string | Partial<Activity> | PromptOptions, string |
      Choice[])
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Helper function to simplify formatting the options for calling a prompt
      dialog.
    syntax:
      content: >-
        function prompt(dialogId: string, promptOrOptions: string |
        Partial<Activity> | PromptOptions, choices: string | Choice[])
      parameters:
        - id: dialogId
          type:
            - string
          description: ''
        - id: promptOrOptions
          type:
            - string | Partial<Activity> | botbuilder-dialogs.PromptOptions
          description: ''
        - id: choices
          type:
            - 'string | botbuilder-dialogs.Choice[]'
          description: ''
      return:
        type:
          - Promise<botbuilder-dialogs.DialogTurnResult>
        description: ''
    package: botbuilder-dialogs
    remarks: >-
      This helper method formats the object to use as the `options` parameter,
      and then calls

      [beginDialog](xref:botbuilder-dialogs.DialogContext.beginDialog) to start
      the specified prompt dialog.


      ```JavaScript

      return await dc.prompt('confirmPrompt', `Are you sure you'd like to
      quit?`);

      ```
  - uid: botbuilder-dialogs.WaterfallStepContext.reason
    name: reason
    fullName: reason
    children: []
    langs:
      - typeScript
    type: property
    summary: The reason the waterfall step is being executed.
    syntax:
      content: 'reason: DialogReason'
      return:
        type:
          - botbuilder-dialogs.DialogReason
        description: ''
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.WaterfallStepContext.replaceDialog
    name: 'replaceDialog(string, object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Ends the active dialog and starts a new dialog in its place.
    syntax:
      content: 'function replaceDialog(dialogId: string, options?: object)'
      parameters:
        - id: dialogId
          type:
            - string
          description: ID of the dialog to start.
        - id: options
          type:
            - object
          description: |
            Optional. Arguments to pass into the new dialog when it starts.
          optional: true
      return:
        type:
          - Promise<botbuilder-dialogs.DialogTurnResult>
        description: ''
    package: botbuilder-dialogs
    remarks: >-
      This is particularly useful for creating a loop or redirecting to another
      dialog.


      The [status](xref:botbuilder-dialogs.DialogTurnResult.status) of returned
      object describes

      the status of the dialog stack after this method completes.


      This method is similar to ending the current dialog and immediately
      beginning the new one.

      However, the parent dialog is neither resumed nor otherwise notified.


      **See also**

      - [beginDialog](xref:botbuilder-dialogs.DialogContext.beginDialog)

      - [endDialog](xref:botbuilder-dialogs.DialogContext.endDialog)
  - uid: botbuilder-dialogs.WaterfallStepContext.repromptDialog
    name: repromptDialog()
    children: []
    type: method
    langs:
      - typeScript
    summary: Requests the active dialog to re-prompt the user for input.
    syntax:
      content: function repromptDialog()
      parameters: []
      return:
        type:
          - Promise<void>
        description: ''
    package: botbuilder-dialogs
    remarks: >-
      This calls the active dialog's
      [repromptDialog](xref:botbuilder-dialogs.Dialog.repromptDialog) method.


      For example:

      ```JavaScript

      await dc.repromptDialog();

      ```
  - uid: botbuilder-dialogs.WaterfallStepContext.result
    name: result
    fullName: result
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Results returned by a dialog or prompt that was called in the previous
      waterfall step.
    syntax:
      content: 'result: any'
      return:
        type:
          - any
        description: ''
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.WaterfallStepContext.stack
    name: stack
    fullName: stack
    children: []
    langs:
      - typeScript
    type: property
    summary: Gets the current dialog stack.
    syntax:
      content: 'stack: DialogInstance[]'
      return:
        type:
          - 'botbuilder-dialogs.DialogInstance[]'
        description: ''
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.WaterfallStepContext.state
    name: state
    fullName: state
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'state: DialogStateManager'
      return:
        type:
          - botbuilder-dialogs.DialogStateManager
        description: ''
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.WaterfallStepContext.values
    name: values
    fullName: values
    children: []
    langs:
      - typeScript
    type: property
    summary: A dictionary of values which will be persisted across all waterfall steps.
    syntax:
      content: 'values: object'
      return:
        type:
          - object
        description: ''
    package: botbuilder-dialogs
  - uid: botbuilder-dialogs.WaterfallStepContext.constructor
    name: 'WaterfallStepContext(DialogContext, WaterfallStepInfo<O>)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates a new WaterfallStepContext instance.
    syntax:
      content: 'new WaterfallStepContext(dc: DialogContext, info: WaterfallStepInfo<O>)'
      parameters:
        - id: dc
          type:
            - botbuilder-dialogs.DialogContext
          description: The dialog context for the current turn of conversation.
        - id: info
          type:
            - botbuilder-dialogs.WaterfallStepInfo<O>
          description: |
            Values to initialize the step context with.
    package: botbuilder-dialogs
references:
  - uid: botbuilder-dialogs.DialogContext
    name: DialogContext
    spec.typeScript:
      - name: DialogContext
        fullName: DialogContext
        uid: botbuilder-dialogs.DialogContext
  - uid: botbuilder-dialogs.WaterfallStepInfo<O>
    name: WaterfallStepInfo<O>
    spec.typeScript:
      - name: WaterfallStepInfo
        fullName: WaterfallStepInfo
        uid: botbuilder-dialogs.WaterfallStepInfo
      - name: <O>
        fullName: <O>
  - uid: botbuilder-dialogs.DialogInstance | undefined
    name: DialogInstance | undefined
    spec.typeScript:
      - name: DialogInstance
        fullName: DialogInstance
        uid: botbuilder-dialogs.DialogInstance
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: botbuilder-dialogs.DialogContext | undefined
    name: DialogContext | undefined
    spec.typeScript:
      - name: DialogContext
        fullName: DialogContext
        uid: botbuilder-dialogs.DialogContext
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: botbuilder-dialogs.DialogSet
    name: DialogSet
    spec.typeScript:
      - name: DialogSet
        fullName: DialogSet
        uid: botbuilder-dialogs.DialogSet
  - uid: botbuilder-dialogs.DialogReason
    name: DialogReason
    spec.typeScript:
      - name: DialogReason
        fullName: DialogReason
        uid: botbuilder-dialogs.DialogReason
  - uid: 'botbuilder-dialogs.DialogInstance[]'
    name: 'DialogInstance[]'
    spec.typeScript:
      - name: DialogInstance
        fullName: DialogInstance
        uid: botbuilder-dialogs.DialogInstance
      - name: '[]'
        fullName: '[]'
  - uid: botbuilder-dialogs.DialogStateManager
    name: DialogStateManager
    spec.typeScript:
      - name: DialogStateManager
        fullName: DialogStateManager
        uid: botbuilder-dialogs.DialogStateManager
  - uid: Promise<botbuilder-dialogs.DialogTurnResult>
    name: DialogTurnResult>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: DialogTurnResult
        fullName: DialogTurnResult
        uid: botbuilder-dialogs.DialogTurnResult
      - name: '>'
        fullName: '>'
  - uid: botbuilder-dialogs.Dialog | undefined
    name: Dialog | undefined
    spec.typeScript:
      - name: Dialog
        fullName: Dialog
        uid: botbuilder-dialogs.Dialog
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: string | Partial<Activity> | botbuilder-dialogs.PromptOptions
    name: PromptOptions
    spec.typeScript:
      - name: 'string | Partial<Activity> | '
        fullName: 'string | Partial<Activity> | '
      - name: PromptOptions
        fullName: PromptOptions
        uid: botbuilder-dialogs.PromptOptions
  - uid: 'string | botbuilder-dialogs.Choice[]'
    name: 'Choice[]'
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - name: Choice
        fullName: Choice
        uid: botbuilder-dialogs.Choice
      - name: '[]'
        fullName: '[]'
