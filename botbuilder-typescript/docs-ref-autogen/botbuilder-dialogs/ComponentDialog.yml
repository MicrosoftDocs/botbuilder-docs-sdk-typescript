### YamlMime:TSType
name: ComponentDialog
uid: botbuilder-dialogs.ComponentDialog
package: botbuilder-dialogs
summary: Base class for a dialog that contains other child dialogs.
fullName: ComponentDialog<O>
remarks: >-
  Component dialogs let you break your bot's logic up into components that can
  themselves be added

  as a dialog to another `ComponentDialog` or `DialogSet`. Components can also
  be exported as part

  of a node package and used within other bots.


  To define a new component derive a class from ComponentDialog and add your
  child dialogs within

  the classes constructor:


  ```JavaScript

  const { ComponentDialog, WaterfallDialog, TextPrompt, NumberPrompt } =
  require('botbuilder-dialogs');


  class FillProfileDialog extends ComponentDialog {
      constructor(dialogId) {
          super(dialogId);

          // Add control flow dialogs
          this.addDialog(new WaterfallDialog('start', [
              async (step) => {
                  // Ask user their name
                  return await step.prompt('namePrompt', `What's your name?`);
              },
              async (step) => {
                  // Remember the users answer
                  step.values['name'] = step.result;

                  // Ask user their age.
                  return await step.prompt('agePrompt', `Hi ${step.values['name']}. How old are you?`);
              },
              async (step) => {
                  // Remember the users answer
                  step.values['age'] = step.result;

                  // End the component and return the completed profile.
                  return await step.endDialog(step.values);
              }
          ]));

          // Add prompts
          this.addDialog(new TextPrompt('namePrompt'));
          this.addDialog(new NumberPrompt('agePrompt'))
      }
  }

  module.exports.FillProfileDialog = FillProfileDialog;

  ```


  You can then add new instances of your component to another `DialogSet` or
  `ComponentDialog`:


  ```JavaScript

  const dialogs = new DialogSet(dialogState);

  dialogs.add(new FillProfileDialog('fillProfile'));

  ```
isDeprecated: false
type: class
constructors:
  - name: ComponentDialog<O>(string)
    uid: botbuilder-dialogs.ComponentDialog.constructor
    package: botbuilder-dialogs
    summary: >-
      Creates a new instance of the [Dialog](xref:botbuilder-dialogs.Dialog)
      class.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'new ComponentDialog(dialogId?: string)'
      parameters:
        - id: dialogId
          type: string
          description: Optional. unique ID of the dialog.
properties:
  - name: id
    uid: botbuilder-dialogs.ComponentDialog.id
    package: botbuilder-dialogs
    summary: Unique ID of the dialog.
    fullName: id
    remarks: ''
    isDeprecated: false
    syntax:
      content: string id
      return:
        description: The Id for the dialog.
        type: string
  - name: telemetryClient
    uid: botbuilder-dialogs.ComponentDialog.telemetryClient
    package: botbuilder-dialogs
    summary: Get the current telemetry client.
    fullName: telemetryClient
    remarks: ''
    isDeprecated: false
    syntax:
      content: BotTelemetryClient telemetryClient
      return:
        description: >-
          The [BotTelemetryClient](xref:botbuilder.BotTelemetryClient) to use
          for logging.
        type: BotTelemetryClient
inheritedProperties:
  - name: dialogs
    uid: botbuilder-dialogs.ComponentDialog.dialogs
    package: botbuilder-dialogs
    summary: The containers dialog set.
    fullName: dialogs
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'dialogs: DialogSet'
      return:
        description: ''
        type: <xref uid="botbuilder-dialogs.DialogSet" />
    inheritanceDescription: >-
      <b>Inherited From</b>
      [DialogContainer.dialogs](xref:botbuilder-dialogs.DialogContainer.dialogs)
  - name: EndOfTurn
    uid: botbuilder-dialogs.ComponentDialog.EndOfTurn
    package: botbuilder-dialogs
    summary: Gets a default end-of-turn result.
    fullName: EndOfTurn
    remarks: >-
      This result indicates that a dialog (or a logical step within a dialog)
      has completed

      processing for the current turn, is still active, and is waiting for more
      input.
    isDeprecated: false
    syntax:
      content: 'static EndOfTurn: DialogTurnResult<any>'
      return:
        description: ''
        type: <xref uid="botbuilder-dialogs.DialogTurnResult" />&lt;any&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [DialogContainer.EndOfTurn](xref:botbuilder-dialogs.DialogContainer.EndOfTurn)
inheritedMethods:
  - name: configure(Record<string, unknown>)
    uid: botbuilder-dialogs.ComponentDialog.configure
    package: botbuilder-dialogs
    summary: Fluent method for configuring the object.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function configure(config: Record<string, unknown>): ComponentDialog<O>'
      parameters:
        - id: config
          type: Record&lt;string, unknown&gt;
          description: Configuration settings to apply.
      return:
        description: >-
          The [Configurable](xref:botbuilder-dialogs.Configurable) after the
          operation is complete.
        type: <xref uid="botbuilder-dialogs.ComponentDialog" />&lt;O&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [DialogContainer.configure](xref:botbuilder-dialogs.DialogContainer.configure)
  - name: findDialog(string)
    uid: botbuilder-dialogs.ComponentDialog.findDialog
    package: botbuilder-dialogs
    summary: Finds a child dialog that was previously added to the container.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function findDialog(dialogId: string): undefined | Dialog<{}>'
      parameters:
        - id: dialogId
          type: string
          description: ID of the dialog to lookup.
      return:
        description: The Dialog if found; otherwise null.
        type: undefined | <xref uid="botbuilder-dialogs.Dialog" />&lt;{}&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [DialogContainer.findDialog](xref:botbuilder-dialogs.DialogContainer.findDialog)
  - name: getConverter(string)
    uid: botbuilder-dialogs.ComponentDialog.getConverter
    package: botbuilder-dialogs
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getConverter(_property: string): Converter<unknown, unknown> |
        ConverterFactory<unknown, unknown>
      parameters:
        - id: _property
          type: string
          description: The key of the conditional selector configuration.
      return:
        description: The converter for the selector configuration.
        type: >-
          <xref uid="botbuilder-dialogs.Converter" />&lt;unknown, unknown&gt; |
          <xref uid="botbuilder-dialogs.ConverterFactory" />&lt;unknown,
          unknown&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [DialogContainer.getConverter](xref:botbuilder-dialogs.DialogContainer.getConverter)
  - name: getVersion()
    uid: botbuilder-dialogs.ComponentDialog.getVersion
    package: botbuilder-dialogs
    summary: >-
      An encoded string used to aid in the detection of bot changes on
      re-deployment.
    remarks: >-
      This defaults to returning the dialogs [id](#id) but can be overridden to
      provide more

      precise change detection logic. Any dialog on the stack that has its
      version change will

      result in a `versionChanged` event will be raised. If this event is not
      handled by the bot,

      an error will be thrown resulting in the bots error handler logic being
      run.


      Returning an empty string will disable version tracking for the component
      all together.
    isDeprecated: false
    syntax:
      content: 'function getVersion(): string'
      return:
        description: >-
          Unique string which should only change when dialog has changed in a
          way that should restart the dialog.
        type: string
    inheritanceDescription: >-
      <b>Inherited From</b>
      [DialogContainer.getVersion](xref:botbuilder-dialogs.DialogContainer.getVersion)
  - name: onDialogEvent(DialogContext, DialogEvent)
    uid: botbuilder-dialogs.ComponentDialog.onDialogEvent
    package: botbuilder-dialogs
    summary: |-
      Called when an event has been raised, using `DialogContext.emitEvent()`,
      by either the current dialog or a dialog that the current dialog started.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function onDialogEvent(dc: DialogContext, e: DialogEvent):
        Promise<boolean>
      parameters:
        - id: dc
          type: <xref uid="botbuilder-dialogs.DialogContext" />
          description: The dialog context for the current turn of conversation.
        - id: e
          type: <xref uid="botbuilder-dialogs.DialogEvent" />
          description: The event being raised.
      return:
        description: >-
          True if the event is handled by the current dialog and bubbling should
          stop.
        type: Promise&lt;boolean&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [DialogContainer.onDialogEvent](xref:botbuilder-dialogs.DialogContainer.onDialogEvent)
methods:
  - name: addDialog(Dialog<{}>)
    uid: botbuilder-dialogs.ComponentDialog.addDialog
    package: botbuilder-dialogs
    summary: >-
      Adds a child [Dialog](xref:botbuilder-dialogs.Dialog) or prompt to the
      components internal [DialogSet](xref:botbuilder-dialogs.DialogSet).
    remarks: >-
      The [Dialog.id](xref:botbuilder-dialogs.Dialog.id) of the first child
      added to the component will be assigned to the initialDialogId property.
    isDeprecated: false
    syntax:
      content: 'function addDialog(dialog: Dialog<{}>): ComponentDialog<O>'
      parameters:
        - id: dialog
          type: <xref uid="botbuilder-dialogs.Dialog" />&lt;{}&gt;
          description: The child [Dialog](xref:botbuilder-dialogs.Dialog) or prompt to add.
      return:
        description: >-
          The [ComponentDialog](xref:botbuilder-dialogs.ComponentDialog) after
          the operation is complete.
        type: <xref uid="botbuilder-dialogs.ComponentDialog" />&lt;O&gt;
  - name: beginDialog(DialogContext, O)
    uid: botbuilder-dialogs.ComponentDialog.beginDialog
    package: botbuilder-dialogs
    summary: >-
      Called when the dialog is started and pushed onto the parent's dialog
      stack.

      By default, this calls the

      Dialog.BeginDialogAsync(DialogContext, object, CancellationToken) method

      of the component dialog's initial dialog, as defined by InitialDialogId.

      Override this method in a derived class to implement interrupt logic.
    remarks: >-
      If the task is successful, the result indicates whether the dialog is
      still

      active after the turn has been processed by the dialog.
    isDeprecated: false
    syntax:
      content: >-
        function beginDialog(outerDC: DialogContext, options?: O):
        Promise<DialogTurnResult<any>>
      parameters:
        - id: outerDC
          type: <xref uid="botbuilder-dialogs.DialogContext" />
          description: >-
            The parent [DialogContext](xref:botbuilder-dialogs.DialogContext)
            for the current turn of conversation.
        - id: options
          type: O
          description: Optional, initial information to pass to the dialog.
      return:
        description: A Promise representing the asynchronous operation.
        type: >-
          Promise&lt;<xref uid="botbuilder-dialogs.DialogTurnResult"
          />&lt;any&gt;&gt;
  - name: continueDialog(DialogContext)
    uid: botbuilder-dialogs.ComponentDialog.continueDialog
    package: botbuilder-dialogs
    summary: >-
      Called when the dialog is _continued_, where it is the active dialog and
      the

      user replies with a new [Activity](xref:botframework-schema.Activity).

      If this method is *not* overridden, the dialog automatically ends when the
      user replies.
    remarks: >-
      If the task is successful, the result indicates whether the dialog is
      still

      active after the turn has been processed by the dialog. The result may
      also contain a

      return value.
    isDeprecated: false
    syntax:
      content: >-
        function continueDialog(outerDC: DialogContext):
        Promise<DialogTurnResult<any>>
      parameters:
        - id: outerDC
          type: <xref uid="botbuilder-dialogs.DialogContext" />
          description: >-
            The parent [DialogContext](xref:botbuilder-dialogs.DialogContext)
            for the current turn of conversation.
      return:
        description: A Promise representing the asynchronous operation.
        type: >-
          Promise&lt;<xref uid="botbuilder-dialogs.DialogTurnResult"
          />&lt;any&gt;&gt;
  - name: createChildContext(DialogContext)
    uid: botbuilder-dialogs.ComponentDialog.createChildContext
    package: botbuilder-dialogs
    summary: Creates the inner dialog context
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function createChildContext(outerDC: DialogContext): DialogContext'
      parameters:
        - id: outerDC
          type: <xref uid="botbuilder-dialogs.DialogContext" />
          description: the outer dialog context
      return:
        description: The created Dialog Context.
        type: <xref uid="botbuilder-dialogs.DialogContext" />
  - name: endDialog(TurnContext, DialogInstance<any>, DialogReason)
    uid: botbuilder-dialogs.ComponentDialog.endDialog
    package: botbuilder-dialogs
    summary: Called when the [Dialog](xref:botbuilder-dialogs.Dialog) is ending.
    remarks: >-
      When this method is called from the parent dialog's context, the component
      [Dialog](xref:botbuilder-dialogs.Dialog)

      cancels all of the dialogs on its inner dialog stack before ending.
    isDeprecated: false
    syntax:
      content: >-
        function endDialog(context: TurnContext, instance: DialogInstance<any>,
        reason: DialogReason): Promise<void>
      parameters:
        - id: context
          type: TurnContext
          description: >-
            The [TurnContext](xref:botbuilder-core.TurnContext) object for this
            turn.
        - id: instance
          type: <xref uid="botbuilder-dialogs.DialogInstance" />&lt;any&gt;
          description: >-
            State information associated with the instance of this component

            [Dialog](xref:botbuilder-dialogs.Dialog) on its parent's dialog
            stack.
        - id: reason
          type: <xref uid="botbuilder-dialogs.DialogReason" />
          description: Reason why the [Dialog](xref:botbuilder-dialogs.Dialog) ended.
      return:
        description: A Promise representing the asynchronous operation.
        type: Promise&lt;void&gt;
  - name: repromptDialog(TurnContext, DialogInstance<any>)
    uid: botbuilder-dialogs.ComponentDialog.repromptDialog
    package: botbuilder-dialogs
    summary: Called when the dialog should re-prompt the user for input.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function repromptDialog(context: TurnContext, instance:
        DialogInstance<any>): Promise<void>
      parameters:
        - id: context
          type: TurnContext
          description: >-
            The [TurnContext](xref:botbuilder-core.TurnContext) object for this
            turn.
        - id: instance
          type: <xref uid="botbuilder-dialogs.DialogInstance" />&lt;any&gt;
          description: State information for this dialog.
      return:
        description: A Promise representing the asynchronous operation.
        type: Promise&lt;void&gt;
  - name: resumeDialog(DialogContext, DialogReason, any)
    uid: botbuilder-dialogs.ComponentDialog.resumeDialog
    package: botbuilder-dialogs
    summary: >-
      Called when a child dialog on the parent's dialog stack completed this
      turn, returning

      control to this dialog component.
    remarks: >-
      If the task is successful, the result indicates whether this dialog is
      still

      active after this dialog turn has been processed.

      Generally, the child dialog was started with a call to

      beginDialog(DialogContext, object) in the parent's

      context. However, if the DialogContext.replaceDialog(string, object)
      method

      is called, the logical child dialog may be different than the original.

      If this method is *not* overridden, the dialog automatically calls its

      RepromptDialog(ITurnContext, DialogInstance) when the user replies.
    isDeprecated: false
    syntax:
      content: >-
        function resumeDialog(outerDC: DialogContext, _reason: DialogReason,
        _result?: any): Promise<DialogTurnResult<any>>
      parameters:
        - id: outerDC
          type: <xref uid="botbuilder-dialogs.DialogContext" />
          description: >-
            The [DialogContext](xref:botbuilder-dialogs.DialogContext) for the
            current turn of conversation.
        - id: _reason
          type: <xref uid="botbuilder-dialogs.DialogReason" />
          description: Reason why the dialog resumed.
        - id: _result
          type: any
          description: |-
            Optional, value returned from the dialog that was called. The type
            of the value returned is dependent on the child dialog.
      return:
        description: A Promise representing the asynchronous operation.
        type: >-
          Promise&lt;<xref uid="botbuilder-dialogs.DialogTurnResult"
          />&lt;any&gt;&gt;
extends: <xref uid="botbuilder-dialogs.DialogContainer" />&lt;O&gt;
