### YamlMime:TSType
name: ComponentDialog
uid: botbuilder-dialogs.ComponentDialog
package: botbuilder-dialogs
summary: Base class for a dialog that contains other child dialogs.
fullName: ComponentDialog<O>
remarks: >-
  Component dialogs let you break your bot's logic up into components that can
  themselves be added

  as a dialog to another `ComponentDialog` or `DialogSet`. Components can also
  be exported as part

  of a node package and used within other bots.


  To define a new component derive a class from ComponentDialog and add your
  child dialogs within

  the classes constructor:


  ```JavaScript

  const { ComponentDialog, WaterfallDialog, TextPrompt, NumberPrompt } =
  require('botbuilder-dialogs');


  class FillProfileDialog extends ComponentDialog {
      constructor(dialogId) {
          super(dialogId);

          // Add control flow dialogs
          this.addDialog(new WaterfallDialog('start', [
              async (step) => {
                  // Ask user their name
                  return await step.prompt('namePrompt', `What's your name?`);
              },
              async (step) => {
                  // Remember the users answer
                  step.values['name'] = step.result;

                  // Ask user their age.
                  return await step.prompt('agePrompt', `Hi ${step.values['name']}. How old are you?`);
              },
              async (step) => {
                  // Remember the users answer
                  step.values['age'] = step.result;

                  // End the component and return the completed profile.
                  return await step.endDialog(step.values);
              }
          ]));

          // Add prompts
          this.addDialog(new TextPrompt('namePrompt'));
          this.addDialog(new NumberPrompt('agePrompt'))
      }
  }

  module.exports.FillProfileDialog = FillProfileDialog;

  ```


  You can then add new instances of your component to another `DialogSet` or
  `ComponentDialog`:


  ```JavaScript

  const dialogs = new DialogSet(dialogState);

  dialogs.add(new FillProfileDialog('fillProfile'));

  ```
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: ComponentDialog(string)
    uid: botbuilder-dialogs.ComponentDialog.constructor
    package: botbuilder-dialogs
    summary: >-
      Creates a new instance of the [Dialog](xref:botbuilder-dialogs.Dialog)
      class.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new ComponentDialog(dialogId?: string)'
      parameters:
        - id: dialogId
          type: string
          description: |
            Optional. unique ID of the dialog.
properties:
  - name: dialogs
    uid: botbuilder-dialogs.ComponentDialog.dialogs
    package: botbuilder-dialogs
    summary: The containers dialog set.
    fullName: dialogs
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public dialogs: DialogSet = new DialogSet(undefined)'
      return:
        type: <xref uid="botbuilder-dialogs.DialogSet" />
        description: ''
  - name: id
    uid: botbuilder-dialogs.ComponentDialog.id
    package: botbuilder-dialogs
    summary: Unique ID of the dialog.
    fullName: id
    remarks: This will be automatically generated if not specified.
    isPreview: false
    isDeprecated: false
    syntax:
      content: string id
      return:
        type: string
        description: ''
  - name: telemetryClient
    uid: botbuilder-dialogs.ComponentDialog.telemetryClient
    package: botbuilder-dialogs
    summary: |-
      Set the telemetry client, and also apply it to all child dialogs.
      Future dialogs added to the component will also inherit this client.
      Get the current telemetry client.
    fullName: telemetryClient
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: BotTelemetryClient telemetryClient
      return:
        type: BotTelemetryClient
        description: ''
methods:
  - name: addDialog(Dialog)
    uid: botbuilder-dialogs.ComponentDialog.addDialog
    package: botbuilder-dialogs
    summary: Adds a child dialog or prompt to the components internal `DialogSet`.
    remarks: >-
      The `Dialog.id` of the first child added to the component will be assigned
      to the [initialDialogId](#initialdialogid)

      property.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function addDialog(dialog: Dialog)'
      parameters:
        - id: dialog
          type: <xref uid="botbuilder-dialogs.Dialog" />
          description: |
            The child dialog or prompt to add.
      return:
        type: this
        description: ''
  - name: 'beginDialog(DialogContext, O)'
    uid: botbuilder-dialogs.ComponentDialog.beginDialog
    package: botbuilder-dialogs
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function beginDialog(outerDC: DialogContext, options?: O)'
      parameters:
        - id: outerDC
          type: <xref uid="botbuilder-dialogs.DialogContext" />
          description: ''
        - id: options
          type: O
          description: ''
      return:
        type: Promise&lt;<xref uid="botbuilder-dialogs.DialogTurnResult" />&gt;
        description: ''
  - name: configure(object)
    uid: botbuilder-dialogs.ComponentDialog.configure
    package: botbuilder-dialogs
    summary: Fluent method for configuring the object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function configure(config: object)'
      parameters:
        - id: config
          type: object
          description: |
            Configuration settings to apply.
      return:
        type: this
        description: ''
  - name: continueDialog(DialogContext)
    uid: botbuilder-dialogs.ComponentDialog.continueDialog
    package: botbuilder-dialogs
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function continueDialog(outerDC: DialogContext)'
      parameters:
        - id: outerDC
          type: <xref uid="botbuilder-dialogs.DialogContext" />
          description: ''
      return:
        type: Promise&lt;<xref uid="botbuilder-dialogs.DialogTurnResult" />&gt;
        description: ''
  - name: createChildContext(DialogContext)
    uid: botbuilder-dialogs.ComponentDialog.createChildContext
    package: botbuilder-dialogs
    summary: Creates the inner dialog context
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function createChildContext(outerDC: DialogContext)'
      parameters:
        - id: outerDC
          type: <xref uid="botbuilder-dialogs.DialogContext" />
          description: |
            the outer dialog context
      return:
        type: <xref uid="botbuilder-dialogs.DialogContext" />
        description: ''
  - name: 'endDialog(TurnContext, DialogInstance, DialogReason)'
    uid: botbuilder-dialogs.ComponentDialog.endDialog
    package: botbuilder-dialogs
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function endDialog(context: TurnContext, instance: DialogInstance,
        reason: DialogReason)
      parameters:
        - id: context
          type: TurnContext
          description: ''
        - id: instance
          type: <xref uid="botbuilder-dialogs.DialogInstance" />
          description: ''
        - id: reason
          type: <xref uid="botbuilder-dialogs.DialogReason" />
          description: ''
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: findDialog(string)
    uid: botbuilder-dialogs.ComponentDialog.findDialog
    package: botbuilder-dialogs
    summary: Finds a child dialog that was previously added to the container.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function findDialog(dialogId: string)'
      parameters:
        - id: dialogId
          type: string
          description: |
            ID of the dialog to lookup.
      return:
        type: <xref uid="botbuilder-dialogs.Dialog" /> | undefined
        description: ''
  - name: getVersion()
    uid: botbuilder-dialogs.ComponentDialog.getVersion
    package: botbuilder-dialogs
    summary: >-
      An encoded string used to aid in the detection of bot changes on
      re-deployment.
    remarks: >-
      This defaults to returning the dialogs [id](#id) but can be overridden to
      provide more

      precise change detection logic. Any dialog on the stack that has its
      version change will

      result in a `versionChanged` event will be raised. If this event is not
      handled by the bot,

      an error will be thrown resulting in the bots error handler logic being
      run.


      Returning an empty string will disable version tracking for the component
      all together.
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getVersion()
      return:
        type: string
        description: ''
  - name: 'onDialogEvent(DialogContext, DialogEvent)'
    uid: botbuilder-dialogs.ComponentDialog.onDialogEvent
    package: botbuilder-dialogs
    summary: |-
      Called when an event has been raised, using `DialogContext.emitEvent()`,
      by either the current dialog or a dialog that the current dialog started.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onDialogEvent(dc: DialogContext, e: DialogEvent)'
      parameters:
        - id: dc
          type: <xref uid="botbuilder-dialogs.DialogContext" />
          description: The dialog context for the current turn of conversation.
        - id: e
          type: <xref uid="botbuilder-dialogs.DialogEvent" />
          description: |
            The event being raised.
      return:
        type: Promise&lt;boolean&gt;
        description: ''
  - name: 'repromptDialog(TurnContext, DialogInstance)'
    uid: botbuilder-dialogs.ComponentDialog.repromptDialog
    package: botbuilder-dialogs
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function repromptDialog(context: TurnContext, instance: DialogInstance)'
      parameters:
        - id: context
          type: TurnContext
          description: ''
        - id: instance
          type: <xref uid="botbuilder-dialogs.DialogInstance" />
          description: ''
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: 'resumeDialog(DialogContext, DialogReason, any)'
    uid: botbuilder-dialogs.ComponentDialog.resumeDialog
    package: botbuilder-dialogs
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function resumeDialog(outerDC: DialogContext, reason: DialogReason,
        result?: any)
      parameters:
        - id: outerDC
          type: <xref uid="botbuilder-dialogs.DialogContext" />
          description: ''
        - id: reason
          type: <xref uid="botbuilder-dialogs.DialogReason" />
          description: ''
        - id: result
          type: any
          description: ''
      return:
        type: Promise&lt;<xref uid="botbuilder-dialogs.DialogTurnResult" />&gt;
        description: ''
extends: <xref uid="botbuilder-dialogs.DialogContainer" />&lt;O&gt;
