### YamlMime:TSType
name: SkillDialog
uid: botbuilder-dialogs.SkillDialog
package: botbuilder-dialogs
summary: A specialized Dialog that can wrap remote calls to a skill.
fullName: SkillDialog
remarks: >-
  The options parameter in beginDialog must be a BeginSkillDialogOptions
  instance

  with the initial parameters for the dialog.
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: 'SkillDialog(SkillDialogOptions, string)'
    uid: botbuilder-dialogs.SkillDialog.constructor
    package: botbuilder-dialogs
    summary: A sample dialog that can wrap remote calls to a skill.
    remarks: >-
      The options parameter in `beginDialog()` must be a `SkillDialogArgs`
      object with the initial parameters

      for the dialog.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new SkillDialog(dialogOptions: SkillDialogOptions, dialogId?: string)'
      parameters:
        - id: dialogOptions
          type: <xref uid="botbuilder-dialogs.SkillDialogOptions" />
          description: The options to execute the skill dialog.
        - id: dialogId
          type: string
          description: |
            The id of the dialog.
properties:
  - name: id
    uid: botbuilder-dialogs.SkillDialog.id
    package: botbuilder-dialogs
    summary: |-
      Unique ID of the dialog.
      Sets the unique ID of the dialog.
    fullName: id
    remarks: This will be automatically generated if not specified.
    isPreview: false
    isDeprecated: false
    syntax:
      content: string id
      return:
        description: The Id for the dialog.
        type: string
  - name: telemetryClient
    uid: botbuilder-dialogs.SkillDialog.telemetryClient
    package: botbuilder-dialogs
    summary: |-
      Gets the telemetry client for this dialog.
      Sets the telemetry client for this dialog.
    fullName: telemetryClient
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: BotTelemetryClient telemetryClient
      return:
        description: >-
          The [BotTelemetryClient](xref:botbuilder.BotTelemetryClient) to use
          for logging.
        type: BotTelemetryClient
inheritedProperties:
  - name: EndOfTurn
    uid: botbuilder-dialogs.SkillDialog.EndOfTurn
    package: botbuilder-dialogs
    summary: Gets a default end-of-turn result.
    fullName: EndOfTurn
    remarks: >-
      This result indicates that a dialog (or a logical step within a dialog)
      has completed

      processing for the current turn, is still active, and is waiting for more
      input.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static EndOfTurn: DialogTurnResult'
      return:
        description: ''
        type: <xref uid="botbuilder-dialogs.DialogTurnResult" />
    inheritanceDescription: >-
      <b>Inherited From</b>
      [Dialog.EndOfTurn](xref:botbuilder-dialogs.Dialog.EndOfTurn)
inheritedMethods:
  - name: 'configure(Record<string, unknown>)'
    uid: botbuilder-dialogs.SkillDialog.configure
    package: botbuilder-dialogs
    summary: Fluent method for configuring the object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function configure(config: Record<string, unknown>): this'
      parameters:
        - id: config
          type: 'Record&lt;string, unknown&gt;'
          description: Configuration settings to apply.
      return:
        description: >-
          The [Configurable](xref:botbuilder-dialogs.Configurable) after the
          operation is complete.
        type: this
    inheritanceDescription: >-
      <b>Inherited From</b>
      [Configurable.configure](xref:botbuilder-dialogs.Configurable.configure)
  - name: getConverter(string)
    uid: botbuilder-dialogs.SkillDialog.getConverter
    package: botbuilder-dialogs
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getConverter(_property: string): Converter | ConverterFactory'
      parameters:
        - id: _property
          type: string
          description: The key of the conditional selector configuration.
      return:
        description: The converter for the selector configuration.
        type: >-
          <xref uid="botbuilder-dialogs.Converter" /> | <xref
          uid="botbuilder-dialogs.ConverterFactory" />
    inheritanceDescription: >-
      <b>Inherited From</b>
      [Configurable.getConverter](xref:botbuilder-dialogs.Configurable.getConverter)
  - name: getVersion()
    uid: botbuilder-dialogs.SkillDialog.getVersion
    package: botbuilder-dialogs
    summary: >-
      An encoded string used to aid in the detection of bot changes on
      re-deployment.
    remarks: >-
      This defaults to returning the dialogs [id](#id) but can be overridden to
      provide more

      precise change detection logic. Any dialog on the stack that has its
      version change will

      result in a `versionChanged` event will be raised. If this event is not
      handled by the bot,

      an error will be thrown resulting in the bots error handler logic being
      run.


      Returning an empty string will disable version tracking for the component
      all together.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getVersion(): string'
      return:
        description: >-
          Unique string which should only change when dialog has changed in a
          way that should restart the dialog.
        type: string
    inheritanceDescription: >-
      <b>Inherited From</b>
      [Dialog.getVersion](xref:botbuilder-dialogs.Dialog.getVersion)
  - name: 'onDialogEvent(DialogContext, DialogEvent)'
    uid: botbuilder-dialogs.SkillDialog.onDialogEvent
    package: botbuilder-dialogs
    summary: >-
      Called when an event has been raised, using `DialogContext.emitEvent()`,
      by either the current dialog or a dialog that the current dialog started.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function onDialogEvent(dc: DialogContext, e: DialogEvent):
        Promise<boolean>
      parameters:
        - id: dc
          type: <xref uid="botbuilder-dialogs.DialogContext" />
          description: The dialog context for the current turn of conversation.
        - id: e
          type: <xref uid="botbuilder-dialogs.DialogEvent" />
          description: The event being raised.
      return:
        description: >-
          True if the event is handled by the current dialog and bubbling should
          stop.
        type: Promise&lt;boolean&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [Dialog.onDialogEvent](xref:botbuilder-dialogs.Dialog.onDialogEvent)
methods:
  - name: 'beginDialog(DialogContext, BeginSkillDialogOptions)'
    uid: botbuilder-dialogs.SkillDialog.beginDialog
    package: botbuilder-dialogs
    summary: Called when the skill dialog is started and pushed onto the dialog stack.
    remarks: >-
      If the task is successful, the result indicates whether the dialog is
      still active after the turn has been processed by the dialog.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDialog(dc: DialogContext, options:
        BeginSkillDialogOptions): Promise<DialogTurnResult>
      parameters:
        - id: dc
          type: <xref uid="botbuilder-dialogs.DialogContext" />
          description: >-
            The [DialogContext](xref:botbuilder-dialogs.DialogContext) for the
            current turn of conversation.
        - id: options
          type: <xref uid="botbuilder-dialogs.BeginSkillDialogOptions" />
          description: Initial information to pass to the dialog.
      return:
        description: A Promise representing the asynchronous operation.
        type: Promise&lt;<xref uid="botbuilder-dialogs.DialogTurnResult" />&gt;
  - name: continueDialog(DialogContext)
    uid: botbuilder-dialogs.SkillDialog.continueDialog
    package: botbuilder-dialogs
    summary: >-
      Called when the skill dialog is _continued_, where it is the active dialog
      and the

      user replies with a new [Activity](xref:botframework-schema.Activity).
    remarks: >-
      If the task is successful, the result indicates whether the dialog is
      still

      active after the turn has been processed by the dialog. The result may
      also contain a

      return value.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function continueDialog(dc: DialogContext): Promise<DialogTurnResult>'
      parameters:
        - id: dc
          type: <xref uid="botbuilder-dialogs.DialogContext" />
          description: >-
            The [DialogContext](xref:botbuilder-dialogs.DialogContext) for the
            current turn of conversation.
      return:
        description: A Promise representing the asynchronous operation.
        type: Promise&lt;<xref uid="botbuilder-dialogs.DialogTurnResult" />&gt;
  - name: 'endDialog(TurnContext, DialogInstance, DialogReason)'
    uid: botbuilder-dialogs.SkillDialog.endDialog
    package: botbuilder-dialogs
    summary: Called when the skill dialog is ending.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function endDialog(context: TurnContext, instance: DialogInstance,
        reason: DialogReason): Promise<void>
      parameters:
        - id: context
          type: TurnContext
          description: >-
            The [TurnContext](xref:botbuilder-core.TurnContext) object for this
            turn.
        - id: instance
          type: <xref uid="botbuilder-dialogs.DialogInstance" />
          description: >-
            State information associated with the instance of this dialog on the
            dialog stack.
        - id: reason
          type: <xref uid="botbuilder-dialogs.DialogReason" />
          description: '(xref:botbuilder-dialogs.DialogReason) why the dialog ended.'
      return:
        description: A Promise representing the asynchronous operation.
        type: Promise&lt;void&gt;
  - name: 'repromptDialog(TurnContext, DialogInstance)'
    uid: botbuilder-dialogs.SkillDialog.repromptDialog
    package: botbuilder-dialogs
    summary: Called when the skill dialog should re-prompt the user for input.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function repromptDialog(context: TurnContext, instance: DialogInstance):
        Promise<void>
      parameters:
        - id: context
          type: TurnContext
          description: >-
            The [TurnContext](xref:botbuilder-core.TurnContext) object for this
            turn.
        - id: instance
          type: <xref uid="botbuilder-dialogs.DialogInstance" />
          description: State information for this dialog.
      return:
        description: A Promise representing the asynchronous operation.
        type: Promise&lt;void&gt;
  - name: 'resumeDialog(DialogContext, DialogReason, any)'
    uid: botbuilder-dialogs.SkillDialog.resumeDialog
    package: botbuilder-dialogs
    summary: >-
      Called when a child skill dialog completed its turn, returning control to
      this dialog.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function resumeDialog(dc: DialogContext, _reason: DialogReason,
        _result?: any): Promise<DialogTurnResult>
      parameters:
        - id: dc
          type: <xref uid="botbuilder-dialogs.DialogContext" />
          description: >-
            The [DialogContext](xref:botbuilder-dialogs.DialogContext) for the
            current turn of the conversation.
        - id: _reason
          type: <xref uid="botbuilder-dialogs.DialogReason" />
          description: '(xref:botbuilder-dialogs.DialogReason) why the dialog resumed.'
        - id: _result
          type: any
          description: |-
            Optional, value returned from the dialog that was called. The type
            of the value returned is dependent on the child dialog.
      return:
        description: A Promise representing the asynchronous operation.
        type: Promise&lt;<xref uid="botbuilder-dialogs.DialogTurnResult" />&gt;
extends: >-
  <xref uid="botbuilder-dialogs.Dialog" />&lt;Partial&lt;<xref
  uid="botbuilder-dialogs.BeginSkillDialogOptions" />&gt;&gt;
