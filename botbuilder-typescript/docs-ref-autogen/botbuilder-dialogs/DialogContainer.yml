### YamlMime:TSType
name: DialogContainer
uid: botbuilder-dialogs.DialogContainer
package: botbuilder-dialogs
summary: A container for a set of Dialogs.
fullName: DialogContainer<O>
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: DialogContainer(string)
    uid: botbuilder-dialogs.DialogContainer.constructor
    package: botbuilder-dialogs
    summary: >-
      Creates a new instance of the [Dialog](xref:botbuilder-dialogs.Dialog)
      class.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new DialogContainer(dialogId?: string)'
      parameters:
        - id: dialogId
          type: string
          description: |
            Optional. unique ID of the dialog.
properties:
  - name: dialogs
    uid: botbuilder-dialogs.DialogContainer.dialogs
    package: botbuilder-dialogs
    summary: The containers dialog set.
    fullName: dialogs
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'dialogs: DialogSet'
      return:
        description: ''
        type: <xref uid="botbuilder-dialogs.DialogSet" />
  - name: id
    uid: botbuilder-dialogs.DialogContainer.id
    package: botbuilder-dialogs
    summary: |-
      Unique ID of the dialog.
      Sets the unique ID of the dialog.
    fullName: id
    remarks: This will be automatically generated if not specified.
    isPreview: false
    isDeprecated: false
    syntax:
      content: string id
      return:
        description: The Id for the dialog.
        type: string
  - name: telemetryClient
    uid: botbuilder-dialogs.DialogContainer.telemetryClient
    package: botbuilder-dialogs
    summary: |-
      Set the telemetry client, and also apply it to all child dialogs.
      Future dialogs added to the component will also inherit this client.
      Get the current telemetry client.
    fullName: telemetryClient
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: BotTelemetryClient telemetryClient
      return:
        description: >-
          The [BotTelemetryClient](xref:botbuilder.BotTelemetryClient) to use
          for logging.
        type: BotTelemetryClient
inheritedProperties:
  - name: EndOfTurn
    uid: botbuilder-dialogs.DialogContainer.EndOfTurn
    package: botbuilder-dialogs
    summary: Gets a default end-of-turn result.
    fullName: EndOfTurn
    remarks: >-
      This result indicates that a dialog (or a logical step within a dialog)
      has completed

      processing for the current turn, is still active, and is waiting for more
      input.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static EndOfTurn: DialogTurnResult'
      return:
        description: ''
        type: <xref uid="botbuilder-dialogs.DialogTurnResult" />
    inheritanceDescription: >-
      <b>Inherited From</b>
      [Dialog.EndOfTurn](xref:botbuilder-dialogs.Dialog.EndOfTurn)
inheritedMethods:
  - name: 'beginDialog(DialogContext, O)'
    uid: botbuilder-dialogs.DialogContainer.beginDialog
    package: botbuilder-dialogs
    summary: 'When overridden in a derived class, starts the dialog.'
    remarks: >-
      Derived dialogs must override this method.


      The [DialogContext](xref:botbuilder-dialogs.DialogContext) calls this
      method when it creates

      a new [DialogInstance](xref:botbuilder-dialogs.DialogInstance) for this
      dialog, pushes it

      onto the dialog stack, and starts the dialog.


      A dialog that represents a single-turn conversation should await

      [DialogContext.endDialog](xref:botbuilder-dialogs.DialogContext.endDialog)
      before exiting this method.


      **See also**

      -
      [DialogContext.beginDialog](xref:botbuilder-dialogs.DialogContext.beginDialog)

      -
      [DialogContext.replaceDialog](xref:botbuilder-dialogs.DialogContext.replaceDialog)
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDialog(dc: DialogContext, options?: O):
        Promise<DialogTurnResult>
      parameters:
        - id: dc
          type: <xref uid="botbuilder-dialogs.DialogContext" />
          description: The context for the current dialog turn.
        - id: options
          type: O
          description: |
            Optional. Arguments to use when the dialog starts.
      return:
        description: ''
        type: Promise&lt;<xref uid="botbuilder-dialogs.DialogTurnResult" />&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [Dialog.beginDialog](xref:botbuilder-dialogs.Dialog.beginDialog)
  - name: 'configure(Record<string, unknown>)'
    uid: botbuilder-dialogs.DialogContainer.configure
    package: botbuilder-dialogs
    summary: Fluent method for configuring the object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function configure(config: Record<string, unknown>): this'
      parameters:
        - id: config
          type: 'Record&lt;string, unknown&gt;'
          description: Configuration settings to apply.
      return:
        description: >-
          The [Configurable](xref:botbuilder-dialogs.Configurable) after the
          operation is complete.
        type: this
    inheritanceDescription: >-
      <b>Inherited From</b>
      [Configurable.configure](xref:botbuilder-dialogs.Configurable.configure)
  - name: continueDialog(DialogContext)
    uid: botbuilder-dialogs.DialogContainer.continueDialog
    package: botbuilder-dialogs
    summary: 'When overridden in a derived class, continues the dialog.'
    remarks: >-
      Derived dialogs that support multiple-turn conversations should override
      this method.

      By default, this method signals that the dialog is complete and returns.


      The [DialogContext](xref:botbuilder-dialogs.DialogContext) calls this
      method when it continues

      the dialog.


      To signal to the dialog context that this dialog has completed, await

      [DialogContext.endDialog](xref:botbuilder-dialogs.DialogContext.endDialog)
      before exiting this method.


      **See also**

      -
      [DialogContext.continueDialog](xref:botbuilder-dialogs.DialogContext.continueDialog)
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function continueDialog(dc: DialogContext): Promise<DialogTurnResult>'
      parameters:
        - id: dc
          type: <xref uid="botbuilder-dialogs.DialogContext" />
          description: |
            The context for the current dialog turn.
      return:
        description: A promise resolving to the dialog turn result.
        type: Promise&lt;<xref uid="botbuilder-dialogs.DialogTurnResult" />&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [Dialog.continueDialog](xref:botbuilder-dialogs.Dialog.continueDialog)
  - name: 'endDialog(TurnContext, DialogInstance, DialogReason)'
    uid: botbuilder-dialogs.DialogContainer.endDialog
    package: botbuilder-dialogs
    summary: >-
      When overridden in a derived class, performs clean up for the dialog
      before it ends.
    remarks: >-
      Derived dialogs that need to perform logging or cleanup before ending
      should override this method.

      By default, this method has no effect.


      The [DialogContext](xref:botbuilder-dialogs.DialogContext) calls this
      method when the current

      dialog is ending.


      **See also**

      -
      [DialogContext.cancelAllDialogs](xref:botbuilder-dialogs.DialogContext.cancelAllDialogs)

      -
      [DialogContext.endDialog](xref:botbuilder-dialogs.DialogContext.endDialog)

      -
      [DialogContext.replaceDialog](xref:botbuilder-dialogs.DialogContext.replaceDialog)
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function endDialog(_context: TurnContext, _instance: DialogInstance,
        _reason: DialogReason): Promise<void>
      parameters:
        - id: _context
          type: TurnContext
          description: The context object for the turn.
        - id: _instance
          type: <xref uid="botbuilder-dialogs.DialogInstance" />
          description: Current state information for this dialog.
        - id: _reason
          type: <xref uid="botbuilder-dialogs.DialogReason" />
          description: |
            The reason the dialog is ending.
      return:
        description: ''
        type: Promise&lt;void&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [Dialog.endDialog](xref:botbuilder-dialogs.Dialog.endDialog)
  - name: getConverter(string)
    uid: botbuilder-dialogs.DialogContainer.getConverter
    package: botbuilder-dialogs
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getConverter(_property: string): Converter | ConverterFactory'
      parameters:
        - id: _property
          type: string
          description: The key of the conditional selector configuration.
      return:
        description: The converter for the selector configuration.
        type: >-
          <xref uid="botbuilder-dialogs.Converter" /> | <xref
          uid="botbuilder-dialogs.ConverterFactory" />
    inheritanceDescription: >-
      <b>Inherited From</b>
      [Configurable.getConverter](xref:botbuilder-dialogs.Configurable.getConverter)
  - name: getVersion()
    uid: botbuilder-dialogs.DialogContainer.getVersion
    package: botbuilder-dialogs
    summary: >-
      An encoded string used to aid in the detection of bot changes on
      re-deployment.
    remarks: >-
      This defaults to returning the dialogs [id](#id) but can be overridden to
      provide more

      precise change detection logic. Any dialog on the stack that has its
      version change will

      result in a `versionChanged` event will be raised. If this event is not
      handled by the bot,

      an error will be thrown resulting in the bots error handler logic being
      run.


      Returning an empty string will disable version tracking for the component
      all together.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getVersion(): string'
      return:
        description: >-
          Unique string which should only change when dialog has changed in a
          way that should restart the dialog.
        type: string
    inheritanceDescription: >-
      <b>Inherited From</b>
      [Dialog.getVersion](xref:botbuilder-dialogs.Dialog.getVersion)
  - name: 'repromptDialog(TurnContext, DialogInstance)'
    uid: botbuilder-dialogs.DialogContainer.repromptDialog
    package: botbuilder-dialogs
    summary: 'When overridden in a derived class, reprompts the user for input.'
    remarks: >-
      Derived dialogs that support validation and re-prompt logic should
      override this method.

      By default, this method has no effect.


      The [DialogContext](xref:botbuilder-dialogs.DialogContext) calls this
      method when the current

      dialog should re-request input from the user. This method is implemented
      for prompt dialogs.


      **See also**

      -
      [DialogContext.repromptDialog](xref:botbuilder-dialogs.DialogContext.repromptDialog)

      - [Prompt](xref:botbuilder-dialogs.Prompt)
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function repromptDialog(_context: TurnContext, _instance:
        DialogInstance): Promise<void>
      parameters:
        - id: _context
          type: TurnContext
          description: The context object for the turn.
        - id: _instance
          type: <xref uid="botbuilder-dialogs.DialogInstance" />
          description: |
            Current state information for this dialog.
      return:
        description: ''
        type: Promise&lt;void&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [Dialog.repromptDialog](xref:botbuilder-dialogs.Dialog.repromptDialog)
  - name: 'resumeDialog(DialogContext, DialogReason, any)'
    uid: botbuilder-dialogs.DialogContainer.resumeDialog
    package: botbuilder-dialogs
    summary: >-
      When overridden in a derived class, resumes the dialog after the dialog
      above it on the stack completes.
    remarks: >-
      Derived dialogs that support multiple-turn conversations should override
      this method.

      By default, this method signals that the dialog is complete and returns.


      The [DialogContext](xref:botbuilder-dialogs.DialogContext) calls this
      method when it resumes

      the dialog. If the previous dialog on the stack returned a value, that
      value is in the `result`

      parameter.


      To start a _child_ dialog, use
      [DialogContext.beginDialog](xref:botbuilder-dialogs.DialogContext.beginDialog)

      or [DialogContext.prompt](xref:botbuilder-dialogs.DialogContext.prompt);
      however, this dialog will not

      necessarily be the one that started the child dialog.

      To signal to the dialog context that this dialog has completed, await

      [DialogContext.endDialog](xref:botbuilder-dialogs.DialogContext.endDialog)
      before exiting this method.


      **See also**

      -
      [DialogContext.endDialog](xref:botbuilder-dialogs.DialogContext.endDialog)
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function resumeDialog(dc: DialogContext, reason: DialogReason, result?:
        any): Promise<DialogTurnResult>
      parameters:
        - id: dc
          type: <xref uid="botbuilder-dialogs.DialogContext" />
          description: The context for the current dialog turn.
        - id: reason
          type: <xref uid="botbuilder-dialogs.DialogReason" />
          description: |-
            The reason the dialog is resuming. This will typically be
                 [DialogReason.endCalled](xref:botbuilder-dialogs.DialogReason.endCalled)
        - id: result
          type: any
          description: |
            Optional. The return value, if any, from the dialog that ended.
      return:
        description: A promise resolving to the dialog turn result.
        type: Promise&lt;<xref uid="botbuilder-dialogs.DialogTurnResult" />&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [Dialog.resumeDialog](xref:botbuilder-dialogs.Dialog.resumeDialog)
methods:
  - name: createChildContext(DialogContext)
    uid: botbuilder-dialogs.DialogContainer.createChildContext
    package: botbuilder-dialogs
    summary: Creates an inner dialog context for the containers active child.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createChildContext(dc: DialogContext): DialogContext |
        undefined
      parameters:
        - id: dc
          type: <xref uid="botbuilder-dialogs.DialogContext" />
          description: Parents dialog context.
      return:
        description: >-
          A new dialog context for the active child or `undefined` if there is
          no active child.
        type: <xref uid="botbuilder-dialogs.DialogContext" /> | undefined
  - name: findDialog(string)
    uid: botbuilder-dialogs.DialogContainer.findDialog
    package: botbuilder-dialogs
    summary: Finds a child dialog that was previously added to the container.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function findDialog(dialogId: string): Dialog | undefined'
      parameters:
        - id: dialogId
          type: string
          description: ID of the dialog to lookup.
      return:
        description: The Dialog if found; otherwise null.
        type: <xref uid="botbuilder-dialogs.Dialog" /> | undefined
  - name: 'onDialogEvent(DialogContext, DialogEvent)'
    uid: botbuilder-dialogs.DialogContainer.onDialogEvent
    package: botbuilder-dialogs
    summary: |-
      Called when an event has been raised, using `DialogContext.emitEvent()`,
      by either the current dialog or a dialog that the current dialog started.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function onDialogEvent(dc: DialogContext, e: DialogEvent):
        Promise<boolean>
      parameters:
        - id: dc
          type: <xref uid="botbuilder-dialogs.DialogContext" />
          description: The dialog context for the current turn of conversation.
        - id: e
          type: <xref uid="botbuilder-dialogs.DialogEvent" />
          description: The event being raised.
      return:
        description: >-
          True if the event is handled by the current dialog and bubbling should
          stop.
        type: Promise&lt;boolean&gt;
extends: <xref uid="botbuilder-dialogs.Dialog" />&lt;O&gt;
