### YamlMime:TSType
name: DialogManager
uid: botbuilder-dialogs.DialogManager
package: botbuilder-dialogs
summary: Class which runs the dialog system.
fullName: DialogManager
remarks: ''
isPreview: false
isDeprecated: true
customDeprecatedMessage: This class will be deprecated.
type: class
constructors:
  - name: 'DialogManager(Dialog, string)'
    uid: botbuilder-dialogs.DialogManager.constructor
    package: botbuilder-dialogs
    summary: >-
      Creates an instance of the
      [DialogSet](xref:botbuilder-dialogs.DialogManager) class.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new DialogManager(rootDialog?: Dialog, dialogStateProperty?: string)'
      parameters:
        - id: rootDialog
          type: <xref uid="botbuilder-dialogs.Dialog" />
          description: 'Optional, root [Dialog](xref:botbuilder-dialogs.Dialog) to use.'
        - id: dialogStateProperty
          type: string
          description: >
            Optional, alternate name for the dialogState property. (Default is
            "DialogStateProperty")
properties:
  - name: conversationState
    uid: botbuilder-dialogs.DialogManager.conversationState
    package: botbuilder-dialogs
    summary: Bots persisted conversation state.
    fullName: conversationState
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'conversationState: ConversationState'
      return:
        description: ''
        type: ConversationState
  - name: dialogs
    uid: botbuilder-dialogs.DialogManager.dialogs
    package: botbuilder-dialogs
    summary: Global dialogs that you want to have be callable.
    fullName: dialogs
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'dialogs: DialogSet'
      return:
        description: ''
        type: <xref uid="botbuilder-dialogs.DialogSet" />
  - name: expireAfter
    uid: botbuilder-dialogs.DialogManager.expireAfter
    package: botbuilder-dialogs
    summary: >-
      Optional. Number of milliseconds to expire the bots conversation state
      after.
    fullName: expireAfter
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'expireAfter?: number'
      return:
        description: ''
        type: number
  - name: initialTurnState
    uid: botbuilder-dialogs.DialogManager.initialTurnState
    package: botbuilder-dialogs
    summary: >-
      Values that will be copied to the `TurnContext.turnState` at the beginning
      of each turn.
    fullName: initialTurnState
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: TurnContextStateCollection initialTurnState
      return:
        description: The turn state collection.
        type: TurnContextStateCollection
  - name: rootDialog
    uid: botbuilder-dialogs.DialogManager.rootDialog
    package: botbuilder-dialogs
    summary: |-
      Root dialog to start from [onTurn()](#onturn) method.
      Gets the root [Dialog](xref:botbuilder-dialogs.Dialog) ID.
    fullName: rootDialog
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: Dialog rootDialog
      return:
        description: 'The root [Dialog](xref:botbuilder-dialogs.Dialog) ID.'
        type: <xref uid="botbuilder-dialogs.Dialog" />
  - name: stateConfiguration
    uid: botbuilder-dialogs.DialogManager.stateConfiguration
    package: botbuilder-dialogs
    summary: >-
      Optional. Path resolvers and memory scopes used for conversations with the
      bot.
    fullName: stateConfiguration
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'stateConfiguration?: DialogStateManagerConfiguration'
      return:
        description: ''
        type: <xref uid="botbuilder-dialogs.DialogStateManagerConfiguration" />
  - name: userState
    uid: botbuilder-dialogs.DialogManager.userState
    package: botbuilder-dialogs
    summary: Optional. Bots persisted user state.
    fullName: userState
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'userState?: UserState'
      return:
        description: ''
        type: UserState
inheritedMethods:
  - name: getConverter(string)
    uid: botbuilder-dialogs.DialogManager.getConverter
    package: botbuilder-dialogs
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getConverter(_property: string): Converter | ConverterFactory'
      parameters:
        - id: _property
          type: string
          description: The key of the conditional selector configuration.
      return:
        description: The converter for the selector configuration.
        type: >-
          <xref uid="botbuilder-dialogs.Converter" /> | <xref
          uid="botbuilder-dialogs.ConverterFactory" />
    inheritanceDescription: >-
      <b>Inherited From</b>
      [Configurable.getConverter](xref:botbuilder-dialogs.Configurable.getConverter)
methods:
  - name: configure(Partial<DialogManagerConfiguration>)
    uid: botbuilder-dialogs.DialogManager.configure
    package: botbuilder-dialogs
    summary: Set configuration settings.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function configure(config: Partial<DialogManagerConfiguration>): this'
      parameters:
        - id: config
          type: >-
            Partial&lt;<xref uid="botbuilder-dialogs.DialogManagerConfiguration"
            />&gt;
          description: Configuration settings to apply.
      return:
        description: >-
          The cofigured [DialogManager](xref:botbuilder-dialogs.DialogManager)
          context.
        type: this
  - name: onTurn(TurnContext)
    uid: botbuilder-dialogs.DialogManager.onTurn
    package: botbuilder-dialogs
    summary: >-
      Runs dialog system in the context of a
      [TurnContext](xref:botbuilder-core.TurnContext).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onTurn(context: TurnContext): Promise<DialogManagerResult>'
      parameters:
        - id: context
          type: TurnContext
          description: >-
            (xref:botbuilder-core.TurnContext) for the current turn of
            conversation with the user.
      return:
        description: Result of running the logic against the activity.
        type: Promise&lt;<xref uid="botbuilder-dialogs.DialogManagerResult" />&gt;
extends: <xref uid="botbuilder-dialogs.Configurable" />
