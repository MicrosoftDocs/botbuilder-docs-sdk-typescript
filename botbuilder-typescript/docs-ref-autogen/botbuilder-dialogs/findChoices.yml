### YamlMime:UniversalReference
items:
  - uid: botbuilder-dialogs.findChoices
    name: findChoices
    children: []
    type: function
    langs:
      - typeScript
    summary: Mid-level search function for recognizing a choice in an utterance.
    syntax:
      content: >-
        function findChoices(utterance: string, choices: string | Choice[],
        options?: FindChoicesOptions)
      parameters:
        - id: utterance
          type:
            - string
          description: >-
            The text or user utterance to search over. For an incoming 'message'
            activity you can simply use `context.activity.text`.
        - id: choices
          type:
            - 'string | botbuilder-dialogs.Choice[]'
          description: List of choices to search over.
        - id: options
          type:
            - botbuilder-dialogs.FindChoicesOptions
          description: |
            (Optional) options used to tweak the search that's performed.
          optional: true
      return:
        type:
          - 'botbuilder-dialogs.ModelResult<botbuilder-dialogs.FoundChoice>[]'
    package: botbuilder-dialogs
    remarks: >-
      This function is layered above `findValues()` and simply determines all of
      the synonyms that

      should be searched for before calling `findValues()` to perform the actual
      search. The

      `recognizeChoices()` function is layered above this function and adds the
      ability to select a

      choice by index or ordinal position in the list. Calling this particular
      function is useful

      when you don't want the index and ordinal position recognition done by
      `recognizeChoices()`.


      ```JavaScript

      const { findChoices } = require('botbuilder-choices');


      const choices = ['red', 'green', 'blue'];

      const utterance = context.activity.text;

      const results = findChoices(utterance, choices);

      if (results.length == 1) {
          await context.sendActivity(`I like ${results[0].resolution.value} too!`);
      } else if (results.length > 1) {
          const ambiguous = results.map((r) => r.resolution.value);
          await context.sendActivity(ChoiceFactory.forChannel(context, ambiguous, `Which one?`));
      } else {
          await context.sendActivity(ChoiceFactory.forChannel(context, choices, `I didn't get that... Which color?`));
      }

      ```
references:
  - uid: 'string | botbuilder-dialogs.Choice[]'
    name: 'Choice[]'
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - name: Choice
        fullName: Choice
        uid: botbuilder-dialogs.Choice
      - name: '[]'
        fullName: '[]'
  - uid: botbuilder-dialogs.FindChoicesOptions
    name: FindChoicesOptions
    spec.typeScript:
      - name: FindChoicesOptions
        fullName: FindChoicesOptions
        uid: botbuilder-dialogs.FindChoicesOptions
  - uid: 'botbuilder-dialogs.ModelResult<botbuilder-dialogs.FoundChoice>[]'
    name: 'FoundChoice>[]'
    spec.typeScript:
      - name: ModelResult
        fullName: ModelResult
        uid: botbuilder-dialogs.ModelResult
      - name: <
        fullName: <
      - name: FoundChoice
        fullName: FoundChoice
        uid: botbuilder-dialogs.FoundChoice
      - name: '>[]'
        fullName: '>[]'
