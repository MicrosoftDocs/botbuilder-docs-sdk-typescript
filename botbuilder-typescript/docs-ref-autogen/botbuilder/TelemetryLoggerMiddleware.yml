### YamlMime:TSType
name: TelemetryLoggerMiddleware
uid: botbuilder.TelemetryLoggerMiddleware
package: botbuilder
summary: >-
  Middleware for logging incoming, outgoing, updated or deleted Activity
  messages.

  Uses the botTelemetryClient interface.
fullName: TelemetryLoggerMiddleware
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: TelemetryLoggerMiddleware(BotTelemetryClient, boolean)
    uid: botbuilder.TelemetryLoggerMiddleware.constructor
    package: botbuilder
    summary: Initializes a new instance of the TelemetryLoggerMiddleware class.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new TelemetryLoggerMiddleware(telemetryClient: BotTelemetryClient,
        logPersonalInformation?: boolean)
      parameters:
        - id: telemetryClient
          type: <xref uid="botbuilder.BotTelemetryClient" />
          description: The BotTelemetryClient used for logging.
        - id: logPersonalInformation
          type: boolean
          description: >-
            (Optional) Enable/Disable logging original message name within
            Application Insights.
properties:
  - name: botMsgDeleteEvent
    uid: botbuilder.TelemetryLoggerMiddleware.botMsgDeleteEvent
    package: botbuilder
    summary: The name of the event when a message is deleted by the bot.
    fullName: botMsgDeleteEvent
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static botMsgDeleteEvent: string'
      return:
        description: ''
        type: string
  - name: botMsgReceiveEvent
    uid: botbuilder.TelemetryLoggerMiddleware.botMsgReceiveEvent
    package: botbuilder
    summary: The name of the event when when new message is received from the user.
    fullName: botMsgReceiveEvent
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static botMsgReceiveEvent: string'
      return:
        description: ''
        type: string
  - name: botMsgSendEvent
    uid: botbuilder.TelemetryLoggerMiddleware.botMsgSendEvent
    package: botbuilder
    summary: The name of the event when a message is updated by the bot.
    fullName: botMsgSendEvent
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static botMsgSendEvent: string'
      return:
        description: ''
        type: string
  - name: botMsgUpdateEvent
    uid: botbuilder.TelemetryLoggerMiddleware.botMsgUpdateEvent
    package: botbuilder
    summary: The name of the event when a message is updated by the bot.
    fullName: botMsgUpdateEvent
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static botMsgUpdateEvent: string'
      return:
        description: ''
        type: string
  - name: logPersonalInformation
    uid: botbuilder.TelemetryLoggerMiddleware.logPersonalInformation
    package: botbuilder
    summary: >-
      Gets a value indicating whether to log personal information that came from
      the user.
    fullName: logPersonalInformation
    remarks: ''
    isDeprecated: false
    syntax:
      content: boolean logPersonalInformation
      return:
        description: A value indicating whether to log personal information or not.
        type: boolean
  - name: telemetryClient
    uid: botbuilder.TelemetryLoggerMiddleware.telemetryClient
    package: botbuilder
    summary: Gets the currently configured botTelemetryClient that logs the events.
    fullName: telemetryClient
    remarks: ''
    isDeprecated: false
    syntax:
      content: BotTelemetryClient telemetryClient
      return:
        description: >-
          The currently configured
          [BotTelemetryClient](xref:botbuilder-core.BotTelemetryClient) that
          logs the events.
        type: <xref uid="botbuilder.BotTelemetryClient" />
methods:
  - name: onTurn(TurnContext, () => Promise<void>)
    uid: botbuilder.TelemetryLoggerMiddleware.onTurn
    package: botbuilder
    summary: >-
      Logs events based on incoming and outgoing activities using the
      botTelemetryClient class.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function onTurn(context: TurnContext, next: () => Promise<void>):
        Promise<void>
      parameters:
        - id: context
          type: <xref uid="botbuilder.TurnContext" />
          description: The context object for this turn.
        - id: next
          type: () =&gt; Promise&lt;void&gt;
          description: The delegate to call to continue the bot middleware pipeline
      return:
        description: ''
        type: Promise&lt;void&gt;
