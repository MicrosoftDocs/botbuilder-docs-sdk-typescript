### YamlMime:TSType
name: BotFrameworkAdapter
uid: botbuilder.BotFrameworkAdapter
package: botbuilder
summary: >-
  A [BotAdapter](xref:botbuilder-core.BotAdapter) that can connect a bot to a
  service endpoint.

  Implements [IUserTokenProvider](xref:botbuilder-core.IUserTokenProvider).
fullName: BotFrameworkAdapter
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: BotFrameworkAdapter(Partial<BotFrameworkAdapterSettings>)
    uid: botbuilder.BotFrameworkAdapter.constructor
    package: botbuilder
    summary: >-
      Creates a new instance of the
      [BotFrameworkAdapter](xref:botbuilder.BotFrameworkAdapter) class.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new BotFrameworkAdapter(settings?: Partial<BotFrameworkAdapterSettings>)'
      parameters:
        - id: settings
          type: Partial&lt;<xref uid="botbuilder.BotFrameworkAdapterSettings" />&gt;
          description: |
            Optional. The settings to use for this adapter instance.
properties:
  - name: BotIdentityKey
    uid: botbuilder.BotFrameworkAdapter.BotIdentityKey
    package: botbuilder
    summary: ''
    fullName: BotIdentityKey
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'BotIdentityKey: Symbol'
      return:
        type: Symbol
        description: ''
  - name: ConnectorClientKey
    uid: botbuilder.BotFrameworkAdapter.ConnectorClientKey
    package: botbuilder
    summary: ''
    fullName: ConnectorClientKey
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public ConnectorClientKey: Symbol = Symbol(''ConnectorClient'')'
      return:
        type: Symbol
        description: ''
  - name: isStreamingConnectionOpen
    uid: botbuilder.BotFrameworkAdapter.isStreamingConnectionOpen
    package: botbuilder
    summary: >-
      Used in streaming contexts to check if the streaming connection is still
      open for the bot to send activities.
    fullName: isStreamingConnectionOpen
    isPreview: false
    isDeprecated: false
    syntax:
      content: boolean isStreamingConnectionOpen
      return:
        type: boolean
        description: ''
  - name: OAuthScopeKey
    uid: botbuilder.BotFrameworkAdapter.OAuthScopeKey
    package: botbuilder
    summary: ''
    fullName: OAuthScopeKey
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'OAuthScopeKey: Symbol'
      return:
        type: Symbol
        description: ''
  - name: onTurnError
    uid: botbuilder.BotFrameworkAdapter.onTurnError
    package: botbuilder
    summary: >-
      Gets or sets an error handler that can catch exceptions in the middleware
      or application.
    fullName: onTurnError
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onTurnError: (context: TurnContext, error: Error) => Promise<void>'
      return:
        type: '(context: TurnContext, error: Error) =&gt; Promise&lt;void&gt;'
        description: ''
  - name: TokenApiClientCredentialsKey
    uid: botbuilder.BotFrameworkAdapter.TokenApiClientCredentialsKey
    package: botbuilder
    summary: ''
    fullName: TokenApiClientCredentialsKey
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        public TokenApiClientCredentialsKey: Symbol =
        Symbol('TokenApiClientCredentials')
      return:
        type: Symbol
        description: ''
methods:
  - name: >-
      continueConversation(Partial<ConversationReference>, (context:
      TurnContext) => Promise<void>)
    uid: botbuilder.BotFrameworkAdapter.continueConversation
    package: botbuilder
    summary: >-
      Asynchronously resumes a conversation with a user, possibly after some
      time has gone by.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function continueConversation(reference: Partial<ConversationReference>,
        logic: (context: TurnContext) => Promise<void>)
      parameters:
        - id: reference
          type: Partial&lt;ConversationReference&gt;
          description: A reference to the conversation to continue.
        - id: logic
          type: '(context: TurnContext) =&gt; Promise&lt;void&gt;'
          description: |
            The asynchronous method to call after the adapter middleware runs.
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: >-
      continueConversation(Partial<ConversationReference>, string, (context:
      TurnContext) => Promise<void>)
    uid: botbuilder.BotFrameworkAdapter.continueConversation_1
    package: botbuilder
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function continueConversation(reference: Partial<ConversationReference>,
        oAuthScope: string, logic: (context: TurnContext) => Promise<void>)
      parameters:
        - id: reference
          type: Partial&lt;ConversationReference&gt;
          description: ''
        - id: oAuthScope
          type: string
          description: ''
        - id: logic
          type: '(context: TurnContext) =&gt; Promise&lt;void&gt;'
          description: ''
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: createConnectorClient(string)
    uid: botbuilder.BotFrameworkAdapter.createConnectorClient
    package: botbuilder
    summary: Creates a connector client.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function createConnectorClient(serviceUrl: string)'
      parameters:
        - id: serviceUrl
          type: string
          description: |
            The client's service URL.
      return:
        type: ConnectorClient
        description: ''
  - name: 'createConnectorClientWithIdentity(string, ClaimsIdentity)'
    uid: botbuilder.BotFrameworkAdapter.createConnectorClientWithIdentity
    package: botbuilder
    summary: Create a ConnectorClient with a ClaimsIdentity.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createConnectorClientWithIdentity(serviceUrl: string, identity:
        ClaimsIdentity)
      parameters:
        - id: serviceUrl
          type: string
          description: ''
        - id: identity
          type: ClaimsIdentity
          description: |
            ClaimsIdentity
      return:
        type: Promise&lt;ConnectorClient&gt;
        description: ''
  - name: 'createConnectorClientWithIdentity(string, ClaimsIdentity, string)'
    uid: botbuilder.BotFrameworkAdapter.createConnectorClientWithIdentity_1
    package: botbuilder
    summary: Create a ConnectorClient with a ClaimsIdentity and an explicit audience.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createConnectorClientWithIdentity(serviceUrl: string, identity:
        ClaimsIdentity, audience: string)
      parameters:
        - id: serviceUrl
          type: string
          description: ''
        - id: identity
          type: ClaimsIdentity
          description: ClaimsIdentity
        - id: audience
          type: string
          description: >
            The recipient of the ConnectorClient's messages. Normally the Bot
            Framework Channel Service or the AppId of another bot.
      return:
        type: Promise&lt;ConnectorClient&gt;
        description: ''
  - name: >-
      createConversation(Partial<ConversationReference>, (context: TurnContext)
      => Promise<void>)
    uid: botbuilder.BotFrameworkAdapter.createConversation
    package: botbuilder
    summary: Asynchronously creates and starts a conversation with a user on a channel.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createConversation(reference: Partial<ConversationReference>,
        logic?: (context: TurnContext) => Promise<void>)
      parameters:
        - id: reference
          type: Partial&lt;ConversationReference&gt;
          description: A reference for the conversation to create.
        - id: logic
          type: '(context: TurnContext) =&gt; Promise&lt;void&gt;'
          description: |
            The asynchronous method to call after the adapter middleware runs.
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: 'deleteActivity(TurnContext, Partial<ConversationReference>)'
    uid: botbuilder.BotFrameworkAdapter.deleteActivity
    package: botbuilder
    summary: >
      Asynchronously deletes an existing activity.

      This interface supports the framework and is not intended to be called
      directly for your code.

      Use
      [TurnContext.deleteActivity](xref:botbuilder-core.TurnContext.deleteActivity)
      to delete

      an activity from your bot code.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteActivity(context: TurnContext, reference:
        Partial<ConversationReference>)
      parameters:
        - id: context
          type: TurnContext
          description: The context object for the turn.
        - id: reference
          type: Partial&lt;ConversationReference&gt;
          description: |
            Conversation reference information for the activity to delete.
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: 'deleteConversationMember(TurnContext, string)'
    uid: botbuilder.BotFrameworkAdapter.deleteConversationMember
    package: botbuilder
    summary: Asynchronously removes a member from the current conversation.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteConversationMember(context: TurnContext, memberId:
        string)
      parameters:
        - id: context
          type: TurnContext
          description: The context object for the turn.
        - id: memberId
          type: string
          description: |
            The ID of the member to remove from the conversation.
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: 'emulateOAuthCards(TurnContext | string, boolean)'
    uid: botbuilder.BotFrameworkAdapter.emulateOAuthCards
    package: botbuilder
    summary: >
      Asynchronously sends an emulated OAuth card for a channel.

      This method supports the framework and is not intended to be called
      directly for your code.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function emulateOAuthCards(contextOrServiceUrl: TurnContext | string,
        emulate: boolean)
      parameters:
        - id: contextOrServiceUrl
          type: TurnContext | string
          description: The URL of the emulator.
        - id: emulate
          type: boolean
          description: >
            `true` to send an emulated OAuth card to the emulator; or `false` to
            not send the card.
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: >-
      exchangeToken(TurnContext, string, string, TokenExchangeRequest,
      CoreAppCredentials)
    uid: botbuilder.BotFrameworkAdapter.exchangeToken
    package: botbuilder
    summary: >-
      Asynchronously Performs a token exchange operation such as for single
      sign-on.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function exchangeToken(context: TurnContext, connectionName: string,
        userId: string, tokenExchangeRequest: TokenExchangeRequest,
        appCredentials?: CoreAppCredentials)
      parameters:
        - id: context
          type: TurnContext
          description: Context for the current turn of conversation with the user.
        - id: connectionName
          type: string
          description: Name of the auth connection to use.
        - id: userId
          type: string
          description: The user id that will be associated with the token.
        - id: tokenExchangeRequest
          type: TokenExchangeRequest
          description: >
            The exchange request details, either a token to exchange or a uri to
            exchange.
        - id: appCredentials
          type: CoreAppCredentials
          description: ''
      return:
        type: Promise&lt;TokenResponse&gt;
        description: ''
  - name: 'getAadTokens(TurnContext, string, string[])'
    uid: botbuilder.BotFrameworkAdapter.getAadTokens
    package: botbuilder
    summary: Asynchronously signs out the user from the token server.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAadTokens(context: TurnContext, connectionName: string,
        resourceUrls: string[])
      parameters:
        - id: context
          type: TurnContext
          description: The context object for the turn.
        - id: connectionName
          type: string
          description: The name of the auth connection to use.
        - id: resourceUrls
          type: 'string[]'
          description: The list of resource URLs to retrieve tokens for.
      return:
        type: 'Promise&lt;[key: string]: TokenResponse&gt;'
        description: >-
          A map of the [TokenResponse](xref:botframework-schema.TokenResponse)
          objects by resource URL.
  - name: 'getAadTokens(TurnContext, string, string[], CoreAppCredentials)'
    uid: botbuilder.BotFrameworkAdapter.getAadTokens_1
    package: botbuilder
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAadTokens(context: TurnContext, connectionName: string,
        resourceUrls: string[], oAuthAppCredentials?: CoreAppCredentials)
      parameters:
        - id: context
          type: TurnContext
          description: ''
        - id: connectionName
          type: string
          description: ''
        - id: resourceUrls
          type: 'string[]'
          description: ''
        - id: oAuthAppCredentials
          type: CoreAppCredentials
          description: ''
      return:
        type: 'Promise&lt;[key: string]: TokenResponse&gt;'
        description: ''
  - name: 'getActivityMembers(TurnContext, string)'
    uid: botbuilder.BotFrameworkAdapter.getActivityMembers
    package: botbuilder
    summary: Asynchronously lists the members of a given activity.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getActivityMembers(context: TurnContext, activityId?: string)'
      parameters:
        - id: context
          type: TurnContext
          description: The context object for the turn.
        - id: activityId
          type: string
          description: >
            Optional. The ID of the activity to get the members of. If not
            specified, the current activity ID is used.
      return:
        type: 'Promise&lt;ChannelAccount[]&gt;'
        description: >-
          An array of [ChannelAccount](xref:botframework-schema.ChannelAccount)
          objects for

          the users involved in a given activity.
  - name: getConversationMembers(TurnContext)
    uid: botbuilder.BotFrameworkAdapter.getConversationMembers
    package: botbuilder
    summary: Asynchronously lists the members of the current conversation.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getConversationMembers(context: TurnContext)'
      parameters:
        - id: context
          type: TurnContext
          description: |
            The context object for the turn.
      return:
        type: 'Promise&lt;ChannelAccount[]&gt;'
        description: >-
          An array of [ChannelAccount](xref:botframework-schema.ChannelAccount)
          objects for

          all users currently involved in a conversation.
  - name: 'getConversations(TurnContext | string, string)'
    uid: botbuilder.BotFrameworkAdapter.getConversations
    package: botbuilder
    summary: >-
      For the specified channel, asynchronously gets a page of the conversations
      in which this bot has participated.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getConversations(contextOrServiceUrl: TurnContext | string,
        continuationToken?: string)
      parameters:
        - id: contextOrServiceUrl
          type: TurnContext | string
          description: >-
            The URL of the channel server to query or a

            [TurnContext](xref:botbuilder-core.TurnContext) object from a
            conversation on the channel.
        - id: continuationToken
          type: string
          description: >
            Optional. The continuation token from the previous page of results.

            Omit this parameter or use `undefined` to retrieve the first page of
            results.
      return:
        type: Promise&lt;ConversationsResult&gt;
        description: >-
          A [ConversationsResult](xref:botframework-schema.ConversationsResult)
          object containing a page of results

          and a continuation token.
  - name: 'getSignInLink(TurnContext, string, AppCredentials, string, string)'
    uid: botbuilder.BotFrameworkAdapter.getSignInLink
    package: botbuilder
    summary: >-
      Asynchronously gets a sign-in link from the token server that can be sent
      as part

      of a [SigninCard](xref:botframework-schema.SigninCard).
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSignInLink(context: TurnContext, connectionName: string,
        oAuthAppCredentials?: AppCredentials, userId?: string, finalRedirect?:
        string)
      parameters:
        - id: context
          type: TurnContext
          description: The context object for the turn.
        - id: connectionName
          type: string
          description: The name of the auth connection to use.
        - id: oAuthAppCredentials
          type: AppCredentials
          description: AppCredentials for OAuth.
        - id: userId
          type: string
          description: The user id that will be associated with the token.
        - id: finalRedirect
          type: string
          description: |
            The final URL that the OAuth flow will redirect to.
      return:
        type: Promise&lt;string&gt;
        description: ''
  - name: 'getSignInLink(TurnContext, string, CoreAppCredentials, string, string)'
    uid: botbuilder.BotFrameworkAdapter.getSignInLink_1
    package: botbuilder
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSignInLink(context: TurnContext, connectionName: string,
        oAuthAppCredentials?: CoreAppCredentials, userId?: string,
        finalRedirect?: string)
      parameters:
        - id: context
          type: TurnContext
          description: ''
        - id: connectionName
          type: string
          description: ''
        - id: oAuthAppCredentials
          type: CoreAppCredentials
          description: ''
        - id: userId
          type: string
          description: ''
        - id: finalRedirect
          type: string
          description: ''
      return:
        type: Promise&lt;string&gt;
        description: ''
  - name: 'getSignInResource(TurnContext, string, string, string, CoreAppCredentials)'
    uid: botbuilder.BotFrameworkAdapter.getSignInResource
    package: botbuilder
    summary: >-
      Asynchronously Get the raw signin resource to be sent to the user for
      signin.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSignInResource(context: TurnContext, connectionName: string,
        userId?: string, finalRedirect?: string, appCredentials?:
        CoreAppCredentials)
      parameters:
        - id: context
          type: TurnContext
          description: The context object for the turn.
        - id: connectionName
          type: string
          description: The name of the auth connection to use.
        - id: userId
          type: string
          description: The user id that will be associated with the token.
        - id: finalRedirect
          type: string
          description: |
            The final URL that the OAuth flow will redirect to.
        - id: appCredentials
          type: CoreAppCredentials
          description: ''
      return:
        type: Promise&lt;SignInUrlResponse&gt;
        description: >-
          The
          [BotSignInGetSignInResourceResponse](xref:botframework-connector.BotSignInGetSignInResourceResponse)
          object.
  - name: 'getTokenStatus(TurnContext, string, string)'
    uid: botbuilder.BotFrameworkAdapter.getTokenStatus
    package: botbuilder
    summary: >-
      Asynchronously retrieves the token status for each configured connection
      for the given user.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getTokenStatus(context: TurnContext, userId?: string,
        includeFilter?: string)
      parameters:
        - id: context
          type: TurnContext
          description: The context object for the turn.
        - id: userId
          type: string
          description: >-
            Optional. If present, the ID of the user to retrieve the token
            status for.
                 Otherwise, the ID of the user who sent the current activity is used.
        - id: includeFilter
          type: string
          description: >-
            Optional. A comma-separated list of connection's to include. If
            present,
                 the `includeFilter` parameter limits the tokens this method returns.
      return:
        type: 'Promise&lt;TokenStatus[]&gt;'
        description: >-
          The [TokenStatus](xref:botframework-connector.TokenStatus) objects
          retrieved.
  - name: 'getTokenStatus(TurnContext, string, string, CoreAppCredentials)'
    uid: botbuilder.BotFrameworkAdapter.getTokenStatus_1
    package: botbuilder
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getTokenStatus(context: TurnContext, userId?: string,
        includeFilter?: string, oAuthAppCredentials?: CoreAppCredentials)
      parameters:
        - id: context
          type: TurnContext
          description: ''
        - id: userId
          type: string
          description: ''
        - id: includeFilter
          type: string
          description: ''
        - id: oAuthAppCredentials
          type: CoreAppCredentials
          description: ''
      return:
        type: 'Promise&lt;TokenStatus[]&gt;'
        description: ''
  - name: 'getUserToken(TurnContext, string, string)'
    uid: botbuilder.BotFrameworkAdapter.getUserToken
    package: botbuilder
    summary: >-
      Asynchronously attempts to retrieve the token for a user that's in a login
      flow.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getUserToken(context: TurnContext, connectionName: string,
        magicCode?: string)
      parameters:
        - id: context
          type: TurnContext
          description: The context object for the turn.
        - id: connectionName
          type: string
          description: The name of the auth connection to use.
        - id: magicCode
          type: string
          description: Optional. The validation code the user entered.
      return:
        type: Promise&lt;TokenResponse&gt;
        description: >-
          A [TokenResponse](xref:botframework-schema.TokenResponse) object that
          contains the user token.
  - name: 'getUserToken(TurnContext, string, string, CoreAppCredentials)'
    uid: botbuilder.BotFrameworkAdapter.getUserToken_1
    package: botbuilder
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getUserToken(context: TurnContext, connectionName: string,
        magicCode?: string, oAuthAppCredentials?: CoreAppCredentials)
      parameters:
        - id: context
          type: TurnContext
          description: ''
        - id: connectionName
          type: string
          description: ''
        - id: magicCode
          type: string
          description: ''
        - id: oAuthAppCredentials
          type: CoreAppCredentials
          description: ''
      return:
        type: Promise&lt;TokenResponse&gt;
        description: ''
  - name: healthCheck(TurnContext)
    uid: botbuilder.BotFrameworkAdapter.healthCheck
    package: botbuilder
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function healthCheck(context: TurnContext)'
      parameters:
        - id: context
          type: TurnContext
          description: ''
      return:
        type: Promise&lt;HealthCheckResponse&gt;
        description: ''
  - name: >-
      processActivity(WebRequest, WebResponse, (context: TurnContext) =>
      Promise<any>)
    uid: botbuilder.BotFrameworkAdapter.processActivity
    package: botbuilder
    summary: >-
      Asynchronously creates a turn context and runs the middleware pipeline for
      an incoming activity.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function processActivity(req: WebRequest, res: WebResponse, logic:
        (context: TurnContext) => Promise<any>)
      parameters:
        - id: req
          type: <xref uid="botbuilder.WebRequest" />
          description: An Express or Restify style request object.
        - id: res
          type: <xref uid="botbuilder.WebResponse" />
          description: An Express or Restify style response object.
        - id: logic
          type: '(context: TurnContext) =&gt; Promise&lt;any&gt;'
          description: |
            The function to call at the end of the middleware pipeline.
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: 'processActivityDirect(Activity, (context: TurnContext) => Promise<any>)'
    uid: botbuilder.BotFrameworkAdapter.processActivityDirect
    package: botbuilder
    summary: >-
      Asynchronously creates a turn context and runs the middleware pipeline for
      an incoming activity.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function processActivityDirect(activity: Activity, logic: (context:
        TurnContext) => Promise<any>)
      parameters:
        - id: activity
          type: Activity
          description: The activity to process.
        - id: logic
          type: '(context: TurnContext) =&gt; Promise&lt;any&gt;'
          description: |
            The function to call at the end of the middleware pipeline.
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: processRequest(IReceiveRequest)
    uid: botbuilder.BotFrameworkAdapter.processRequest
    package: botbuilder
    summary: >-
      Checks the validity of the request and attempts to map it the correct
      virtual endpoint,

      then generates and returns a response if appropriate.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function processRequest(request: IReceiveRequest)'
      parameters:
        - id: request
          type: IReceiveRequest
          description: A ReceiveRequest from the connected channel.
      return:
        type: Promise&lt;StreamingResponse&gt;
        description: >-
          A response created by the BotAdapter to be sent to the client that
          originated the request.
  - name: 'sendActivities(TurnContext, Partial<Activity>[])'
    uid: botbuilder.BotFrameworkAdapter.sendActivities
    package: botbuilder
    summary: >
      Asynchronously sends a set of outgoing activities to a channel server.

      This method supports the framework and is not intended to be called
      directly for your code.

      Use the turn context's
      [sendActivity](xref:botbuilder-core.TurnContext.sendActivity) or

      [sendActivities](xref:botbuilder-core.TurnContext.sendActivities) method
      from your bot code.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function sendActivities(context: TurnContext, activities:
        Partial<Activity>[])
      parameters:
        - id: context
          type: TurnContext
          description: The context object for the turn.
        - id: activities
          type: 'Partial&lt;Activity&gt;[]'
          description: |
            The activities to send.
      return:
        type: 'Promise&lt;ResourceResponse[]&gt;'
        description: 'An array of [ResourceResponse](xref:)'
  - name: 'signOutUser(TurnContext, string, string)'
    uid: botbuilder.BotFrameworkAdapter.signOutUser
    package: botbuilder
    summary: Asynchronously signs out the user from the token server.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function signOutUser(context: TurnContext, connectionName?: string,
        userId?: string)
      parameters:
        - id: context
          type: TurnContext
          description: The context object for the turn.
        - id: connectionName
          type: string
          description: The name of the auth connection to use.
        - id: userId
          type: string
          description: The ID of user to sign out.
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: 'signOutUser(TurnContext, string, string, CoreAppCredentials)'
    uid: botbuilder.BotFrameworkAdapter.signOutUser_1
    package: botbuilder
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function signOutUser(context: TurnContext, connectionName?: string,
        userId?: string, oAuthAppCredentials?: CoreAppCredentials)
      parameters:
        - id: context
          type: TurnContext
          description: ''
        - id: connectionName
          type: string
          description: ''
        - id: userId
          type: string
          description: ''
        - id: oAuthAppCredentials
          type: CoreAppCredentials
          description: ''
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: 'updateActivity(TurnContext, Partial<Activity>)'
    uid: botbuilder.BotFrameworkAdapter.updateActivity
    package: botbuilder
    summary: >
      Asynchronously replaces a previous activity with an updated version.

      This interface supports the framework and is not intended to be called
      directly for your code.

      Use
      [TurnContext.updateActivity](xref:botbuilder-core.TurnContext.updateActivity)
      to update

      an activity from your bot code.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updateActivity(context: TurnContext, activity:
        Partial<Activity>)
      parameters:
        - id: context
          type: TurnContext
          description: The context object for the turn.
        - id: activity
          type: Partial&lt;Activity&gt;
          description: |
            The updated version of the activity to replace.
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: >-
      use((context: TurnContext, next: () => Promise<void>) => Promise<void> |
      Middleware[])
    uid: botbuilder.BotFrameworkAdapter.use
    package: botbuilder
    summary: Adds middleware to the adapter's pipeline.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function use(middleware: (context: TurnContext, next: () =>
        Promise<void>) => Promise<void> | Middleware[])
      parameters:
        - id: middleware
          type: >-
            (context: TurnContext, next: () =&gt; Promise&lt;void&gt;) =&gt;
            Promise&lt;void&gt; | Middleware[]
          description: |
            The middleware or middleware handlers to add.
      return:
        type: this
        description: ''
  - name: 'useNamedPipe((context: TurnContext) => Promise<any>, string)'
    uid: botbuilder.BotFrameworkAdapter.useNamedPipe
    package: botbuilder
    summary: >-
      Connects the handler to a Named Pipe server and begins listening for
      incoming requests.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function useNamedPipe(logic: (context: TurnContext) => Promise<any>,
        pipeName: string)
      parameters:
        - id: logic
          type: '(context: TurnContext) =&gt; Promise&lt;any&gt;'
          description: |
            The logic that will handle incoming requests.
        - id: pipeName
          type: string
          description: The name of the named pipe to use when creating the server.
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: >-
      useWebSocket(WebRequest, INodeSocket, INodeBuffer, (context: TurnContext)
      => Promise<any>)
    uid: botbuilder.BotFrameworkAdapter.useWebSocket
    package: botbuilder
    summary: >-
      Process the initial request to establish a long lived connection via a
      streaming server.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function useWebSocket(req: WebRequest, socket: INodeSocket, head:
        INodeBuffer, logic: (context: TurnContext) => Promise<any>)
      parameters:
        - id: req
          type: <xref uid="botbuilder.WebRequest" />
          description: The connection request.
        - id: socket
          type: INodeSocket
          description: >-
            The raw socket connection between the bot (server) and
            channel/caller (client).
        - id: head
          type: INodeBuffer
          description: The first packet of the upgraded stream.
        - id: logic
          type: '(context: TurnContext) =&gt; Promise&lt;any&gt;'
          description: >
            The logic that handles incoming streaming requests for the lifetime
            of the WebSocket connection.
      return:
        type: Promise&lt;void&gt;
        description: ''
extends: BotAdapter
