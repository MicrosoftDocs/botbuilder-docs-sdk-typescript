### YamlMime:UniversalReference
items:
  - uid: botbuilder.BotFrameworkAdapter
    name: BotFrameworkAdapter
    fullName: BotFrameworkAdapter
    children:
      - botbuilder.BotFrameworkAdapter.constructor
      - botbuilder.BotFrameworkAdapter.BotIdentityKey
      - botbuilder.BotFrameworkAdapter.ConnectorClientKey
      - botbuilder.BotFrameworkAdapter.continueConversation
      - botbuilder.BotFrameworkAdapter.createConnectorClient
      - botbuilder.BotFrameworkAdapter.createConnectorClientWithIdentity
      - botbuilder.BotFrameworkAdapter.createConversation
      - botbuilder.BotFrameworkAdapter.deleteActivity
      - botbuilder.BotFrameworkAdapter.deleteConversationMember
      - botbuilder.BotFrameworkAdapter.emulateOAuthCards
      - botbuilder.BotFrameworkAdapter.getAadTokens
      - botbuilder.BotFrameworkAdapter.getActivityMembers
      - botbuilder.BotFrameworkAdapter.getConversationMembers
      - botbuilder.BotFrameworkAdapter.getConversations
      - botbuilder.BotFrameworkAdapter.getSignInLink
      - botbuilder.BotFrameworkAdapter.getTokenStatus
      - botbuilder.BotFrameworkAdapter.getUserToken
      - botbuilder.BotFrameworkAdapter.onTurnError
      - botbuilder.BotFrameworkAdapter.processActivity
      - botbuilder.BotFrameworkAdapter.processActivityDirect
      - botbuilder.BotFrameworkAdapter.processRequest
      - botbuilder.BotFrameworkAdapter.sendActivities
      - botbuilder.BotFrameworkAdapter.signOutUser
      - botbuilder.BotFrameworkAdapter.updateActivity
      - botbuilder.BotFrameworkAdapter.use
      - botbuilder.BotFrameworkAdapter.useNamedPipe
      - botbuilder.BotFrameworkAdapter.useWebSocket
    langs:
      - typeScript
    type: class
    summary: >-
      A [BotAdapter](xref:botbuilder-core.BotAdapter) that can connect a bot to
      a service endpoint.

      Implements [IUserTokenProvider](xref:botbuilder-core.IUserTokenProvider).
    extends:
      name: BotAdapter
    package: botbuilder
    remarks: >-
      The bot adapter encapsulates authentication processes and sends activities
      to and receives

      activities from the Bot Connector Service. When your bot receives an
      activity, the adapter

      creates a turn context object, passes it to your bot application logic,
      and sends responses

      back to the user's channel.


      The adapter processes and directs incoming activities in through the bot
      middleware pipeline to

      your bot logic and then back out again. As each activity flows in and out
      of the bot, each

      piece of middleware can inspect or act upon the activity, both before and
      after the bot logic runs.

      Use the [use](xref:botbuilder-core.BotAdapter.use) method to add
      [Middleware](xref:botbuilder-core.Middleware)

      objects to your adapter's middleware collection.


      For more information, see the articles on

      [How bots
      work](https://docs.microsoft.com/azure/bot-service/bot-builder-basics) and

      [Middleware](https://docs.microsoft.com/azure/bot-service/bot-builder-concept-middleware).


      For example:

      ```JavaScript

      const { BotFrameworkAdapter } = require('botbuilder');


      const adapter = new BotFrameworkAdapter({
          appId: process.env.MicrosoftAppId,
          appPassword: process.env.MicrosoftAppPassword
      });


      adapter.onTurnError = async (context, error) => {
          // Catch-all logic for errors.
      };

      ```
  - uid: botbuilder.BotFrameworkAdapter.constructor
    name: BotFrameworkAdapter(Partial<BotFrameworkAdapterSettings>)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: >-
      Creates a new instance of the
      [BotFrameworkAdapter](xref:botbuilder.BotFrameworkAdapter) class.
    syntax:
      content: 'new BotFrameworkAdapter(settings?: Partial<BotFrameworkAdapterSettings>)'
      parameters:
        - id: settings
          type:
            - Partial<botbuilder.BotFrameworkAdapterSettings>
          description: |
            Optional. The settings to use for this adapter instance.
          optional: true
    package: botbuilder
    remarks: >-
      If the `settings` parameter does not include

      [channelService](xref:botbuilder.BotFrameworkAdapterSettings.channelService)
      or

      [openIdMetadata](xref:botbuilder.BotFrameworkAdapterSettings.openIdMetadata)
      values, the

      constructor checks the process' environment variables for these values.
      These values may be

      set when a bot is provisioned on Azure and if so are required for the bot
      to work properly

      in the global cloud or in a national cloud.


      The
      [BotFrameworkAdapterSettings](xref:botbuilder.BotFrameworkAdapterSettings)
      class defines

      the available adapter settings.
  - uid: botbuilder.BotFrameworkAdapter.BotIdentityKey
    name: BotIdentityKey
    fullName: BotIdentityKey
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'BotIdentityKey: Symbol'
      return:
        type:
          - Symbol
        description: ''
    package: botbuilder
  - uid: botbuilder.BotFrameworkAdapter.ConnectorClientKey
    name: ConnectorClientKey
    fullName: ConnectorClientKey
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'ConnectorClientKey: Symbol'
      return:
        type:
          - Symbol
        description: ''
    package: botbuilder
  - uid: botbuilder.BotFrameworkAdapter.continueConversation
    name: >-
      continueConversation(Partial<ConversationReference>, (context:
      TurnContext) => Promise<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Asynchronously resumes a conversation with a user, possibly after some
      time has gone by.
    syntax:
      content: >-
        function continueConversation(reference: Partial<ConversationReference>,
        logic: (context: TurnContext) => Promise<void>)
      parameters:
        - id: reference
          type:
            - Partial<ConversationReference>
          description: A reference to the conversation to continue.
        - id: logic
          type:
            - '(context: TurnContext) => Promise<void>'
          description: |
            The asynchronous method to call after the adapter middleware runs.
      return:
        type:
          - Promise<void>
        description: ''
    package: botbuilder
    remarks: >-
      This is often referred to as a _proactive notification_, the bot can
      proactively

      send a message to a conversation or user without waiting for an incoming
      message.

      For example, a bot can use this method to send notifications or coupons to
      a user.


      To send a proactive message:

      1. Save a copy of a
      [ConversationReference](xref:botframework-schema.ConversationReference)
         from an incoming activity. For example, you can store the conversation reference in a database.
      1. Call this method to resume the conversation at a later time. Use the
      saved reference to access the conversation.

      1. On success, the adapter generates a
      [TurnContext](xref:botbuilder-core.TurnContext) object and calls the
      `logic` function handler.
         Use the `logic` function to send the proactive message.

      To copy the reference from any incoming activity in the conversation, use
      the

      [TurnContext.getConversationReference](xref:botbuilder-core.TurnContext.getConversationReference)
      method.


      This method is similar to the
      [processActivity](xref:botbuilder.BotFrameworkAdapter.processActivity)
      method.

      The adapter creates a [TurnContext](xref:botbuilder-core.TurnContext) and
      routes it through

      its middleware before calling the `logic` handler. The created activity
      will have a

      [type](xref:botframework-schema.Activity.type) of 'event' and a

      [name](xref:botframework-schema.Activity.name) of 'continueConversation'.


      For example:

      ```JavaScript

      server.post('/api/notifyUser', async (req, res) => {
         // Lookup previously saved conversation reference.
         const reference = await findReference(req.body.refId);

         // Proactively notify the user.
         if (reference) {
            await adapter.continueConversation(reference, async (context) => {
               await context.sendActivity(req.body.message);
            });
            res.send(200);
         } else {
            res.send(404);
         }
      });

      ```
  - uid: botbuilder.BotFrameworkAdapter.createConnectorClient
    name: createConnectorClient(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a connector client.
    syntax:
      content: 'function createConnectorClient(serviceUrl: string)'
      parameters:
        - id: serviceUrl
          type:
            - string
          description: |
            The client's service URL.
      return:
        type:
          - ConnectorClient
        description: ''
    package: botbuilder
    remarks: >-
      Override this in a derived class to create a mock connector client for
      unit testing.
  - uid: botbuilder.BotFrameworkAdapter.createConnectorClientWithIdentity
    name: 'createConnectorClientWithIdentity(string, ClaimsIdentity)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Create a ConnectorClient with a ClaimsIdentity.
    syntax:
      content: >-
        function createConnectorClientWithIdentity(serviceUrl: string, identity:
        ClaimsIdentity)
      parameters:
        - id: serviceUrl
          type:
            - string
          description: ''
        - id: identity
          type:
            - ClaimsIdentity
          description: |
            ClaimsIdentity
      return:
        type:
          - Promise<ConnectorClient>
        description: ''
    package: botbuilder
    remarks: >-
      If the ClaimsIdentity contains the claims for a Skills request, create a
      ConnectorClient for use with Skills.
  - uid: botbuilder.BotFrameworkAdapter.createConversation
    name: >-
      createConversation(Partial<ConversationReference>, (context: TurnContext)
      => Promise<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: Asynchronously creates and starts a conversation with a user on a channel.
    syntax:
      content: >-
        function createConversation(reference: Partial<ConversationReference>,
        logic?: (context: TurnContext) => Promise<void>)
      parameters:
        - id: reference
          type:
            - Partial<ConversationReference>
          description: A reference for the conversation to create.
        - id: logic
          type:
            - '(context: TurnContext) => Promise<void>'
          description: |
            The asynchronous method to call after the adapter middleware runs.
          optional: true
      return:
        type:
          - Promise<void>
        description: ''
    package: botbuilder
    remarks: >-
      To use this method, you need both the bot's and the user's account
      information on a channel.

      The Bot Connector service supports the creating of group conversations;
      however, this

      method and most channels only support initiating a direct message
      (non-group) conversation.


      To create and start a new conversation:

      1. Get a copy of a
      [ConversationReference](xref:botframework-schema.ConversationReference)
      from an incoming activity.

      1. Set the [user](xref:botframework-schema.ConversationReference.user)
      property to the
         [ChannelAccount](xref:botframework-schema.ChannelAccount) value for the intended recipient.
      1. Call this method to request that the channel create a new conversation
      with the specified user.

      1. On success, the adapter generates a turn context and calls the `logic`
      function handler.


      To get the initial reference, use the

      [TurnContext.getConversationReference](xref:botbuilder-core.TurnContext.getConversationReference)

      method on any incoming activity in the conversation.


      If the channel establishes the conversation, the generated event
      activity's

      [conversation](xref:botframework-schema.Activity.conversation) property
      will contain the

      ID of the new conversation.


      This method is similar to the
      [processActivity](xref:botbuilder.BotFrameworkAdapter.processActivity)
      method.

      The adapter creates a [TurnContext](xref:botbuilder-core.TurnContext) and
      routes it through

      middleware before calling the `logic` handler. The created activity will
      have a

      [type](xref:botframework-schema.Activity.type) of 'event' and a

      [name](xref:botframework-schema.Activity.name) of 'createConversation'.


      For example:

      ```JavaScript

      // Get group members conversation reference

      const reference = TurnContext.getConversationReference(context.activity);


      // ...

      // Start a new conversation with the user

      await adapter.createConversation(reference, async (ctx) => {
         await ctx.sendActivity(`Hi (in private)`);
      });

      ```
  - uid: botbuilder.BotFrameworkAdapter.deleteActivity
    name: 'deleteActivity(TurnContext, Partial<ConversationReference>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Asynchronously deletes an existing activity.

      This interface supports the framework and is not intended to be called
      directly for your code.

      Use
      [TurnContext.deleteActivity](xref:botbuilder-core.TurnContext.deleteActivity)
      to delete

      an activity from your bot code.
    syntax:
      content: >-
        function deleteActivity(context: TurnContext, reference:
        Partial<ConversationReference>)
      parameters:
        - id: context
          type:
            - TurnContext
          description: The context object for the turn.
        - id: reference
          type:
            - Partial<ConversationReference>
          description: |
            Conversation reference information for the activity to delete.
      return:
        type:
          - Promise<void>
        description: ''
    package: botbuilder
    remarks: >-
      Not all channels support this operation. For channels that don't, this
      call may throw an exception.
  - uid: botbuilder.BotFrameworkAdapter.deleteConversationMember
    name: 'deleteConversationMember(TurnContext, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Asynchronously removes a member from the current conversation.
    syntax:
      content: >-
        function deleteConversationMember(context: TurnContext, memberId:
        string)
      parameters:
        - id: context
          type:
            - TurnContext
          description: The context object for the turn.
        - id: memberId
          type:
            - string
          description: |
            The ID of the member to remove from the conversation.
      return:
        type:
          - Promise<void>
        description: ''
    package: botbuilder
    remarks: >-
      Remove a member's identity information from the conversation.


      Not all channels support this operation. For channels that don't, this
      call may throw an exception.
  - uid: botbuilder.BotFrameworkAdapter.emulateOAuthCards
    name: 'emulateOAuthCards(TurnContext | string, boolean)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Asynchronously sends an emulated OAuth card for a channel.

      This method supports the framework and is not intended to be called
      directly for your code.
    syntax:
      content: >-
        function emulateOAuthCards(contextOrServiceUrl: TurnContext | string,
        emulate: boolean)
      parameters:
        - id: contextOrServiceUrl
          type:
            - TurnContext | string
          description: The URL of the emulator.
        - id: emulate
          type:
            - boolean
          description: >
            `true` to send an emulated OAuth card to the emulator; or `false` to
            not send the card.
      return:
        type:
          - Promise<void>
        description: ''
    package: botbuilder
    remarks: >-
      When testing a bot in the Bot Framework Emulator, this method can emulate
      the OAuth card interaction.
  - uid: botbuilder.BotFrameworkAdapter.getAadTokens
    name: 'getAadTokens(TurnContext, string, string[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: Asynchronously signs out the user from the token server.
    syntax:
      content: >-
        function getAadTokens(context: TurnContext, connectionName: string,
        resourceUrls: string[])
      parameters:
        - id: context
          type:
            - TurnContext
          description: The context object for the turn.
        - id: connectionName
          type:
            - string
          description: The name of the auth connection to use.
        - id: resourceUrls
          type:
            - 'string[]'
          description: |
            The list of resource URLs to retrieve tokens for.
      return:
        type:
          - 'Promise<[key: string]: TokenResponse>'
        description: >-
          A map of the [TokenResponse](xref:botframework-schema.TokenResponse)
          objects by resource URL.
    package: botbuilder
  - uid: botbuilder.BotFrameworkAdapter.getActivityMembers
    name: 'getActivityMembers(TurnContext, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Asynchronously lists the members of a given activity.
    syntax:
      content: 'function getActivityMembers(context: TurnContext, activityId?: string)'
      parameters:
        - id: context
          type:
            - TurnContext
          description: The context object for the turn.
        - id: activityId
          type:
            - string
          description: >
            Optional. The ID of the activity to get the members of. If not
            specified, the current activity ID is used.
          optional: true
      return:
        type:
          - 'Promise<ChannelAccount[]>'
        description: >-
          An array of [ChannelAccount](xref:botframework-schema.ChannelAccount)
          objects for

          the users involved in a given activity.
    package: botbuilder
    remarks: >-
      Returns an array of
      [ChannelAccount](xref:botframework-schema.ChannelAccount) objects for

      the users involved in a given activity.


      This is different from
      [getConversationMembers](xref:botbuilder.BotFrameworkAdapter.getConversationMembers)

      in that it will return only those users directly involved in the activity,
      not all members of the conversation.
  - uid: botbuilder.BotFrameworkAdapter.getConversationMembers
    name: getConversationMembers(TurnContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: Asynchronously lists the members of the current conversation.
    syntax:
      content: 'function getConversationMembers(context: TurnContext)'
      parameters:
        - id: context
          type:
            - TurnContext
          description: |
            The context object for the turn.
      return:
        type:
          - 'Promise<ChannelAccount[]>'
        description: >-
          An array of [ChannelAccount](xref:botframework-schema.ChannelAccount)
          objects for

          all users currently involved in a conversation.
    package: botbuilder
    remarks: >-
      Returns an array of
      [ChannelAccount](xref:botframework-schema.ChannelAccount) objects for

      all users currently involved in a conversation.


      This is different from
      [getActivityMembers](xref:botbuilder.BotFrameworkAdapter.getActivityMembers)

      in that it will return all members of the conversation, not just those
      directly involved in a specific activity.
  - uid: botbuilder.BotFrameworkAdapter.getConversations
    name: 'getConversations(TurnContext | string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      For the specified channel, asynchronously gets a page of the conversations
      in which this bot has participated.
    syntax:
      content: >-
        function getConversations(contextOrServiceUrl: TurnContext | string,
        continuationToken?: string)
      parameters:
        - id: contextOrServiceUrl
          type:
            - TurnContext | string
          description: >-
            The URL of the channel server to query or a

            [TurnContext](xref:botbuilder-core.TurnContext) object from a
            conversation on the channel.
        - id: continuationToken
          type:
            - string
          description: >
            Optional. The continuation token from the previous page of results.

            Omit this parameter or use `undefined` to retrieve the first page of
            results.
          optional: true
      return:
        type:
          - Promise<ConversationsResult>
        description: >-
          A [ConversationsResult](xref:botframework-schema.ConversationsResult)
          object containing a page of results

          and a continuation token.
    package: botbuilder
    remarks: >-
      The the return value's
      [conversations](xref:botframework-schema.ConversationsResult.conversations)
      property contains a page of

      [ConversationMembers](xref:botframework-schema.ConversationMembers)
      objects. Each object's

      [id](xref:botframework-schema.ConversationMembers.id) is the ID of a
      conversation in which the bot has participated on this channel.

      This method can be called from outside the context of a conversation, as
      only the bot's service URL and credentials are required.


      The channel batches results in pages. If the result's

      [continuationToken](xref:botframework-schema.ConversationsResult.continuationToken)
      property is not empty, then

      there are more pages to get. Use the returned token to get the next page
      of results.

      If the `contextOrServiceUrl` parameter is a
      [TurnContext](xref:botbuilder-core.TurnContext), the URL of the channel
      server is

      retrieved from

      `contextOrServiceUrl`.[activity](xref:botbuilder-core.TurnContext.activity).[serviceUrl](xref:botframework-schema.Activity.serviceUrl).
  - uid: botbuilder.BotFrameworkAdapter.getSignInLink
    name: 'getSignInLink(TurnContext, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Asynchronously gets a sign-in link from the token server that can be sent
      as part

      of a [SigninCard](xref:botframework-schema.SigninCard).
    syntax:
      content: 'function getSignInLink(context: TurnContext, connectionName: string)'
      parameters:
        - id: context
          type:
            - TurnContext
          description: The context object for the turn.
        - id: connectionName
          type:
            - string
          description: |
            The name of the auth connection to use.
      return:
        type:
          - Promise<string>
        description: ''
    package: botbuilder
  - uid: botbuilder.BotFrameworkAdapter.getTokenStatus
    name: 'getTokenStatus(TurnContext, string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Asynchronously retrieves the token status for each configured connection
      for the given user.
    syntax:
      content: >-
        function getTokenStatus(context: TurnContext, userId?: string,
        includeFilter?: string)
      parameters:
        - id: context
          type:
            - TurnContext
          description: The context object for the turn.
        - id: userId
          type:
            - string
          description: >-
            Optional. If present, the ID of the user to retrieve the token
            status for.
                 Otherwise, the ID of the user who sent the current activity is used.
          optional: true
        - id: includeFilter
          type:
            - string
          description: >
            Optional. A comma-separated list of connection's to include. If
            present,
                 the `includeFilter` parameter limits the tokens this method returns.
          optional: true
      return:
        type:
          - 'Promise<TokenStatus[]>'
        description: >-
          The [TokenStatus](xref:botframework-connector.TokenStatus) objects
          retrieved.
    package: botbuilder
  - uid: botbuilder.BotFrameworkAdapter.getUserToken
    name: 'getUserToken(TurnContext, string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Asynchronously attempts to retrieve the token for a user that's in a login
      flow.
    syntax:
      content: >-
        function getUserToken(context: TurnContext, connectionName: string,
        magicCode?: string)
      parameters:
        - id: context
          type:
            - TurnContext
          description: The context object for the turn.
        - id: connectionName
          type:
            - string
          description: The name of the auth connection to use.
        - id: magicCode
          type:
            - string
          description: |
            Optional. The validation code the user entered.
          optional: true
      return:
        type:
          - Promise<TokenResponse>
        description: >-
          A [TokenResponse](xref:botframework-schema.TokenResponse) object that
          contains the user token.
    package: botbuilder
  - uid: botbuilder.BotFrameworkAdapter.onTurnError
    name: onTurnError
    fullName: onTurnError
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Gets or sets an error handler that can catch exceptions in the middleware
      or application.
    syntax:
      content: 'onTurnError: (context: TurnContext, error: Error) => Promise<void>'
      return:
        type:
          - '(context: TurnContext, error: Error) => Promise<void>'
        description: ''
    package: botbuilder
    remarks: >-
      The error handler is called with these parameters:


      | Name | Type | Description |

      | :--- | :--- | :--- |

      | `context` | [TurnContext](xref:botbuilder-core.TurnContext) | The
      context object for the turn. |

      | `error` | `Error` | The Node.js error thrown. |
  - uid: botbuilder.BotFrameworkAdapter.processActivity
    name: >-
      processActivity(WebRequest, WebResponse, (context: TurnContext) =>
      Promise<any>)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Asynchronously creates a turn context and runs the middleware pipeline for
      an incoming activity.
    syntax:
      content: >-
        function processActivity(req: WebRequest, res: WebResponse, logic:
        (context: TurnContext) => Promise<any>)
      parameters:
        - id: req
          type:
            - botbuilder.WebRequest
          description: An Express or Restify style request object.
        - id: res
          type:
            - botbuilder.WebResponse
          description: An Express or Restify style response object.
        - id: logic
          type:
            - '(context: TurnContext) => Promise<any>'
          description: |
            The function to call at the end of the middleware pipeline.
      return:
        type:
          - Promise<void>
        description: ''
    package: botbuilder
    remarks: >-
      This is the main way a bot receives incoming messages and defines a turn
      in the conversation. This method:


      1. Parses and authenticates an incoming request.
         - The activity is read from the body of the incoming request. An error will be returned
           if the activity can't be parsed.
         - The identity of the sender is authenticated as either the Emulator or a valid Microsoft
           server, using the bot's `appId` and `appPassword`. The request is rejected if the sender's
           identity is not verified.
      1. Creates a [TurnContext](xref:botbuilder-core.TurnContext) object for
      the received activity.
         - This object is wrapped with a [revocable proxy](https://www.ecma-international.org/ecma-262/6.0/#sec-proxy.revocable).
         - When this method completes, the proxy is revoked.
      1. Sends the turn context through the adapter's middleware pipeline.

      1. Sends the turn context to the `logic` function.
         - The bot may perform additional routing or processing at this time.
           Returning a promise (or providing an `async` handler) will cause the adapter to wait for any asynchronous operations to complete.
         - After the `logic` function completes, the promise chain set up by the middleware is resolved.

      > [!TIP]

      > If you see the error `TypeError: Cannot perform 'set' on a proxy that
      has been revoked`

      > in your bot's console output, the likely cause is that an async function
      was used

      > without using the `await` keyword. Make sure all async functions use
      await!


      Middleware can _short circuit_ a turn. When this happens, subsequent
      middleware and the

      `logic` function is not called; however, all middleware prior to this
      point still run to completion.

      For more information about the middleware pipeline, see the

      [how bots
      work](https://docs.microsoft.com/azure/bot-service/bot-builder-basics) and

      [middleware](https://docs.microsoft.com/azure/bot-service/bot-builder-concept-middleware)
      articles.

      Use the adapter's [use](xref:botbuilder-core.BotAdapter.use) method to add
      middleware to the adapter.


      For example:

      ```JavaScript

      server.post('/api/messages', (req, res) => {
         // Route received request to adapter for processing
         adapter.processActivity(req, res, async (context) => {
             // Process any messages received
             if (context.activity.type === ActivityTypes.Message) {
                 await context.sendActivity(`Hello World`);
             }
         });
      });

      ```
  - uid: botbuilder.BotFrameworkAdapter.processActivityDirect
    name: 'processActivityDirect(Activity, (context: TurnContext) => Promise<any>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Asynchronously creates a turn context and runs the middleware pipeline for
      an incoming activity.
    syntax:
      content: >-
        function processActivityDirect(activity: Activity, logic: (context:
        TurnContext) => Promise<any>)
      parameters:
        - id: activity
          type:
            - Activity
          description: The activity to process.
        - id: logic
          type:
            - '(context: TurnContext) => Promise<any>'
          description: |
            The function to call at the end of the middleware pipeline.
      return:
        type:
          - Promise<void>
        description: ''
    package: botbuilder
    remarks: >-
      This is the main way a bot receives incoming messages and defines a turn
      in the conversation. This method:


      1. Creates a [TurnContext](xref:botbuilder-core.TurnContext) object for
      the received activity.
         - This object is wrapped with a [revocable proxy](https://www.ecma-international.org/ecma-262/6.0/#sec-proxy.revocable).
         - When this method completes, the proxy is revoked.
      1. Sends the turn context through the adapter's middleware pipeline.

      1. Sends the turn context to the `logic` function.
         - The bot may perform additional routing or processing at this time.
           Returning a promise (or providing an `async` handler) will cause the adapter to wait for any asynchronous operations to complete.
         - After the `logic` function completes, the promise chain set up by the middleware is resolved.

      Middleware can _short circuit_ a turn. When this happens, subsequent
      middleware and the

      `logic` function is not called; however, all middleware prior to this
      point still run to completion.

      For more information about the middleware pipeline, see the

      [how bots
      work](https://docs.microsoft.com/azure/bot-service/bot-builder-basics) and

      [middleware](https://docs.microsoft.com/azure/bot-service/bot-builder-concept-middleware)
      articles.

      Use the adapter's [use](xref:botbuilder-core.BotAdapter.use) method to add
      middleware to the adapter.
  - uid: botbuilder.BotFrameworkAdapter.processRequest
    name: processRequest(IReceiveRequest)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Checks the validity of the request and attempts to map it the correct
      virtual endpoint,

      then generates and returns a response if appropriate.
    syntax:
      content: 'function processRequest(request: IReceiveRequest)'
      parameters:
        - id: request
          type:
            - IReceiveRequest
          description: A ReceiveRequest from the connected channel.
      return:
        type:
          - Promise<StreamingResponse>
        description: >-
          A response created by the BotAdapter to be sent to the client that
          originated the request.
    package: botbuilder
  - uid: botbuilder.BotFrameworkAdapter.sendActivities
    name: 'sendActivities(TurnContext, Partial<Activity>[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Asynchronously sends a set of outgoing activities to a channel server.

      This method supports the framework and is not intended to be called
      directly for your code.

      Use the turn context's
      [sendActivity](xref:botbuilder-core.TurnContext.sendActivity) or

      [sendActivities](xref:botbuilder-core.TurnContext.sendActivities) method
      from your bot code.
    syntax:
      content: >-
        function sendActivities(context: TurnContext, activities:
        Partial<Activity>[])
      parameters:
        - id: context
          type:
            - TurnContext
          description: The context object for the turn.
        - id: activities
          type:
            - 'Partial<Activity>[]'
          description: |
            The activities to send.
      return:
        type:
          - 'Promise<ResourceResponse[]>'
        description: 'An array of [ResourceResponse](xref:)'
    package: botbuilder
    remarks: >-
      The activities will be sent one after another in the order in which
      they're received. A

      response object will be returned for each sent activity. For `message`
      activities this will

      contain the ID of the delivered message.
  - uid: botbuilder.BotFrameworkAdapter.signOutUser
    name: 'signOutUser(TurnContext, string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Asynchronously signs out the user from the token server.
    syntax:
      content: >-
        function signOutUser(context: TurnContext, connectionName?: string,
        userId?: string)
      parameters:
        - id: context
          type:
            - TurnContext
          description: The context object for the turn.
        - id: connectionName
          type:
            - string
          description: The name of the auth connection to use.
          optional: true
        - id: userId
          type:
            - string
          description: |
            The ID of user to sign out.
          optional: true
      return:
        type:
          - Promise<void>
        description: ''
    package: botbuilder
  - uid: botbuilder.BotFrameworkAdapter.updateActivity
    name: 'updateActivity(TurnContext, Partial<Activity>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Asynchronously replaces a previous activity with an updated version.

      This interface supports the framework and is not intended to be called
      directly for your code.

      Use
      [TurnContext.updateActivity](xref:botbuilder-core.TurnContext.updateActivity)
      to update

      an activity from your bot code.
    syntax:
      content: >-
        function updateActivity(context: TurnContext, activity:
        Partial<Activity>)
      parameters:
        - id: context
          type:
            - TurnContext
          description: The context object for the turn.
        - id: activity
          type:
            - Partial<Activity>
          description: |
            The updated version of the activity to replace.
      return:
        type:
          - Promise<void>
        description: ''
    package: botbuilder
    remarks: >-
      Not all channels support this operation. For channels that don't, this
      call may throw an exception.
  - uid: botbuilder.BotFrameworkAdapter.use
    name: >-
      use((context: TurnContext, next: () => Promise<void>) => Promise<void> |
      Middleware[])
    children: []
    type: method
    langs:
      - typeScript
    summary: Adds middleware to the adapter's pipeline.
    syntax:
      content: >-
        function use(middleware: (context: TurnContext, next: () =>
        Promise<void>) => Promise<void> | Middleware[])
      parameters:
        - id: middleware
          type:
            - >-
              (context: TurnContext, next: () => Promise<void>) => Promise<void>
              | Middleware[]
          description: |
            The middleware or middleware handlers to add.
      return:
        type:
          - this
        description: ''
    package: botbuilder
    remarks: >-
      Middleware is added to the adapter at initialization time.

      Each turn, the adapter calls its middleware in the order in which you
      added it.
  - uid: botbuilder.BotFrameworkAdapter.useNamedPipe
    name: 'useNamedPipe((context: TurnContext) => Promise<any>, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Connects the handler to a Named Pipe server and begins listening for
      incoming requests.
    syntax:
      content: >-
        function useNamedPipe(logic: (context: TurnContext) => Promise<any>,
        pipeName?: string)
      parameters:
        - id: logic
          type:
            - '(context: TurnContext) => Promise<any>'
          description: |
            The logic that will handle incoming requests.
        - id: pipeName
          type:
            - string
          description: The name of the named pipe to use when creating the server.
          optional: true
      return:
        type:
          - Promise<void>
        description: ''
    package: botbuilder
  - uid: botbuilder.BotFrameworkAdapter.useWebSocket
    name: >-
      useWebSocket(WebRequest, INodeSocket, INodeBuffer, (context: TurnContext)
      => Promise<any>)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Process the initial request to establish a long lived connection via a
      streaming server.
    syntax:
      content: >-
        function useWebSocket(req: WebRequest, socket: INodeSocket, head:
        INodeBuffer, logic: (context: TurnContext) => Promise<any>)
      parameters:
        - id: req
          type:
            - botbuilder.WebRequest
          description: The connection request.
        - id: socket
          type:
            - INodeSocket
          description: >-
            The raw socket connection between the bot (server) and
            channel/caller (client).
        - id: head
          type:
            - INodeBuffer
          description: The first packet of the upgraded stream.
        - id: logic
          type:
            - '(context: TurnContext) => Promise<any>'
          description: >
            The logic that handles incoming streaming requests for the lifetime
            of the WebSocket connection.
      return:
        type:
          - Promise<void>
        description: ''
    package: botbuilder
references:
  - uid: Partial<botbuilder.BotFrameworkAdapterSettings>
    name: BotFrameworkAdapterSettings>
    spec.typeScript:
      - name: Partial<
        fullName: Partial<
      - name: BotFrameworkAdapterSettings
        fullName: BotFrameworkAdapterSettings
        uid: botbuilder.BotFrameworkAdapterSettings
      - name: '>'
        fullName: '>'
  - uid: botbuilder.WebRequest
    name: WebRequest
    spec.typeScript:
      - name: WebRequest
        fullName: WebRequest
        uid: botbuilder.WebRequest
  - uid: botbuilder.WebResponse
    name: WebResponse
    spec.typeScript:
      - name: WebResponse
        fullName: WebResponse
        uid: botbuilder.WebResponse
