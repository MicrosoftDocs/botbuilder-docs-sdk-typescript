### YamlMime:TSType
name: BotFrameworkAdapter
uid: botbuilder.BotFrameworkAdapter
package: botbuilder
summary: ''
fullName: BotFrameworkAdapter
remarks: ''
isPreview: false
isDeprecated: true
customDeprecatedMessage: Use `CloudAdapter` instead.
type: class
constructors:
  - name: BotFrameworkAdapter(Partial<BotFrameworkAdapterSettings>)
    uid: botbuilder.BotFrameworkAdapter.constructor
    package: botbuilder
    summary: >-
      Creates a new instance of the
      [BotFrameworkAdapter](xref:botbuilder.BotFrameworkAdapter) class.
    remarks: >-
      If the `settings` parameter does not include

      [channelService](xref:botbuilder.BotFrameworkAdapterSettings.channelService)
      or

      [openIdMetadata](xref:botbuilder.BotFrameworkAdapterSettings.openIdMetadata)
      values, the

      constructor checks the process' environment variables for these values.
      These values may be

      set when a bot is provisioned on Azure and if so are required for the bot
      to work properly

      in the global cloud or in a national cloud.


      The
      [BotFrameworkAdapterSettings](xref:botbuilder.BotFrameworkAdapterSettings)
      class defines

      the available adapter settings.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new BotFrameworkAdapter(settings?: Partial<BotFrameworkAdapterSettings>)'
      parameters:
        - id: settings
          type: Partial&lt;<xref uid="botbuilder.BotFrameworkAdapterSettings" />&gt;
          description: |
            Optional. The settings to use for this adapter instance.
properties:
  - name: isStreamingConnectionOpen
    uid: botbuilder.BotFrameworkAdapter.isStreamingConnectionOpen
    package: botbuilder
    summary: >-
      Used in streaming contexts to check if the streaming connection is still
      open for the bot to send activities.
    fullName: isStreamingConnectionOpen
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: boolean isStreamingConnectionOpen
      return:
        description: 'True if the streaming connection is open, otherwise false.'
        type: boolean
  - name: TokenApiClientCredentialsKey
    uid: botbuilder.BotFrameworkAdapter.TokenApiClientCredentialsKey
    package: botbuilder
    summary: ''
    fullName: TokenApiClientCredentialsKey
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'TokenApiClientCredentialsKey: symbol'
      return:
        description: ''
        type: symbol
inheritedProperties:
  - name: BotIdentityKey
    uid: botbuilder.BotFrameworkAdapter.BotIdentityKey
    package: botbuilder
    summary: ''
    fullName: BotIdentityKey
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'BotIdentityKey: symbol'
      return:
        description: ''
        type: symbol
    inheritanceDescription: <b>Inherited From</b> BotAdapter.BotIdentityKey
  - name: ConnectorClientKey
    uid: botbuilder.BotFrameworkAdapter.ConnectorClientKey
    package: botbuilder
    summary: ''
    fullName: ConnectorClientKey
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ConnectorClientKey: symbol'
      return:
        description: ''
        type: symbol
    inheritanceDescription: <b>Inherited From</b> BotAdapter.ConnectorClientKey
  - name: OAuthScopeKey
    uid: botbuilder.BotFrameworkAdapter.OAuthScopeKey
    package: botbuilder
    summary: ''
    fullName: OAuthScopeKey
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'OAuthScopeKey: symbol'
      return:
        description: ''
        type: symbol
    inheritanceDescription: <b>Inherited From</b> BotAdapter.OAuthScopeKey
  - name: onTurnError
    uid: botbuilder.BotFrameworkAdapter.onTurnError
    package: botbuilder
    summary: ''
    fullName: onTurnError
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onTurnError: (context: TurnContext, error: Error) => Promise<void>'
      return:
        description: ''
        type: '(context: TurnContext, error: Error) =&gt; Promise&lt;void&gt;'
    inheritanceDescription: <b>Inherited From</b> BotAdapter.onTurnError
inheritedMethods:
  - name: >-
      continueConversationAsync(ClaimsIdentity, Partial<ConversationReference>,
      (context: TurnContext) => Promise<void>)
    uid: botbuilder.BotFrameworkAdapter.continueConversationAsync_1
    package: botbuilder
    summary: >-
      Asynchronously resumes a conversation with a user, possibly after some
      time has gone by.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function continueConversationAsync(claimsIdentity: ClaimsIdentity,
        reference: Partial<ConversationReference>, logic: (context: TurnContext)
        => Promise<void>): Promise<void>
      parameters:
        - id: claimsIdentity
          type: ClaimsIdentity
          description: >-
            A [ClaimsIdentity](xref:botframework-connector) for the
            conversation.
        - id: reference
          type: Partial&lt;ConversationReference&gt;
          description: >-
            A partial
            [ConversationReference](xref:botframework-schema.ConversationReference)
            to the conversation to continue.
        - id: logic
          type: '(context: TurnContext) =&gt; Promise&lt;void&gt;'
          description: The asynchronous method to call after the adapter middleware runs.
      return:
        description: a promise representing the async operation
        type: Promise&lt;void&gt;
    inheritanceDescription: <b>Inherited From</b> BotAdapter.continueConversationAsync
  - name: >-
      continueConversationAsync(ClaimsIdentity, Partial<ConversationReference>,
      string, (context: TurnContext) => Promise<void>)
    uid: botbuilder.BotFrameworkAdapter.continueConversationAsync_2
    package: botbuilder
    summary: >-
      Asynchronously resumes a conversation with a user, possibly after some
      time has gone by.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function continueConversationAsync(claimsIdentity: ClaimsIdentity,
        reference: Partial<ConversationReference>, audience: string, logic:
        (context: TurnContext) => Promise<void>): Promise<void>
      parameters:
        - id: claimsIdentity
          type: ClaimsIdentity
          description: >-
            A [ClaimsIdentity](xref:botframework-connector) for the
            conversation.
        - id: reference
          type: Partial&lt;ConversationReference&gt;
          description: >-
            A partial
            [ConversationReference](xref:botframework-schema.ConversationReference)
            to the conversation to continue.
        - id: audience
          type: string
          description: A value signifying the recipient of the proactive message.</param>
        - id: logic
          type: '(context: TurnContext) =&gt; Promise&lt;void&gt;'
          description: The asynchronous method to call after the adapter middleware runs.
      return:
        description: a promise representing the async operation
        type: Promise&lt;void&gt;
    inheritanceDescription: <b>Inherited From</b> BotAdapter.continueConversationAsync
  - name: >-
      continueConversationAsync(string, Partial<ConversationReference>,
      (context: TurnContext) => Promise<void>)
    uid: botbuilder.BotFrameworkAdapter.continueConversationAsync
    package: botbuilder
    summary: >-
      Asynchronously resumes a conversation with a user, possibly after some
      time has gone by.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function continueConversationAsync(botAppId: string, reference:
        Partial<ConversationReference>, logic: (context: TurnContext) =>
        Promise<void>): Promise<void>
      parameters:
        - id: botAppId
          type: string
          description: >-
            The application ID of the bot. This parameter is ignored in single
            tenant the Adapters (Console,Test, etc) but is critical to the
            BotFrameworkAdapter which is multi-tenant aware.
        - id: reference
          type: Partial&lt;ConversationReference&gt;
          description: >-
            A partial
            [ConversationReference](xref:botframework-schema.ConversationReference)
            to the conversation to continue.
        - id: logic
          type: '(context: TurnContext) =&gt; Promise&lt;void&gt;'
          description: The asynchronous method to call after the adapter middleware runs.
      return:
        description: a promise representing the async operation
        type: Promise&lt;void&gt;
    inheritanceDescription: <b>Inherited From</b> BotAdapter.continueConversationAsync
  - name: >-
      createConversationAsync(string, string, string, string,
      ConversationParameters, (context: TurnContext) => Promise<void>)
    uid: botbuilder.BotFrameworkAdapter.createConversationAsync
    package: botbuilder
    summary: Creates a conversation on the specified channel.
    remarks: >-
      To start a conversation, your bot must know its account information and
      the user's account information on that

      channel.  Most _channels only support initiating a direct message
      (non-group) conversation.


      The adapter attempts to create a new conversation on the channel, and then
      sends a `conversationUpdate` activity

      through its middleware pipeline to the logic method.


      If the conversation is established with the specified users, the ID of the
      activity's converstion will contain

      the ID of the new conversation.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createConversationAsync(_botAppId: string, _channelId: string,
        _serviceUrl: string, _audience: string, _conversationParameters:
        ConversationParameters, _logic: (context: TurnContext) =>
        Promise<void>): Promise<void>
      parameters:
        - id: _botAppId
          type: string
          description: The application ID of the bot.
        - id: _channelId
          type: string
          description: The ID for the channel.
        - id: _serviceUrl
          type: string
          description: The ID for the channel.
        - id: _audience
          type: string
          description: |-
            The audience for the connector.
            <param name="conversationParameters">
        - id: _conversationParameters
          type: ConversationParameters
          description: The conversation information to use to create the conversation
        - id: _logic
          type: '(context: TurnContext) =&gt; Promise&lt;void&gt;'
          description: The method to call for the resulting bot turn.
      return:
        description: A promise that represents the asynchronous operation
        type: Promise&lt;void&gt;
    inheritanceDescription: <b>Inherited From</b> BotAdapter.createConversationAsync
  - name: >-
      use((context: TurnContext, next: () => Promise<void>) => Promise<void> |
      Middleware[])
    uid: botbuilder.BotFrameworkAdapter.use
    package: botbuilder
    summary: Adds middleware to the adapter's pipeline.
    remarks: >-
      Middleware is added to the adapter at initialization time.

      Each turn, the adapter calls its middleware in the order in which you
      added it.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function use(middlewares: (context: TurnContext, next: () =>
        Promise<void>) => Promise<void> | Middleware[]): this
      parameters:
        - id: middlewares
          type: >-
            (context: TurnContext, next: () =&gt; Promise&lt;void&gt;) =&gt;
            Promise&lt;void&gt; | Middleware[]
          description: The middleware or middleware handlers to add.
      return:
        description: The updated adapter object.
        type: this
    inheritanceDescription: <b>Inherited From</b> BotAdapter.use
methods:
  - name: >-
      continueConversation(Partial<ConversationReference>, (context:
      TurnContext) => Promise<void>)
    uid: botbuilder.BotFrameworkAdapter.continueConversation
    package: botbuilder
    summary: >-
      Asynchronously resumes a conversation with a user, possibly after some
      time has gone by.
    remarks: >-
      This is often referred to as a _proactive notification_, the bot can
      proactively

      send a message to a conversation or user without waiting for an incoming
      message.

      For example, a bot can use this method to send notifications or coupons to
      a user.


      To send a proactive message:

      1. Save a copy of a
      [ConversationReference](xref:botframework-schema.ConversationReference)
         from an incoming activity. For example, you can store the conversation reference in a database.
      1. Call this method to resume the conversation at a later time. Use the
      saved reference to access the conversation.

      1. On success, the adapter generates a
      [TurnContext](xref:botbuilder-core.TurnContext) object and calls the
      `logic` function handler.
         Use the `logic` function to send the proactive message.

      To copy the reference from any incoming activity in the conversation, use
      the

      [TurnContext.getConversationReference](xref:botbuilder-core.TurnContext.getConversationReference)
      method.


      This method is similar to the
      [processActivity](xref:botbuilder.BotFrameworkAdapter.processActivity)
      method.

      The adapter creates a [TurnContext](xref:botbuilder-core.TurnContext) and
      routes it through

      its middleware before calling the `logic` handler. The created activity
      will have a

      [type](xref:botframework-schema.Activity.type) of 'event' and a

      [name](xref:botframework-schema.Activity.name) of 'continueConversation'.


      For example:

      ```JavaScript

      server.post('/api/notifyUser', async (req, res) => {
         // Lookup previously saved conversation reference.
         const reference = await findReference(req.body.refId);

         // Proactively notify the user.
         if (reference) {
            await adapter.continueConversation(reference, async (context) => {
               await context.sendActivity(req.body.message);
            });
            res.send(200);
         } else {
            res.send(404);
         }
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function continueConversation(reference: Partial<ConversationReference>,
        logic: (context: TurnContext) => Promise<void>): Promise<void>
      parameters:
        - id: reference
          type: Partial&lt;ConversationReference&gt;
          description: A reference to the conversation to continue.
        - id: logic
          type: '(context: TurnContext) =&gt; Promise&lt;void&gt;'
          description: |
            The asynchronous method to call after the adapter middleware runs.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: >-
      continueConversation(Partial<ConversationReference>, string, (context:
      TurnContext) => Promise<void>)
    uid: botbuilder.BotFrameworkAdapter.continueConversation_1
    package: botbuilder
    summary: >-
      Asynchronously resumes a conversation with a user, possibly after some
      time has gone by.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function continueConversation(reference: Partial<ConversationReference>,
        oAuthScope: string, logic: (context: TurnContext) => Promise<void>):
        Promise<void>
      parameters:
        - id: reference
          type: Partial&lt;ConversationReference&gt;
          description: >-
            (xref:botframework-schema.ConversationReference) of the conversation
            to continue.
        - id: oAuthScope
          type: string
          description: >-
            The intended recipient of any sent activities or the function to
            call to continue the conversation.
        - id: logic
          type: '(context: TurnContext) =&gt; Promise&lt;void&gt;'
          description: >
            Optional. The asynchronous method to call after the adapter
            middleware runs.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: createConnectorClient(string)
    uid: botbuilder.BotFrameworkAdapter.createConnectorClient
    package: botbuilder
    summary: Creates a connector client.
    remarks: >-
      Override this in a derived class to create a mock connector client for
      unit testing.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function createConnectorClient(serviceUrl: string): ConnectorClient'
      parameters:
        - id: serviceUrl
          type: string
          description: The client's service URL.
      return:
        description: >-
          The [ConnectorClient](xref:botbuilder-connector.ConnectorClient)
          instance.
        type: ConnectorClient
  - name: 'createConnectorClientWithIdentity(string, ClaimsIdentity)'
    uid: botbuilder.BotFrameworkAdapter.createConnectorClientWithIdentity
    package: botbuilder
    summary: Create a ConnectorClient with a ClaimsIdentity.
    remarks: >-
      If the ClaimsIdentity contains the claims for a Skills request, create a
      ConnectorClient for use with Skills.

      Derives the correct audience from the ClaimsIdentity, or the instance's
      credentials property.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createConnectorClientWithIdentity(serviceUrl: string, identity:
        ClaimsIdentity): Promise<ConnectorClient>
      parameters:
        - id: serviceUrl
          type: string
          description: The client's service URL.
        - id: identity
          type: ClaimsIdentity
          description: |
            ClaimsIdentity
      return:
        description: ''
        type: Promise&lt;ConnectorClient&gt;
  - name: 'createConnectorClientWithIdentity(string, ClaimsIdentity, string)'
    uid: botbuilder.BotFrameworkAdapter.createConnectorClientWithIdentity_1
    package: botbuilder
    summary: Create a ConnectorClient with a ClaimsIdentity and an explicit audience.
    remarks: >-
      If the trimmed audience is not a non-zero length string, the audience will
      be derived from the ClaimsIdentity or

      the instance's credentials property.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createConnectorClientWithIdentity(serviceUrl: string, identity:
        ClaimsIdentity, audience: string): Promise<ConnectorClient>
      parameters:
        - id: serviceUrl
          type: string
          description: The client's service URL.
        - id: identity
          type: ClaimsIdentity
          description: ClaimsIdentity
        - id: audience
          type: string
          description: >
            The recipient of the ConnectorClient's messages. Normally the Bot
            Framework Channel Service or the AppId of another bot.
      return:
        description: ''
        type: Promise&lt;ConnectorClient&gt;
  - name: >-
      createConversation(Partial<ConversationReference>, (context: TurnContext)
      => Promise<void>)
    uid: botbuilder.BotFrameworkAdapter.createConversation
    package: botbuilder
    summary: Asynchronously creates and starts a conversation with a user on a channel.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createConversation(reference: Partial<ConversationReference>,
        logic: (context: TurnContext) => Promise<void>): Promise<void>
      parameters:
        - id: reference
          type: Partial&lt;ConversationReference&gt;
          description: A reference for the conversation to create.
        - id: logic
          type: '(context: TurnContext) =&gt; Promise&lt;void&gt;'
          description: The asynchronous method to call after the adapter middleware runs.
      return:
        description: a promise representing the asynchronous operation
        type: Promise&lt;void&gt;
  - name: >-
      createConversation(Partial<ConversationReference>,
      Partial<ConversationParameters>, (context: TurnContext) => Promise<void>)
    uid: botbuilder.BotFrameworkAdapter.createConversation_1
    package: botbuilder
    summary: Asynchronously creates and starts a conversation with a user on a channel.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createConversation(reference: Partial<ConversationReference>,
        parameters: Partial<ConversationParameters>, logic: (context:
        TurnContext) => Promise<void>): Promise<void>
      parameters:
        - id: reference
          type: Partial&lt;ConversationReference&gt;
          description: A reference for the conversation to create.
        - id: parameters
          type: Partial&lt;ConversationParameters&gt;
          description: Parameters used when creating the conversation
        - id: logic
          type: '(context: TurnContext) =&gt; Promise&lt;void&gt;'
          description: The asynchronous method to call after the adapter middleware runs.
      return:
        description: a promise representing the asynchronous operation
        type: Promise&lt;void&gt;
  - name: 'deleteActivity(TurnContext, Partial<ConversationReference>)'
    uid: botbuilder.BotFrameworkAdapter.deleteActivity
    package: botbuilder
    summary: >
      Asynchronously deletes an existing activity.

      This interface supports the framework and is not intended to be called
      directly for your code.

      Use
      [TurnContext.deleteActivity](xref:botbuilder-core.TurnContext.deleteActivity)
      to delete

      an activity from your bot code.
    remarks: >-
      Not all channels support this operation. For channels that don't, this
      call may throw an exception.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteActivity(context: TurnContext, reference:
        Partial<ConversationReference>): Promise<void>
      parameters:
        - id: context
          type: TurnContext
          description: The context object for the turn.
        - id: reference
          type: Partial&lt;ConversationReference&gt;
          description: |
            Conversation reference information for the activity to delete.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: 'deleteConversationMember(TurnContext, string)'
    uid: botbuilder.BotFrameworkAdapter.deleteConversationMember
    package: botbuilder
    summary: Asynchronously removes a member from the current conversation.
    remarks: >-
      Remove a member's identity information from the conversation.


      Not all channels support this operation. For channels that don't, this
      call may throw an exception.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteConversationMember(context: TurnContext, memberId:
        string): Promise<void>
      parameters:
        - id: context
          type: TurnContext
          description: The context object for the turn.
        - id: memberId
          type: string
          description: |
            The ID of the member to remove from the conversation.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: 'emulateOAuthCards(TurnContext | string, boolean)'
    uid: botbuilder.BotFrameworkAdapter.emulateOAuthCards
    package: botbuilder
    summary: >
      Asynchronously sends an emulated OAuth card for a channel.

      This method supports the framework and is not intended to be called
      directly for your code.
    remarks: >-
      When testing a bot in the Bot Framework Emulator, this method can emulate
      the OAuth card interaction.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function emulateOAuthCards(contextOrServiceUrl: TurnContext | string,
        emulate: boolean): Promise<void>
      parameters:
        - id: contextOrServiceUrl
          type: TurnContext | string
          description: The URL of the emulator.
        - id: emulate
          type: boolean
          description: >
            `true` to send an emulated OAuth card to the emulator; or `false` to
            not send the card.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: >-
      exchangeToken(TurnContext, string, string, TokenExchangeRequest,
      CoreAppCredentials)
    uid: botbuilder.BotFrameworkAdapter.exchangeToken
    package: botbuilder
    summary: >-
      Asynchronously Performs a token exchange operation such as for single
      sign-on.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function exchangeToken(context: TurnContext, connectionName: string,
        userId: string, tokenExchangeRequest: TokenExchangeRequest,
        appCredentials?: CoreAppCredentials): Promise<TokenResponse>
      parameters:
        - id: context
          type: TurnContext
          description: Context for the current turn of conversation with the user.
        - id: connectionName
          type: string
          description: Name of the auth connection to use.
        - id: userId
          type: string
          description: The user id that will be associated with the token.
        - id: tokenExchangeRequest
          type: TokenExchangeRequest
          description: >-
            The exchange request details, either a token to exchange or a uri to
            exchange.
        - id: appCredentials
          type: CoreAppCredentials
          description: |
            Optional. The CoreAppCredentials for OAuth.
      return:
        description: ''
        type: Promise&lt;TokenResponse&gt;
  - name: 'getAadTokens(TurnContext, string, string[])'
    uid: botbuilder.BotFrameworkAdapter.getAadTokens
    package: botbuilder
    summary: Asynchronously signs out the user from the token server.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAadTokens(context: TurnContext, connectionName: string,
        resourceUrls: string[]): Promise<[key: string]: TokenResponse>
      parameters:
        - id: context
          type: TurnContext
          description: The context object for the turn.
        - id: connectionName
          type: string
          description: The name of the auth connection to use.
        - id: resourceUrls
          type: 'string[]'
          description: The list of resource URLs to retrieve tokens for.
      return:
        description: >-
          A map of the [TokenResponse](xref:botframework-schema.TokenResponse)
          objects by resource URL.
        type: 'Promise&lt;[key: string]: TokenResponse&gt;'
  - name: 'getAadTokens(TurnContext, string, string[], CoreAppCredentials)'
    uid: botbuilder.BotFrameworkAdapter.getAadTokens_1
    package: botbuilder
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAadTokens(context: TurnContext, connectionName: string,
        resourceUrls: string[], oAuthAppCredentials?: CoreAppCredentials):
        Promise<[key: string]: TokenResponse>
      parameters:
        - id: context
          type: TurnContext
          description: ''
        - id: connectionName
          type: string
          description: ''
        - id: resourceUrls
          type: 'string[]'
          description: ''
        - id: oAuthAppCredentials
          type: CoreAppCredentials
          description: ''
      return:
        description: ''
        type: 'Promise&lt;[key: string]: TokenResponse&gt;'
  - name: 'getActivityMembers(TurnContext, string)'
    uid: botbuilder.BotFrameworkAdapter.getActivityMembers
    package: botbuilder
    summary: Asynchronously lists the members of a given activity.
    remarks: >-
      Returns an array of
      [ChannelAccount](xref:botframework-schema.ChannelAccount) objects for

      the users involved in a given activity.


      This is different from
      [getConversationMembers](xref:botbuilder.BotFrameworkAdapter.getConversationMembers)

      in that it will return only those users directly involved in the activity,
      not all members of the conversation.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getActivityMembers(context: TurnContext, activityId?: string):
        Promise<ChannelAccount[]>
      parameters:
        - id: context
          type: TurnContext
          description: The context object for the turn.
        - id: activityId
          type: string
          description: >
            Optional. The ID of the activity to get the members of. If not
            specified, the current activity ID is used.
      return:
        description: >-
          An array of [ChannelAccount](xref:botframework-schema.ChannelAccount)
          objects for

          the users involved in a given activity.
        type: 'Promise&lt;ChannelAccount[]&gt;'
  - name: getConversationMembers(TurnContext)
    uid: botbuilder.BotFrameworkAdapter.getConversationMembers
    package: botbuilder
    summary: Asynchronously lists the members of the current conversation.
    remarks: >-
      Returns an array of
      [ChannelAccount](xref:botframework-schema.ChannelAccount) objects for

      all users currently involved in a conversation.


      This is different from
      [getActivityMembers](xref:botbuilder.BotFrameworkAdapter.getActivityMembers)

      in that it will return all members of the conversation, not just those
      directly involved in a specific activity.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getConversationMembers(context: TurnContext):
        Promise<ChannelAccount[]>
      parameters:
        - id: context
          type: TurnContext
          description: |
            The context object for the turn.
      return:
        description: >-
          An array of [ChannelAccount](xref:botframework-schema.ChannelAccount)
          objects for

          all users currently involved in a conversation.
        type: 'Promise&lt;ChannelAccount[]&gt;'
  - name: 'getConversations(TurnContext | string, string)'
    uid: botbuilder.BotFrameworkAdapter.getConversations
    package: botbuilder
    summary: >-
      For the specified channel, asynchronously gets a page of the conversations
      in which this bot has participated.
    remarks: >-
      The the return value's
      [conversations](xref:botframework-schema.ConversationsResult.conversations)
      property contains a page of

      [ConversationMembers](xref:botframework-schema.ConversationMembers)
      objects. Each object's

      [id](xref:botframework-schema.ConversationMembers.id) is the ID of a
      conversation in which the bot has participated on this channel.

      This method can be called from outside the context of a conversation, as
      only the bot's service URL and credentials are required.


      The channel batches results in pages. If the result's

      [continuationToken](xref:botframework-schema.ConversationsResult.continuationToken)
      property is not empty, then

      there are more pages to get. Use the returned token to get the next page
      of results.

      If the `contextOrServiceUrl` parameter is a
      [TurnContext](xref:botbuilder-core.TurnContext), the URL of the channel
      server is

      retrieved from

      `contextOrServiceUrl`.[activity](xref:botbuilder-core.TurnContext.activity).[serviceUrl](xref:botframework-schema.Activity.serviceUrl).
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getConversations(contextOrServiceUrl: TurnContext | string,
        continuationToken?: string): Promise<ConversationsResult>
      parameters:
        - id: contextOrServiceUrl
          type: TurnContext | string
          description: >-
            The URL of the channel server to query or a

            [TurnContext](xref:botbuilder-core.TurnContext) object from a
            conversation on the channel.
        - id: continuationToken
          type: string
          description: >
            Optional. The continuation token from the previous page of results.

            Omit this parameter or use `undefined` to retrieve the first page of
            results.
      return:
        description: >-
          A [ConversationsResult](xref:botframework-schema.ConversationsResult)
          object containing a page of results

          and a continuation token.
        type: Promise&lt;ConversationsResult&gt;
  - name: 'getSignInLink(TurnContext, string, AppCredentials, string, string)'
    uid: botbuilder.BotFrameworkAdapter.getSignInLink
    package: botbuilder
    summary: >-
      Asynchronously gets a sign-in link from the token server that can be sent
      as part

      of a [SigninCard](xref:botframework-schema.SigninCard).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSignInLink(context: TurnContext, connectionName: string,
        oAuthAppCredentials?: AppCredentials, userId?: string, finalRedirect?:
        string): Promise<string>
      parameters:
        - id: context
          type: TurnContext
          description: The context object for the turn.
        - id: connectionName
          type: string
          description: The name of the auth connection to use.
        - id: oAuthAppCredentials
          type: AppCredentials
          description: AppCredentials for OAuth.
        - id: userId
          type: string
          description: The user id that will be associated with the token.
        - id: finalRedirect
          type: string
          description: |
            The final URL that the OAuth flow will redirect to.
      return:
        description: ''
        type: Promise&lt;string&gt;
  - name: 'getSignInLink(TurnContext, string, CoreAppCredentials, string, string)'
    uid: botbuilder.BotFrameworkAdapter.getSignInLink_1
    package: botbuilder
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSignInLink(context: TurnContext, connectionName: string,
        oAuthAppCredentials?: CoreAppCredentials, userId?: string,
        finalRedirect?: string): Promise<string>
      parameters:
        - id: context
          type: TurnContext
          description: ''
        - id: connectionName
          type: string
          description: ''
        - id: oAuthAppCredentials
          type: CoreAppCredentials
          description: ''
        - id: userId
          type: string
          description: ''
        - id: finalRedirect
          type: string
          description: ''
      return:
        description: ''
        type: Promise&lt;string&gt;
  - name: 'getSignInResource(TurnContext, string, string, string, CoreAppCredentials)'
    uid: botbuilder.BotFrameworkAdapter.getSignInResource
    package: botbuilder
    summary: >-
      Asynchronously Get the raw signin resource to be sent to the user for
      signin.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSignInResource(context: TurnContext, connectionName: string,
        userId?: string, finalRedirect?: string, appCredentials?:
        CoreAppCredentials): Promise<SignInUrlResponse>
      parameters:
        - id: context
          type: TurnContext
          description: The context object for the turn.
        - id: connectionName
          type: string
          description: The name of the auth connection to use.
        - id: userId
          type: string
          description: The user id that will be associated with the token.
        - id: finalRedirect
          type: string
          description: The final URL that the OAuth flow will redirect to.
        - id: appCredentials
          type: CoreAppCredentials
          description: Optional. The CoreAppCredentials for OAuth.
      return:
        description: >-
          The
          [BotSignInGetSignInResourceResponse](xref:botframework-connector.BotSignInGetSignInResourceResponse)
          object.
        type: Promise&lt;SignInUrlResponse&gt;
  - name: 'getTokenStatus(TurnContext, string, string)'
    uid: botbuilder.BotFrameworkAdapter.getTokenStatus
    package: botbuilder
    summary: >-
      Asynchronously retrieves the token status for each configured connection
      for the given user.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getTokenStatus(context: TurnContext, userId?: string,
        includeFilter?: string): Promise<TokenStatus[]>
      parameters:
        - id: context
          type: TurnContext
          description: The context object for the turn.
        - id: userId
          type: string
          description: >-
            Optional. If present, the ID of the user to retrieve the token
            status for.
                 Otherwise, the ID of the user who sent the current activity is used.
        - id: includeFilter
          type: string
          description: >-
            Optional. A comma-separated list of connection's to include. If
            present,
                 the `includeFilter` parameter limits the tokens this method returns.
      return:
        description: >-
          The [TokenStatus](xref:botframework-connector.TokenStatus) objects
          retrieved.
        type: 'Promise&lt;TokenStatus[]&gt;'
  - name: 'getTokenStatus(TurnContext, string, string, CoreAppCredentials)'
    uid: botbuilder.BotFrameworkAdapter.getTokenStatus_1
    package: botbuilder
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getTokenStatus(context: TurnContext, userId?: string,
        includeFilter?: string, oAuthAppCredentials?: CoreAppCredentials):
        Promise<TokenStatus[]>
      parameters:
        - id: context
          type: TurnContext
          description: ''
        - id: userId
          type: string
          description: ''
        - id: includeFilter
          type: string
          description: ''
        - id: oAuthAppCredentials
          type: CoreAppCredentials
          description: ''
      return:
        description: ''
        type: 'Promise&lt;TokenStatus[]&gt;'
  - name: 'getUserToken(TurnContext, string, string)'
    uid: botbuilder.BotFrameworkAdapter.getUserToken
    package: botbuilder
    summary: >-
      Asynchronously attempts to retrieve the token for a user that's in a login
      flow.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getUserToken(context: TurnContext, connectionName: string,
        magicCode?: string): Promise<TokenResponse>
      parameters:
        - id: context
          type: TurnContext
          description: The context object for the turn.
        - id: connectionName
          type: string
          description: The name of the auth connection to use.
        - id: magicCode
          type: string
          description: Optional. The validation code the user entered.
      return:
        description: >-
          A [TokenResponse](xref:botframework-schema.TokenResponse) object that
          contains the user token.
        type: Promise&lt;TokenResponse&gt;
  - name: 'getUserToken(TurnContext, string, string, CoreAppCredentials)'
    uid: botbuilder.BotFrameworkAdapter.getUserToken_1
    package: botbuilder
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getUserToken(context: TurnContext, connectionName: string,
        magicCode?: string, oAuthAppCredentials?: CoreAppCredentials):
        Promise<TokenResponse>
      parameters:
        - id: context
          type: TurnContext
          description: ''
        - id: connectionName
          type: string
          description: ''
        - id: magicCode
          type: string
          description: ''
        - id: oAuthAppCredentials
          type: CoreAppCredentials
          description: ''
      return:
        description: ''
        type: Promise&lt;TokenResponse&gt;
  - name: >-
      process(Request, INodeSocket, INodeBuffer, (context: TurnContext) =>
      Promise<void>)
    uid: botbuilder.BotFrameworkAdapter.process_1
    package: botbuilder
    summary: |-
      Handle a web socket connection by applying a logic function to
      each streaming request.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function process(req: Request, socket: INodeSocket, head: INodeBuffer,
        logic: (context: TurnContext) => Promise<void>): Promise<void>
      parameters:
        - id: req
          type: <xref uid="botbuilder.Request" />
          description: 'An incoming HTTP [Request](xref:botbuilder.Request)'
        - id: socket
          type: INodeSocket
          description: >-
            The corresponding
            [INodeSocket](xref:botframework-streaming.INodeSocket)
        - id: head
          type: INodeBuffer
          description: >-
            The corresponding
            [INodeBuffer](xref:botframework-streaming.INodeBuffer)
        - id: logic
          type: '(context: TurnContext) =&gt; Promise&lt;void&gt;'
          description: The logic function to apply
      return:
        description: a promise representing the asynchronous operation.
        type: Promise&lt;void&gt;
  - name: 'process(Request, Response, (context: TurnContext) => Promise<void>)'
    uid: botbuilder.BotFrameworkAdapter.process
    package: botbuilder
    summary: Process a web request by applying a logic function.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function process(req: Request, res: Response, logic: (context:
        TurnContext) => Promise<void>): Promise<void>
      parameters:
        - id: req
          type: <xref uid="botbuilder.Request" />
          description: 'An incoming HTTP [Request](xref:botbuilder.Request)'
        - id: res
          type: <xref uid="botbuilder.Response" />
          description: 'The corresponding HTTP [Response](xref:botbuilder.Response)'
        - id: logic
          type: '(context: TurnContext) =&gt; Promise&lt;void&gt;'
          description: The logic function to apply
      return:
        description: a promise representing the asynchronous operation.
        type: Promise&lt;void&gt;
  - name: >-
      processActivity(WebRequest, WebResponse, (context: TurnContext) =>
      Promise<any>)
    uid: botbuilder.BotFrameworkAdapter.processActivity
    package: botbuilder
    summary: >-
      Asynchronously creates a turn context and runs the middleware pipeline for
      an incoming activity.
    remarks: >-
      This is the main way a bot receives incoming messages and defines a turn
      in the conversation. This method:


      1. Parses and authenticates an incoming request.
         - The activity is read from the body of the incoming request. An error will be returned
           if the activity can't be parsed.
         - The identity of the sender is authenticated as either the Emulator or a valid Microsoft
           server, using the bot's `appId` and `appPassword`. The request is rejected if the sender's
           identity is not verified.
      1. Creates a [TurnContext](xref:botbuilder-core.TurnContext) object for
      the received activity.
         - This object is wrapped with a [revocable proxy](https://www.ecma-international.org/ecma-262/6.0/#sec-proxy.revocable).
         - When this method completes, the proxy is revoked.
      1. Sends the turn context through the adapter's middleware pipeline.

      1. Sends the turn context to the `logic` function.
         - The bot may perform additional routing or processing at this time.
           Returning a promise (or providing an `async` handler) will cause the adapter to wait for any asynchronous operations to complete.
         - After the `logic` function completes, the promise chain set up by the middleware is resolved.

      > [!TIP]

      > If you see the error `TypeError: Cannot perform 'set' on a proxy that
      has been revoked`

      > in your bot's console output, the likely cause is that an async function
      was used

      > without using the `await` keyword. Make sure all async functions use
      await!


      Middleware can _short circuit_ a turn. When this happens, subsequent
      middleware and the

      `logic` function is not called; however, all middleware prior to this
      point still run to completion.

      For more information about the middleware pipeline, see the

      [how bots
      work](https://docs.microsoft.com/azure/bot-service/bot-builder-basics) and

      [middleware](https://docs.microsoft.com/azure/bot-service/bot-builder-concept-middleware)
      articles.

      Use the adapter's [use](xref:botbuilder-core.BotAdapter.use) method to add
      middleware to the adapter.


      For example:

      ```JavaScript

      server.post('/api/messages', (req, res) => {
         // Route received request to adapter for processing
         adapter.processActivity(req, res, async (context) => {
             // Process any messages received
             if (context.activity.type === ActivityTypes.Message) {
                 await context.sendActivity(`Hello World`);
             }
         });
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function processActivity(req: WebRequest, res: WebResponse, logic:
        (context: TurnContext) => Promise<any>): Promise<void>
      parameters:
        - id: req
          type: <xref uid="botbuilder.WebRequest" />
          description: An Express or Restify style request object.
        - id: res
          type: <xref uid="botbuilder.WebResponse" />
          description: An Express or Restify style response object.
        - id: logic
          type: '(context: TurnContext) =&gt; Promise&lt;any&gt;'
          description: |
            The function to call at the end of the middleware pipeline.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: 'processActivityDirect(Activity, (context: TurnContext) => Promise<any>)'
    uid: botbuilder.BotFrameworkAdapter.processActivityDirect
    package: botbuilder
    summary: >-
      Asynchronously creates a turn context and runs the middleware pipeline for
      an incoming activity.
    remarks: >-
      This is the main way a bot receives incoming messages and defines a turn
      in the conversation. This method:


      1. Creates a [TurnContext](xref:botbuilder-core.TurnContext) object for
      the received activity.
         - This object is wrapped with a [revocable proxy](https://www.ecma-international.org/ecma-262/6.0/#sec-proxy.revocable).
         - When this method completes, the proxy is revoked.
      1. Sends the turn context through the adapter's middleware pipeline.

      1. Sends the turn context to the `logic` function.
         - The bot may perform additional routing or processing at this time.
           Returning a promise (or providing an `async` handler) will cause the adapter to wait for any asynchronous operations to complete.
         - After the `logic` function completes, the promise chain set up by the middleware is resolved.

      Middleware can _short circuit_ a turn. When this happens, subsequent
      middleware and the

      `logic` function is not called; however, all middleware prior to this
      point still run to completion.

      For more information about the middleware pipeline, see the

      [how bots
      work](https://docs.microsoft.com/azure/bot-service/bot-builder-basics) and

      [middleware](https://docs.microsoft.com/azure/bot-service/bot-builder-concept-middleware)
      articles.

      Use the adapter's [use](xref:botbuilder-core.BotAdapter.use) method to add
      middleware to the adapter.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function processActivityDirect(activity: Activity, logic: (context:
        TurnContext) => Promise<any>): Promise<void>
      parameters:
        - id: activity
          type: Activity
          description: The activity to process.
        - id: logic
          type: '(context: TurnContext) =&gt; Promise&lt;any&gt;'
          description: |
            The function to call at the end of the middleware pipeline.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: processRequest(IReceiveRequest)
    uid: botbuilder.BotFrameworkAdapter.processRequest
    package: botbuilder
    summary: >-
      Checks the validity of the request and attempts to map it the correct
      virtual endpoint,

      then generates and returns a response if appropriate.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function processRequest(request: IReceiveRequest):
        Promise<StreamingResponse>
      parameters:
        - id: request
          type: IReceiveRequest
          description: A ReceiveRequest from the connected channel.
      return:
        description: >-
          A response created by the BotAdapter to be sent to the client that
          originated the request.
        type: Promise&lt;StreamingResponse&gt;
  - name: 'sendActivities(TurnContext, Partial<Activity>[])'
    uid: botbuilder.BotFrameworkAdapter.sendActivities
    package: botbuilder
    summary: >
      Asynchronously sends a set of outgoing activities to a channel server.

      This method supports the framework and is not intended to be called
      directly for your code.

      Use the turn context's
      [sendActivity](xref:botbuilder-core.TurnContext.sendActivity) or

      [sendActivities](xref:botbuilder-core.TurnContext.sendActivities) method
      from your bot code.
    remarks: >-
      The activities will be sent one after another in the order in which
      they're received. A

      response object will be returned for each sent activity. For `message`
      activities this will

      contain the ID of the delivered message.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function sendActivities(context: TurnContext, activities:
        Partial<Activity>[]): Promise<ResourceResponse[]>
      parameters:
        - id: context
          type: TurnContext
          description: The context object for the turn.
        - id: activities
          type: 'Partial&lt;Activity&gt;[]'
          description: |
            The activities to send.
      return:
        description: 'An array of [ResourceResponse](xref:botbuilder.Request)'
        type: 'Promise&lt;ResourceResponse[]&gt;'
  - name: 'signOutUser(TurnContext, string, string)'
    uid: botbuilder.BotFrameworkAdapter.signOutUser
    package: botbuilder
    summary: Asynchronously signs out the user from the token server.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function signOutUser(context: TurnContext, connectionName?: string,
        userId?: string): Promise<void>
      parameters:
        - id: context
          type: TurnContext
          description: The context object for the turn.
        - id: connectionName
          type: string
          description: The name of the auth connection to use.
        - id: userId
          type: string
          description: The ID of user to sign out.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: 'signOutUser(TurnContext, string, string, CoreAppCredentials)'
    uid: botbuilder.BotFrameworkAdapter.signOutUser_1
    package: botbuilder
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function signOutUser(context: TurnContext, connectionName?: string,
        userId?: string, oAuthAppCredentials?: CoreAppCredentials):
        Promise<void>
      parameters:
        - id: context
          type: TurnContext
          description: ''
        - id: connectionName
          type: string
          description: ''
        - id: userId
          type: string
          description: ''
        - id: oAuthAppCredentials
          type: CoreAppCredentials
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: 'updateActivity(TurnContext, Partial<Activity>)'
    uid: botbuilder.BotFrameworkAdapter.updateActivity
    package: botbuilder
    summary: >
      Asynchronously replaces a previous activity with an updated version.

      This interface supports the framework and is not intended to be called
      directly for your code.

      Use
      [TurnContext.updateActivity](xref:botbuilder-core.TurnContext.updateActivity)
      to update

      an activity from your bot code.
    remarks: >-
      Not all channels support this operation. For channels that don't, this
      call may throw an exception.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updateActivity(context: TurnContext, activity:
        Partial<Activity>): Promise<ResourceResponse | void>
      parameters:
        - id: context
          type: TurnContext
          description: The context object for the turn.
        - id: activity
          type: Partial&lt;Activity&gt;
          description: The updated version of the activity to replace.
      return:
        description: >-
          A `Promise` representing the
          [ResourceResponse](xref:botframework-schema.ResourceResponse) for the
          operation.
        type: Promise&lt;ResourceResponse | void&gt;
  - name: >-
      useNamedPipe((context: TurnContext) => Promise<any>, string, number, () =>
      void)
    uid: botbuilder.BotFrameworkAdapter.useNamedPipe
    package: botbuilder
    summary: >-
      Connects the handler to a Named Pipe server and begins listening for
      incoming requests.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function useNamedPipe(logic: (context: TurnContext) => Promise<any>,
        pipeName?: string, retryCount?: number, onListen?: () => void):
        Promise<void>
      parameters:
        - id: logic
          type: '(context: TurnContext) =&gt; Promise&lt;any&gt;'
          description: The logic that will handle incoming requests.
        - id: pipeName
          type: string
          description: The name of the named pipe to use when creating the server.
        - id: retryCount
          type: number
          description: Number of times to attempt to bind incoming and outgoing pipe
        - id: onListen
          type: () =&gt; void
          description: >
            Optional callback that fires once when server is listening on both
            incoming and outgoing pipe
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: >-
      useWebSocket(WebRequest, INodeSocket, INodeBuffer, (context: TurnContext)
      => Promise<any>)
    uid: botbuilder.BotFrameworkAdapter.useWebSocket
    package: botbuilder
    summary: >-
      Process the initial request to establish a long lived connection via a
      streaming server.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function useWebSocket(req: WebRequest, socket: INodeSocket, head:
        INodeBuffer, logic: (context: TurnContext) => Promise<any>):
        Promise<void>
      parameters:
        - id: req
          type: <xref uid="botbuilder.WebRequest" />
          description: The connection request.
        - id: socket
          type: INodeSocket
          description: >-
            The raw socket connection between the bot (server) and
            channel/caller (client).
        - id: head
          type: INodeBuffer
          description: The first packet of the upgraded stream.
        - id: logic
          type: '(context: TurnContext) =&gt; Promise&lt;any&gt;'
          description: >
            The logic that handles incoming streaming requests for the lifetime
            of the WebSocket connection.
      return:
        description: ''
        type: Promise&lt;void&gt;
extends: BotAdapter
