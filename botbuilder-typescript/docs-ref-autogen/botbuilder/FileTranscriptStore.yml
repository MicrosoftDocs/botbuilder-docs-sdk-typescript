### YamlMime:TSType
name: FileTranscriptStore
uid: botbuilder.FileTranscriptStore
package: botbuilder
summary: >-
  The file transcript store stores transcripts in file system with each activity
  as a file.
fullName: FileTranscriptStore
remarks: >-
  This class provides an interface to log all incoming and outgoing activities
  to the filesystem.

  It implements the features necessary to work alongside the
  TranscriptLoggerMiddleware plugin.

  When used in concert, your bot will automatically log all conversations.


  Below is the boilerplate code needed to use this in your app:

  ```javascript

  const { FileTranscriptStore, TranscriptLoggerMiddleware } =
  require('botbuilder');


  adapter.use(new TranscriptLoggerMiddleware(new FileTranscriptStore(__dirname +
  '/transcripts/')));

  ```
isDeprecated: false
type: class
constructors:
  - name: FileTranscriptStore(string)
    uid: botbuilder.FileTranscriptStore.constructor
    package: botbuilder
    summary: Creates an instance of FileTranscriptStore.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'new FileTranscriptStore(folder: string)'
      parameters:
        - id: folder
          type: string
          description: Root folder where transcript will be stored.
methods:
  - name: deleteTranscript(string, string)
    uid: botbuilder.FileTranscriptStore.deleteTranscript
    package: botbuilder
    summary: Delete a conversation and all of it's activities.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteTranscript(channelId: string, conversationId: string):
        Promise<void>
      parameters:
        - id: channelId
          type: string
          description: Channel Id where conversation took place.
        - id: conversationId
          type: string
          description: Id of the conversation to delete.
      return:
        description: A promise representing the asynchronous operation.
        type: Promise&lt;void&gt;
  - name: getTranscriptActivities(string, string, string, Date)
    uid: botbuilder.FileTranscriptStore.getTranscriptActivities
    package: botbuilder
    summary: >-
      Get all activities associated with a conversation id (aka get the
      transcript).
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getTranscriptActivities(channelId: string, conversationId:
        string, continuationToken?: string, startDate?: Date):
        Promise<PagedResult<Activity>>
      parameters:
        - id: channelId
          type: string
          description: Channel Id.
        - id: conversationId
          type: string
          description: Conversation Id.
        - id: continuationToken
          type: string
          description: (Optional) Continuation token to page through results.
        - id: startDate
          type: Date
          description: (Optional) Earliest time to include.
      return:
        description: PagedResult of activities.
        type: >-
          Promise&lt;<xref uid="botbuilder.PagedResult" />&lt;<xref
          uid="botbuilder.Activity" />&gt;&gt;
  - name: listTranscripts(string, string)
    uid: botbuilder.FileTranscriptStore.listTranscripts
    package: botbuilder
    summary: List all the logged conversations for a given channelId.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listTranscripts(channelId: string, continuationToken?: string):
        Promise<PagedResult<TranscriptInfo>>
      parameters:
        - id: channelId
          type: string
          description: Channel Id.
        - id: continuationToken
          type: string
          description: (Optional) Continuation token to page through results.
      return:
        description: PagedResult of transcripts.
        type: >-
          Promise&lt;<xref uid="botbuilder.PagedResult" />&lt;<xref
          uid="botbuilder.TranscriptInfo" />&gt;&gt;
  - name: logActivity(Activity)
    uid: botbuilder.FileTranscriptStore.logActivity
    package: botbuilder
    summary: Log an activity to the transcript.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function logActivity(activity: Activity): Promise<void>'
      parameters:
        - id: activity
          type: <xref uid="botbuilder.Activity" />
          description: Activity being logged.
      return:
        description: a promise representing the asynchronous operation.
        type: Promise&lt;void&gt;
