### YamlMime:TSType
name: TeamsInfo
uid: botbuilder.TeamsInfo
package: botbuilder
summary: >-
  Provides utility methods for the events and interactions that occur within
  Microsoft Teams.
fullName: TeamsInfo
remarks: ''
isDeprecated: false
type: class
methods:
  - name: cancelOperation(TurnContext, string)
    uid: botbuilder.TeamsInfo.cancelOperation
    package: botbuilder
    summary: Cancels a pending operation.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function cancelOperation(context: TurnContext, operationId:
        string): Promise<CancelOperationResponse>
      parameters:
        - id: context
          type: <xref uid="botbuilder.TurnContext" />
          description: The [TurnContext](xref:botbuilder-core.TurnContext) for this turn.
        - id: operationId
          type: string
          description: The id of the operation to cancel.
      return:
        description: Promise representing the asynchronous operation.
        type: Promise&lt;CancelOperationResponse&gt;
  - name: getFailedEntries(TurnContext, string)
    uid: botbuilder.TeamsInfo.getFailedEntries
    package: botbuilder
    summary: Gets the failed entries of an executed operation.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function getFailedEntries(context: TurnContext, operationId:
        string): Promise<BatchFailedEntriesResponse>
      parameters:
        - id: context
          type: <xref uid="botbuilder.TurnContext" />
          description: The [TurnContext](xref:botbuilder-core.TurnContext) for this turn.
        - id: operationId
          type: string
          description: The operationId to get the failed entries of.
      return:
        description: Promise with the list of failed entries of the operation.
        type: Promise&lt;<xref uid="botbuilder.BatchFailedEntriesResponse" />&gt;
  - name: getMeetingInfo(TurnContext, string)
    uid: botbuilder.TeamsInfo.getMeetingInfo
    package: botbuilder
    summary: Gets the information for the given meeting id.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function getMeetingInfo(context: TurnContext, meetingId?:
        string): Promise<MeetingInfo>
      parameters:
        - id: context
          type: <xref uid="botbuilder.TurnContext" />
          description: The [TurnContext](xref:botbuilder-core.TurnContext) for this turn.
        - id: meetingId
          type: string
          description: The BASE64-encoded id of the Teams meeting.
      return:
        description: The [MeetingInfo](xref:botframework-schema.MeetingInfo) fetched
        type: Promise&lt;<xref uid="botbuilder.MeetingInfo" />&gt;
  - name: getMeetingParticipant(TurnContext, string, string, string)
    uid: botbuilder.TeamsInfo.getMeetingParticipant
    package: botbuilder
    summary: >-
      Gets the meeting participant for the given meeting id and participant id.
      This only works in

      teams scoped meeting conversations.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function getMeetingParticipant(context: TurnContext, meetingId?:
        string, participantId?: string, tenantId?: string):
        Promise<TeamsMeetingParticipant>
      parameters:
        - id: context
          type: <xref uid="botbuilder.TurnContext" />
          description: The [TurnContext](xref:botbuilder-core.TurnContext) for this turn.
        - id: meetingId
          type: string
          description: The meeting ID to fetch
        - id: participantId
          type: string
          description: The participant ID to fetch
        - id: tenantId
          type: string
          description: The tenant ID to use when scoping the request
      return:
        description: >-
          The
          [TeamsMeetingParticipant](xref:botbuilder-core.TeamsMeetingParticipant)
          fetched
        type: Promise&lt;<xref uid="botbuilder.TeamsMeetingParticipant" />&gt;
  - name: getMember(TurnContext, string)
    uid: botbuilder.TeamsInfo.getMember
    package: botbuilder
    summary: Gets the account of a single conversation member.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function getMember(context: TurnContext, userId: string):
        Promise<TeamsChannelAccount>
      parameters:
        - id: context
          type: <xref uid="botbuilder.TurnContext" />
          description: The [TurnContext](xref:botbuilder-core.TurnContext) for this turn.
        - id: userId
          type: string
          description: ID of the user in question.
      return:
        description: >-
          The
          [TeamsChannelAccount](xref:botframework-schema.TeamsChannelAccount) of
          the member.
        type: Promise&lt;<xref uid="botbuilder.TeamsChannelAccount" />&gt;
  - name: getMembers(TurnContext)
    uid: botbuilder.TeamsInfo.getMembers
    package: botbuilder
    summary: Gets the conversation members of a one-on-one or group chat.
    remarks: ''
    isDeprecated: true
    customDeprecatedMessage: Use `getPagedTeamMembers` instead.
    syntax:
      content: >-
        static function getMembers(context: TurnContext):
        Promise<TeamsChannelAccount[]>
      parameters:
        - id: context
          type: <xref uid="botbuilder.TurnContext" />
          description: The [TurnContext](xref:botbuilder-core.TurnContext) for this turn.
      return:
        description: >-
          The list of
          [TeamsChannelAccount](xref:botframework-schema.TeamsChannelAccount).
        type: Promise&lt;<xref uid="botbuilder.TeamsChannelAccount" />[]&gt;
  - name: getOperationState(TurnContext, string)
    uid: botbuilder.TeamsInfo.getOperationState
    package: botbuilder
    summary: Gets the operation state.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function getOperationState(context: TurnContext, operationId:
        string): Promise<BatchOperationStateResponse>
      parameters:
        - id: context
          type: <xref uid="botbuilder.TurnContext" />
          description: The [TurnContext](xref:botbuilder-core.TurnContext) for this turn.
        - id: operationId
          type: string
          description: The operationId to get the state of.
      return:
        description: Promise with The state and responses of the operation.
        type: Promise&lt;<xref uid="botbuilder.BatchOperationStateResponse" />&gt;
  - name: getPagedMembers(TurnContext, number, string)
    uid: botbuilder.TeamsInfo.getPagedMembers
    package: botbuilder
    summary: Gets a pagined list of members of one-on-one, group, or team conversation.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function getPagedMembers(context: TurnContext, pageSize?: number,
        continuationToken?: string): Promise<TeamsPagedMembersResult>
      parameters:
        - id: context
          type: <xref uid="botbuilder.TurnContext" />
          description: The [TurnContext](xref:botbuilder-core.TurnContext) for this turn.
        - id: pageSize
          type: number
          description: Suggested number of entries on a page.
        - id: continuationToken
          type: string
          description: A continuation token.
      return:
        description: >-
          The
          [TeamsPagedMembersResult](xref:botframework-schema.TeamsPagedMembersResult)
          with the list of members.
        type: Promise&lt;<xref uid="botbuilder.TeamsPagedMembersResult" />&gt;
  - name: getPagedTeamMembers(TurnContext, string, number, string)
    uid: botbuilder.TeamsInfo.getPagedTeamMembers
    package: botbuilder
    summary: Gets a paginated list of members of a team.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function getPagedTeamMembers(context: TurnContext, teamId?:
        string, pageSize?: number, continuationToken?: string):
        Promise<TeamsPagedMembersResult>
      parameters:
        - id: context
          type: <xref uid="botbuilder.TurnContext" />
          description: The [TurnContext](xref:botbuilder-core.TurnContext) for this turn.
        - id: teamId
          type: string
          description: ID of the Teams team.
        - id: pageSize
          type: number
          description: The number of entries on the page.
        - id: continuationToken
          type: string
          description: The continuationToken token.
      return:
        description: >-
          A
          [TeamsPagedMembersResult](xref:botframework-schema.TeamsPagedMembersResult)
          with the list of members.
        type: Promise&lt;<xref uid="botbuilder.TeamsPagedMembersResult" />&gt;
  - name: getTeamChannels(TurnContext, string)
    uid: botbuilder.TeamsInfo.getTeamChannels
    package: botbuilder
    summary: >-
      Returns a list of channels in a Team. This only works in teams scoped
      conversations.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function getTeamChannels(context: TurnContext, teamId?: string):
        Promise<ChannelInfo[]>
      parameters:
        - id: context
          type: <xref uid="botbuilder.TurnContext" />
          description: The [TurnContext](xref:botbuilder-core.TurnContext) for this turn.
        - id: teamId
          type: string
          description: ID of the Teams team.
      return:
        description: >-
          The list of [ChannelInfo](xref:botframework-schema.ChannelInfo)
          objects with the conversations.
        type: Promise&lt;<xref uid="botbuilder.ChannelInfo" />[]&gt;
  - name: getTeamDetails(TurnContext, string)
    uid: botbuilder.TeamsInfo.getTeamDetails
    package: botbuilder
    summary: >-
      Gets the details for the given team id. This only works in teams scoped
      conversations.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function getTeamDetails(context: TurnContext, teamId?: string):
        Promise<TeamDetails>
      parameters:
        - id: context
          type: <xref uid="botbuilder.TurnContext" />
          description: The [TurnContext](xref:botbuilder-core.TurnContext) for this turn.
        - id: teamId
          type: string
          description: The id of the Teams team.
      return:
        description: The [TeamDetails](xref:botbuilder-core.TeamDetails) fetched
        type: Promise&lt;<xref uid="botbuilder.TeamDetails" />&gt;
  - name: getTeamMember(TurnContext, string, string)
    uid: botbuilder.TeamsInfo.getTeamMember
    package: botbuilder
    summary: Gets the account of a member in a teams scoped conversation.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function getTeamMember(context: TurnContext, teamId?: string,
        userId?: string): Promise<TeamsChannelAccount>
      parameters:
        - id: context
          type: <xref uid="botbuilder.TurnContext" />
          description: The [TurnContext](xref:botbuilder-core.TurnContext) for this turn.
        - id: teamId
          type: string
          description: ID of the Teams team.
        - id: userId
          type: string
          description: ID of the Teams user.
      return:
        description: >-
          The
          [TeamsChannelAccount](xref:botframework-schema.TeamsChannelAccount) of
          the member.
        type: Promise&lt;<xref uid="botbuilder.TeamsChannelAccount" />&gt;
  - name: getTeamMembers(TurnContext, string)
    uid: botbuilder.TeamsInfo.getTeamMembers
    package: botbuilder
    summary: >-
      Gets the list of
      [TeamsChannelAccount](xref:botframework-schema.TeamsChannelAccount) within
      a team.
    remarks: ''
    isDeprecated: true
    customDeprecatedMessage: Use `getPagedTeamMembers` instead.
    syntax:
      content: >-
        static function getTeamMembers(context: TurnContext, teamId?: string):
        Promise<TeamsChannelAccount[]>
      parameters:
        - id: context
          type: <xref uid="botbuilder.TurnContext" />
          description: The [TurnContext](xref:botbuilder-core.TurnContext) for this turn.
        - id: teamId
          type: string
          description: ID of the Teams team.
      return:
        description: >-
          The list of
          [TeamsChannelAccount](xref:botframework-schema.TeamsChannelAccount) of
          the members.
        type: Promise&lt;<xref uid="botbuilder.TeamsChannelAccount" />[]&gt;
  - name: sendMeetingNotification(TurnContext, TargetedMeetingNotification, string)
    uid: botbuilder.TeamsInfo.sendMeetingNotification
    package: botbuilder
    summary: Sends a meeting notification to specific users in a Teams meeting.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function sendMeetingNotification(context: TurnContext,
        notification: TargetedMeetingNotification, meetingId?: string):
        Promise<MeetingNotificationResponse>
      parameters:
        - id: context
          type: <xref uid="botbuilder.TurnContext" />
          description: The [TurnContext](xref:botbuilder-core.TurnContext) for this turn.
        - id: notification
          type: <xref uid="botbuilder.TargetedMeetingNotification" />
          description: The meeting notification payload.
        - id: meetingId
          type: string
          description: Id of the Teams meeting.
      return:
        description: >-
          Promise with either an empty object if notifications were successfully
          sent to all recipients or

          [MeetingNotificationResponse](xref:botframework-schema.MeetingNotificationResponse)
          if notifications

          were sent to some but not all recipients.
        type: Promise&lt;<xref uid="botbuilder.MeetingNotificationResponse" />&gt;
  - name: sendMessageToAllUsersInTeam(TurnContext, Activity, string, string)
    uid: botbuilder.TeamsInfo.sendMessageToAllUsersInTeam
    package: botbuilder
    summary: Sends a message to all the users in a team.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function sendMessageToAllUsersInTeam(context: TurnContext,
        activity: Activity, tenantId: string, teamId: string):
        Promise<BatchOperationResponse>
      parameters:
        - id: context
          type: <xref uid="botbuilder.TurnContext" />
          description: The [TurnContext](xref:botbuilder-core.TurnContext) for this turn.
        - id: activity
          type: <xref uid="botbuilder.Activity" />
          description: The activity to send.
        - id: tenantId
          type: string
          description: The tenant ID.
        - id: teamId
          type: string
          description: The team ID.
      return:
        description: Promise with operationId.
        type: Promise&lt;<xref uid="botbuilder.BatchOperationResponse" />&gt;
  - name: sendMessageToAllUsersInTenant(TurnContext, Activity, string)
    uid: botbuilder.TeamsInfo.sendMessageToAllUsersInTenant
    package: botbuilder
    summary: Sends a message to all the users in a tenant.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function sendMessageToAllUsersInTenant(context: TurnContext,
        activity: Activity, tenantId: string): Promise<BatchOperationResponse>
      parameters:
        - id: context
          type: <xref uid="botbuilder.TurnContext" />
          description: The [TurnContext](xref:botbuilder-core.TurnContext) for this turn.
        - id: activity
          type: <xref uid="botbuilder.Activity" />
          description: The activity to send.
        - id: tenantId
          type: string
          description: The tenant ID.
      return:
        description: Promise with operationId.
        type: Promise&lt;<xref uid="botbuilder.BatchOperationResponse" />&gt;
  - name: sendMessageToListOfChannels(TurnContext, Activity, string, TeamsMember[])
    uid: botbuilder.TeamsInfo.sendMessageToListOfChannels
    package: botbuilder
    summary: Sends a message to the provided list of Teams channels.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function sendMessageToListOfChannels(context: TurnContext,
        activity: Activity, tenantId: string, members: TeamsMember[]):
        Promise<BatchOperationResponse>
      parameters:
        - id: context
          type: <xref uid="botbuilder.TurnContext" />
          description: The [TurnContext](xref:botbuilder-core.TurnContext) for this turn.
        - id: activity
          type: <xref uid="botbuilder.Activity" />
          description: The activity to send.
        - id: tenantId
          type: string
          description: The tenant ID.
        - id: members
          type: <xref uid="botbuilder.TeamsMember" />[]
          description: The list of channels recipients for the message.
      return:
        description: Promise with operationId.
        type: Promise&lt;<xref uid="botbuilder.BatchOperationResponse" />&gt;
  - name: sendMessageToListOfUsers(TurnContext, Activity, string, TeamsMember[])
    uid: botbuilder.TeamsInfo.sendMessageToListOfUsers
    package: botbuilder
    summary: Sends a message to the provided users in the list of Teams members.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function sendMessageToListOfUsers(context: TurnContext, activity:
        Activity, tenantId: string, members: TeamsMember[]):
        Promise<BatchOperationResponse>
      parameters:
        - id: context
          type: <xref uid="botbuilder.TurnContext" />
          description: The [TurnContext](xref:botbuilder-core.TurnContext) for this turn.
        - id: activity
          type: <xref uid="botbuilder.Activity" />
          description: The activity to send.
        - id: tenantId
          type: string
          description: The tenant ID.
        - id: members
          type: <xref uid="botbuilder.TeamsMember" />[]
          description: The list of users recipients for the message.
      return:
        description: Promise with operationId.
        type: Promise&lt;<xref uid="botbuilder.BatchOperationResponse" />&gt;
  - name: sendMessageToTeamsChannel(TurnContext, Activity, string, string)
    uid: botbuilder.TeamsInfo.sendMessageToTeamsChannel
    package: botbuilder
    summary: >-
      Creates a new thread in a Teams chat and sends an
      [Activity](xref:botframework-schema.Activity) to that new thread.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function sendMessageToTeamsChannel(context: TurnContext,
        activity: Activity, teamsChannelId: string, botAppId?: string):
        Promise<[ConversationReference, string]>
      parameters:
        - id: context
          type: <xref uid="botbuilder.TurnContext" />
          description: The [TurnContext](xref:botbuilder-core.TurnContext) for this turn.
        - id: activity
          type: <xref uid="botbuilder.Activity" />
          description: The [Activity](xref:botframework-schema.Activity) to send.
        - id: teamsChannelId
          type: string
          description: >-
            The Team's Channel ID, note this is distinct from the Bot Framework
            activity property with same name.
        - id: botAppId
          type: string
          description: >-
            The bot's appId. This is only used when context.adapter is an
            instance of CloudAdapter.
      return:
        description: >-
          The
          [ConversationReference](xref:botframework-schema.ConversationReference)
          and the id of the [Activity](xref:botframework-schema.Activity) (if
          sent).
        type: Promise&lt;[ConversationReference, string]&gt;
