### YamlMime:TSType
name: BotFrameworkHttpAdapter
uid: botbuilder.BotFrameworkHttpAdapter
package: botbuilder
summary: ''
fullName: BotFrameworkHttpAdapter
remarks: ''
isDeprecated: true
customDeprecatedMessage: |-
  Use `CloudAdapter` instead.
  BotFrameworkHttpAdapter is the interface that describes a Bot Framework
  adapter that operates on HTTP requests.
type: interface
methods:
  - name: >-
      process(Request<Record<string, unknown>, Record<string, undefined | string
      | string[]>>, INodeSocket, INodeBuffer, (context: TurnContext) =>
      Promise<void>)
    uid: botbuilder.BotFrameworkHttpAdapter.process_1
    package: botbuilder
    summary: |-
      Handle a web socket connection by applying a logic callback function to
      each streaming request.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function process(req: Request<Record<string, unknown>, Record<string,
        undefined | string | string[]>>, socket: INodeSocket, head: INodeBuffer,
        logic: (context: TurnContext) => Promise<void>): Promise<void>
      parameters:
        - id: req
          type: >-
            <xref uid="botbuilder.Request" />&lt;Record&lt;string, unknown&gt;,
            Record&lt;string, undefined | string | string[]&gt;&gt;
          description: ''
        - id: socket
          type: INodeSocket
          description: ''
        - id: head
          type: INodeBuffer
          description: ''
        - id: logic
          type: '(context: TurnContext) =&gt; Promise&lt;void&gt;'
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: >-
      process(Request<Record<string, unknown>, Record<string, undefined | string
      | string[]>>, Response, (context: TurnContext) => Promise<void>)
    uid: botbuilder.BotFrameworkHttpAdapter.process
    package: botbuilder
    summary: Process a web request by applying a logic callback function.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function process(req: Request<Record<string, unknown>, Record<string,
        undefined | string | string[]>>, res: Response, logic: (context:
        TurnContext) => Promise<void>): Promise<void>
      parameters:
        - id: req
          type: >-
            <xref uid="botbuilder.Request" />&lt;Record&lt;string, unknown&gt;,
            Record&lt;string, undefined | string | string[]&gt;&gt;
          description: ''
        - id: res
          type: <xref uid="botbuilder.Response" />
          description: ''
        - id: logic
          type: '(context: TurnContext) =&gt; Promise&lt;void&gt;'
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
