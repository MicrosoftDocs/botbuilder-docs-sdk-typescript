### YamlMime:TSType
name: TeamsActivityHandler
uid: botbuilder.TeamsActivityHandler
package: botbuilder
summary: ''
fullName: TeamsActivityHandler
isPreview: false
isDeprecated: false
type: class
methods:
  - name: onConversationUpdate(BotHandler)
    uid: botbuilder.TeamsActivityHandler.onConversationUpdate
    package: botbuilder
    summary: >-
      Registers an activity event handler for the _conversation update_ event,
      emitted for every incoming

      conversation update activity.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onConversationUpdate(handler: BotHandler)'
      parameters:
        - id: handler
          type: BotHandler
          description: |
            The event handler.
      return:
        type: this
        description: ''
  - name: onDialog(BotHandler)
    uid: botbuilder.TeamsActivityHandler.onDialog
    package: botbuilder
    summary: >-
      Registers an activity event handler for the _dialog_ event, emitted as the
      last event for an incoming activity.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onDialog(handler: BotHandler)'
      parameters:
        - id: handler
          type: BotHandler
          description: |
            The event handler.
      return:
        type: this
        description: ''
  - name: onEndOfConversation(BotHandler)
    uid: botbuilder.TeamsActivityHandler.onEndOfConversation
    package: botbuilder
    summary: >-
      Registers an activity event handler for the _end of conversation_
      activity.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onEndOfConversation(handler: BotHandler)'
      parameters:
        - id: handler
          type: BotHandler
          description: |
            The event handler.
      return:
        type: this
        description: ''
  - name: onEvent(BotHandler)
    uid: botbuilder.TeamsActivityHandler.onEvent
    package: botbuilder
    summary: >-
      Registers an activity event handler for the _event_ event, emitted for
      every incoming event activity.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onEvent(handler: BotHandler)'
      parameters:
        - id: handler
          type: BotHandler
          description: |
            The event handler.
      return:
        type: this
        description: ''
  - name: onInstallationUpdate(BotHandler)
    uid: botbuilder.TeamsActivityHandler.onInstallationUpdate
    package: botbuilder
    summary: Registers an activity event handler for the _installationupdate_ activity.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onInstallationUpdate(handler: BotHandler)'
      parameters:
        - id: handler
          type: BotHandler
          description: |
            The event handler.
      return:
        type: this
        description: ''
  - name: onInstallationUpdateAdd(BotHandler)
    uid: botbuilder.TeamsActivityHandler.onInstallationUpdateAdd
    package: botbuilder
    summary: >-
      Registers an activity event handler for the _installationupdate add_
      activity.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onInstallationUpdateAdd(handler: BotHandler)'
      parameters:
        - id: handler
          type: BotHandler
          description: |
            The event handler.
      return:
        type: this
        description: ''
  - name: onInstallationUpdateRemove(BotHandler)
    uid: botbuilder.TeamsActivityHandler.onInstallationUpdateRemove
    package: botbuilder
    summary: >-
      Registers an activity event handler for the _installationupdate remove_
      activity.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onInstallationUpdateRemove(handler: BotHandler)'
      parameters:
        - id: handler
          type: BotHandler
          description: |
            The event handler.
      return:
        type: this
        description: ''
  - name: onMembersAdded(BotHandler)
    uid: botbuilder.TeamsActivityHandler.onMembersAdded
    package: botbuilder
    summary: >-
      Registers an activity event handler for the _members added_ event, emitted
      for any incoming

      conversation update activity that includes members added to the
      conversation.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onMembersAdded(handler: BotHandler)'
      parameters:
        - id: handler
          type: BotHandler
          description: |
            The event handler.
      return:
        type: this
        description: ''
  - name: onMembersRemoved(BotHandler)
    uid: botbuilder.TeamsActivityHandler.onMembersRemoved
    package: botbuilder
    summary: >-
      Registers an activity event handler for the _members removed_ event,
      emitted for any incoming

      conversation update activity that includes members removed from the
      conversation.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onMembersRemoved(handler: BotHandler)'
      parameters:
        - id: handler
          type: BotHandler
          description: |
            The event handler.
      return:
        type: this
        description: ''
  - name: onMessage(BotHandler)
    uid: botbuilder.TeamsActivityHandler.onMessage
    package: botbuilder
    summary: >-
      Registers an activity event handler for the _message_ event, emitted for
      every incoming message activity.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onMessage(handler: BotHandler)'
      parameters:
        - id: handler
          type: BotHandler
          description: |
            The event handler.
      return:
        type: this
        description: ''
  - name: onMessageReaction(BotHandler)
    uid: botbuilder.TeamsActivityHandler.onMessageReaction
    package: botbuilder
    summary: >-
      Registers an activity event handler for the _message reaction_ event,
      emitted for every incoming

      message reaction activity.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onMessageReaction(handler: BotHandler)'
      parameters:
        - id: handler
          type: BotHandler
          description: |
            The event handler.
      return:
        type: this
        description: ''
  - name: onReactionsAdded(BotHandler)
    uid: botbuilder.TeamsActivityHandler.onReactionsAdded
    package: botbuilder
    summary: >-
      Registers an activity event handler for the _reactions added_ event,
      emitted for any incoming

      message reaction activity that describes reactions added to a message.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onReactionsAdded(handler: BotHandler)'
      parameters:
        - id: handler
          type: BotHandler
          description: |
            The event handler.
      return:
        type: this
        description: ''
  - name: onReactionsRemoved(BotHandler)
    uid: botbuilder.TeamsActivityHandler.onReactionsRemoved
    package: botbuilder
    summary: >-
      Registers an activity event handler for the _reactions removed_ event,
      emitted for any incoming

      message reaction activity that describes reactions removed from a message.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onReactionsRemoved(handler: BotHandler)'
      parameters:
        - id: handler
          type: BotHandler
          description: |
            The event handler.
      return:
        type: this
        description: ''
  - name: >-
      onTeamsChannelCreatedEvent((channelInfo: ChannelInfo, teamInfo: TeamInfo,
      context: TurnContext, next: () => Promise<void>) => Promise<void>)
    uid: botbuilder.TeamsActivityHandler.onTeamsChannelCreatedEvent
    package: botbuilder
    summary: >-
      Override this in a derived class to provide logic for when a channel is
      created.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function onTeamsChannelCreatedEvent(handler: (channelInfo: ChannelInfo,
        teamInfo: TeamInfo, context: TurnContext, next: () => Promise<void>) =>
        Promise<void>)
      parameters:
        - id: handler
          type: >-
            (channelInfo: ChannelInfo, teamInfo: TeamInfo, context: TurnContext,
            next: () =&gt; Promise&lt;void&gt;) =&gt; Promise&lt;void&gt;
          description: ''
      return:
        type: this
        description: A promise that represents the work queued.
  - name: >-
      onTeamsChannelDeletedEvent((channelInfo: ChannelInfo, teamInfo: TeamInfo,
      context: TurnContext, next: () => Promise<void>) => Promise<void>)
    uid: botbuilder.TeamsActivityHandler.onTeamsChannelDeletedEvent
    package: botbuilder
    summary: >-
      Override this in a derived class to provide logic for when a channel is
      deleted.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function onTeamsChannelDeletedEvent(handler: (channelInfo: ChannelInfo,
        teamInfo: TeamInfo, context: TurnContext, next: () => Promise<void>) =>
        Promise<void>)
      parameters:
        - id: handler
          type: >-
            (channelInfo: ChannelInfo, teamInfo: TeamInfo, context: TurnContext,
            next: () =&gt; Promise&lt;void&gt;) =&gt; Promise&lt;void&gt;
          description: ''
      return:
        type: this
        description: A promise that represents the work queued.
  - name: >-
      onTeamsChannelRenamedEvent((channelInfo: ChannelInfo, teamInfo: TeamInfo,
      context: TurnContext, next: () => Promise<void>) => Promise<void>)
    uid: botbuilder.TeamsActivityHandler.onTeamsChannelRenamedEvent
    package: botbuilder
    summary: >-
      Override this in a derived class to provide logic for when a channel is
      renamed.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function onTeamsChannelRenamedEvent(handler: (channelInfo: ChannelInfo,
        teamInfo: TeamInfo, context: TurnContext, next: () => Promise<void>) =>
        Promise<void>)
      parameters:
        - id: handler
          type: >-
            (channelInfo: ChannelInfo, teamInfo: TeamInfo, context: TurnContext,
            next: () =&gt; Promise&lt;void&gt;) =&gt; Promise&lt;void&gt;
          description: ''
      return:
        type: this
        description: A promise that represents the work queued.
  - name: >-
      onTeamsChannelRestoredEvent((channelInfo: ChannelInfo, teamInfo: TeamInfo,
      context: TurnContext, next: () => Promise<void>) => Promise<void>)
    uid: botbuilder.TeamsActivityHandler.onTeamsChannelRestoredEvent
    package: botbuilder
    summary: >-
      Override this in a derived class to provide logic for when a channel is
      restored.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function onTeamsChannelRestoredEvent(handler: (channelInfo: ChannelInfo,
        teamInfo: TeamInfo, context: TurnContext, next: () => Promise<void>) =>
        Promise<void>)
      parameters:
        - id: handler
          type: >-
            (channelInfo: ChannelInfo, teamInfo: TeamInfo, context: TurnContext,
            next: () =&gt; Promise&lt;void&gt;) =&gt; Promise&lt;void&gt;
          description: ''
      return:
        type: this
        description: A promise that represents the work queued.
  - name: >-
      onTeamsMembersAddedEvent((membersAdded: TeamsChannelAccount[], teamInfo:
      TeamInfo, context: TurnContext, next: () => Promise<void>) =>
      Promise<void>)
    uid: botbuilder.TeamsActivityHandler.onTeamsMembersAddedEvent
    package: botbuilder
    summary: >-
      Override this in a derived class to provide logic for when members other
      than the bot

      join the channel, such as your bot's welcome logic.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function onTeamsMembersAddedEvent(handler: (membersAdded:
        TeamsChannelAccount[], teamInfo: TeamInfo, context: TurnContext, next:
        () => Promise<void>) => Promise<void>)
      parameters:
        - id: handler
          type: >-
            (membersAdded: TeamsChannelAccount[], teamInfo: TeamInfo, context:
            TurnContext, next: () =&gt; Promise&lt;void&gt;) =&gt;
            Promise&lt;void&gt;
          description: ''
      return:
        type: this
        description: A promise that represents the work queued.
  - name: >-
      onTeamsMembersRemovedEvent((membersRemoved: TeamsChannelAccount[],
      teamInfo: TeamInfo, context: TurnContext, next: () => Promise<void>) =>
      Promise<void>)
    uid: botbuilder.TeamsActivityHandler.onTeamsMembersRemovedEvent
    package: botbuilder
    summary: >-
      Override this in a derived class to provide logic for when members other
      than the bot

      leave the channel, such as your bot's good-bye logic.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function onTeamsMembersRemovedEvent(handler: (membersRemoved:
        TeamsChannelAccount[], teamInfo: TeamInfo, context: TurnContext, next:
        () => Promise<void>) => Promise<void>)
      parameters:
        - id: handler
          type: >-
            (membersRemoved: TeamsChannelAccount[], teamInfo: TeamInfo, context:
            TurnContext, next: () =&gt; Promise&lt;void&gt;) =&gt;
            Promise&lt;void&gt;
          description: ''
      return:
        type: this
        description: A promise that represents the work queued.
  - name: >-
      onTeamsTeamArchivedEvent((teamInfo: TeamInfo, context: TurnContext, next:
      () => Promise<void>) => Promise<void>)
    uid: botbuilder.TeamsActivityHandler.onTeamsTeamArchivedEvent
    package: botbuilder
    summary: >-
      Override this in a derived class to provide logic for when a team is
      archived.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function onTeamsTeamArchivedEvent(handler: (teamInfo: TeamInfo, context:
        TurnContext, next: () => Promise<void>) => Promise<void>)
      parameters:
        - id: handler
          type: >-
            (teamInfo: TeamInfo, context: TurnContext, next: () =&gt;
            Promise&lt;void&gt;) =&gt; Promise&lt;void&gt;
          description: ''
      return:
        type: this
        description: A promise that represents the work queued.
  - name: >-
      onTeamsTeamDeletedEvent((teamInfo: TeamInfo, context: TurnContext, next:
      () => Promise<void>) => Promise<void>)
    uid: botbuilder.TeamsActivityHandler.onTeamsTeamDeletedEvent
    package: botbuilder
    summary: >-
      Override this in a derived class to provide logic for when a team is
      deleted.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function onTeamsTeamDeletedEvent(handler: (teamInfo: TeamInfo, context:
        TurnContext, next: () => Promise<void>) => Promise<void>)
      parameters:
        - id: handler
          type: >-
            (teamInfo: TeamInfo, context: TurnContext, next: () =&gt;
            Promise&lt;void&gt;) =&gt; Promise&lt;void&gt;
          description: ''
      return:
        type: this
        description: A promise that represents the work queued.
  - name: >-
      onTeamsTeamHardDeletedEvent((teamInfo: TeamInfo, context: TurnContext,
      next: () => Promise<void>) => Promise<void>)
    uid: botbuilder.TeamsActivityHandler.onTeamsTeamHardDeletedEvent
    package: botbuilder
    summary: >-
      Override this in a derived class to provide logic for when a team is
      hard-deleted.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function onTeamsTeamHardDeletedEvent(handler: (teamInfo: TeamInfo,
        context: TurnContext, next: () => Promise<void>) => Promise<void>)
      parameters:
        - id: handler
          type: >-
            (teamInfo: TeamInfo, context: TurnContext, next: () =&gt;
            Promise&lt;void&gt;) =&gt; Promise&lt;void&gt;
          description: ''
      return:
        type: this
        description: A promise that represents the work queued.
  - name: >-
      onTeamsTeamRenamedEvent((teamInfo: TeamInfo, context: TurnContext, next:
      () => Promise<void>) => Promise<void>)
    uid: botbuilder.TeamsActivityHandler.onTeamsTeamRenamedEvent
    package: botbuilder
    summary: >-
      Override this in a derived class to provide logic for when a team is
      renamed.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function onTeamsTeamRenamedEvent(handler: (teamInfo: TeamInfo, context:
        TurnContext, next: () => Promise<void>) => Promise<void>)
      parameters:
        - id: handler
          type: >-
            (teamInfo: TeamInfo, context: TurnContext, next: () =&gt;
            Promise&lt;void&gt;) =&gt; Promise&lt;void&gt;
          description: ''
      return:
        type: this
        description: A promise that represents the work queued.
  - name: >-
      onTeamsTeamRestoredEvent((teamInfo: TeamInfo, context: TurnContext, next:
      () => Promise<void>) => Promise<void>)
    uid: botbuilder.TeamsActivityHandler.onTeamsTeamRestoredEvent
    package: botbuilder
    summary: >-
      Override this in a derived class to provide logic for when a team is
      restored.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function onTeamsTeamRestoredEvent(handler: (teamInfo: TeamInfo, context:
        TurnContext, next: () => Promise<void>) => Promise<void>)
      parameters:
        - id: handler
          type: >-
            (teamInfo: TeamInfo, context: TurnContext, next: () =&gt;
            Promise&lt;void&gt;) =&gt; Promise&lt;void&gt;
          description: ''
      return:
        type: this
        description: A promise that represents the work queued.
  - name: >-
      onTeamsTeamUnarchivedEvent((teamInfo: TeamInfo, context: TurnContext,
      next: () => Promise<void>) => Promise<void>)
    uid: botbuilder.TeamsActivityHandler.onTeamsTeamUnarchivedEvent
    package: botbuilder
    summary: >-
      Override this in a derived class to provide logic for when a team is
      unarchived.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function onTeamsTeamUnarchivedEvent(handler: (teamInfo: TeamInfo,
        context: TurnContext, next: () => Promise<void>) => Promise<void>)
      parameters:
        - id: handler
          type: >-
            (teamInfo: TeamInfo, context: TurnContext, next: () =&gt;
            Promise&lt;void&gt;) =&gt; Promise&lt;void&gt;
          description: ''
      return:
        type: this
        description: A promise that represents the work queued.
  - name: onTokenResponseEvent(BotHandler)
    uid: botbuilder.TeamsActivityHandler.onTokenResponseEvent
    package: botbuilder
    summary: >-
      Registers an activity event handler for the _tokens-response_ event,
      emitted for any incoming

      `tokens/response` event activity. These are generated as part of the OAuth
      authentication flow.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onTokenResponseEvent(handler: BotHandler)'
      parameters:
        - id: handler
          type: BotHandler
          description: |
            The event handler.
      return:
        type: this
        description: ''
  - name: onTurn(BotHandler)
    uid: botbuilder.TeamsActivityHandler.onTurn
    package: botbuilder
    summary: >-
      Registers an activity event handler for the _turn_ event, emitted for
      every incoming activity, regardless of type.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onTurn(handler: BotHandler)'
      parameters:
        - id: handler
          type: BotHandler
          description: |
            The event handler.
      return:
        type: this
        description: ''
  - name: onTyping(BotHandler)
    uid: botbuilder.TeamsActivityHandler.onTyping
    package: botbuilder
    summary: Registers an activity event handler for the _typing_ activity.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onTyping(handler: BotHandler)'
      parameters:
        - id: handler
          type: BotHandler
          description: |
            The event handler.
      return:
        type: this
        description: ''
  - name: onUnrecognizedActivityType(BotHandler)
    uid: botbuilder.TeamsActivityHandler.onUnrecognizedActivityType
    package: botbuilder
    summary: >-
      Registers an activity event handler for the _unrecognized activity type_
      event, emitted for an

      incoming activity with a type for which the
      [ActivityHandler](xref:botbuilder-core.ActivityHandler)

      doesn't provide an event handler.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onUnrecognizedActivityType(handler: BotHandler)'
      parameters:
        - id: handler
          type: BotHandler
          description: |
            The event handler.
      return:
        type: this
        description: ''
  - name: run(TurnContext)
    uid: botbuilder.TeamsActivityHandler.run
    package: botbuilder
    summary: Called to initiate the event emission process.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function run(context: TurnContext)'
      parameters:
        - id: context
          type: TurnContext
          description: |
            The context object for the current turn.
      return:
        type: Promise&lt;void&gt;
        description: ''
extends: ActivityHandler
