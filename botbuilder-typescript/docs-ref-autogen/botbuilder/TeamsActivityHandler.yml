### YamlMime:TSType
name: TeamsActivityHandler
uid: botbuilder.TeamsActivityHandler
package: botbuilder
summary: ''
fullName: TeamsActivityHandler
remarks: ''
isPreview: false
isDeprecated: false
type: class
methods:
  - name: onConversationUpdate(BotHandler)
    uid: botbuilder.TeamsActivityHandler.onConversationUpdate
    package: botbuilder
    summary: >-
      Registers an activity event handler for the _conversation update_ event,
      emitted for every incoming

      conversation update activity.
    remarks: >-
      Returns a reference to the
      [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.


      Conversation update activities describe a changes to a conversation's
      metadata, such as title, participants,

      or other channel-specific information.


      To handle when members are added to or removed from the conversation, use
      the

      [onMembersAdded](xref:botbuilder-core.ActivityHandler.onMembersAdded) and

      [onMembersRemoved](xref:botbuilder-core.ActivityHandler.onMembersRemoved)
      sub-type event handlers.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onConversationUpdate(handler: BotHandler)'
      parameters:
        - id: handler
          type: BotHandler
          description: |
            The event handler.
      return:
        type: this
        description: ''
  - name: onDialog(BotHandler)
    uid: botbuilder.TeamsActivityHandler.onDialog
    package: botbuilder
    summary: >-
      Registers an activity event handler for the _dialog_ event, emitted as the
      last event for an incoming activity.
    remarks: >-
      Returns a reference to the
      [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onDialog(handler: BotHandler)'
      parameters:
        - id: handler
          type: BotHandler
          description: |
            The event handler.
      return:
        type: this
        description: ''
  - name: onEndOfConversation(BotHandler)
    uid: botbuilder.TeamsActivityHandler.onEndOfConversation
    package: botbuilder
    summary: >-
      Registers an activity event handler for the _end of conversation_
      activity.
    remarks: >-
      Returns a reference to the
      [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.


      This activity is typically send from a Skill to a Skill caller indicating
      the end of that particular child conversation.


      To handle an End of Conversation, use the

      [onEndOfConversation](xref:botbuilder-core.ActivityHandler.onEndOfConversation)
      type-specific event handler.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onEndOfConversation(handler: BotHandler)'
      parameters:
        - id: handler
          type: BotHandler
          description: |
            The event handler.
      return:
        type: this
        description: ''
  - name: onEvent(BotHandler)
    uid: botbuilder.TeamsActivityHandler.onEvent
    package: botbuilder
    summary: >-
      Registers an activity event handler for the _event_ event, emitted for
      every incoming event activity.
    remarks: >-
      Returns a reference to the
      [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.


      Event activities communicate programmatic information from a client or
      channel to a bot.

      The meaning of an event activity is defined by the activity's

      [name](xref:botframework-schema.Activity.name) property, which is
      meaningful within the scope

      of a channel. Event activities are designed to carry both interactive
      information (such as

      button clicks) and non-interactive information (such as a notification of
      a client

      automatically updating an embedded speech model).


      To handle a `tokens/response` event event, use the

      [onTokenResponseEvent](xref:botbuilder-core.ActivityHandler.onTokenResponseEvent)
      sub-type

      event handler. To handle other named events, add logic to this handler.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onEvent(handler: BotHandler)'
      parameters:
        - id: handler
          type: BotHandler
          description: |
            The event handler.
      return:
        type: this
        description: ''
  - name: onInstallationUpdate(BotHandler)
    uid: botbuilder.TeamsActivityHandler.onInstallationUpdate
    package: botbuilder
    summary: Registers an activity event handler for the _installationupdate_ activity.
    remarks: >-
      Returns a reference to the
      [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.


      To handle a InstallationUpdate event, use the

      [onInstallationUpdate](xref:botbuilder-core.ActivityHandler.onInstallationUpdate)
      type-specific event handler.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onInstallationUpdate(handler: BotHandler)'
      parameters:
        - id: handler
          type: BotHandler
          description: |
            The event handler.
      return:
        type: this
        description: ''
  - name: onInstallationUpdateAdd(BotHandler)
    uid: botbuilder.TeamsActivityHandler.onInstallationUpdateAdd
    package: botbuilder
    summary: >-
      Registers an activity event handler for the _installationupdate add_
      activity.
    remarks: >-
      Returns a reference to the
      [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.


      To handle a InstallationUpdateAdd event, use the

      [onInstallationUpdateAdd](xref:botbuilder-core.ActivityHandler.onInstallationUpdateAdd)
      type-specific event handler.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onInstallationUpdateAdd(handler: BotHandler)'
      parameters:
        - id: handler
          type: BotHandler
          description: |
            The event handler.
      return:
        type: this
        description: ''
  - name: onInstallationUpdateRemove(BotHandler)
    uid: botbuilder.TeamsActivityHandler.onInstallationUpdateRemove
    package: botbuilder
    summary: >-
      Registers an activity event handler for the _installationupdate remove_
      activity.
    remarks: >-
      Returns a reference to the
      [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.


      To handle a InstallationUpdateRemove event, use the

      [onInstallationUpdateRemove](xref:botbuilder-core.ActivityHandler.onInstallationUpdateRemove)
      type-specific event handler.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onInstallationUpdateRemove(handler: BotHandler)'
      parameters:
        - id: handler
          type: BotHandler
          description: |
            The event handler.
      return:
        type: this
        description: ''
  - name: onMembersAdded(BotHandler)
    uid: botbuilder.TeamsActivityHandler.onMembersAdded
    package: botbuilder
    summary: >-
      Registers an activity event handler for the _members added_ event, emitted
      for any incoming

      conversation update activity that includes members added to the
      conversation.
    remarks: >-
      Returns a reference to the
      [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.


      The activity's
      [membersAdded](xref:botframework-schema.Activity.membersAdded) property

      contains the members added to the conversation, which can include the bot.


      To handle conversation update events in general, use the

      [onConversationUpdate](xref:botbuilder-core.ActivityHandler.onConversationUpdate)
      type-specific event handler.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onMembersAdded(handler: BotHandler)'
      parameters:
        - id: handler
          type: BotHandler
          description: |
            The event handler.
      return:
        type: this
        description: ''
  - name: onMembersRemoved(BotHandler)
    uid: botbuilder.TeamsActivityHandler.onMembersRemoved
    package: botbuilder
    summary: >-
      Registers an activity event handler for the _members removed_ event,
      emitted for any incoming

      conversation update activity that includes members removed from the
      conversation.
    remarks: >-
      Returns a reference to the
      [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.


      The activity's
      [membersRemoved](xref:botframework-schema.Activity.membersRemoved)
      property

      contains the members removed from the conversation, which can include the
      bot.


      To handle conversation update events in general, use the

      [onConversationUpdate](xref:botbuilder-core.ActivityHandler.onConversationUpdate)
      type-specific event handler.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onMembersRemoved(handler: BotHandler)'
      parameters:
        - id: handler
          type: BotHandler
          description: |
            The event handler.
      return:
        type: this
        description: ''
  - name: onMessage(BotHandler)
    uid: botbuilder.TeamsActivityHandler.onMessage
    package: botbuilder
    summary: >-
      Registers an activity event handler for the _message_ event, emitted for
      every incoming message activity.
    remarks: >-
      Returns a reference to the
      [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.


      Message activities represent content intended to be shown within a
      conversational interface

      and can contain text, speech, interactive cards, and binary or unknown
      attachments.

      Not all message activities contain text, the activity's
      [text](xref:botframework-schema.Activity.text)

      property can be `null` or `undefined`.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onMessage(handler: BotHandler)'
      parameters:
        - id: handler
          type: BotHandler
          description: |
            The event handler.
      return:
        type: this
        description: ''
  - name: onMessageReaction(BotHandler)
    uid: botbuilder.TeamsActivityHandler.onMessageReaction
    package: botbuilder
    summary: >-
      Registers an activity event handler for the _message reaction_ event,
      emitted for every incoming

      message reaction activity.
    remarks: >-
      Returns a reference to the
      [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.


      Message reaction activities represent a social interaction on an existing
      message activity

      within a conversation. The original activity is referred to by the message
      reaction activity's

      [replyToId](xref:botframework-schema.Activity.replyToId) property. The

      [from](xref:botframework-schema.Activity.from) property represents the
      source of the reaction,

      such as the user that reacted to the message.


      To handle when reactions are added to or removed from messages in the
      conversation, use the

      [onReactionsAdded](xref:botbuilder-core.ActivityHandler.onReactionsAdded)
      and

      [onReactionsRemoved](xref:botbuilder-core.ActivityHandler.onReactionsRemoved)
      sub-type event handlers.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onMessageReaction(handler: BotHandler)'
      parameters:
        - id: handler
          type: BotHandler
          description: |
            The event handler.
      return:
        type: this
        description: ''
  - name: onReactionsAdded(BotHandler)
    uid: botbuilder.TeamsActivityHandler.onReactionsAdded
    package: botbuilder
    summary: >-
      Registers an activity event handler for the _reactions added_ event,
      emitted for any incoming

      message reaction activity that describes reactions added to a message.
    remarks: >-
      Returns a reference to the
      [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.


      The activity's
      [reactionsAdded](xref:botframework-schema.Activity.reactionsAdded)
      property

      includes one or more reactions that were added.


      To handle message reaction events in general, use the

      [onMessageReaction](xref:botbuilder-core.ActivityHandler.onMessageReaction)
      type-specific event handler.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onReactionsAdded(handler: BotHandler)'
      parameters:
        - id: handler
          type: BotHandler
          description: |
            The event handler.
      return:
        type: this
        description: ''
  - name: onReactionsRemoved(BotHandler)
    uid: botbuilder.TeamsActivityHandler.onReactionsRemoved
    package: botbuilder
    summary: >-
      Registers an activity event handler for the _reactions removed_ event,
      emitted for any incoming

      message reaction activity that describes reactions removed from a message.
    remarks: >-
      Returns a reference to the
      [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.


      The activity's
      [reactionsRemoved](xref:botframework-schema.Activity.reactionsRemoved)
      property

      includes one or more reactions that were removed.


      To handle message reaction events in general, use the

      [onMessageReaction](xref:botbuilder-core.ActivityHandler.onMessageReaction)
      type-specific event handler.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onReactionsRemoved(handler: BotHandler)'
      parameters:
        - id: handler
          type: BotHandler
          description: |
            The event handler.
      return:
        type: this
        description: ''
  - name: >-
      onTeamsChannelCreatedEvent((channelInfo: ChannelInfo, teamInfo: TeamInfo,
      context: TurnContext, next: () => Promise<void>) => Promise<void>)
    uid: botbuilder.TeamsActivityHandler.onTeamsChannelCreatedEvent
    package: botbuilder
    summary: >-
      Override this in a derived class to provide logic for when a channel is
      created.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function onTeamsChannelCreatedEvent(handler: (channelInfo: ChannelInfo,
        teamInfo: TeamInfo, context: TurnContext, next: () => Promise<void>) =>
        Promise<void>)
      parameters:
        - id: handler
          type: >-
            (channelInfo: ChannelInfo, teamInfo: TeamInfo, context: TurnContext,
            next: () =&gt; Promise&lt;void&gt;) =&gt; Promise&lt;void&gt;
          description: ''
      return:
        type: this
        description: A promise that represents the work queued.
  - name: >-
      onTeamsChannelDeletedEvent((channelInfo: ChannelInfo, teamInfo: TeamInfo,
      context: TurnContext, next: () => Promise<void>) => Promise<void>)
    uid: botbuilder.TeamsActivityHandler.onTeamsChannelDeletedEvent
    package: botbuilder
    summary: >-
      Override this in a derived class to provide logic for when a channel is
      deleted.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function onTeamsChannelDeletedEvent(handler: (channelInfo: ChannelInfo,
        teamInfo: TeamInfo, context: TurnContext, next: () => Promise<void>) =>
        Promise<void>)
      parameters:
        - id: handler
          type: >-
            (channelInfo: ChannelInfo, teamInfo: TeamInfo, context: TurnContext,
            next: () =&gt; Promise&lt;void&gt;) =&gt; Promise&lt;void&gt;
          description: ''
      return:
        type: this
        description: A promise that represents the work queued.
  - name: >-
      onTeamsChannelRenamedEvent((channelInfo: ChannelInfo, teamInfo: TeamInfo,
      context: TurnContext, next: () => Promise<void>) => Promise<void>)
    uid: botbuilder.TeamsActivityHandler.onTeamsChannelRenamedEvent
    package: botbuilder
    summary: >-
      Override this in a derived class to provide logic for when a channel is
      renamed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function onTeamsChannelRenamedEvent(handler: (channelInfo: ChannelInfo,
        teamInfo: TeamInfo, context: TurnContext, next: () => Promise<void>) =>
        Promise<void>)
      parameters:
        - id: handler
          type: >-
            (channelInfo: ChannelInfo, teamInfo: TeamInfo, context: TurnContext,
            next: () =&gt; Promise&lt;void&gt;) =&gt; Promise&lt;void&gt;
          description: ''
      return:
        type: this
        description: A promise that represents the work queued.
  - name: >-
      onTeamsChannelRestoredEvent((channelInfo: ChannelInfo, teamInfo: TeamInfo,
      context: TurnContext, next: () => Promise<void>) => Promise<void>)
    uid: botbuilder.TeamsActivityHandler.onTeamsChannelRestoredEvent
    package: botbuilder
    summary: >-
      Override this in a derived class to provide logic for when a channel is
      restored.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function onTeamsChannelRestoredEvent(handler: (channelInfo: ChannelInfo,
        teamInfo: TeamInfo, context: TurnContext, next: () => Promise<void>) =>
        Promise<void>)
      parameters:
        - id: handler
          type: >-
            (channelInfo: ChannelInfo, teamInfo: TeamInfo, context: TurnContext,
            next: () =&gt; Promise&lt;void&gt;) =&gt; Promise&lt;void&gt;
          description: ''
      return:
        type: this
        description: A promise that represents the work queued.
  - name: >-
      onTeamsMembersAddedEvent((membersAdded: TeamsChannelAccount[], teamInfo:
      TeamInfo, context: TurnContext, next: () => Promise<void>) =>
      Promise<void>)
    uid: botbuilder.TeamsActivityHandler.onTeamsMembersAddedEvent
    package: botbuilder
    summary: >-
      Override this in a derived class to provide logic for when members other
      than the bot

      join the channel, such as your bot's welcome logic.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function onTeamsMembersAddedEvent(handler: (membersAdded:
        TeamsChannelAccount[], teamInfo: TeamInfo, context: TurnContext, next:
        () => Promise<void>) => Promise<void>)
      parameters:
        - id: handler
          type: >-
            (membersAdded: TeamsChannelAccount[], teamInfo: TeamInfo, context:
            TurnContext, next: () =&gt; Promise&lt;void&gt;) =&gt;
            Promise&lt;void&gt;
          description: ''
      return:
        type: this
        description: A promise that represents the work queued.
  - name: >-
      onTeamsMembersRemovedEvent((membersRemoved: TeamsChannelAccount[],
      teamInfo: TeamInfo, context: TurnContext, next: () => Promise<void>) =>
      Promise<void>)
    uid: botbuilder.TeamsActivityHandler.onTeamsMembersRemovedEvent
    package: botbuilder
    summary: >-
      Override this in a derived class to provide logic for when members other
      than the bot

      leave the channel, such as your bot's good-bye logic.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function onTeamsMembersRemovedEvent(handler: (membersRemoved:
        TeamsChannelAccount[], teamInfo: TeamInfo, context: TurnContext, next:
        () => Promise<void>) => Promise<void>)
      parameters:
        - id: handler
          type: >-
            (membersRemoved: TeamsChannelAccount[], teamInfo: TeamInfo, context:
            TurnContext, next: () =&gt; Promise&lt;void&gt;) =&gt;
            Promise&lt;void&gt;
          description: ''
      return:
        type: this
        description: A promise that represents the work queued.
  - name: >-
      onTeamsTeamArchivedEvent((teamInfo: TeamInfo, context: TurnContext, next:
      () => Promise<void>) => Promise<void>)
    uid: botbuilder.TeamsActivityHandler.onTeamsTeamArchivedEvent
    package: botbuilder
    summary: >-
      Override this in a derived class to provide logic for when a team is
      archived.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function onTeamsTeamArchivedEvent(handler: (teamInfo: TeamInfo, context:
        TurnContext, next: () => Promise<void>) => Promise<void>)
      parameters:
        - id: handler
          type: >-
            (teamInfo: TeamInfo, context: TurnContext, next: () =&gt;
            Promise&lt;void&gt;) =&gt; Promise&lt;void&gt;
          description: ''
      return:
        type: this
        description: A promise that represents the work queued.
  - name: >-
      onTeamsTeamDeletedEvent((teamInfo: TeamInfo, context: TurnContext, next:
      () => Promise<void>) => Promise<void>)
    uid: botbuilder.TeamsActivityHandler.onTeamsTeamDeletedEvent
    package: botbuilder
    summary: >-
      Override this in a derived class to provide logic for when a team is
      deleted.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function onTeamsTeamDeletedEvent(handler: (teamInfo: TeamInfo, context:
        TurnContext, next: () => Promise<void>) => Promise<void>)
      parameters:
        - id: handler
          type: >-
            (teamInfo: TeamInfo, context: TurnContext, next: () =&gt;
            Promise&lt;void&gt;) =&gt; Promise&lt;void&gt;
          description: ''
      return:
        type: this
        description: A promise that represents the work queued.
  - name: >-
      onTeamsTeamHardDeletedEvent((teamInfo: TeamInfo, context: TurnContext,
      next: () => Promise<void>) => Promise<void>)
    uid: botbuilder.TeamsActivityHandler.onTeamsTeamHardDeletedEvent
    package: botbuilder
    summary: >-
      Override this in a derived class to provide logic for when a team is
      hard-deleted.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function onTeamsTeamHardDeletedEvent(handler: (teamInfo: TeamInfo,
        context: TurnContext, next: () => Promise<void>) => Promise<void>)
      parameters:
        - id: handler
          type: >-
            (teamInfo: TeamInfo, context: TurnContext, next: () =&gt;
            Promise&lt;void&gt;) =&gt; Promise&lt;void&gt;
          description: ''
      return:
        type: this
        description: A promise that represents the work queued.
  - name: >-
      onTeamsTeamRenamedEvent((teamInfo: TeamInfo, context: TurnContext, next:
      () => Promise<void>) => Promise<void>)
    uid: botbuilder.TeamsActivityHandler.onTeamsTeamRenamedEvent
    package: botbuilder
    summary: >-
      Override this in a derived class to provide logic for when a team is
      renamed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function onTeamsTeamRenamedEvent(handler: (teamInfo: TeamInfo, context:
        TurnContext, next: () => Promise<void>) => Promise<void>)
      parameters:
        - id: handler
          type: >-
            (teamInfo: TeamInfo, context: TurnContext, next: () =&gt;
            Promise&lt;void&gt;) =&gt; Promise&lt;void&gt;
          description: ''
      return:
        type: this
        description: A promise that represents the work queued.
  - name: >-
      onTeamsTeamRestoredEvent((teamInfo: TeamInfo, context: TurnContext, next:
      () => Promise<void>) => Promise<void>)
    uid: botbuilder.TeamsActivityHandler.onTeamsTeamRestoredEvent
    package: botbuilder
    summary: >-
      Override this in a derived class to provide logic for when a team is
      restored.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function onTeamsTeamRestoredEvent(handler: (teamInfo: TeamInfo, context:
        TurnContext, next: () => Promise<void>) => Promise<void>)
      parameters:
        - id: handler
          type: >-
            (teamInfo: TeamInfo, context: TurnContext, next: () =&gt;
            Promise&lt;void&gt;) =&gt; Promise&lt;void&gt;
          description: ''
      return:
        type: this
        description: A promise that represents the work queued.
  - name: >-
      onTeamsTeamUnarchivedEvent((teamInfo: TeamInfo, context: TurnContext,
      next: () => Promise<void>) => Promise<void>)
    uid: botbuilder.TeamsActivityHandler.onTeamsTeamUnarchivedEvent
    package: botbuilder
    summary: >-
      Override this in a derived class to provide logic for when a team is
      unarchived.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function onTeamsTeamUnarchivedEvent(handler: (teamInfo: TeamInfo,
        context: TurnContext, next: () => Promise<void>) => Promise<void>)
      parameters:
        - id: handler
          type: >-
            (teamInfo: TeamInfo, context: TurnContext, next: () =&gt;
            Promise&lt;void&gt;) =&gt; Promise&lt;void&gt;
          description: ''
      return:
        type: this
        description: A promise that represents the work queued.
  - name: onTokenResponseEvent(BotHandler)
    uid: botbuilder.TeamsActivityHandler.onTokenResponseEvent
    package: botbuilder
    summary: >-
      Registers an activity event handler for the _tokens-response_ event,
      emitted for any incoming

      `tokens/response` event activity. These are generated as part of the OAuth
      authentication flow.
    remarks: >-
      Returns a reference to the
      [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.


      The activity's [value](xref:botframework-schema.Activity.value) property
      contains the user token.


      If your bot handles authentication using an
      [OAuthPrompt](xref:botbuilder-dialogs.OAuthPrompt)

      within a dialog, then the dialog will need to receive this activity to
      complete the authentication flow.


      To handle other named events and event events in general, use the

      [onEvent](xref:botbuilder-core.ActivityHandler.onEvent) type-specific
      event handler.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onTokenResponseEvent(handler: BotHandler)'
      parameters:
        - id: handler
          type: BotHandler
          description: |
            The event handler.
      return:
        type: this
        description: ''
  - name: onTurn(BotHandler)
    uid: botbuilder.TeamsActivityHandler.onTurn
    package: botbuilder
    summary: >-
      Registers an activity event handler for the _turn_ event, emitted for
      every incoming activity, regardless of type.
    remarks: >-
      Returns a reference to the
      [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onTurn(handler: BotHandler)'
      parameters:
        - id: handler
          type: BotHandler
          description: |
            The event handler.
      return:
        type: this
        description: ''
  - name: onTyping(BotHandler)
    uid: botbuilder.TeamsActivityHandler.onTyping
    package: botbuilder
    summary: Registers an activity event handler for the _typing_ activity.
    remarks: >-
      Returns a reference to the
      [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.


      To handle a Typing event, use the

      [onTyping](xref:botbuilder-core.ActivityHandler.onTyping) type-specific
      event handler.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onTyping(handler: BotHandler)'
      parameters:
        - id: handler
          type: BotHandler
          description: |
            The event handler.
      return:
        type: this
        description: ''
  - name: onUnrecognizedActivityType(BotHandler)
    uid: botbuilder.TeamsActivityHandler.onUnrecognizedActivityType
    package: botbuilder
    summary: >-
      Registers an activity event handler for the _unrecognized activity type_
      event, emitted for an

      incoming activity with a type for which the
      [ActivityHandler](xref:botbuilder-core.ActivityHandler)

      doesn't provide an event handler.
    remarks: >-
      Returns a reference to the
      [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.


      The `ActivityHandler` does not define events for all activity types
      defined in the

      [Bot Framework Activity schema](http://aka.ms/botSpecs-activitySchema). In
      addition,

      channels and custom adapters can create
      [Activities](xref:botframework-schema.Activity) with

      types not in the schema. When the activity handler receives such an event,
      it emits an unrecognized activity type event.


      The activity's [type](xref:botframework-schema.Activity.type) property
      contains the activity type.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onUnrecognizedActivityType(handler: BotHandler)'
      parameters:
        - id: handler
          type: BotHandler
          description: |
            The event handler.
      return:
        type: this
        description: ''
  - name: run(TurnContext)
    uid: botbuilder.TeamsActivityHandler.run
    package: botbuilder
    summary: Called to initiate the event emission process.
    remarks: >-
      Typically, you would provide this method as the function handler that the
      adapter calls

      to perform the bot's logic after the received activity has been
      pre-processed by the adapter

      and routed through any middleware.


      For example:

      ```javascript
       server.post('/api/messages', (req, res) => {
           adapter.processActivity(req, res, async (context) => {
               // Route to bot's activity logic.
               await bot.run(context);
           });
      });

      ```


      **See also**

      -
      [BotFrameworkAdapter.processActivity](xref:botbuilder.BotFrameworkAdapter.processActivity)
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function run(context: TurnContext)'
      parameters:
        - id: context
          type: TurnContext
          description: |
            The context object for the current turn.
      return:
        type: Promise&lt;void&gt;
        description: ''
extends: ActivityHandler
