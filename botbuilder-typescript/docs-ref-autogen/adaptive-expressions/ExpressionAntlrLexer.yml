### YamlMime:TSType
name: ExpressionAntlrLexer
uid: adaptive-expressions.ExpressionAntlrLexer
package: adaptive-expressions
summary: ''
fullName: ExpressionAntlrLexer
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: ExpressionAntlrLexer(CharStream)
    uid: adaptive-expressions.ExpressionAntlrLexer.constructor
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new ExpressionAntlrLexer(input: CharStream)'
      parameters:
        - id: input
          type: CharStream
          description: ''
properties:
  - name: ARROW
    uid: adaptive-expressions.ExpressionAntlrLexer.ARROW
    package: adaptive-expressions
    summary: ''
    fullName: ARROW
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static ARROW: 27 = 27'
      return:
        type: '27'
        description: ''
  - name: ASTERISK
    uid: adaptive-expressions.ExpressionAntlrLexer.ASTERISK
    package: adaptive-expressions
    summary: ''
    fullName: ASTERISK
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static ASTERISK: 6 = 6'
      return:
        type: '6'
        description: ''
  - name: atn
    uid: adaptive-expressions.ExpressionAntlrLexer.atn
    package: adaptive-expressions
    summary: 'Get the <xref:ATN> used by the recognizer for prediction.'
    fullName: atn
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'atn: ATN'
      return:
        type: ATN
        description: ''
  - name: channel
    uid: adaptive-expressions.ExpressionAntlrLexer.channel
    package: adaptive-expressions
    summary: ''
    fullName: channel
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'channel: number'
      return:
        type: number
        description: ''
  - name: channelNames
    uid: adaptive-expressions.ExpressionAntlrLexer.channelNames
    package: adaptive-expressions
    summary: ''
    fullName: channelNames
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: "public static channelNames: string[] = [\n\t\t\"DEFAULT_TOKEN_CHANNEL\", \"HIDDEN\",\n\t]"
      return:
        type: 'string[]'
        description: ''
  - name: channelNames
    uid: adaptive-expressions.ExpressionAntlrLexer.channelNames
    package: adaptive-expressions
    summary: ''
    fullName: channelNames
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'string[] channelNames'
      return:
        type: 'string[]'
        description: ''
  - name: charIndex
    uid: adaptive-expressions.ExpressionAntlrLexer.charIndex
    package: adaptive-expressions
    summary: What is the index of the current character of lookahead?
    fullName: charIndex
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'charIndex: number'
      return:
        type: number
        description: ''
  - name: charPositionInLine
    uid: adaptive-expressions.ExpressionAntlrLexer.charPositionInLine
    package: adaptive-expressions
    summary: ''
    fullName: charPositionInLine
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'charPositionInLine: number'
      return:
        type: number
        description: ''
  - name: CLOSE_BRACKET
    uid: adaptive-expressions.ExpressionAntlrLexer.CLOSE_BRACKET
    package: adaptive-expressions
    summary: ''
    fullName: CLOSE_BRACKET
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static CLOSE_BRACKET: 19 = 19'
      return:
        type: '19'
        description: ''
  - name: CLOSE_CURLY_BRACKET
    uid: adaptive-expressions.ExpressionAntlrLexer.CLOSE_CURLY_BRACKET
    package: adaptive-expressions
    summary: ''
    fullName: CLOSE_CURLY_BRACKET
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static CLOSE_CURLY_BRACKET: 24 = 24'
      return:
        type: '24'
        description: ''
  - name: CLOSE_SQUARE_BRACKET
    uid: adaptive-expressions.ExpressionAntlrLexer.CLOSE_SQUARE_BRACKET
    package: adaptive-expressions
    summary: ''
    fullName: CLOSE_SQUARE_BRACKET
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static CLOSE_SQUARE_BRACKET: 22 = 22'
      return:
        type: '22'
        description: ''
  - name: COLON
    uid: adaptive-expressions.ExpressionAntlrLexer.COLON
    package: adaptive-expressions
    summary: ''
    fullName: COLON
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static COLON: 26 = 26'
      return:
        type: '26'
        description: ''
  - name: COMMA
    uid: adaptive-expressions.ExpressionAntlrLexer.COMMA
    package: adaptive-expressions
    summary: ''
    fullName: COMMA
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static COMMA: 25 = 25'
      return:
        type: '25'
        description: ''
  - name: DEFAULT_MODE
    uid: adaptive-expressions.ExpressionAntlrLexer.DEFAULT_MODE
    package: adaptive-expressions
    summary: ''
    fullName: DEFAULT_MODE
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static DEFAULT_MODE: number'
      return:
        type: number
        description: ''
  - name: DEFAULT_TOKEN_CHANNEL
    uid: adaptive-expressions.ExpressionAntlrLexer.DEFAULT_TOKEN_CHANNEL
    package: adaptive-expressions
    summary: ''
    fullName: DEFAULT_TOKEN_CHANNEL
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static DEFAULT_TOKEN_CHANNEL: number'
      return:
        type: number
        description: ''
  - name: DOT
    uid: adaptive-expressions.ExpressionAntlrLexer.DOT
    package: adaptive-expressions
    summary: ''
    fullName: DOT
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static DOT: 20 = 20'
      return:
        type: '20'
        description: ''
  - name: DOUBLE_AND
    uid: adaptive-expressions.ExpressionAntlrLexer.DOUBLE_AND
    package: adaptive-expressions
    summary: ''
    fullName: DOUBLE_AND
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static DOUBLE_AND: 12 = 12'
      return:
        type: '12'
        description: ''
  - name: DOUBLE_EQUAL
    uid: adaptive-expressions.ExpressionAntlrLexer.DOUBLE_EQUAL
    package: adaptive-expressions
    summary: ''
    fullName: DOUBLE_EQUAL
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static DOUBLE_EQUAL: 9 = 9'
      return:
        type: '9'
        description: ''
  - name: DOUBLE_VERTICAL_CYLINDER
    uid: adaptive-expressions.ExpressionAntlrLexer.DOUBLE_VERTICAL_CYLINDER
    package: adaptive-expressions
    summary: ''
    fullName: DOUBLE_VERTICAL_CYLINDER
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static DOUBLE_VERTICAL_CYLINDER: 13 = 13'
      return:
        type: '13'
        description: ''
  - name: EOF
    uid: adaptive-expressions.ExpressionAntlrLexer.EOF
    package: adaptive-expressions
    summary: ''
    fullName: EOF
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static EOF: number'
      return:
        type: number
        description: ''
  - name: ESCAPE_CHARACTER
    uid: adaptive-expressions.ExpressionAntlrLexer.ESCAPE_CHARACTER
    package: adaptive-expressions
    summary: ''
    fullName: ESCAPE_CHARACTER
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static ESCAPE_CHARACTER: 35 = 35'
      return:
        type: '35'
        description: ''
  - name: grammarFileName
    uid: adaptive-expressions.ExpressionAntlrLexer.grammarFileName
    package: adaptive-expressions
    summary: ''
    fullName: grammarFileName
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: string grammarFileName
      return:
        type: string
        description: ''
  - name: HIDDEN
    uid: adaptive-expressions.ExpressionAntlrLexer.HIDDEN
    package: adaptive-expressions
    summary: ''
    fullName: HIDDEN
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static HIDDEN: number'
      return:
        type: number
        description: ''
  - name: IDENTIFIER
    uid: adaptive-expressions.ExpressionAntlrLexer.IDENTIFIER
    package: adaptive-expressions
    summary: ''
    fullName: IDENTIFIER
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static IDENTIFIER: 30 = 30'
      return:
        type: '30'
        description: ''
  - name: ignoreWS
    uid: adaptive-expressions.ExpressionAntlrLexer.ignoreWS
    package: adaptive-expressions
    summary: ''
    fullName: ignoreWS
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ignoreWS: boolean = true'
      return:
        type: boolean
        description: ''
  - name: inputStream
    uid: adaptive-expressions.ExpressionAntlrLexer.inputStream
    package: adaptive-expressions
    summary: Set the char stream and reset the lexer
    fullName: inputStream
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'inputStream: CharStream'
      return:
        type: CharStream
        description: ''
  - name: interpreter
    uid: adaptive-expressions.ExpressionAntlrLexer.interpreter
    package: adaptive-expressions
    summary: Set the ATN interpreter used by the recognizer for prediction.
    fullName: interpreter
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'interpreter: LexerATNSimulator'
      return:
        type: LexerATNSimulator
        description: ''
  - name: INVALID_TOKEN_DEFAULT_MODE
    uid: adaptive-expressions.ExpressionAntlrLexer.INVALID_TOKEN_DEFAULT_MODE
    package: adaptive-expressions
    summary: ''
    fullName: INVALID_TOKEN_DEFAULT_MODE
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static INVALID_TOKEN_DEFAULT_MODE: 33 = 33'
      return:
        type: '33'
        description: ''
  - name: LESS_OR_EQUAl
    uid: adaptive-expressions.ExpressionAntlrLexer.LESS_OR_EQUAl
    package: adaptive-expressions
    summary: ''
    fullName: LESS_OR_EQUAl
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static LESS_OR_EQUAl: 16 = 16'
      return:
        type: '16'
        description: ''
  - name: LESS_THAN
    uid: adaptive-expressions.ExpressionAntlrLexer.LESS_THAN
    package: adaptive-expressions
    summary: ''
    fullName: LESS_THAN
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static LESS_THAN: 14 = 14'
      return:
        type: '14'
        description: ''
  - name: line
    uid: adaptive-expressions.ExpressionAntlrLexer.line
    package: adaptive-expressions
    summary: ''
    fullName: line
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'line: number'
      return:
        type: number
        description: ''
  - name: MAX_CHAR_VALUE
    uid: adaptive-expressions.ExpressionAntlrLexer.MAX_CHAR_VALUE
    package: adaptive-expressions
    summary: ''
    fullName: MAX_CHAR_VALUE
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static MAX_CHAR_VALUE: number'
      return:
        type: number
        description: ''
  - name: MIN_CHAR_VALUE
    uid: adaptive-expressions.ExpressionAntlrLexer.MIN_CHAR_VALUE
    package: adaptive-expressions
    summary: ''
    fullName: MIN_CHAR_VALUE
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static MIN_CHAR_VALUE: number'
      return:
        type: number
        description: ''
  - name: modeNames
    uid: adaptive-expressions.ExpressionAntlrLexer.modeNames
    package: adaptive-expressions
    summary: ''
    fullName: modeNames
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: "public static modeNames: string[] = [\n\t\t\"DEFAULT_MODE\", \"STRING_INTERPOLATION_MODE\",\n\t]"
      return:
        type: 'string[]'
        description: ''
  - name: modeNames
    uid: adaptive-expressions.ExpressionAntlrLexer.modeNames
    package: adaptive-expressions
    summary: ''
    fullName: modeNames
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'string[] modeNames'
      return:
        type: 'string[]'
        description: ''
  - name: MORE
    uid: adaptive-expressions.ExpressionAntlrLexer.MORE
    package: adaptive-expressions
    summary: ''
    fullName: MORE
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static MORE: number'
      return:
        type: number
        description: ''
  - name: MORE_OR_EQUAL
    uid: adaptive-expressions.ExpressionAntlrLexer.MORE_OR_EQUAL
    package: adaptive-expressions
    summary: ''
    fullName: MORE_OR_EQUAL
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static MORE_OR_EQUAL: 17 = 17'
      return:
        type: '17'
        description: ''
  - name: MORE_THAN
    uid: adaptive-expressions.ExpressionAntlrLexer.MORE_THAN
    package: adaptive-expressions
    summary: ''
    fullName: MORE_THAN
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static MORE_THAN: 15 = 15'
      return:
        type: '15'
        description: ''
  - name: NEWLINE
    uid: adaptive-expressions.ExpressionAntlrLexer.NEWLINE
    package: adaptive-expressions
    summary: ''
    fullName: NEWLINE
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static NEWLINE: 31 = 31'
      return:
        type: '31'
        description: ''
  - name: NON
    uid: adaptive-expressions.ExpressionAntlrLexer.NON
    package: adaptive-expressions
    summary: ''
    fullName: NON
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static NON: 4 = 4'
      return:
        type: '4'
        description: ''
  - name: NOT_EQUAL
    uid: adaptive-expressions.ExpressionAntlrLexer.NOT_EQUAL
    package: adaptive-expressions
    summary: ''
    fullName: NOT_EQUAL
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static NOT_EQUAL: 10 = 10'
      return:
        type: '10'
        description: ''
  - name: NUMBER
    uid: adaptive-expressions.ExpressionAntlrLexer.NUMBER
    package: adaptive-expressions
    summary: ''
    fullName: NUMBER
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static NUMBER: 28 = 28'
      return:
        type: '28'
        description: ''
  - name: OPEN_BRACKET
    uid: adaptive-expressions.ExpressionAntlrLexer.OPEN_BRACKET
    package: adaptive-expressions
    summary: ''
    fullName: OPEN_BRACKET
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static OPEN_BRACKET: 18 = 18'
      return:
        type: '18'
        description: ''
  - name: OPEN_CURLY_BRACKET
    uid: adaptive-expressions.ExpressionAntlrLexer.OPEN_CURLY_BRACKET
    package: adaptive-expressions
    summary: ''
    fullName: OPEN_CURLY_BRACKET
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static OPEN_CURLY_BRACKET: 23 = 23'
      return:
        type: '23'
        description: ''
  - name: OPEN_SQUARE_BRACKET
    uid: adaptive-expressions.ExpressionAntlrLexer.OPEN_SQUARE_BRACKET
    package: adaptive-expressions
    summary: ''
    fullName: OPEN_SQUARE_BRACKET
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static OPEN_SQUARE_BRACKET: 21 = 21'
      return:
        type: '21'
        description: ''
  - name: parseInfo
    uid: adaptive-expressions.ExpressionAntlrLexer.parseInfo
    package: adaptive-expressions
    summary: |-
      If profiling during the parse/lex, this will return DecisionInfo records
       for each decision in recognizer in a ParseInfo object.
    fullName: parseInfo
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'parseInfo: Promise<ParseInfo | undefined>'
      return:
        type: Promise&lt;ParseInfo | undefined&gt;
        description: ''
  - name: PERCENT
    uid: adaptive-expressions.ExpressionAntlrLexer.PERCENT
    package: adaptive-expressions
    summary: ''
    fullName: PERCENT
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static PERCENT: 8 = 8'
      return:
        type: '8'
        description: ''
  - name: PLUS
    uid: adaptive-expressions.ExpressionAntlrLexer.PLUS
    package: adaptive-expressions
    summary: ''
    fullName: PLUS
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static PLUS: 2 = 2'
      return:
        type: '2'
        description: ''
  - name: ruleNames
    uid: adaptive-expressions.ExpressionAntlrLexer.ruleNames
    package: adaptive-expressions
    summary: ''
    fullName: ruleNames
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: "public static ruleNames: string[] = [\n\t\t\"LETTER\", \"DIGIT\", \"OBJECT_DEFINITION\", \"STRING_INTERPOLATION_START\", \n\t\t\"PLUS\", \"SUBSTRACT\", \"NON\", \"XOR\", \"ASTERISK\", \"SLASH\", \"PERCENT\", \"DOUBLE_EQUAL\", \n\t\t\"NOT_EQUAL\", \"SINGLE_AND\", \"DOUBLE_AND\", \"DOUBLE_VERTICAL_CYLINDER\", \"LESS_THAN\", \n\t\t\"MORE_THAN\", \"LESS_OR_EQUAl\", \"MORE_OR_EQUAL\", \"OPEN_BRACKET\", \"CLOSE_BRACKET\", \n\t\t\"DOT\", \"OPEN_SQUARE_BRACKET\", \"CLOSE_SQUARE_BRACKET\", \"OPEN_CURLY_BRACKET\", \n\t\t\"CLOSE_CURLY_BRACKET\", \"COMMA\", \"COLON\", \"ARROW\", \"NUMBER\", \"WHITESPACE\", \n\t\t\"IDENTIFIER\", \"NEWLINE\", \"STRING\", \"INVALID_TOKEN_DEFAULT_MODE\", \"STRING_INTERPOLATION_END\", \n\t\t\"TEMPLATE\", \"ESCAPE_CHARACTER\", \"TEXT_CONTENT\",\n\t]"
      return:
        type: 'string[]'
        description: ''
  - name: ruleNames
    uid: adaptive-expressions.ExpressionAntlrLexer.ruleNames
    package: adaptive-expressions
    summary: ''
    fullName: ruleNames
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'string[] ruleNames'
      return:
        type: 'string[]'
        description: ''
  - name: serializedATN
    uid: adaptive-expressions.ExpressionAntlrLexer.serializedATN
    package: adaptive-expressions
    summary: ''
    fullName: serializedATN
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: string serializedATN
      return:
        type: string
        description: ''
  - name: SINGLE_AND
    uid: adaptive-expressions.ExpressionAntlrLexer.SINGLE_AND
    package: adaptive-expressions
    summary: ''
    fullName: SINGLE_AND
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static SINGLE_AND: 11 = 11'
      return:
        type: '11'
        description: ''
  - name: SKIP
    uid: adaptive-expressions.ExpressionAntlrLexer.SKIP
    package: adaptive-expressions
    summary: ''
    fullName: SKIP
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static SKIP: number'
      return:
        type: number
        description: ''
  - name: SLASH
    uid: adaptive-expressions.ExpressionAntlrLexer.SLASH
    package: adaptive-expressions
    summary: ''
    fullName: SLASH
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static SLASH: 7 = 7'
      return:
        type: '7'
        description: ''
  - name: sourceName
    uid: adaptive-expressions.ExpressionAntlrLexer.sourceName
    package: adaptive-expressions
    summary: ''
    fullName: sourceName
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'sourceName: string'
      return:
        type: string
        description: ''
  - name: state
    uid: adaptive-expressions.ExpressionAntlrLexer.state
    package: adaptive-expressions
    summary: |-
      Indicate that the recognizer has changed internal state that is
       consistent with the ATN state passed in.  This way we always know
       where we are in the ATN as the parser goes along. The rule
       context objects form a stack that lets us see the stack of
       invoking rules. Combine this and we have complete ATN
       configuration information.
    fullName: state
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'state: number'
      return:
        type: number
        description: ''
  - name: STRING
    uid: adaptive-expressions.ExpressionAntlrLexer.STRING
    package: adaptive-expressions
    summary: ''
    fullName: STRING
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static STRING: 32 = 32'
      return:
        type: '32'
        description: ''
  - name: STRING_INTERPOLATION_MODE
    uid: adaptive-expressions.ExpressionAntlrLexer.STRING_INTERPOLATION_MODE
    package: adaptive-expressions
    summary: ''
    fullName: STRING_INTERPOLATION_MODE
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static STRING_INTERPOLATION_MODE: 1 = 1'
      return:
        type: '1'
        description: ''
  - name: STRING_INTERPOLATION_START
    uid: adaptive-expressions.ExpressionAntlrLexer.STRING_INTERPOLATION_START
    package: adaptive-expressions
    summary: ''
    fullName: STRING_INTERPOLATION_START
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static STRING_INTERPOLATION_START: 1 = 1'
      return:
        type: '1'
        description: ''
  - name: SUBSTRACT
    uid: adaptive-expressions.ExpressionAntlrLexer.SUBSTRACT
    package: adaptive-expressions
    summary: ''
    fullName: SUBSTRACT
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static SUBSTRACT: 3 = 3'
      return:
        type: '3'
        description: ''
  - name: TEMPLATE
    uid: adaptive-expressions.ExpressionAntlrLexer.TEMPLATE
    package: adaptive-expressions
    summary: ''
    fullName: TEMPLATE
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static TEMPLATE: 34 = 34'
      return:
        type: '34'
        description: ''
  - name: text
    uid: adaptive-expressions.ExpressionAntlrLexer.text
    package: adaptive-expressions
    summary: |-
      Set the complete text of this token; it wipes any previous
       changes to the text.
    fullName: text
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'text: string'
      return:
        type: string
        description: ''
  - name: TEXT_CONTENT
    uid: adaptive-expressions.ExpressionAntlrLexer.TEXT_CONTENT
    package: adaptive-expressions
    summary: ''
    fullName: TEXT_CONTENT
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static TEXT_CONTENT: 36 = 36'
      return:
        type: '36'
        description: ''
  - name: token
    uid: adaptive-expressions.ExpressionAntlrLexer.token
    package: adaptive-expressions
    summary: Override if emitting multiple tokens.
    fullName: token
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'token: Token | undefined'
      return:
        type: Token | undefined
        description: ''
  - name: tokenFactory
    uid: adaptive-expressions.ExpressionAntlrLexer.tokenFactory
    package: adaptive-expressions
    summary: ''
    fullName: tokenFactory
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'tokenFactory: TokenFactory'
      return:
        type: TokenFactory
        description: ''
  - name: type
    uid: adaptive-expressions.ExpressionAntlrLexer.type
    package: adaptive-expressions
    summary: ''
    fullName: type
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'type: number'
      return:
        type: number
        description: ''
  - name: VOCABULARY
    uid: adaptive-expressions.ExpressionAntlrLexer.VOCABULARY
    package: adaptive-expressions
    summary: ''
    fullName: VOCABULARY
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        public static VOCABULARY: Vocabulary = new
        VocabularyImpl(ExpressionAntlrLexer._LITERAL_NAMES,
        ExpressionAntlrLexer._SYMBOLIC_NAMES, [])
      return:
        type: Vocabulary
        description: ''
  - name: vocabulary
    uid: adaptive-expressions.ExpressionAntlrLexer.vocabulary
    package: adaptive-expressions
    summary: ''
    fullName: vocabulary
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: Vocabulary vocabulary
      return:
        type: Vocabulary
        description: ''
  - name: WHITESPACE
    uid: adaptive-expressions.ExpressionAntlrLexer.WHITESPACE
    package: adaptive-expressions
    summary: ''
    fullName: WHITESPACE
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static WHITESPACE: 29 = 29'
      return:
        type: '29'
        description: ''
  - name: XOR
    uid: adaptive-expressions.ExpressionAntlrLexer.XOR
    package: adaptive-expressions
    summary: ''
    fullName: XOR
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static XOR: 5 = 5'
      return:
        type: '5'
        description: ''
methods:
  - name: 'action(RuleContext, number, number)'
    uid: adaptive-expressions.ExpressionAntlrLexer.action
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function action(_localctx: RuleContext, ruleIndex: number, actionIndex:
        number)
      parameters:
        - id: _localctx
          type: RuleContext
          description: ''
        - id: ruleIndex
          type: number
          description: ''
        - id: actionIndex
          type: number
          description: ''
  - name: addErrorListener(ANTLRErrorListener<number>)
    uid: adaptive-expressions.ExpressionAntlrLexer.addErrorListener
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function addErrorListener(listener: ANTLRErrorListener<number>)'
      parameters:
        - id: listener
          type: ANTLRErrorListener&lt;number&gt;
          description: ''
  - name: emit()
    uid: adaptive-expressions.ExpressionAntlrLexer.emit_1
    package: adaptive-expressions
    summary: |-
      By default does not support multiple emits per nextToken invocation
       for efficiency reasons.  Subclass and override this method, nextToken,
       and getToken (to push tokens into a list and pull from that list
       rather than a single variable as this implementation does).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function emit()
      return:
        type: Token
        description: ''
  - name: emit(Token)
    uid: adaptive-expressions.ExpressionAntlrLexer.emit
    package: adaptive-expressions
    summary: |-
      The standard method called to automatically emit a token at the
       outermost lexical rule.  The token object should point into the
       char buffer start..stop.  If there is a text override in 'text',
       use that to set the token's text.  Override this method to emit
       custom Token objects or provide a new factory.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function emit(token: Token)'
      parameters:
        - id: token
          type: Token
          description: ''
      return:
        type: Token
        description: ''
  - name: emitEOF()
    uid: adaptive-expressions.ExpressionAntlrLexer.emitEOF
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function emitEOF()
      return:
        type: Token
        description: ''
  - name: getAllTokens()
    uid: adaptive-expressions.ExpressionAntlrLexer.getAllTokens
    package: adaptive-expressions
    summary: |-
      Return a list of all Token objects in input char stream.
       Forces load of all tokens. Does not include EOF token.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getAllTokens()
      return:
        type: 'Token[]'
        description: ''
  - name: getCharErrorDisplay(number)
    uid: adaptive-expressions.ExpressionAntlrLexer.getCharErrorDisplay
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getCharErrorDisplay(c: number)'
      parameters:
        - id: c
          type: number
          description: ''
      return:
        type: string
        description: ''
  - name: getErrorDisplay(string | number)
    uid: adaptive-expressions.ExpressionAntlrLexer.getErrorDisplay
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getErrorDisplay(s: string | number)'
      parameters:
        - id: s
          type: string | number
          description: ''
      return:
        type: string
        description: ''
  - name: getErrorHeader(RecognitionException)
    uid: adaptive-expressions.ExpressionAntlrLexer.getErrorHeader
    package: adaptive-expressions
    summary: 'What is the error header, normally line/character position information?'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getErrorHeader(e: RecognitionException)'
      parameters:
        - id: e
          type: RecognitionException
          description: ''
      return:
        type: string
        description: ''
  - name: getErrorListenerDispatch()
    uid: adaptive-expressions.ExpressionAntlrLexer.getErrorListenerDispatch
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getErrorListenerDispatch()
      return:
        type: ANTLRErrorListener&lt;number&gt;
        description: ''
  - name: getErrorListeners()
    uid: adaptive-expressions.ExpressionAntlrLexer.getErrorListeners
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getErrorListeners()
      return:
        type: Array&lt;ANTLRErrorListener&lt;number&gt;&gt;
        description: ''
  - name: getRuleIndexMap()
    uid: adaptive-expressions.ExpressionAntlrLexer.getRuleIndexMap
    package: adaptive-expressions
    summary: |
      Get a map from rule names to rule indexes.
      Used for XPath and tree pattern compilation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getRuleIndexMap()
      return:
        type: 'ReadonlyMap&lt;string, number&gt;'
        description: ''
  - name: getTokenType(string)
    uid: adaptive-expressions.ExpressionAntlrLexer.getTokenType
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getTokenType(tokenName: string)'
      parameters:
        - id: tokenName
          type: string
          description: ''
      return:
        type: number
        description: ''
  - name: getTokenTypeMap()
    uid: adaptive-expressions.ExpressionAntlrLexer.getTokenTypeMap
    package: adaptive-expressions
    summary: |
      Get a map from token names to token types.
      Used for XPath and tree pattern compilation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getTokenTypeMap()
      return:
        type: 'ReadonlyMap&lt;string, number&gt;'
        description: ''
  - name: mode(number)
    uid: adaptive-expressions.ExpressionAntlrLexer.mode
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function mode(m: number)'
      parameters:
        - id: m
          type: number
          description: ''
  - name: more()
    uid: adaptive-expressions.ExpressionAntlrLexer.more
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function more()
  - name: nextToken()
    uid: adaptive-expressions.ExpressionAntlrLexer.nextToken
    package: adaptive-expressions
    summary: |-
      Return a token from this source; i.e., match a token on the char
       stream.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function nextToken()
      return:
        type: Token
        description: ''
  - name: notifyListeners(LexerNoViableAltException)
    uid: adaptive-expressions.ExpressionAntlrLexer.notifyListeners
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function notifyListeners(e: LexerNoViableAltException)'
      parameters:
        - id: e
          type: LexerNoViableAltException
          description: ''
  - name: popMode()
    uid: adaptive-expressions.ExpressionAntlrLexer.popMode
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function popMode()
      return:
        type: number
        description: ''
  - name: 'precpred(RuleContext | undefined, number)'
    uid: adaptive-expressions.ExpressionAntlrLexer.precpred
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function precpred(localctx: RuleContext | undefined, precedence: number)'
      parameters:
        - id: localctx
          type: RuleContext | undefined
          description: ''
        - id: precedence
          type: number
          description: ''
      return:
        type: boolean
        description: ''
  - name: pushMode(number)
    uid: adaptive-expressions.ExpressionAntlrLexer.pushMode
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function pushMode(m: number)'
      parameters:
        - id: m
          type: number
          description: ''
  - name: recover(LexerNoViableAltException)
    uid: adaptive-expressions.ExpressionAntlrLexer.recover_1
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function recover(re: LexerNoViableAltException)'
      parameters:
        - id: re
          type: LexerNoViableAltException
          description: ''
  - name: recover(RecognitionException)
    uid: adaptive-expressions.ExpressionAntlrLexer.recover
    package: adaptive-expressions
    summary: |-
      Lexers can normally match any char in it's vocabulary after matching
       a token, so do the easy thing and just kill a character and hope
       it all works out.  You can instead use the rule invocation stack
       to do sophisticated error recovery if you are in a fragment rule.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function recover(re: RecognitionException)'
      parameters:
        - id: re
          type: RecognitionException
          description: ''
  - name: removeErrorListener(ANTLRErrorListener<number>)
    uid: adaptive-expressions.ExpressionAntlrLexer.removeErrorListener
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function removeErrorListener(listener: ANTLRErrorListener<number>)'
      parameters:
        - id: listener
          type: ANTLRErrorListener&lt;number&gt;
          description: ''
  - name: removeErrorListeners()
    uid: adaptive-expressions.ExpressionAntlrLexer.removeErrorListeners
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function removeErrorListeners()
  - name: reset()
    uid: adaptive-expressions.ExpressionAntlrLexer.reset
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function reset()
  - name: reset(boolean)
    uid: adaptive-expressions.ExpressionAntlrLexer.reset_1
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function reset(resetInput: boolean)'
      parameters:
        - id: resetInput
          type: boolean
          description: ''
  - name: 'sempred(RuleContext, number, number)'
    uid: adaptive-expressions.ExpressionAntlrLexer.sempred
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function sempred(_localctx: RuleContext, ruleIndex: number, predIndex:
        number)
      parameters:
        - id: _localctx
          type: RuleContext
          description: ''
        - id: ruleIndex
          type: number
          description: ''
        - id: predIndex
          type: number
          description: ''
      return:
        type: boolean
        description: ''
  - name: skip()
    uid: adaptive-expressions.ExpressionAntlrLexer.skip
    package: adaptive-expressions
    summary: |-
      Instruct the lexer to skip creating a token for current lexer rule
       and look for another token.  nextToken() knows to keep looking when
       a lexer rule finishes with token set to SKIP_TOKEN.  Recall that
       if token==undefined at end of any token rule, it creates one for you
       and emits it.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function skip()
extends: Lexer
