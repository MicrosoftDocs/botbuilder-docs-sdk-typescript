### YamlMime:TSType
name: ExpressionAntlrParser
uid: adaptive-expressions.ExpressionAntlrParser
package: adaptive-expressions
summary: ''
fullName: ExpressionAntlrParser
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: ExpressionAntlrParser(TokenStream)
    uid: adaptive-expressions.ExpressionAntlrParser.constructor
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new ExpressionAntlrParser(input: TokenStream)'
      parameters:
        - id: input
          type: TokenStream
          description: ''
properties:
  - name: ARROW
    uid: adaptive-expressions.ExpressionAntlrParser.ARROW
    package: adaptive-expressions
    summary: ''
    fullName: ARROW
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static ARROW: 27 = 27'
      return:
        type: '27'
        description: ''
  - name: ASTERISK
    uid: adaptive-expressions.ExpressionAntlrParser.ASTERISK
    package: adaptive-expressions
    summary: ''
    fullName: ASTERISK
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static ASTERISK: 6 = 6'
      return:
        type: '6'
        description: ''
  - name: atn
    uid: adaptive-expressions.ExpressionAntlrParser.atn
    package: adaptive-expressions
    summary: 'Get the <xref:ATN> used by the recognizer for prediction.'
    fullName: atn
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'atn: ATN'
      return:
        type: ATN
        description: ''
  - name: buildParseTree
    uid: adaptive-expressions.ExpressionAntlrParser.buildParseTree
    package: adaptive-expressions
    summary: |
      Track the <xref:ParserRuleContext> objects during the parse and hook
      them up using the <xref:ParserRuleContext%23children> list so that it
      forms a parse tree. The <xref:ParserRuleContext> returned from the start
      rule represents the root of the parse tree.
      Note that if we are not building parse trees, rule contexts only point
      upwards. When a rule exits, it returns the context but that gets garbage
      collected if nobody holds a reference. It points upwards but nobody
      points at it.

      When we build parse trees, we are adding all of these contexts to
      <xref:ParserRuleContext%23children> list. Contexts are then not candidates
      for garbage collection.
    fullName: buildParseTree
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'buildParseTree: boolean'
      return:
        type: boolean
        description: ''
  - name: CLOSE_BRACKET
    uid: adaptive-expressions.ExpressionAntlrParser.CLOSE_BRACKET
    package: adaptive-expressions
    summary: ''
    fullName: CLOSE_BRACKET
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static CLOSE_BRACKET: 19 = 19'
      return:
        type: '19'
        description: ''
  - name: CLOSE_CURLY_BRACKET
    uid: adaptive-expressions.ExpressionAntlrParser.CLOSE_CURLY_BRACKET
    package: adaptive-expressions
    summary: ''
    fullName: CLOSE_CURLY_BRACKET
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static CLOSE_CURLY_BRACKET: 24 = 24'
      return:
        type: '24'
        description: ''
  - name: CLOSE_SQUARE_BRACKET
    uid: adaptive-expressions.ExpressionAntlrParser.CLOSE_SQUARE_BRACKET
    package: adaptive-expressions
    summary: ''
    fullName: CLOSE_SQUARE_BRACKET
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static CLOSE_SQUARE_BRACKET: 22 = 22'
      return:
        type: '22'
        description: ''
  - name: COLON
    uid: adaptive-expressions.ExpressionAntlrParser.COLON
    package: adaptive-expressions
    summary: ''
    fullName: COLON
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static COLON: 26 = 26'
      return:
        type: '26'
        description: ''
  - name: COMMA
    uid: adaptive-expressions.ExpressionAntlrParser.COMMA
    package: adaptive-expressions
    summary: ''
    fullName: COMMA
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static COMMA: 25 = 25'
      return:
        type: '25'
        description: ''
  - name: context
    uid: adaptive-expressions.ExpressionAntlrParser.context
    package: adaptive-expressions
    summary: ''
    fullName: context
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: ParserRuleContext'
      return:
        type: ParserRuleContext
        description: ''
  - name: currentToken
    uid: adaptive-expressions.ExpressionAntlrParser.currentToken
    package: adaptive-expressions
    summary: |-
      Match needs to return the current input symbol, which gets put
       into the label for the associated token ref; e.g., x=ID.
    fullName: currentToken
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'currentToken: Token'
      return:
        type: Token
        description: ''
  - name: DOT
    uid: adaptive-expressions.ExpressionAntlrParser.DOT
    package: adaptive-expressions
    summary: ''
    fullName: DOT
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static DOT: 20 = 20'
      return:
        type: '20'
        description: ''
  - name: DOUBLE_AND
    uid: adaptive-expressions.ExpressionAntlrParser.DOUBLE_AND
    package: adaptive-expressions
    summary: ''
    fullName: DOUBLE_AND
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static DOUBLE_AND: 12 = 12'
      return:
        type: '12'
        description: ''
  - name: DOUBLE_EQUAL
    uid: adaptive-expressions.ExpressionAntlrParser.DOUBLE_EQUAL
    package: adaptive-expressions
    summary: ''
    fullName: DOUBLE_EQUAL
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static DOUBLE_EQUAL: 9 = 9'
      return:
        type: '9'
        description: ''
  - name: DOUBLE_VERTICAL_CYLINDER
    uid: adaptive-expressions.ExpressionAntlrParser.DOUBLE_VERTICAL_CYLINDER
    package: adaptive-expressions
    summary: ''
    fullName: DOUBLE_VERTICAL_CYLINDER
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static DOUBLE_VERTICAL_CYLINDER: 13 = 13'
      return:
        type: '13'
        description: ''
  - name: EOF
    uid: adaptive-expressions.ExpressionAntlrParser.EOF
    package: adaptive-expressions
    summary: ''
    fullName: EOF
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static EOF: number'
      return:
        type: number
        description: ''
  - name: errorHandler
    uid: adaptive-expressions.ExpressionAntlrParser.errorHandler
    package: adaptive-expressions
    summary: ''
    fullName: errorHandler
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'errorHandler: ANTLRErrorStrategy'
      return:
        type: ANTLRErrorStrategy
        description: ''
  - name: ESCAPE_CHARACTER
    uid: adaptive-expressions.ExpressionAntlrParser.ESCAPE_CHARACTER
    package: adaptive-expressions
    summary: ''
    fullName: ESCAPE_CHARACTER
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static ESCAPE_CHARACTER: 35 = 35'
      return:
        type: '35'
        description: ''
  - name: grammarFileName
    uid: adaptive-expressions.ExpressionAntlrParser.grammarFileName
    package: adaptive-expressions
    summary: ''
    fullName: grammarFileName
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: string grammarFileName
      return:
        type: string
        description: ''
  - name: IDENTIFIER
    uid: adaptive-expressions.ExpressionAntlrParser.IDENTIFIER
    package: adaptive-expressions
    summary: ''
    fullName: IDENTIFIER
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static IDENTIFIER: 30 = 30'
      return:
        type: '30'
        description: ''
  - name: inputStream
    uid: adaptive-expressions.ExpressionAntlrParser.inputStream
    package: adaptive-expressions
    summary: Set the token stream and reset the parser.
    fullName: inputStream
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'inputStream: TokenStream'
      return:
        type: TokenStream
        description: ''
  - name: interpreter
    uid: adaptive-expressions.ExpressionAntlrParser.interpreter
    package: adaptive-expressions
    summary: Set the ATN interpreter used by the recognizer for prediction.
    fullName: interpreter
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'interpreter: ParserATNSimulator'
      return:
        type: ParserATNSimulator
        description: ''
  - name: INVALID_TOKEN_DEFAULT_MODE
    uid: adaptive-expressions.ExpressionAntlrParser.INVALID_TOKEN_DEFAULT_MODE
    package: adaptive-expressions
    summary: ''
    fullName: INVALID_TOKEN_DEFAULT_MODE
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static INVALID_TOKEN_DEFAULT_MODE: 33 = 33'
      return:
        type: '33'
        description: ''
  - name: isMatchedEOF
    uid: adaptive-expressions.ExpressionAntlrParser.isMatchedEOF
    package: adaptive-expressions
    summary: ''
    fullName: isMatchedEOF
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'isMatchedEOF: boolean'
      return:
        type: boolean
        description: ''
  - name: isTrace
    uid: adaptive-expressions.ExpressionAntlrParser.isTrace
    package: adaptive-expressions
    summary: |-
      During a parse is sometimes useful to listen in on the rule entry and exit
       events as well as token matches. This is for quick and dirty debugging.
    fullName: isTrace
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'isTrace: boolean'
      return:
        type: boolean
        description: ''
  - name: LESS_OR_EQUAl
    uid: adaptive-expressions.ExpressionAntlrParser.LESS_OR_EQUAl
    package: adaptive-expressions
    summary: ''
    fullName: LESS_OR_EQUAl
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static LESS_OR_EQUAl: 16 = 16'
      return:
        type: '16'
        description: ''
  - name: LESS_THAN
    uid: adaptive-expressions.ExpressionAntlrParser.LESS_THAN
    package: adaptive-expressions
    summary: ''
    fullName: LESS_THAN
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static LESS_THAN: 14 = 14'
      return:
        type: '14'
        description: ''
  - name: MORE_OR_EQUAL
    uid: adaptive-expressions.ExpressionAntlrParser.MORE_OR_EQUAL
    package: adaptive-expressions
    summary: ''
    fullName: MORE_OR_EQUAL
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static MORE_OR_EQUAL: 17 = 17'
      return:
        type: '17'
        description: ''
  - name: MORE_THAN
    uid: adaptive-expressions.ExpressionAntlrParser.MORE_THAN
    package: adaptive-expressions
    summary: ''
    fullName: MORE_THAN
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static MORE_THAN: 15 = 15'
      return:
        type: '15'
        description: ''
  - name: NEWLINE
    uid: adaptive-expressions.ExpressionAntlrParser.NEWLINE
    package: adaptive-expressions
    summary: ''
    fullName: NEWLINE
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static NEWLINE: 31 = 31'
      return:
        type: '31'
        description: ''
  - name: NON
    uid: adaptive-expressions.ExpressionAntlrParser.NON
    package: adaptive-expressions
    summary: ''
    fullName: NON
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static NON: 4 = 4'
      return:
        type: '4'
        description: ''
  - name: NOT_EQUAL
    uid: adaptive-expressions.ExpressionAntlrParser.NOT_EQUAL
    package: adaptive-expressions
    summary: ''
    fullName: NOT_EQUAL
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static NOT_EQUAL: 10 = 10'
      return:
        type: '10'
        description: ''
  - name: NUMBER
    uid: adaptive-expressions.ExpressionAntlrParser.NUMBER
    package: adaptive-expressions
    summary: ''
    fullName: NUMBER
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static NUMBER: 28 = 28'
      return:
        type: '28'
        description: ''
  - name: numberOfSyntaxErrors
    uid: adaptive-expressions.ExpressionAntlrParser.numberOfSyntaxErrors
    package: adaptive-expressions
    summary: |-
      Gets the number of syntax errors reported during parsing. This value is
      incremented each time <xref:%23notifyErrorListeners> is called.
    fullName: numberOfSyntaxErrors
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'numberOfSyntaxErrors: number'
      return:
        type: number
        description: ''
  - name: OPEN_BRACKET
    uid: adaptive-expressions.ExpressionAntlrParser.OPEN_BRACKET
    package: adaptive-expressions
    summary: ''
    fullName: OPEN_BRACKET
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static OPEN_BRACKET: 18 = 18'
      return:
        type: '18'
        description: ''
  - name: OPEN_CURLY_BRACKET
    uid: adaptive-expressions.ExpressionAntlrParser.OPEN_CURLY_BRACKET
    package: adaptive-expressions
    summary: ''
    fullName: OPEN_CURLY_BRACKET
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static OPEN_CURLY_BRACKET: 23 = 23'
      return:
        type: '23'
        description: ''
  - name: OPEN_SQUARE_BRACKET
    uid: adaptive-expressions.ExpressionAntlrParser.OPEN_SQUARE_BRACKET
    package: adaptive-expressions
    summary: ''
    fullName: OPEN_SQUARE_BRACKET
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static OPEN_SQUARE_BRACKET: 21 = 21'
      return:
        type: '21'
        description: ''
  - name: parseInfo
    uid: adaptive-expressions.ExpressionAntlrParser.parseInfo
    package: adaptive-expressions
    summary: ''
    fullName: parseInfo
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'parseInfo: Promise<ParseInfo | undefined>'
      return:
        type: Promise&lt;ParseInfo | undefined&gt;
        description: ''
  - name: PERCENT
    uid: adaptive-expressions.ExpressionAntlrParser.PERCENT
    package: adaptive-expressions
    summary: ''
    fullName: PERCENT
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static PERCENT: 8 = 8'
      return:
        type: '8'
        description: ''
  - name: PLUS
    uid: adaptive-expressions.ExpressionAntlrParser.PLUS
    package: adaptive-expressions
    summary: ''
    fullName: PLUS
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static PLUS: 2 = 2'
      return:
        type: '2'
        description: ''
  - name: precedence
    uid: adaptive-expressions.ExpressionAntlrParser.precedence
    package: adaptive-expressions
    summary: Get the precedence level for the top-most precedence rule.
    fullName: precedence
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'precedence: number'
      return:
        type: number
        description: ''
  - name: ruleContext
    uid: adaptive-expressions.ExpressionAntlrParser.ruleContext
    package: adaptive-expressions
    summary: ''
    fullName: ruleContext
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ruleContext: ParserRuleContext'
      return:
        type: ParserRuleContext
        description: ''
  - name: ruleNames
    uid: adaptive-expressions.ExpressionAntlrParser.ruleNames
    package: adaptive-expressions
    summary: ''
    fullName: ruleNames
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: "public static ruleNames: string[] = [\n\t\t\"file\", \"expression\", \"primaryExpression\", \"stringInterpolation\", \"textContent\", \n\t\t\"argsList\", \"lambda\", \"keyValuePairList\", \"keyValuePair\", \"key\",\n\t]"
      return:
        type: 'string[]'
        description: ''
  - name: ruleNames
    uid: adaptive-expressions.ExpressionAntlrParser.ruleNames
    package: adaptive-expressions
    summary: ''
    fullName: ruleNames
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'string[] ruleNames'
      return:
        type: 'string[]'
        description: ''
  - name: RULE_argsList
    uid: adaptive-expressions.ExpressionAntlrParser.RULE_argsList
    package: adaptive-expressions
    summary: ''
    fullName: RULE_argsList
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_argsList: 5 = 5'
      return:
        type: '5'
        description: ''
  - name: RULE_expression
    uid: adaptive-expressions.ExpressionAntlrParser.RULE_expression
    package: adaptive-expressions
    summary: ''
    fullName: RULE_expression
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_expression: 1 = 1'
      return:
        type: '1'
        description: ''
  - name: RULE_file
    uid: adaptive-expressions.ExpressionAntlrParser.RULE_file
    package: adaptive-expressions
    summary: ''
    fullName: RULE_file
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_file: 0 = 0'
      return:
        type: '0'
        description: ''
  - name: RULE_key
    uid: adaptive-expressions.ExpressionAntlrParser.RULE_key
    package: adaptive-expressions
    summary: ''
    fullName: RULE_key
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_key: 9 = 9'
      return:
        type: '9'
        description: ''
  - name: RULE_keyValuePair
    uid: adaptive-expressions.ExpressionAntlrParser.RULE_keyValuePair
    package: adaptive-expressions
    summary: ''
    fullName: RULE_keyValuePair
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_keyValuePair: 8 = 8'
      return:
        type: '8'
        description: ''
  - name: RULE_keyValuePairList
    uid: adaptive-expressions.ExpressionAntlrParser.RULE_keyValuePairList
    package: adaptive-expressions
    summary: ''
    fullName: RULE_keyValuePairList
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_keyValuePairList: 7 = 7'
      return:
        type: '7'
        description: ''
  - name: RULE_lambda
    uid: adaptive-expressions.ExpressionAntlrParser.RULE_lambda
    package: adaptive-expressions
    summary: ''
    fullName: RULE_lambda
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_lambda: 6 = 6'
      return:
        type: '6'
        description: ''
  - name: RULE_primaryExpression
    uid: adaptive-expressions.ExpressionAntlrParser.RULE_primaryExpression
    package: adaptive-expressions
    summary: ''
    fullName: RULE_primaryExpression
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_primaryExpression: 2 = 2'
      return:
        type: '2'
        description: ''
  - name: RULE_stringInterpolation
    uid: adaptive-expressions.ExpressionAntlrParser.RULE_stringInterpolation
    package: adaptive-expressions
    summary: ''
    fullName: RULE_stringInterpolation
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_stringInterpolation: 3 = 3'
      return:
        type: '3'
        description: ''
  - name: RULE_textContent
    uid: adaptive-expressions.ExpressionAntlrParser.RULE_textContent
    package: adaptive-expressions
    summary: ''
    fullName: RULE_textContent
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_textContent: 4 = 4'
      return:
        type: '4'
        description: ''
  - name: serializedATN
    uid: adaptive-expressions.ExpressionAntlrParser.serializedATN
    package: adaptive-expressions
    summary: ''
    fullName: serializedATN
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: string serializedATN
      return:
        type: string
        description: ''
  - name: SINGLE_AND
    uid: adaptive-expressions.ExpressionAntlrParser.SINGLE_AND
    package: adaptive-expressions
    summary: ''
    fullName: SINGLE_AND
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static SINGLE_AND: 11 = 11'
      return:
        type: '11'
        description: ''
  - name: SLASH
    uid: adaptive-expressions.ExpressionAntlrParser.SLASH
    package: adaptive-expressions
    summary: ''
    fullName: SLASH
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static SLASH: 7 = 7'
      return:
        type: '7'
        description: ''
  - name: sourceName
    uid: adaptive-expressions.ExpressionAntlrParser.sourceName
    package: adaptive-expressions
    summary: ''
    fullName: sourceName
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'sourceName: string'
      return:
        type: string
        description: ''
  - name: state
    uid: adaptive-expressions.ExpressionAntlrParser.state
    package: adaptive-expressions
    summary: |-
      Indicate that the recognizer has changed internal state that is
       consistent with the ATN state passed in.  This way we always know
       where we are in the ATN as the parser goes along. The rule
       context objects form a stack that lets us see the stack of
       invoking rules. Combine this and we have complete ATN
       configuration information.
    fullName: state
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'state: number'
      return:
        type: number
        description: ''
  - name: STRING
    uid: adaptive-expressions.ExpressionAntlrParser.STRING
    package: adaptive-expressions
    summary: ''
    fullName: STRING
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static STRING: 32 = 32'
      return:
        type: '32'
        description: ''
  - name: STRING_INTERPOLATION_START
    uid: adaptive-expressions.ExpressionAntlrParser.STRING_INTERPOLATION_START
    package: adaptive-expressions
    summary: ''
    fullName: STRING_INTERPOLATION_START
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static STRING_INTERPOLATION_START: 1 = 1'
      return:
        type: '1'
        description: ''
  - name: SUBSTRACT
    uid: adaptive-expressions.ExpressionAntlrParser.SUBSTRACT
    package: adaptive-expressions
    summary: ''
    fullName: SUBSTRACT
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static SUBSTRACT: 3 = 3'
      return:
        type: '3'
        description: ''
  - name: TEMPLATE
    uid: adaptive-expressions.ExpressionAntlrParser.TEMPLATE
    package: adaptive-expressions
    summary: ''
    fullName: TEMPLATE
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static TEMPLATE: 34 = 34'
      return:
        type: '34'
        description: ''
  - name: TEXT_CONTENT
    uid: adaptive-expressions.ExpressionAntlrParser.TEXT_CONTENT
    package: adaptive-expressions
    summary: ''
    fullName: TEXT_CONTENT
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static TEXT_CONTENT: 36 = 36'
      return:
        type: '36'
        description: ''
  - name: tokenFactory
    uid: adaptive-expressions.ExpressionAntlrParser.tokenFactory
    package: adaptive-expressions
    summary: ''
    fullName: tokenFactory
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'tokenFactory: TokenFactory'
      return:
        type: TokenFactory
        description: ''
  - name: VOCABULARY
    uid: adaptive-expressions.ExpressionAntlrParser.VOCABULARY
    package: adaptive-expressions
    summary: ''
    fullName: VOCABULARY
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        public static VOCABULARY: Vocabulary = new
        VocabularyImpl(ExpressionAntlrParser._LITERAL_NAMES,
        ExpressionAntlrParser._SYMBOLIC_NAMES, [])
      return:
        type: Vocabulary
        description: ''
  - name: vocabulary
    uid: adaptive-expressions.ExpressionAntlrParser.vocabulary
    package: adaptive-expressions
    summary: ''
    fullName: vocabulary
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: Vocabulary vocabulary
      return:
        type: Vocabulary
        description: ''
  - name: WHITESPACE
    uid: adaptive-expressions.ExpressionAntlrParser.WHITESPACE
    package: adaptive-expressions
    summary: ''
    fullName: WHITESPACE
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static WHITESPACE: 29 = 29'
      return:
        type: '29'
        description: ''
  - name: XOR
    uid: adaptive-expressions.ExpressionAntlrParser.XOR
    package: adaptive-expressions
    summary: ''
    fullName: XOR
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static XOR: 5 = 5'
      return:
        type: '5'
        description: ''
methods:
  - name: 'action(RuleContext | undefined, number, number)'
    uid: adaptive-expressions.ExpressionAntlrParser.action
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function action(_localctx: RuleContext | undefined, ruleIndex: number,
        actionIndex: number)
      parameters:
        - id: _localctx
          type: RuleContext | undefined
          description: ''
        - id: ruleIndex
          type: number
          description: ''
        - id: actionIndex
          type: number
          description: ''
  - name: addErrorListener(ANTLRErrorListener<Token>)
    uid: adaptive-expressions.ExpressionAntlrParser.addErrorListener
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function addErrorListener(listener: ANTLRErrorListener<Token>)'
      parameters:
        - id: listener
          type: ANTLRErrorListener&lt;Token&gt;
          description: ''
  - name: addParseListener(ParseTreeListener)
    uid: adaptive-expressions.ExpressionAntlrParser.addParseListener
    package: adaptive-expressions
    summary: |
      Registers `listener` to receive events during the parsing process.
      To support output-preserving grammar transformations (including but not
      limited to left-recursion removal, automated left-factoring, and
      optimized code generation), calls to listener methods during the parse
      may differ substantially from calls made by
      <xref:ParseTreeWalker%23DEFAULT> used after the parse is complete. In
      particular, rule entry and exit events may occur in a different order
      during the parse than after the parser. In addition, calls to certain
      rule entry methods may be omitted.

      With the following specific exceptions, calls to listener events are
      *deterministic*, i.e. for identical input the calls to listener
      methods will be the same.

      * Alterations to the grammar used to generate code may change the
        behavior of the listener calls.
      * Alterations to the command line options passed to ANTLR 4 when
        generating the parser may change the behavior of the listener calls.
      * Changing the version of the ANTLR Tool used to generate the parser
        may change the behavior of the listener calls.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function addParseListener(listener: ParseTreeListener)'
      parameters:
        - id: listener
          type: ParseTreeListener
          description: |
            the listener to add
  - name: argsList()
    uid: adaptive-expressions.ExpressionAntlrParser.argsList
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function argsList()
      return:
        type: <xref uid="adaptive-expressions.ArgsListContext" />
        description: ''
  - name: 'compileParseTreePattern(string, number)'
    uid: adaptive-expressions.ExpressionAntlrParser.compileParseTreePattern
    package: adaptive-expressions
    summary: >
      The preferred method of getting a tree pattern. For example, here's a

      sample use:

      ```

      let t: ParseTree = parser.expr();

      let p: ParseTreePattern = await parser.compileParseTreePattern("<ID>+0",
      MyParser.RULE_expr);

      let m: ParseTreeMatch = p.match(t);

      let id: string = m.get("ID");

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function compileParseTreePattern(pattern: string, patternRuleIndex:
        number)
      parameters:
        - id: pattern
          type: string
          description: ''
        - id: patternRuleIndex
          type: number
          description: ''
      return:
        type: Promise&lt;ParseTreePattern&gt;
        description: ''
  - name: 'compileParseTreePattern(string, number, Lexer)'
    uid: adaptive-expressions.ExpressionAntlrParser.compileParseTreePattern_1
    package: adaptive-expressions
    summary: >-
      The same as [int)](xref:%23compileParseTreePattern(String%2C) but specify
      a

      <xref:Lexer> rather than trying to deduce it from this parser.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function compileParseTreePattern(pattern: string, patternRuleIndex:
        number, lexer?: Lexer)
      parameters:
        - id: pattern
          type: string
          description: ''
        - id: patternRuleIndex
          type: number
          description: ''
        - id: lexer
          type: Lexer
          description: ''
      return:
        type: Promise&lt;ParseTreePattern&gt;
        description: ''
  - name: consume()
    uid: adaptive-expressions.ExpressionAntlrParser.consume
    package: adaptive-expressions
    summary: >
      Consume and return the [current symbol](`currentToken`).

      E.g., given the following input with `A` being the current

      lookahead symbol, this function moves the cursor to `B` and returns

      `A`.


      ```

      A B

      ^

      ```


      If the parser is not in error recovery mode, the consumed symbol is added

      to the parse tree using <xref:ParserRuleContext%23addChild(TerminalNode)>,
      and

      <xref:ParseTreeListener%23visitTerminal> is called on any parse listeners.

      If the parser *is* in error recovery mode, the consumed symbol is

      added to the parse tree using
      [Token)](xref:%23createErrorNode(ParserRuleContext%2C) then

      <xref:ParserRuleContext%23addErrorNode(ErrorNode)> and

      <xref:ParseTreeListener%23visitErrorNode> is called on any parse

      listeners.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function consume()
      return:
        type: Token
        description: ''
  - name: 'createErrorNode(ParserRuleContext, Token)'
    uid: adaptive-expressions.ExpressionAntlrParser.createErrorNode
    package: adaptive-expressions
    summary: |-
      How to create an error node, given a token, associated with a parent.
      Typically, the error node to create is not a function of the parent.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function createErrorNode(parent: ParserRuleContext, t: Token)'
      parameters:
        - id: parent
          type: ParserRuleContext
          description: ''
        - id: t
          type: Token
          description: ''
      return:
        type: ErrorNode
        description: ''
  - name: 'createTerminalNode(ParserRuleContext, Token)'
    uid: adaptive-expressions.ExpressionAntlrParser.createTerminalNode
    package: adaptive-expressions
    summary: |-
      How to create a token leaf node associated with a parent.
      Typically, the terminal node to create is not a function of the parent.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function createTerminalNode(parent: ParserRuleContext, t: Token)'
      parameters:
        - id: parent
          type: ParserRuleContext
          description: ''
        - id: t
          type: Token
          description: ''
      return:
        type: TerminalNode
        description: ''
  - name: dumpDFA()
    uid: adaptive-expressions.ExpressionAntlrParser.dumpDFA
    package: adaptive-expressions
    summary: For debugging and other purposes.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function dumpDFA()
  - name: 'enterLeftFactoredRule(ParserRuleContext, number, number)'
    uid: adaptive-expressions.ExpressionAntlrParser.enterLeftFactoredRule
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function enterLeftFactoredRule(localctx: ParserRuleContext, state:
        number, ruleIndex: number)
      parameters:
        - id: localctx
          type: ParserRuleContext
          description: ''
        - id: state
          type: number
          description: ''
        - id: ruleIndex
          type: number
          description: ''
  - name: 'enterOuterAlt(ParserRuleContext, number)'
    uid: adaptive-expressions.ExpressionAntlrParser.enterOuterAlt
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function enterOuterAlt(localctx: ParserRuleContext, altNum: number)'
      parameters:
        - id: localctx
          type: ParserRuleContext
          description: ''
        - id: altNum
          type: number
          description: ''
  - name: 'enterRecursionRule(ParserRuleContext, number, number, number)'
    uid: adaptive-expressions.ExpressionAntlrParser.enterRecursionRule
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function enterRecursionRule(localctx: ParserRuleContext, state: number,
        ruleIndex: number, precedence: number)
      parameters:
        - id: localctx
          type: ParserRuleContext
          description: ''
        - id: state
          type: number
          description: ''
        - id: ruleIndex
          type: number
          description: ''
        - id: precedence
          type: number
          description: ''
  - name: 'enterRule(ParserRuleContext, number, number)'
    uid: adaptive-expressions.ExpressionAntlrParser.enterRule
    package: adaptive-expressions
    summary: |-
      Always called by generated parsers upon entry to a rule. Access field
      <xref:%23_ctx> get the current context.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function enterRule(localctx: ParserRuleContext, state: number,
        ruleIndex: number)
      parameters:
        - id: localctx
          type: ParserRuleContext
          description: ''
        - id: state
          type: number
          description: ''
        - id: ruleIndex
          type: number
          description: ''
  - name: exitRule()
    uid: adaptive-expressions.ExpressionAntlrParser.exitRule
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function exitRule()
  - name: expression()
    uid: adaptive-expressions.ExpressionAntlrParser.expression
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function expression()
      return:
        type: <xref uid="adaptive-expressions.ExpressionContext" />
        description: ''
  - name: expression(number)
    uid: adaptive-expressions.ExpressionAntlrParser.expression_1
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function expression(_p: number)'
      parameters:
        - id: _p
          type: number
          description: ''
      return:
        type: <xref uid="adaptive-expressions.ExpressionContext" />
        description: ''
  - name: file()
    uid: adaptive-expressions.ExpressionAntlrParser.file
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function file()
      return:
        type: <xref uid="adaptive-expressions.FileContext" />
        description: ''
  - name: getATNWithBypassAlts()
    uid: adaptive-expressions.ExpressionAntlrParser.getATNWithBypassAlts
    package: adaptive-expressions
    summary: |
      The ATN with bypass alternatives is expensive to create so we create it
      lazily.
      @ if the current parser does not
      implement the `serializedATN` property.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getATNWithBypassAlts()
      return:
        type: ATN
        description: ''
  - name: getDFAStrings()
    uid: adaptive-expressions.ExpressionAntlrParser.getDFAStrings
    package: adaptive-expressions
    summary: For debugging and other purposes.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getDFAStrings()
      return:
        type: 'string[]'
        description: ''
  - name: getErrorHeader(RecognitionException)
    uid: adaptive-expressions.ExpressionAntlrParser.getErrorHeader
    package: adaptive-expressions
    summary: 'What is the error header, normally line/character position information?'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getErrorHeader(e: RecognitionException)'
      parameters:
        - id: e
          type: RecognitionException
          description: ''
      return:
        type: string
        description: ''
  - name: getErrorListenerDispatch()
    uid: adaptive-expressions.ExpressionAntlrParser.getErrorListenerDispatch
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getErrorListenerDispatch()
      return:
        type: ParserErrorListener
        description: ''
  - name: getErrorListeners()
    uid: adaptive-expressions.ExpressionAntlrParser.getErrorListeners
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getErrorListeners()
      return:
        type: Array&lt;ANTLRErrorListener&lt;Token&gt;&gt;
        description: ''
  - name: getExpectedTokens()
    uid: adaptive-expressions.ExpressionAntlrParser.getExpectedTokens
    package: adaptive-expressions
    summary: >-
      Computes the set of input symbols which could follow the current parser

      state and context, as given by <xref:%23getState> and
      <xref:%23getContext>,

      respectively.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getExpectedTokens()
      return:
        type: IntervalSet
        description: ''
  - name: getExpectedTokensWithinCurrentRule()
    uid: >-
      adaptive-expressions.ExpressionAntlrParser.getExpectedTokensWithinCurrentRule
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getExpectedTokensWithinCurrentRule()
      return:
        type: IntervalSet
        description: ''
  - name: getInvokingContext(number)
    uid: adaptive-expressions.ExpressionAntlrParser.getInvokingContext
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getInvokingContext(ruleIndex: number)'
      parameters:
        - id: ruleIndex
          type: number
          description: ''
      return:
        type: ParserRuleContext | undefined
        description: ''
  - name: getParseListeners()
    uid: adaptive-expressions.ExpressionAntlrParser.getParseListeners
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getParseListeners()
      return:
        type: 'ParseTreeListener[]'
        description: ''
  - name: getRuleIndex(string)
    uid: adaptive-expressions.ExpressionAntlrParser.getRuleIndex
    package: adaptive-expressions
    summary: 'Get a rule''s index (i.e., `RULE_ruleName` field) or -1 if not found.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getRuleIndex(ruleName: string)'
      parameters:
        - id: ruleName
          type: string
          description: ''
      return:
        type: number
        description: ''
  - name: getRuleIndexMap()
    uid: adaptive-expressions.ExpressionAntlrParser.getRuleIndexMap
    package: adaptive-expressions
    summary: |
      Get a map from rule names to rule indexes.
      Used for XPath and tree pattern compilation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getRuleIndexMap()
      return:
        type: 'ReadonlyMap&lt;string, number&gt;'
        description: ''
  - name: getRuleInvocationStack(RuleContext)
    uid: adaptive-expressions.ExpressionAntlrParser.getRuleInvocationStack
    package: adaptive-expressions
    summary: |
      Return List&lt;String&gt; of the rule names in your parser instance
       leading up to a call to the current rule.  You could override if
       you want more details such as the file/line info of where
       in the ATN a rule is invoked.
       This is very useful for error messages.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getRuleInvocationStack(ctx?: RuleContext)'
      parameters:
        - id: ctx
          type: RuleContext
          description: ''
      return:
        type: 'string[]'
        description: ''
  - name: getTokenType(string)
    uid: adaptive-expressions.ExpressionAntlrParser.getTokenType
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getTokenType(tokenName: string)'
      parameters:
        - id: tokenName
          type: string
          description: ''
      return:
        type: number
        description: ''
  - name: getTokenTypeMap()
    uid: adaptive-expressions.ExpressionAntlrParser.getTokenTypeMap
    package: adaptive-expressions
    summary: |
      Get a map from token names to token types.
      Used for XPath and tree pattern compilation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getTokenTypeMap()
      return:
        type: 'ReadonlyMap&lt;string, number&gt;'
        description: ''
  - name: inContext(string)
    uid: adaptive-expressions.ExpressionAntlrParser.inContext
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function inContext(context: string)'
      parameters:
        - id: context
          type: string
          description: ''
      return:
        type: boolean
        description: ''
  - name: isExpectedToken(number)
    uid: adaptive-expressions.ExpressionAntlrParser.isExpectedToken
    package: adaptive-expressions
    summary: |
      Checks whether or not `symbol` can follow the current state in the
      ATN. The behavior of this method is equivalent to the following, but is
      implemented such that the complete context-sensitive follow set does not
      need to be explicitly constructed.
      ```
      return getExpectedTokens().contains(symbol);
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function isExpectedToken(symbol: number)'
      parameters:
        - id: symbol
          type: number
          description: the symbol type to check
      return:
        type: boolean
        description: |-
          `true` if `symbol` can follow the current state in
          the ATN, otherwise `false`.
  - name: key()
    uid: adaptive-expressions.ExpressionAntlrParser.key
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function key()
      return:
        type: <xref uid="adaptive-expressions.KeyContext" />
        description: ''
  - name: keyValuePair()
    uid: adaptive-expressions.ExpressionAntlrParser.keyValuePair
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function keyValuePair()
      return:
        type: <xref uid="adaptive-expressions.KeyValuePairContext" />
        description: ''
  - name: keyValuePairList()
    uid: adaptive-expressions.ExpressionAntlrParser.keyValuePairList
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function keyValuePairList()
      return:
        type: <xref uid="adaptive-expressions.KeyValuePairListContext" />
        description: ''
  - name: lambda()
    uid: adaptive-expressions.ExpressionAntlrParser.lambda
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function lambda()
      return:
        type: <xref uid="adaptive-expressions.LambdaContext" />
        description: ''
  - name: match(number)
    uid: adaptive-expressions.ExpressionAntlrParser.match
    package: adaptive-expressions
    summary: >
      Match current input symbol against `ttype`. If the symbol type

      matches, <xref:ANTLRErrorStrategy%23reportMatch> and <xref:%23consume> are

      called to complete the match process.

      If the symbol type does not match,

      <xref:ANTLRErrorStrategy%23recoverInline> is called on the current error

      strategy to attempt recovery. If <xref:%23getBuildParseTree> is

      `true` and the token index of the symbol returned by

      <xref:ANTLRErrorStrategy%23recoverInline> is -1, the symbol is added to

      the parse tree by calling
      [Token)](xref:%23createErrorNode(ParserRuleContext%2C) then

      <xref:ParserRuleContext%23addErrorNode(ErrorNode)>.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function match(ttype: number)'
      parameters:
        - id: ttype
          type: number
          description: the token type to match
      return:
        type: Token
        description: |-
          the matched symbol
          @ if the current input symbol did not match
          `ttype` and the error strategy could not recover from the
          mismatched symbol
  - name: matchWildcard()
    uid: adaptive-expressions.ExpressionAntlrParser.matchWildcard
    package: adaptive-expressions
    summary: >
      Match current input symbol as a wildcard. If the symbol type matches

      (i.e. has a value greater than 0), <xref:ANTLRErrorStrategy%23reportMatch>

      and <xref:%23consume> are called to complete the match process.

      If the symbol type does not match,

      <xref:ANTLRErrorStrategy%23recoverInline> is called on the current error

      strategy to attempt recovery. If <xref:%23getBuildParseTree> is

      `true` and the token index of the symbol returned by

      <xref:ANTLRErrorStrategy%23recoverInline> is -1, the symbol is added to

      the parse tree by calling
      [Token)](xref:Parser%23createErrorNode(ParserRuleContext%2C) then

      <xref:ParserRuleContext%23addErrorNode(ErrorNode)>.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function matchWildcard()
      return:
        type: Token
        description: >-
          the matched symbol

          @ if the current input symbol did not match

          a wildcard and the error strategy could not recover from the
          mismatched

          symbol
  - name: notifyErrorListeners(string)
    uid: adaptive-expressions.ExpressionAntlrParser.notifyErrorListeners
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function notifyErrorListeners(msg: string)'
      parameters:
        - id: msg
          type: string
          description: ''
  - name: >-
      notifyErrorListeners(string, Token | null, RecognitionException |
      undefined)
    uid: adaptive-expressions.ExpressionAntlrParser.notifyErrorListeners_1
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function notifyErrorListeners(msg: string, offendingToken: Token | null,
        e: RecognitionException | undefined)
      parameters:
        - id: msg
          type: string
          description: ''
        - id: offendingToken
          type: Token | null
          description: ''
        - id: e
          type: RecognitionException | undefined
          description: ''
  - name: 'precpred(RuleContext, number)'
    uid: adaptive-expressions.ExpressionAntlrParser.precpred
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function precpred(localctx: RuleContext, precedence: number)'
      parameters:
        - id: localctx
          type: RuleContext
          description: ''
        - id: precedence
          type: number
          description: ''
      return:
        type: boolean
        description: ''
  - name: primaryExpression()
    uid: adaptive-expressions.ExpressionAntlrParser.primaryExpression
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function primaryExpression()
      return:
        type: <xref uid="adaptive-expressions.PrimaryExpressionContext" />
        description: ''
  - name: primaryExpression(number)
    uid: adaptive-expressions.ExpressionAntlrParser.primaryExpression_1
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function primaryExpression(_p: number)'
      parameters:
        - id: _p
          type: number
          description: ''
      return:
        type: <xref uid="adaptive-expressions.PrimaryExpressionContext" />
        description: ''
  - name: 'pushNewRecursionContext(ParserRuleContext, number, number)'
    uid: adaptive-expressions.ExpressionAntlrParser.pushNewRecursionContext
    package: adaptive-expressions
    summary: |-
      Like <xref:%23enterRule> but for recursive rules.
       Make the current context the child of the incoming localctx.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function pushNewRecursionContext(localctx: ParserRuleContext, state:
        number, ruleIndex: number)
      parameters:
        - id: localctx
          type: ParserRuleContext
          description: ''
        - id: state
          type: number
          description: ''
        - id: ruleIndex
          type: number
          description: ''
  - name: removeErrorListener(ANTLRErrorListener<Token>)
    uid: adaptive-expressions.ExpressionAntlrParser.removeErrorListener
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function removeErrorListener(listener: ANTLRErrorListener<Token>)'
      parameters:
        - id: listener
          type: ANTLRErrorListener&lt;Token&gt;
          description: ''
  - name: removeErrorListeners()
    uid: adaptive-expressions.ExpressionAntlrParser.removeErrorListeners
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function removeErrorListeners()
  - name: removeParseListener(ParseTreeListener)
    uid: adaptive-expressions.ExpressionAntlrParser.removeParseListener
    package: adaptive-expressions
    summary: |
      Remove `listener` from the list of parse listeners.
      If `listener` is `undefined` or has not been added as a parse
      listener, this method does nothing.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function removeParseListener(listener: ParseTreeListener)'
      parameters:
        - id: listener
          type: ParseTreeListener
          description: |
            the listener to remove
  - name: removeParseListeners()
    uid: adaptive-expressions.ExpressionAntlrParser.removeParseListeners
    package: adaptive-expressions
    summary: Remove all parse listeners.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function removeParseListeners()
  - name: reset()
    uid: adaptive-expressions.ExpressionAntlrParser.reset
    package: adaptive-expressions
    summary: reset the parser's state
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function reset()
  - name: reset(boolean)
    uid: adaptive-expressions.ExpressionAntlrParser.reset_1
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function reset(resetInput: boolean)'
      parameters:
        - id: resetInput
          type: boolean
          description: ''
  - name: 'sempred(RuleContext, number, number)'
    uid: adaptive-expressions.ExpressionAntlrParser.sempred
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function sempred(_localctx: RuleContext, ruleIndex: number, predIndex:
        number)
      parameters:
        - id: _localctx
          type: RuleContext
          description: ''
        - id: ruleIndex
          type: number
          description: ''
        - id: predIndex
          type: number
          description: ''
      return:
        type: boolean
        description: ''
  - name: setProfile(boolean)
    uid: adaptive-expressions.ExpressionAntlrParser.setProfile
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setProfile(profile: boolean)'
      parameters:
        - id: profile
          type: boolean
          description: ''
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: stringInterpolation()
    uid: adaptive-expressions.ExpressionAntlrParser.stringInterpolation
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function stringInterpolation()
      return:
        type: <xref uid="adaptive-expressions.StringInterpolationContext" />
        description: ''
  - name: textContent()
    uid: adaptive-expressions.ExpressionAntlrParser.textContent
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function textContent()
      return:
        type: <xref uid="adaptive-expressions.TextContentContext" />
        description: ''
  - name: unrollRecursionContexts(ParserRuleContext)
    uid: adaptive-expressions.ExpressionAntlrParser.unrollRecursionContexts
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function unrollRecursionContexts(_parentctx: ParserRuleContext)'
      parameters:
        - id: _parentctx
          type: ParserRuleContext
          description: ''
extends: Parser
