### YamlMime:TSType
name: CommonRegexParser
uid: adaptive-expressions.CommonRegexParser
package: adaptive-expressions
summary: ''
fullName: CommonRegexParser
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: CommonRegexParser(TokenStream)
    uid: adaptive-expressions.CommonRegexParser.constructor
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new CommonRegexParser(input: TokenStream)'
      parameters:
        - id: input
          type: TokenStream
          description: ''
properties:
  - name: ALC
    uid: adaptive-expressions.CommonRegexParser.ALC
    package: adaptive-expressions
    summary: ''
    fullName: ALC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static ALC: 44 = 44'
      return:
        description: ''
        type: '44'
  - name: Ampersand
    uid: adaptive-expressions.CommonRegexParser.Ampersand
    package: adaptive-expressions
    summary: ''
    fullName: Ampersand
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static Ampersand: 43 = 43'
      return:
        description: ''
        type: '43'
  - name: AUC
    uid: adaptive-expressions.CommonRegexParser.AUC
    package: adaptive-expressions
    summary: ''
    fullName: AUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static AUC: 70 = 70'
      return:
        description: ''
        type: '70'
  - name: Backslash
    uid: adaptive-expressions.CommonRegexParser.Backslash
    package: adaptive-expressions
    summary: ''
    fullName: Backslash
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static Backslash: 10 = 10'
      return:
        description: ''
        type: '10'
  - name: BellChar
    uid: adaptive-expressions.CommonRegexParser.BellChar
    package: adaptive-expressions
    summary: ''
    fullName: BellChar
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static BellChar: 3 = 3'
      return:
        description: ''
        type: '3'
  - name: BLC
    uid: adaptive-expressions.CommonRegexParser.BLC
    package: adaptive-expressions
    summary: ''
    fullName: BLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static BLC: 45 = 45'
      return:
        description: ''
        type: '45'
  - name: BlockQuoted
    uid: adaptive-expressions.CommonRegexParser.BlockQuoted
    package: adaptive-expressions
    summary: ''
    fullName: BlockQuoted
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static BlockQuoted: 2 = 2'
      return:
        description: ''
        type: '2'
  - name: BUC
    uid: adaptive-expressions.CommonRegexParser.BUC
    package: adaptive-expressions
    summary: ''
    fullName: BUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static BUC: 71 = 71'
      return:
        description: ''
        type: '71'
  - name: Caret
    uid: adaptive-expressions.CommonRegexParser.Caret
    package: adaptive-expressions
    summary: ''
    fullName: Caret
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static Caret: 23 = 23'
      return:
        description: ''
        type: '23'
  - name: CarriageReturn
    uid: adaptive-expressions.CommonRegexParser.CarriageReturn
    package: adaptive-expressions
    summary: ''
    fullName: CarriageReturn
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static CarriageReturn: 8 = 8'
      return:
        description: ''
        type: '8'
  - name: CharacterClassEnd
    uid: adaptive-expressions.CommonRegexParser.CharacterClassEnd
    package: adaptive-expressions
    summary: ''
    fullName: CharacterClassEnd
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static CharacterClassEnd: 22 = 22'
      return:
        description: ''
        type: '22'
  - name: CharacterClassStart
    uid: adaptive-expressions.CommonRegexParser.CharacterClassStart
    package: adaptive-expressions
    summary: ''
    fullName: CharacterClassStart
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static CharacterClassStart: 21 = 21'
      return:
        description: ''
        type: '21'
  - name: CharWithoutProperty
    uid: adaptive-expressions.CommonRegexParser.CharWithoutProperty
    package: adaptive-expressions
    summary: ''
    fullName: CharWithoutProperty
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static CharWithoutProperty: 16 = 16'
      return:
        description: ''
        type: '16'
  - name: CharWithProperty
    uid: adaptive-expressions.CommonRegexParser.CharWithProperty
    package: adaptive-expressions
    summary: ''
    fullName: CharWithProperty
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static CharWithProperty: 15 = 15'
      return:
        description: ''
        type: '15'
  - name: CLC
    uid: adaptive-expressions.CommonRegexParser.CLC
    package: adaptive-expressions
    summary: ''
    fullName: CLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static CLC: 46 = 46'
      return:
        description: ''
        type: '46'
  - name: CloseBrace
    uid: adaptive-expressions.CommonRegexParser.CloseBrace
    package: adaptive-expressions
    summary: ''
    fullName: CloseBrace
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static CloseBrace: 29 = 29'
      return:
        description: ''
        type: '29'
  - name: CloseParen
    uid: adaptive-expressions.CommonRegexParser.CloseParen
    package: adaptive-expressions
    summary: ''
    fullName: CloseParen
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static CloseParen: 34 = 34'
      return:
        description: ''
        type: '34'
  - name: Colon
    uid: adaptive-expressions.CommonRegexParser.Colon
    package: adaptive-expressions
    summary: ''
    fullName: Colon
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static Colon: 39 = 39'
      return:
        description: ''
        type: '39'
  - name: Comma
    uid: adaptive-expressions.CommonRegexParser.Comma
    package: adaptive-expressions
    summary: ''
    fullName: Comma
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static Comma: 30 = 30'
      return:
        description: ''
        type: '30'
  - name: ControlChar
    uid: adaptive-expressions.CommonRegexParser.ControlChar
    package: adaptive-expressions
    summary: ''
    fullName: ControlChar
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static ControlChar: 4 = 4'
      return:
        description: ''
        type: '4'
  - name: CUC
    uid: adaptive-expressions.CommonRegexParser.CUC
    package: adaptive-expressions
    summary: ''
    fullName: CUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static CUC: 72 = 72'
      return:
        description: ''
        type: '72'
  - name: D0
    uid: adaptive-expressions.CommonRegexParser.D0
    package: adaptive-expressions
    summary: ''
    fullName: D0
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static D0: 105 = 105'
      return:
        description: ''
        type: '105'
  - name: D1
    uid: adaptive-expressions.CommonRegexParser.D1
    package: adaptive-expressions
    summary: ''
    fullName: D1
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static D1: 96 = 96'
      return:
        description: ''
        type: '96'
  - name: D2
    uid: adaptive-expressions.CommonRegexParser.D2
    package: adaptive-expressions
    summary: ''
    fullName: D2
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static D2: 97 = 97'
      return:
        description: ''
        type: '97'
  - name: D3
    uid: adaptive-expressions.CommonRegexParser.D3
    package: adaptive-expressions
    summary: ''
    fullName: D3
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static D3: 98 = 98'
      return:
        description: ''
        type: '98'
  - name: D4
    uid: adaptive-expressions.CommonRegexParser.D4
    package: adaptive-expressions
    summary: ''
    fullName: D4
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static D4: 99 = 99'
      return:
        description: ''
        type: '99'
  - name: D5
    uid: adaptive-expressions.CommonRegexParser.D5
    package: adaptive-expressions
    summary: ''
    fullName: D5
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static D5: 100 = 100'
      return:
        description: ''
        type: '100'
  - name: D6
    uid: adaptive-expressions.CommonRegexParser.D6
    package: adaptive-expressions
    summary: ''
    fullName: D6
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static D6: 101 = 101'
      return:
        description: ''
        type: '101'
  - name: D7
    uid: adaptive-expressions.CommonRegexParser.D7
    package: adaptive-expressions
    summary: ''
    fullName: D7
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static D7: 102 = 102'
      return:
        description: ''
        type: '102'
  - name: D8
    uid: adaptive-expressions.CommonRegexParser.D8
    package: adaptive-expressions
    summary: ''
    fullName: D8
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static D8: 103 = 103'
      return:
        description: ''
        type: '103'
  - name: D9
    uid: adaptive-expressions.CommonRegexParser.D9
    package: adaptive-expressions
    summary: ''
    fullName: D9
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static D9: 104 = 104'
      return:
        description: ''
        type: '104'
  - name: DecimalDigit
    uid: adaptive-expressions.CommonRegexParser.DecimalDigit
    package: adaptive-expressions
    summary: ''
    fullName: DecimalDigit
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static DecimalDigit: 13 = 13'
      return:
        description: ''
        type: '13'
  - name: DLC
    uid: adaptive-expressions.CommonRegexParser.DLC
    package: adaptive-expressions
    summary: ''
    fullName: DLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static DLC: 47 = 47'
      return:
        description: ''
        type: '47'
  - name: Dot
    uid: adaptive-expressions.CommonRegexParser.Dot
    package: adaptive-expressions
    summary: ''
    fullName: Dot
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static Dot: 12 = 12'
      return:
        description: ''
        type: '12'
  - name: DUC
    uid: adaptive-expressions.CommonRegexParser.DUC
    package: adaptive-expressions
    summary: ''
    fullName: DUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static DUC: 73 = 73'
      return:
        description: ''
        type: '73'
  - name: ELC
    uid: adaptive-expressions.CommonRegexParser.ELC
    package: adaptive-expressions
    summary: ''
    fullName: ELC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static ELC: 48 = 48'
      return:
        description: ''
        type: '48'
  - name: EndOfSubject
    uid: adaptive-expressions.CommonRegexParser.EndOfSubject
    package: adaptive-expressions
    summary: ''
    fullName: EndOfSubject
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static EndOfSubject: 31 = 31'
      return:
        description: ''
        type: '31'
  - name: Equals
    uid: adaptive-expressions.CommonRegexParser.Equals
    package: adaptive-expressions
    summary: ''
    fullName: Equals
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static Equals: 41 = 41'
      return:
        description: ''
        type: '41'
  - name: EscapeChar
    uid: adaptive-expressions.CommonRegexParser.EscapeChar
    package: adaptive-expressions
    summary: ''
    fullName: EscapeChar
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static EscapeChar: 5 = 5'
      return:
        description: ''
        type: '5'
  - name: EUC
    uid: adaptive-expressions.CommonRegexParser.EUC
    package: adaptive-expressions
    summary: ''
    fullName: EUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static EUC: 74 = 74'
      return:
        description: ''
        type: '74'
  - name: Exclamation
    uid: adaptive-expressions.CommonRegexParser.Exclamation
    package: adaptive-expressions
    summary: ''
    fullName: Exclamation
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static Exclamation: 42 = 42'
      return:
        description: ''
        type: '42'
  - name: FLC
    uid: adaptive-expressions.CommonRegexParser.FLC
    package: adaptive-expressions
    summary: ''
    fullName: FLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static FLC: 49 = 49'
      return:
        description: ''
        type: '49'
  - name: FormFeed
    uid: adaptive-expressions.CommonRegexParser.FormFeed
    package: adaptive-expressions
    summary: ''
    fullName: FormFeed
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static FormFeed: 6 = 6'
      return:
        description: ''
        type: '6'
  - name: FUC
    uid: adaptive-expressions.CommonRegexParser.FUC
    package: adaptive-expressions
    summary: ''
    fullName: FUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static FUC: 75 = 75'
      return:
        description: ''
        type: '75'
  - name: GLC
    uid: adaptive-expressions.CommonRegexParser.GLC
    package: adaptive-expressions
    summary: ''
    fullName: GLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static GLC: 50 = 50'
      return:
        description: ''
        type: '50'
  - name: grammarFileName
    uid: adaptive-expressions.CommonRegexParser.grammarFileName
    package: adaptive-expressions
    summary: ''
    fullName: grammarFileName
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: string grammarFileName
      return:
        description: ''
        type: string
  - name: GreaterThan
    uid: adaptive-expressions.CommonRegexParser.GreaterThan
    package: adaptive-expressions
    summary: ''
    fullName: GreaterThan
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static GreaterThan: 36 = 36'
      return:
        description: ''
        type: '36'
  - name: GUC
    uid: adaptive-expressions.CommonRegexParser.GUC
    package: adaptive-expressions
    summary: ''
    fullName: GUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static GUC: 76 = 76'
      return:
        description: ''
        type: '76'
  - name: Hash
    uid: adaptive-expressions.CommonRegexParser.Hash
    package: adaptive-expressions
    summary: ''
    fullName: Hash
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static Hash: 40 = 40'
      return:
        description: ''
        type: '40'
  - name: HexChar
    uid: adaptive-expressions.CommonRegexParser.HexChar
    package: adaptive-expressions
    summary: ''
    fullName: HexChar
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static HexChar: 11 = 11'
      return:
        description: ''
        type: '11'
  - name: HLC
    uid: adaptive-expressions.CommonRegexParser.HLC
    package: adaptive-expressions
    summary: ''
    fullName: HLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static HLC: 51 = 51'
      return:
        description: ''
        type: '51'
  - name: HUC
    uid: adaptive-expressions.CommonRegexParser.HUC
    package: adaptive-expressions
    summary: ''
    fullName: HUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static HUC: 77 = 77'
      return:
        description: ''
        type: '77'
  - name: Hyphen
    uid: adaptive-expressions.CommonRegexParser.Hyphen
    package: adaptive-expressions
    summary: ''
    fullName: Hyphen
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static Hyphen: 24 = 24'
      return:
        description: ''
        type: '24'
  - name: ILC
    uid: adaptive-expressions.CommonRegexParser.ILC
    package: adaptive-expressions
    summary: ''
    fullName: ILC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static ILC: 52 = 52'
      return:
        description: ''
        type: '52'
  - name: IUC
    uid: adaptive-expressions.CommonRegexParser.IUC
    package: adaptive-expressions
    summary: ''
    fullName: IUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static IUC: 78 = 78'
      return:
        description: ''
        type: '78'
  - name: JLC
    uid: adaptive-expressions.CommonRegexParser.JLC
    package: adaptive-expressions
    summary: ''
    fullName: JLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static JLC: 53 = 53'
      return:
        description: ''
        type: '53'
  - name: JUC
    uid: adaptive-expressions.CommonRegexParser.JUC
    package: adaptive-expressions
    summary: ''
    fullName: JUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static JUC: 79 = 79'
      return:
        description: ''
        type: '79'
  - name: KLC
    uid: adaptive-expressions.CommonRegexParser.KLC
    package: adaptive-expressions
    summary: ''
    fullName: KLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static KLC: 54 = 54'
      return:
        description: ''
        type: '54'
  - name: KUC
    uid: adaptive-expressions.CommonRegexParser.KUC
    package: adaptive-expressions
    summary: ''
    fullName: KUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static KUC: 80 = 80'
      return:
        description: ''
        type: '80'
  - name: LessThan
    uid: adaptive-expressions.CommonRegexParser.LessThan
    package: adaptive-expressions
    summary: ''
    fullName: LessThan
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static LessThan: 35 = 35'
      return:
        description: ''
        type: '35'
  - name: LLC
    uid: adaptive-expressions.CommonRegexParser.LLC
    package: adaptive-expressions
    summary: ''
    fullName: LLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static LLC: 55 = 55'
      return:
        description: ''
        type: '55'
  - name: LUC
    uid: adaptive-expressions.CommonRegexParser.LUC
    package: adaptive-expressions
    summary: ''
    fullName: LUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static LUC: 81 = 81'
      return:
        description: ''
        type: '81'
  - name: MLC
    uid: adaptive-expressions.CommonRegexParser.MLC
    package: adaptive-expressions
    summary: ''
    fullName: MLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static MLC: 56 = 56'
      return:
        description: ''
        type: '56'
  - name: MUC
    uid: adaptive-expressions.CommonRegexParser.MUC
    package: adaptive-expressions
    summary: ''
    fullName: MUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static MUC: 82 = 82'
      return:
        description: ''
        type: '82'
  - name: NewLine
    uid: adaptive-expressions.CommonRegexParser.NewLine
    package: adaptive-expressions
    summary: ''
    fullName: NewLine
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static NewLine: 7 = 7'
      return:
        description: ''
        type: '7'
  - name: NLC
    uid: adaptive-expressions.CommonRegexParser.NLC
    package: adaptive-expressions
    summary: ''
    fullName: NLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static NLC: 57 = 57'
      return:
        description: ''
        type: '57'
  - name: NotDecimalDigit
    uid: adaptive-expressions.CommonRegexParser.NotDecimalDigit
    package: adaptive-expressions
    summary: ''
    fullName: NotDecimalDigit
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static NotDecimalDigit: 14 = 14'
      return:
        description: ''
        type: '14'
  - name: NotWhiteSpace
    uid: adaptive-expressions.CommonRegexParser.NotWhiteSpace
    package: adaptive-expressions
    summary: ''
    fullName: NotWhiteSpace
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static NotWhiteSpace: 18 = 18'
      return:
        description: ''
        type: '18'
  - name: NotWordChar
    uid: adaptive-expressions.CommonRegexParser.NotWordChar
    package: adaptive-expressions
    summary: ''
    fullName: NotWordChar
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static NotWordChar: 20 = 20'
      return:
        description: ''
        type: '20'
  - name: NUC
    uid: adaptive-expressions.CommonRegexParser.NUC
    package: adaptive-expressions
    summary: ''
    fullName: NUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static NUC: 83 = 83'
      return:
        description: ''
        type: '83'
  - name: OLC
    uid: adaptive-expressions.CommonRegexParser.OLC
    package: adaptive-expressions
    summary: ''
    fullName: OLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static OLC: 58 = 58'
      return:
        description: ''
        type: '58'
  - name: OpenBrace
    uid: adaptive-expressions.CommonRegexParser.OpenBrace
    package: adaptive-expressions
    summary: ''
    fullName: OpenBrace
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static OpenBrace: 28 = 28'
      return:
        description: ''
        type: '28'
  - name: OpenParen
    uid: adaptive-expressions.CommonRegexParser.OpenParen
    package: adaptive-expressions
    summary: ''
    fullName: OpenParen
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static OpenParen: 33 = 33'
      return:
        description: ''
        type: '33'
  - name: OtherChar
    uid: adaptive-expressions.CommonRegexParser.OtherChar
    package: adaptive-expressions
    summary: ''
    fullName: OtherChar
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static OtherChar: 106 = 106'
      return:
        description: ''
        type: '106'
  - name: OUC
    uid: adaptive-expressions.CommonRegexParser.OUC
    package: adaptive-expressions
    summary: ''
    fullName: OUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static OUC: 84 = 84'
      return:
        description: ''
        type: '84'
  - name: Pipe
    uid: adaptive-expressions.CommonRegexParser.Pipe
    package: adaptive-expressions
    summary: ''
    fullName: Pipe
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static Pipe: 32 = 32'
      return:
        description: ''
        type: '32'
  - name: PLC
    uid: adaptive-expressions.CommonRegexParser.PLC
    package: adaptive-expressions
    summary: ''
    fullName: PLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static PLC: 59 = 59'
      return:
        description: ''
        type: '59'
  - name: Plus
    uid: adaptive-expressions.CommonRegexParser.Plus
    package: adaptive-expressions
    summary: ''
    fullName: Plus
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static Plus: 26 = 26'
      return:
        description: ''
        type: '26'
  - name: PUC
    uid: adaptive-expressions.CommonRegexParser.PUC
    package: adaptive-expressions
    summary: ''
    fullName: PUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static PUC: 85 = 85'
      return:
        description: ''
        type: '85'
  - name: QLC
    uid: adaptive-expressions.CommonRegexParser.QLC
    package: adaptive-expressions
    summary: ''
    fullName: QLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static QLC: 60 = 60'
      return:
        description: ''
        type: '60'
  - name: QUC
    uid: adaptive-expressions.CommonRegexParser.QUC
    package: adaptive-expressions
    summary: ''
    fullName: QUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static QUC: 86 = 86'
      return:
        description: ''
        type: '86'
  - name: QuestionMark
    uid: adaptive-expressions.CommonRegexParser.QuestionMark
    package: adaptive-expressions
    summary: ''
    fullName: QuestionMark
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static QuestionMark: 25 = 25'
      return:
        description: ''
        type: '25'
  - name: Quoted
    uid: adaptive-expressions.CommonRegexParser.Quoted
    package: adaptive-expressions
    summary: ''
    fullName: Quoted
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static Quoted: 1 = 1'
      return:
        description: ''
        type: '1'
  - name: RLC
    uid: adaptive-expressions.CommonRegexParser.RLC
    package: adaptive-expressions
    summary: ''
    fullName: RLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RLC: 61 = 61'
      return:
        description: ''
        type: '61'
  - name: RUC
    uid: adaptive-expressions.CommonRegexParser.RUC
    package: adaptive-expressions
    summary: ''
    fullName: RUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RUC: 87 = 87'
      return:
        description: ''
        type: '87'
  - name: ruleNames
    uid: adaptive-expressions.CommonRegexParser.ruleNames
    package: adaptive-expressions
    summary: ''
    fullName: ruleNames
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: "public static ruleNames: string[] = [\n\t\t\"parse\", \"alternation\", \"expr\", \"element\", \"quantifier\", \"quantifier_type\", \n\t\t\"character_class\", \"capture\", \"non_capture\", \"option\", \"option_flag\", \n\t\t\"atom\", \"cc_atom\", \"shared_atom\", \"literal\", \"cc_literal\", \"shared_literal\", \n\t\t\"number\", \"octal_char\", \"octal_digit\", \"digits\", \"digit\", \"name\", \"alpha_nums\", \n\t\t\"non_close_parens\", \"non_close_paren\", \"letter\",\n\t]"
      return:
        description: ''
        type: 'string[]'
  - name: ruleNames
    uid: adaptive-expressions.CommonRegexParser.ruleNames
    package: adaptive-expressions
    summary: ''
    fullName: ruleNames
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'string[] ruleNames'
      return:
        description: ''
        type: 'string[]'
  - name: RULE_alpha_nums
    uid: adaptive-expressions.CommonRegexParser.RULE_alpha_nums
    package: adaptive-expressions
    summary: ''
    fullName: RULE_alpha_nums
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_alpha_nums: 23 = 23'
      return:
        description: ''
        type: '23'
  - name: RULE_alternation
    uid: adaptive-expressions.CommonRegexParser.RULE_alternation
    package: adaptive-expressions
    summary: ''
    fullName: RULE_alternation
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_alternation: 1 = 1'
      return:
        description: ''
        type: '1'
  - name: RULE_atom
    uid: adaptive-expressions.CommonRegexParser.RULE_atom
    package: adaptive-expressions
    summary: ''
    fullName: RULE_atom
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_atom: 11 = 11'
      return:
        description: ''
        type: '11'
  - name: RULE_capture
    uid: adaptive-expressions.CommonRegexParser.RULE_capture
    package: adaptive-expressions
    summary: ''
    fullName: RULE_capture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_capture: 7 = 7'
      return:
        description: ''
        type: '7'
  - name: RULE_cc_atom
    uid: adaptive-expressions.CommonRegexParser.RULE_cc_atom
    package: adaptive-expressions
    summary: ''
    fullName: RULE_cc_atom
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_cc_atom: 12 = 12'
      return:
        description: ''
        type: '12'
  - name: RULE_cc_literal
    uid: adaptive-expressions.CommonRegexParser.RULE_cc_literal
    package: adaptive-expressions
    summary: ''
    fullName: RULE_cc_literal
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_cc_literal: 15 = 15'
      return:
        description: ''
        type: '15'
  - name: RULE_character_class
    uid: adaptive-expressions.CommonRegexParser.RULE_character_class
    package: adaptive-expressions
    summary: ''
    fullName: RULE_character_class
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_character_class: 6 = 6'
      return:
        description: ''
        type: '6'
  - name: RULE_digit
    uid: adaptive-expressions.CommonRegexParser.RULE_digit
    package: adaptive-expressions
    summary: ''
    fullName: RULE_digit
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_digit: 21 = 21'
      return:
        description: ''
        type: '21'
  - name: RULE_digits
    uid: adaptive-expressions.CommonRegexParser.RULE_digits
    package: adaptive-expressions
    summary: ''
    fullName: RULE_digits
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_digits: 20 = 20'
      return:
        description: ''
        type: '20'
  - name: RULE_element
    uid: adaptive-expressions.CommonRegexParser.RULE_element
    package: adaptive-expressions
    summary: ''
    fullName: RULE_element
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_element: 3 = 3'
      return:
        description: ''
        type: '3'
  - name: RULE_expr
    uid: adaptive-expressions.CommonRegexParser.RULE_expr
    package: adaptive-expressions
    summary: ''
    fullName: RULE_expr
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_expr: 2 = 2'
      return:
        description: ''
        type: '2'
  - name: RULE_letter
    uid: adaptive-expressions.CommonRegexParser.RULE_letter
    package: adaptive-expressions
    summary: ''
    fullName: RULE_letter
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_letter: 26 = 26'
      return:
        description: ''
        type: '26'
  - name: RULE_literal
    uid: adaptive-expressions.CommonRegexParser.RULE_literal
    package: adaptive-expressions
    summary: ''
    fullName: RULE_literal
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_literal: 14 = 14'
      return:
        description: ''
        type: '14'
  - name: RULE_name
    uid: adaptive-expressions.CommonRegexParser.RULE_name
    package: adaptive-expressions
    summary: ''
    fullName: RULE_name
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_name: 22 = 22'
      return:
        description: ''
        type: '22'
  - name: RULE_non_capture
    uid: adaptive-expressions.CommonRegexParser.RULE_non_capture
    package: adaptive-expressions
    summary: ''
    fullName: RULE_non_capture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_non_capture: 8 = 8'
      return:
        description: ''
        type: '8'
  - name: RULE_non_close_paren
    uid: adaptive-expressions.CommonRegexParser.RULE_non_close_paren
    package: adaptive-expressions
    summary: ''
    fullName: RULE_non_close_paren
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_non_close_paren: 25 = 25'
      return:
        description: ''
        type: '25'
  - name: RULE_non_close_parens
    uid: adaptive-expressions.CommonRegexParser.RULE_non_close_parens
    package: adaptive-expressions
    summary: ''
    fullName: RULE_non_close_parens
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_non_close_parens: 24 = 24'
      return:
        description: ''
        type: '24'
  - name: RULE_number
    uid: adaptive-expressions.CommonRegexParser.RULE_number
    package: adaptive-expressions
    summary: ''
    fullName: RULE_number
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_number: 17 = 17'
      return:
        description: ''
        type: '17'
  - name: RULE_octal_char
    uid: adaptive-expressions.CommonRegexParser.RULE_octal_char
    package: adaptive-expressions
    summary: ''
    fullName: RULE_octal_char
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_octal_char: 18 = 18'
      return:
        description: ''
        type: '18'
  - name: RULE_octal_digit
    uid: adaptive-expressions.CommonRegexParser.RULE_octal_digit
    package: adaptive-expressions
    summary: ''
    fullName: RULE_octal_digit
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_octal_digit: 19 = 19'
      return:
        description: ''
        type: '19'
  - name: RULE_option
    uid: adaptive-expressions.CommonRegexParser.RULE_option
    package: adaptive-expressions
    summary: ''
    fullName: RULE_option
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_option: 9 = 9'
      return:
        description: ''
        type: '9'
  - name: RULE_option_flag
    uid: adaptive-expressions.CommonRegexParser.RULE_option_flag
    package: adaptive-expressions
    summary: ''
    fullName: RULE_option_flag
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_option_flag: 10 = 10'
      return:
        description: ''
        type: '10'
  - name: RULE_parse
    uid: adaptive-expressions.CommonRegexParser.RULE_parse
    package: adaptive-expressions
    summary: ''
    fullName: RULE_parse
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_parse: 0 = 0'
      return:
        description: ''
        type: '0'
  - name: RULE_quantifier
    uid: adaptive-expressions.CommonRegexParser.RULE_quantifier
    package: adaptive-expressions
    summary: ''
    fullName: RULE_quantifier
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_quantifier: 4 = 4'
      return:
        description: ''
        type: '4'
  - name: RULE_quantifier_type
    uid: adaptive-expressions.CommonRegexParser.RULE_quantifier_type
    package: adaptive-expressions
    summary: ''
    fullName: RULE_quantifier_type
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_quantifier_type: 5 = 5'
      return:
        description: ''
        type: '5'
  - name: RULE_shared_atom
    uid: adaptive-expressions.CommonRegexParser.RULE_shared_atom
    package: adaptive-expressions
    summary: ''
    fullName: RULE_shared_atom
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_shared_atom: 13 = 13'
      return:
        description: ''
        type: '13'
  - name: RULE_shared_literal
    uid: adaptive-expressions.CommonRegexParser.RULE_shared_literal
    package: adaptive-expressions
    summary: ''
    fullName: RULE_shared_literal
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RULE_shared_literal: 16 = 16'
      return:
        description: ''
        type: '16'
  - name: serializedATN
    uid: adaptive-expressions.CommonRegexParser.serializedATN
    package: adaptive-expressions
    summary: ''
    fullName: serializedATN
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: string serializedATN
      return:
        description: ''
        type: string
  - name: SingleQuote
    uid: adaptive-expressions.CommonRegexParser.SingleQuote
    package: adaptive-expressions
    summary: ''
    fullName: SingleQuote
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static SingleQuote: 37 = 37'
      return:
        description: ''
        type: '37'
  - name: SLC
    uid: adaptive-expressions.CommonRegexParser.SLC
    package: adaptive-expressions
    summary: ''
    fullName: SLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static SLC: 62 = 62'
      return:
        description: ''
        type: '62'
  - name: Star
    uid: adaptive-expressions.CommonRegexParser.Star
    package: adaptive-expressions
    summary: ''
    fullName: Star
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static Star: 27 = 27'
      return:
        description: ''
        type: '27'
  - name: SUC
    uid: adaptive-expressions.CommonRegexParser.SUC
    package: adaptive-expressions
    summary: ''
    fullName: SUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static SUC: 88 = 88'
      return:
        description: ''
        type: '88'
  - name: Tab
    uid: adaptive-expressions.CommonRegexParser.Tab
    package: adaptive-expressions
    summary: ''
    fullName: Tab
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static Tab: 9 = 9'
      return:
        description: ''
        type: '9'
  - name: TLC
    uid: adaptive-expressions.CommonRegexParser.TLC
    package: adaptive-expressions
    summary: ''
    fullName: TLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static TLC: 63 = 63'
      return:
        description: ''
        type: '63'
  - name: TUC
    uid: adaptive-expressions.CommonRegexParser.TUC
    package: adaptive-expressions
    summary: ''
    fullName: TUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static TUC: 89 = 89'
      return:
        description: ''
        type: '89'
  - name: ULC
    uid: adaptive-expressions.CommonRegexParser.ULC
    package: adaptive-expressions
    summary: ''
    fullName: ULC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static ULC: 64 = 64'
      return:
        description: ''
        type: '64'
  - name: Underscore
    uid: adaptive-expressions.CommonRegexParser.Underscore
    package: adaptive-expressions
    summary: ''
    fullName: Underscore
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static Underscore: 38 = 38'
      return:
        description: ''
        type: '38'
  - name: UUC
    uid: adaptive-expressions.CommonRegexParser.UUC
    package: adaptive-expressions
    summary: ''
    fullName: UUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static UUC: 90 = 90'
      return:
        description: ''
        type: '90'
  - name: VLC
    uid: adaptive-expressions.CommonRegexParser.VLC
    package: adaptive-expressions
    summary: ''
    fullName: VLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static VLC: 65 = 65'
      return:
        description: ''
        type: '65'
  - name: VOCABULARY
    uid: adaptive-expressions.CommonRegexParser.VOCABULARY
    package: adaptive-expressions
    summary: ''
    fullName: VOCABULARY
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        public static VOCABULARY: Vocabulary = new
        VocabularyImpl(CommonRegexParser._LITERAL_NAMES,
        CommonRegexParser._SYMBOLIC_NAMES, [])
      return:
        description: ''
        type: Vocabulary
  - name: vocabulary
    uid: adaptive-expressions.CommonRegexParser.vocabulary
    package: adaptive-expressions
    summary: ''
    fullName: vocabulary
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: Vocabulary vocabulary
      return:
        description: ''
        type: Vocabulary
  - name: VUC
    uid: adaptive-expressions.CommonRegexParser.VUC
    package: adaptive-expressions
    summary: ''
    fullName: VUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static VUC: 91 = 91'
      return:
        description: ''
        type: '91'
  - name: WhiteSpace
    uid: adaptive-expressions.CommonRegexParser.WhiteSpace
    package: adaptive-expressions
    summary: ''
    fullName: WhiteSpace
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static WhiteSpace: 17 = 17'
      return:
        description: ''
        type: '17'
  - name: WLC
    uid: adaptive-expressions.CommonRegexParser.WLC
    package: adaptive-expressions
    summary: ''
    fullName: WLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static WLC: 66 = 66'
      return:
        description: ''
        type: '66'
  - name: WordChar
    uid: adaptive-expressions.CommonRegexParser.WordChar
    package: adaptive-expressions
    summary: ''
    fullName: WordChar
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static WordChar: 19 = 19'
      return:
        description: ''
        type: '19'
  - name: WUC
    uid: adaptive-expressions.CommonRegexParser.WUC
    package: adaptive-expressions
    summary: ''
    fullName: WUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static WUC: 92 = 92'
      return:
        description: ''
        type: '92'
  - name: XLC
    uid: adaptive-expressions.CommonRegexParser.XLC
    package: adaptive-expressions
    summary: ''
    fullName: XLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static XLC: 67 = 67'
      return:
        description: ''
        type: '67'
  - name: XUC
    uid: adaptive-expressions.CommonRegexParser.XUC
    package: adaptive-expressions
    summary: ''
    fullName: XUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static XUC: 93 = 93'
      return:
        description: ''
        type: '93'
  - name: YLC
    uid: adaptive-expressions.CommonRegexParser.YLC
    package: adaptive-expressions
    summary: ''
    fullName: YLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static YLC: 68 = 68'
      return:
        description: ''
        type: '68'
  - name: YUC
    uid: adaptive-expressions.CommonRegexParser.YUC
    package: adaptive-expressions
    summary: ''
    fullName: YUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static YUC: 94 = 94'
      return:
        description: ''
        type: '94'
  - name: ZLC
    uid: adaptive-expressions.CommonRegexParser.ZLC
    package: adaptive-expressions
    summary: ''
    fullName: ZLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static ZLC: 69 = 69'
      return:
        description: ''
        type: '69'
  - name: ZUC
    uid: adaptive-expressions.CommonRegexParser.ZUC
    package: adaptive-expressions
    summary: ''
    fullName: ZUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static ZUC: 95 = 95'
      return:
        description: ''
        type: '95'
inheritedProperties:
  - name: atn
    uid: adaptive-expressions.CommonRegexParser.atn
    package: adaptive-expressions
    summary: >-
      Get the <xref:adaptive-expressions.CommonRegexLexer.serializedATN> used by
      the recognizer for prediction.
    fullName: atn
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'atn: ATN'
      return:
        description: ''
        type: ATN
    inheritanceDescription: <b>Inherited From</b> Recognizer.atn
  - name: buildParseTree
    uid: adaptive-expressions.CommonRegexParser.buildParseTree
    package: adaptive-expressions
    summary: |
      Track the <xref:ParserRuleContext> objects during the parse and hook
      them up using the <xref:ParserRuleContext%23children> list so that it
      forms a parse tree. The <xref:ParserRuleContext> returned from the start
      rule represents the root of the parse tree.
      Note that if we are not building parse trees, rule contexts only point
      upwards. When a rule exits, it returns the context but that gets garbage
      collected if nobody holds a reference. It points upwards but nobody
      points at it.

      When we build parse trees, we are adding all of these contexts to
      <xref:ParserRuleContext%23children> list. Contexts are then not candidates
      for garbage collection.
    fullName: buildParseTree
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'buildParseTree: boolean'
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> Parser.buildParseTree
  - name: context
    uid: adaptive-expressions.CommonRegexParser.context
    package: adaptive-expressions
    summary: ''
    fullName: context
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: ParserRuleContext'
      return:
        description: ''
        type: ParserRuleContext
    inheritanceDescription: <b>Inherited From</b> Parser.context
  - name: currentToken
    uid: adaptive-expressions.CommonRegexParser.currentToken
    package: adaptive-expressions
    summary: |-
      Match needs to return the current input symbol, which gets put
       into the label for the associated token ref; e.g., x=ID.
    fullName: currentToken
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'currentToken: Token'
      return:
        description: ''
        type: Token
    inheritanceDescription: <b>Inherited From</b> Parser.currentToken
  - name: EOF
    uid: adaptive-expressions.CommonRegexParser.EOF
    package: adaptive-expressions
    summary: ''
    fullName: EOF
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static EOF: number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Recognizer.EOF
  - name: errorHandler
    uid: adaptive-expressions.CommonRegexParser.errorHandler
    package: adaptive-expressions
    summary: ''
    fullName: errorHandler
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'errorHandler: ANTLRErrorStrategy'
      return:
        description: ''
        type: ANTLRErrorStrategy
    inheritanceDescription: <b>Inherited From</b> Parser.errorHandler
  - name: inputStream
    uid: adaptive-expressions.CommonRegexParser.inputStream
    package: adaptive-expressions
    summary: Set the token stream and reset the parser.
    fullName: inputStream
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'inputStream: TokenStream'
      return:
        description: ''
        type: TokenStream
    inheritanceDescription: <b>Inherited From</b> Parser.inputStream
  - name: interpreter
    uid: adaptive-expressions.CommonRegexParser.interpreter
    package: adaptive-expressions
    summary: Set the ATN interpreter used by the recognizer for prediction.
    fullName: interpreter
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'interpreter: ParserATNSimulator'
      return:
        description: ''
        type: ParserATNSimulator
    inheritanceDescription: <b>Inherited From</b> Recognizer.interpreter
  - name: isMatchedEOF
    uid: adaptive-expressions.CommonRegexParser.isMatchedEOF
    package: adaptive-expressions
    summary: ''
    fullName: isMatchedEOF
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'isMatchedEOF: boolean'
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> Parser.isMatchedEOF
  - name: isTrace
    uid: adaptive-expressions.CommonRegexParser.isTrace
    package: adaptive-expressions
    summary: |-
      During a parse is sometimes useful to listen in on the rule entry and exit
       events as well as token matches. This is for quick and dirty debugging.
    fullName: isTrace
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'isTrace: boolean'
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> Parser.isTrace
  - name: numberOfSyntaxErrors
    uid: adaptive-expressions.CommonRegexParser.numberOfSyntaxErrors
    package: adaptive-expressions
    summary: |-
      Gets the number of syntax errors reported during parsing. This value is
      incremented each time <xref:%23notifyErrorListeners> is called.

      See #notifyErrorListeners
    fullName: numberOfSyntaxErrors
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'numberOfSyntaxErrors: number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Parser.numberOfSyntaxErrors
  - name: parseInfo
    uid: adaptive-expressions.CommonRegexParser.parseInfo
    package: adaptive-expressions
    summary: ''
    fullName: parseInfo
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'parseInfo: Promise<ParseInfo | undefined>'
      return:
        description: ''
        type: Promise&lt;ParseInfo | undefined&gt;
    inheritanceDescription: <b>Inherited From</b> Parser.parseInfo
  - name: precedence
    uid: adaptive-expressions.CommonRegexParser.precedence
    package: adaptive-expressions
    summary: Get the precedence level for the top-most precedence rule.
    fullName: precedence
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'precedence: number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Parser.precedence
  - name: ruleContext
    uid: adaptive-expressions.CommonRegexParser.ruleContext
    package: adaptive-expressions
    summary: ''
    fullName: ruleContext
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ruleContext: ParserRuleContext'
      return:
        description: ''
        type: ParserRuleContext
    inheritanceDescription: <b>Inherited From</b> Parser.ruleContext
  - name: sourceName
    uid: adaptive-expressions.CommonRegexParser.sourceName
    package: adaptive-expressions
    summary: ''
    fullName: sourceName
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'sourceName: string'
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> Parser.sourceName
  - name: state
    uid: adaptive-expressions.CommonRegexParser.state
    package: adaptive-expressions
    summary: |-
      Indicate that the recognizer has changed internal state that is
       consistent with the ATN state passed in.  This way we always know
       where we are in the ATN as the parser goes along. The rule
       context objects form a stack that lets us see the stack of
       invoking rules. Combine this and we have complete ATN
       configuration information.
    fullName: state
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'state: number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Recognizer.state
  - name: tokenFactory
    uid: adaptive-expressions.CommonRegexParser.tokenFactory
    package: adaptive-expressions
    summary: ''
    fullName: tokenFactory
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'tokenFactory: TokenFactory'
      return:
        description: ''
        type: TokenFactory
    inheritanceDescription: <b>Inherited From</b> Parser.tokenFactory
inheritedMethods:
  - name: 'action(RuleContext | undefined, number, number)'
    uid: adaptive-expressions.CommonRegexParser.action
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function action(_localctx: RuleContext | undefined, ruleIndex: number,
        actionIndex: number)
      parameters:
        - id: _localctx
          type: RuleContext | undefined
          description: ''
        - id: ruleIndex
          type: number
          description: ''
        - id: actionIndex
          type: number
          description: ''
    inheritanceDescription: <b>Inherited From</b> Recognizer.action
  - name: addErrorListener(ANTLRErrorListener<Token>)
    uid: adaptive-expressions.CommonRegexParser.addErrorListener
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function addErrorListener(listener: ANTLRErrorListener<Token>)'
      parameters:
        - id: listener
          type: ANTLRErrorListener&lt;Token&gt;
          description: ''
    inheritanceDescription: <b>Inherited From</b> Recognizer.addErrorListener
  - name: addParseListener(ParseTreeListener)
    uid: adaptive-expressions.CommonRegexParser.addParseListener
    package: adaptive-expressions
    summary: |
      Registers `listener` to receive events during the parsing process.
      To support output-preserving grammar transformations (including but not
      limited to left-recursion removal, automated left-factoring, and
      optimized code generation), calls to listener methods during the parse
      may differ substantially from calls made by
      <xref:ParseTreeWalker%23DEFAULT> used after the parse is complete. In
      particular, rule entry and exit events may occur in a different order
      during the parse than after the parser. In addition, calls to certain
      rule entry methods may be omitted.

      With the following specific exceptions, calls to listener events are
      *deterministic*, i.e. for identical input the calls to listener
      methods will be the same.

      * Alterations to the grammar used to generate code may change the
        behavior of the listener calls.
      * Alterations to the command line options passed to ANTLR 4 when
        generating the parser may change the behavior of the listener calls.
      * Changing the version of the ANTLR Tool used to generate the parser
        may change the behavior of the listener calls.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function addParseListener(listener: ParseTreeListener)'
      parameters:
        - id: listener
          type: ParseTreeListener
          description: |
            the listener to add
    inheritanceDescription: <b>Inherited From</b> Parser.addParseListener
  - name: 'compileParseTreePattern(string, number)'
    uid: adaptive-expressions.CommonRegexParser.compileParseTreePattern
    package: adaptive-expressions
    summary: >
      The preferred method of getting a tree pattern. For example, here's a

      sample use:

      ```

      let t: ParseTree = parser.expr();

      let p: ParseTreePattern = await parser.compileParseTreePattern("<ID>+0",
      MyParser.RULE_expr);

      let m: ParseTreeMatch = p.match(t);

      let id: string = m.get("ID");

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function compileParseTreePattern(pattern: string, patternRuleIndex:
        number): Promise<ParseTreePattern>
      parameters:
        - id: pattern
          type: string
          description: ''
        - id: patternRuleIndex
          type: number
          description: ''
      return:
        description: ''
        type: Promise&lt;ParseTreePattern&gt;
    inheritanceDescription: <b>Inherited From</b> Parser.compileParseTreePattern
  - name: 'compileParseTreePattern(string, number, Lexer)'
    uid: adaptive-expressions.CommonRegexParser.compileParseTreePattern_1
    package: adaptive-expressions
    summary: >-
      The same as [int)](xref:%23compileParseTreePattern(String%2C) but specify
      a

      <xref:adaptive-expressions.CommonRegexLexer> rather than trying to deduce
      it from this parser.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function compileParseTreePattern(pattern: string, patternRuleIndex:
        number, lexer?: Lexer): Promise<ParseTreePattern>
      parameters:
        - id: pattern
          type: string
          description: ''
        - id: patternRuleIndex
          type: number
          description: ''
        - id: lexer
          type: Lexer
          description: ''
      return:
        description: ''
        type: Promise&lt;ParseTreePattern&gt;
    inheritanceDescription: <b>Inherited From</b> Parser.compileParseTreePattern
  - name: consume()
    uid: adaptive-expressions.CommonRegexParser.consume
    package: adaptive-expressions
    summary: >
      Consume and return the [current symbol](`currentToken`).

      E.g., given the following input with `A` being the current

      lookahead symbol, this function moves the cursor to `B` and returns

      `A`.


      ```

      A B

      ^

      ```


      If the parser is not in error recovery mode, the consumed symbol is added

      to the parse tree using <xref:ParserRuleContext%23addChild(TerminalNode)>,
      and

      <xref:ParseTreeListener%23visitTerminal> is called on any parse listeners.

      If the parser *is* in error recovery mode, the consumed symbol is

      added to the parse tree using
      [Token)](xref:%23createErrorNode(ParserRuleContext%2C) then

      <xref:ParserRuleContext%23addErrorNode(ErrorNode)> and

      <xref:ParseTreeListener%23visitErrorNode> is called on any parse

      listeners.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function consume(): Token'
      return:
        description: ''
        type: Token
    inheritanceDescription: <b>Inherited From</b> Parser.consume
  - name: 'createErrorNode(ParserRuleContext, Token)'
    uid: adaptive-expressions.CommonRegexParser.createErrorNode
    package: adaptive-expressions
    summary: |-
      How to create an error node, given a token, associated with a parent.
      Typically, the error node to create is not a function of the parent.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function createErrorNode(parent: ParserRuleContext, t: Token): ErrorNode'
      parameters:
        - id: parent
          type: ParserRuleContext
          description: ''
        - id: t
          type: Token
          description: ''
      return:
        description: ''
        type: ErrorNode
    inheritanceDescription: <b>Inherited From</b> Parser.createErrorNode
  - name: 'createTerminalNode(ParserRuleContext, Token)'
    uid: adaptive-expressions.CommonRegexParser.createTerminalNode
    package: adaptive-expressions
    summary: |-
      How to create a token leaf node associated with a parent.
      Typically, the terminal node to create is not a function of the parent.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createTerminalNode(parent: ParserRuleContext, t: Token):
        TerminalNode
      parameters:
        - id: parent
          type: ParserRuleContext
          description: ''
        - id: t
          type: Token
          description: ''
      return:
        description: ''
        type: TerminalNode
    inheritanceDescription: <b>Inherited From</b> Parser.createTerminalNode
  - name: dumpDFA()
    uid: adaptive-expressions.CommonRegexParser.dumpDFA
    package: adaptive-expressions
    summary: For debugging and other purposes.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function dumpDFA()
    inheritanceDescription: <b>Inherited From</b> Parser.dumpDFA
  - name: 'enterLeftFactoredRule(ParserRuleContext, number, number)'
    uid: adaptive-expressions.CommonRegexParser.enterLeftFactoredRule
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function enterLeftFactoredRule(localctx: ParserRuleContext, state:
        number, ruleIndex: number)
      parameters:
        - id: localctx
          type: ParserRuleContext
          description: ''
        - id: state
          type: number
          description: ''
        - id: ruleIndex
          type: number
          description: ''
    inheritanceDescription: <b>Inherited From</b> Parser.enterLeftFactoredRule
  - name: 'enterOuterAlt(ParserRuleContext, number)'
    uid: adaptive-expressions.CommonRegexParser.enterOuterAlt
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function enterOuterAlt(localctx: ParserRuleContext, altNum: number)'
      parameters:
        - id: localctx
          type: ParserRuleContext
          description: ''
        - id: altNum
          type: number
          description: ''
    inheritanceDescription: <b>Inherited From</b> Parser.enterOuterAlt
  - name: 'enterRecursionRule(ParserRuleContext, number, number, number)'
    uid: adaptive-expressions.CommonRegexParser.enterRecursionRule
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function enterRecursionRule(localctx: ParserRuleContext, state: number,
        ruleIndex: number, precedence: number)
      parameters:
        - id: localctx
          type: ParserRuleContext
          description: ''
        - id: state
          type: number
          description: ''
        - id: ruleIndex
          type: number
          description: ''
        - id: precedence
          type: number
          description: ''
    inheritanceDescription: <b>Inherited From</b> Parser.enterRecursionRule
  - name: 'enterRule(ParserRuleContext, number, number)'
    uid: adaptive-expressions.CommonRegexParser.enterRule
    package: adaptive-expressions
    summary: |-
      Always called by generated parsers upon entry to a rule. Access field
      <xref:%23_ctx> get the current context.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function enterRule(localctx: ParserRuleContext, state: number,
        ruleIndex: number)
      parameters:
        - id: localctx
          type: ParserRuleContext
          description: ''
        - id: state
          type: number
          description: ''
        - id: ruleIndex
          type: number
          description: ''
    inheritanceDescription: <b>Inherited From</b> Parser.enterRule
  - name: exitRule()
    uid: adaptive-expressions.CommonRegexParser.exitRule
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function exitRule()
    inheritanceDescription: <b>Inherited From</b> Parser.exitRule
  - name: getATNWithBypassAlts()
    uid: adaptive-expressions.CommonRegexParser.getATNWithBypassAlts
    package: adaptive-expressions
    summary: |
      The ATN with bypass alternatives is expensive to create so we create it
      lazily.
      @ if the current parser does not
      implement the `serializedATN` property.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getATNWithBypassAlts(): ATN'
      return:
        description: ''
        type: ATN
    inheritanceDescription: <b>Inherited From</b> Parser.getATNWithBypassAlts
  - name: getDFAStrings()
    uid: adaptive-expressions.CommonRegexParser.getDFAStrings
    package: adaptive-expressions
    summary: For debugging and other purposes.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getDFAStrings(): string[]'
      return:
        description: ''
        type: 'string[]'
    inheritanceDescription: <b>Inherited From</b> Parser.getDFAStrings
  - name: getErrorHeader(RecognitionException)
    uid: adaptive-expressions.CommonRegexParser.getErrorHeader
    package: adaptive-expressions
    summary: 'What is the error header, normally line/character position information?'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getErrorHeader(e: RecognitionException): string'
      parameters:
        - id: e
          type: RecognitionException
          description: ''
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> Recognizer.getErrorHeader
  - name: getErrorListenerDispatch()
    uid: adaptive-expressions.CommonRegexParser.getErrorListenerDispatch
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getErrorListenerDispatch(): ParserErrorListener'
      return:
        description: ''
        type: ParserErrorListener
    inheritanceDescription: <b>Inherited From</b> Parser.getErrorListenerDispatch
  - name: getErrorListeners()
    uid: adaptive-expressions.CommonRegexParser.getErrorListeners
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getErrorListeners(): Array<ANTLRErrorListener<Token>>'
      return:
        description: ''
        type: Array&lt;ANTLRErrorListener&lt;Token&gt;&gt;
    inheritanceDescription: <b>Inherited From</b> Recognizer.getErrorListeners
  - name: getExpectedTokens()
    uid: adaptive-expressions.CommonRegexParser.getExpectedTokens
    package: adaptive-expressions
    summary: >-
      Computes the set of input symbols which could follow the current parser

      state and context, as given by <xref:%23getState> and
      <xref:%23getContext>,

      respectively.


      See ATN#getExpectedTokens(int, RuleContext)
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getExpectedTokens(): IntervalSet'
      return:
        description: ''
        type: IntervalSet
    inheritanceDescription: <b>Inherited From</b> Parser.getExpectedTokens
  - name: getExpectedTokensWithinCurrentRule()
    uid: adaptive-expressions.CommonRegexParser.getExpectedTokensWithinCurrentRule
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getExpectedTokensWithinCurrentRule(): IntervalSet'
      return:
        description: ''
        type: IntervalSet
    inheritanceDescription: <b>Inherited From</b> Parser.getExpectedTokensWithinCurrentRule
  - name: getInvokingContext(number)
    uid: adaptive-expressions.CommonRegexParser.getInvokingContext
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getInvokingContext(ruleIndex: number): ParserRuleContext |
        undefined
      parameters:
        - id: ruleIndex
          type: number
          description: ''
      return:
        description: ''
        type: ParserRuleContext | undefined
    inheritanceDescription: <b>Inherited From</b> Parser.getInvokingContext
  - name: getParseListeners()
    uid: adaptive-expressions.CommonRegexParser.getParseListeners
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getParseListeners(): ParseTreeListener[]'
      return:
        description: ''
        type: 'ParseTreeListener[]'
    inheritanceDescription: <b>Inherited From</b> Parser.getParseListeners
  - name: getRuleIndex(string)
    uid: adaptive-expressions.CommonRegexParser.getRuleIndex
    package: adaptive-expressions
    summary: 'Get a rule''s index (i.e., `RULE_ruleName` field) or -1 if not found.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getRuleIndex(ruleName: string): number'
      parameters:
        - id: ruleName
          type: string
          description: ''
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Parser.getRuleIndex
  - name: getRuleIndexMap()
    uid: adaptive-expressions.CommonRegexParser.getRuleIndexMap
    package: adaptive-expressions
    summary: |
      Get a map from rule names to rule indexes.
      Used for XPath and tree pattern compilation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getRuleIndexMap(): ReadonlyMap<string, number>'
      return:
        description: ''
        type: 'ReadonlyMap&lt;string, number&gt;'
    inheritanceDescription: <b>Inherited From</b> Recognizer.getRuleIndexMap
  - name: getRuleInvocationStack(RuleContext)
    uid: adaptive-expressions.CommonRegexParser.getRuleInvocationStack
    package: adaptive-expressions
    summary: |
      Return List&lt;String&gt; of the rule names in your parser instance
       leading up to a call to the current rule.  You could override if
       you want more details such as the file/line info of where
       in the ATN a rule is invoked.
       This is very useful for error messages.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getRuleInvocationStack(ctx?: RuleContext): string[]'
      parameters:
        - id: ctx
          type: RuleContext
          description: ''
      return:
        description: ''
        type: 'string[]'
    inheritanceDescription: <b>Inherited From</b> Parser.getRuleInvocationStack
  - name: getTokenType(string)
    uid: adaptive-expressions.CommonRegexParser.getTokenType
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getTokenType(tokenName: string): number'
      parameters:
        - id: tokenName
          type: string
          description: ''
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Recognizer.getTokenType
  - name: getTokenTypeMap()
    uid: adaptive-expressions.CommonRegexParser.getTokenTypeMap
    package: adaptive-expressions
    summary: |
      Get a map from token names to token types.
      Used for XPath and tree pattern compilation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getTokenTypeMap(): ReadonlyMap<string, number>'
      return:
        description: ''
        type: 'ReadonlyMap&lt;string, number&gt;'
    inheritanceDescription: <b>Inherited From</b> Recognizer.getTokenTypeMap
  - name: inContext(string)
    uid: adaptive-expressions.CommonRegexParser.inContext
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function inContext(context: string): boolean'
      parameters:
        - id: context
          type: string
          description: ''
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> Parser.inContext
  - name: isExpectedToken(number)
    uid: adaptive-expressions.CommonRegexParser.isExpectedToken
    package: adaptive-expressions
    summary: |
      Checks whether or not `symbol` can follow the current state in the
      ATN. The behavior of this method is equivalent to the following, but is
      implemented such that the complete context-sensitive follow set does not
      need to be explicitly constructed.
      ```
      return getExpectedTokens().contains(symbol);
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function isExpectedToken(symbol: number): boolean'
      parameters:
        - id: symbol
          type: number
          description: the symbol type to check
      return:
        description: |-
          `true` if `symbol` can follow the current state in
          the ATN, otherwise `false`.
        type: boolean
    inheritanceDescription: <b>Inherited From</b> Parser.isExpectedToken
  - name: match(number)
    uid: adaptive-expressions.CommonRegexParser.match
    package: adaptive-expressions
    summary: >
      Match current input symbol against `ttype`. If the symbol type

      matches, <xref:ANTLRErrorStrategy%23reportMatch> and <xref:%23consume> are

      called to complete the match process.

      If the symbol type does not match,

      <xref:ANTLRErrorStrategy%23recoverInline> is called on the current error

      strategy to attempt recovery. If <xref:%23getBuildParseTree> is

      `true` and the token index of the symbol returned by

      <xref:ANTLRErrorStrategy%23recoverInline> is -1, the symbol is added to

      the parse tree by calling
      [Token)](xref:%23createErrorNode(ParserRuleContext%2C) then

      <xref:ParserRuleContext%23addErrorNode(ErrorNode)>.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function match(ttype: number): Token'
      parameters:
        - id: ttype
          type: number
          description: the token type to match
      return:
        description: |-
          the matched symbol
          @ if the current input symbol did not match
          `ttype` and the error strategy could not recover from the
          mismatched symbol
        type: Token
    inheritanceDescription: <b>Inherited From</b> Parser.match
  - name: matchWildcard()
    uid: adaptive-expressions.CommonRegexParser.matchWildcard
    package: adaptive-expressions
    summary: >
      Match current input symbol as a wildcard. If the symbol type matches

      (i.e. has a value greater than 0), <xref:ANTLRErrorStrategy%23reportMatch>

      and <xref:%23consume> are called to complete the match process.

      If the symbol type does not match,

      <xref:ANTLRErrorStrategy%23recoverInline> is called on the current error

      strategy to attempt recovery. If <xref:%23getBuildParseTree> is

      `true` and the token index of the symbol returned by

      <xref:ANTLRErrorStrategy%23recoverInline> is -1, the symbol is added to

      the parse tree by calling
      [Token)](xref:Parser%23createErrorNode(ParserRuleContext%2C) then

      <xref:ParserRuleContext%23addErrorNode(ErrorNode)>.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function matchWildcard(): Token'
      return:
        description: >-
          the matched symbol

          @ if the current input symbol did not match

          a wildcard and the error strategy could not recover from the
          mismatched

          symbol
        type: Token
    inheritanceDescription: <b>Inherited From</b> Parser.matchWildcard
  - name: notifyErrorListeners(string)
    uid: adaptive-expressions.CommonRegexParser.notifyErrorListeners
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function notifyErrorListeners(msg: string)'
      parameters:
        - id: msg
          type: string
          description: ''
    inheritanceDescription: <b>Inherited From</b> Parser.notifyErrorListeners
  - name: >-
      notifyErrorListeners(string, Token | null, RecognitionException |
      undefined)
    uid: adaptive-expressions.CommonRegexParser.notifyErrorListeners_1
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function notifyErrorListeners(msg: string, offendingToken: Token | null,
        e: RecognitionException | undefined)
      parameters:
        - id: msg
          type: string
          description: ''
        - id: offendingToken
          type: Token | null
          description: ''
        - id: e
          type: RecognitionException | undefined
          description: ''
    inheritanceDescription: <b>Inherited From</b> Parser.notifyErrorListeners
  - name: 'precpred(RuleContext, number)'
    uid: adaptive-expressions.CommonRegexParser.precpred
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function precpred(localctx: RuleContext, precedence: number): boolean'
      parameters:
        - id: localctx
          type: RuleContext
          description: ''
        - id: precedence
          type: number
          description: ''
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> Parser.precpred
  - name: 'pushNewRecursionContext(ParserRuleContext, number, number)'
    uid: adaptive-expressions.CommonRegexParser.pushNewRecursionContext
    package: adaptive-expressions
    summary: |-
      Like <xref:%23enterRule> but for recursive rules.
       Make the current context the child of the incoming localctx.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function pushNewRecursionContext(localctx: ParserRuleContext, state:
        number, ruleIndex: number)
      parameters:
        - id: localctx
          type: ParserRuleContext
          description: ''
        - id: state
          type: number
          description: ''
        - id: ruleIndex
          type: number
          description: ''
    inheritanceDescription: <b>Inherited From</b> Parser.pushNewRecursionContext
  - name: removeErrorListener(ANTLRErrorListener<Token>)
    uid: adaptive-expressions.CommonRegexParser.removeErrorListener
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function removeErrorListener(listener: ANTLRErrorListener<Token>)'
      parameters:
        - id: listener
          type: ANTLRErrorListener&lt;Token&gt;
          description: ''
    inheritanceDescription: <b>Inherited From</b> Recognizer.removeErrorListener
  - name: removeErrorListeners()
    uid: adaptive-expressions.CommonRegexParser.removeErrorListeners
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function removeErrorListeners()
    inheritanceDescription: <b>Inherited From</b> Recognizer.removeErrorListeners
  - name: removeParseListener(ParseTreeListener)
    uid: adaptive-expressions.CommonRegexParser.removeParseListener
    package: adaptive-expressions
    summary: |-
      Remove `listener` from the list of parse listeners.
      If `listener` is `undefined` or has not been added as a parse
      listener, this method does nothing.


      See #addParseListener
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function removeParseListener(listener: ParseTreeListener)'
      parameters:
        - id: listener
          type: ParseTreeListener
          description: |
            the listener to remove
    inheritanceDescription: <b>Inherited From</b> Parser.removeParseListener
  - name: removeParseListeners()
    uid: adaptive-expressions.CommonRegexParser.removeParseListeners
    package: adaptive-expressions
    summary: |-
      Remove all parse listeners.

      See #addParseListener
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function removeParseListeners()
    inheritanceDescription: <b>Inherited From</b> Parser.removeParseListeners
  - name: reset()
    uid: adaptive-expressions.CommonRegexParser.reset
    package: adaptive-expressions
    summary: reset the parser's state
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function reset()
    inheritanceDescription: <b>Inherited From</b> Parser.reset
  - name: reset(boolean)
    uid: adaptive-expressions.CommonRegexParser.reset_1
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function reset(resetInput: boolean)'
      parameters:
        - id: resetInput
          type: boolean
          description: ''
    inheritanceDescription: <b>Inherited From</b> Parser.reset
  - name: 'sempred(RuleContext | undefined, number, number)'
    uid: adaptive-expressions.CommonRegexParser.sempred
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function sempred(_localctx: RuleContext | undefined, ruleIndex: number,
        actionIndex: number): boolean
      parameters:
        - id: _localctx
          type: RuleContext | undefined
          description: ''
        - id: ruleIndex
          type: number
          description: ''
        - id: actionIndex
          type: number
          description: ''
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> Recognizer.sempred
  - name: setProfile(boolean)
    uid: adaptive-expressions.CommonRegexParser.setProfile
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setProfile(profile: boolean): Promise<void>'
      parameters:
        - id: profile
          type: boolean
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
    inheritanceDescription: <b>Inherited From</b> Parser.setProfile
  - name: unrollRecursionContexts(ParserRuleContext)
    uid: adaptive-expressions.CommonRegexParser.unrollRecursionContexts
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function unrollRecursionContexts(_parentctx: ParserRuleContext)'
      parameters:
        - id: _parentctx
          type: ParserRuleContext
          description: ''
    inheritanceDescription: <b>Inherited From</b> Parser.unrollRecursionContexts
methods:
  - name: alpha_nums()
    uid: adaptive-expressions.CommonRegexParser.alpha_nums
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function alpha_nums(): Alpha_numsContext'
      return:
        description: ''
        type: <xref uid="adaptive-expressions.Alpha_numsContext" />
  - name: alternation()
    uid: adaptive-expressions.CommonRegexParser.alternation
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function alternation(): AlternationContext'
      return:
        description: ''
        type: <xref uid="adaptive-expressions.AlternationContext" />
  - name: atom()
    uid: adaptive-expressions.CommonRegexParser.atom
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function atom(): AtomContext'
      return:
        description: ''
        type: <xref uid="adaptive-expressions.AtomContext" />
  - name: capture()
    uid: adaptive-expressions.CommonRegexParser.capture
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function capture(): CaptureContext'
      return:
        description: ''
        type: <xref uid="adaptive-expressions.CaptureContext" />
  - name: cc_atom()
    uid: adaptive-expressions.CommonRegexParser.cc_atom
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function cc_atom(): Cc_atomContext'
      return:
        description: ''
        type: <xref uid="adaptive-expressions.Cc_atomContext" />
  - name: cc_literal()
    uid: adaptive-expressions.CommonRegexParser.cc_literal
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function cc_literal(): Cc_literalContext'
      return:
        description: ''
        type: <xref uid="adaptive-expressions.Cc_literalContext" />
  - name: character_class()
    uid: adaptive-expressions.CommonRegexParser.character_class
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function character_class(): Character_classContext'
      return:
        description: ''
        type: <xref uid="adaptive-expressions.Character_classContext" />
  - name: digit()
    uid: adaptive-expressions.CommonRegexParser.digit
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function digit(): DigitContext'
      return:
        description: ''
        type: <xref uid="adaptive-expressions.DigitContext" />
  - name: digits()
    uid: adaptive-expressions.CommonRegexParser.digits
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function digits(): DigitsContext'
      return:
        description: ''
        type: <xref uid="adaptive-expressions.DigitsContext" />
  - name: element()
    uid: adaptive-expressions.CommonRegexParser.element
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function element(): ElementContext'
      return:
        description: ''
        type: <xref uid="adaptive-expressions.ElementContext" />
  - name: expr()
    uid: adaptive-expressions.CommonRegexParser.expr
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function expr(): ExprContext'
      return:
        description: ''
        type: <xref uid="adaptive-expressions.ExprContext" />
  - name: letter()
    uid: adaptive-expressions.CommonRegexParser.letter
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function letter(): LetterContext'
      return:
        description: ''
        type: <xref uid="adaptive-expressions.LetterContext" />
  - name: literal()
    uid: adaptive-expressions.CommonRegexParser.literal
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function literal(): LiteralContext'
      return:
        description: ''
        type: <xref uid="adaptive-expressions.LiteralContext" />
  - name: name()
    uid: adaptive-expressions.CommonRegexParser.name
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function name(): NameContext'
      return:
        description: ''
        type: <xref uid="adaptive-expressions.NameContext" />
  - name: non_capture()
    uid: adaptive-expressions.CommonRegexParser.non_capture
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function non_capture(): Non_captureContext'
      return:
        description: ''
        type: <xref uid="adaptive-expressions.Non_captureContext" />
  - name: non_close_paren()
    uid: adaptive-expressions.CommonRegexParser.non_close_paren
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function non_close_paren(): Non_close_parenContext'
      return:
        description: ''
        type: <xref uid="adaptive-expressions.Non_close_parenContext" />
  - name: non_close_parens()
    uid: adaptive-expressions.CommonRegexParser.non_close_parens
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function non_close_parens(): Non_close_parensContext'
      return:
        description: ''
        type: <xref uid="adaptive-expressions.Non_close_parensContext" />
  - name: number()
    uid: adaptive-expressions.CommonRegexParser.number
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function number(): NumberContext'
      return:
        description: ''
        type: <xref uid="adaptive-expressions.NumberContext" />
  - name: octal_char()
    uid: adaptive-expressions.CommonRegexParser.octal_char
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function octal_char(): Octal_charContext'
      return:
        description: ''
        type: <xref uid="adaptive-expressions.Octal_charContext" />
  - name: octal_digit()
    uid: adaptive-expressions.CommonRegexParser.octal_digit
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function octal_digit(): Octal_digitContext'
      return:
        description: ''
        type: <xref uid="adaptive-expressions.Octal_digitContext" />
  - name: option()
    uid: adaptive-expressions.CommonRegexParser.option
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function option(): OptionContext'
      return:
        description: ''
        type: <xref uid="adaptive-expressions.OptionContext" />
  - name: option_flag()
    uid: adaptive-expressions.CommonRegexParser.option_flag
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function option_flag(): Option_flagContext'
      return:
        description: ''
        type: <xref uid="adaptive-expressions.Option_flagContext" />
  - name: parse()
    uid: adaptive-expressions.CommonRegexParser.parse
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function parse(): ParseContext'
      return:
        description: ''
        type: <xref uid="adaptive-expressions.ParseContext" />
  - name: quantifier()
    uid: adaptive-expressions.CommonRegexParser.quantifier
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function quantifier(): QuantifierContext'
      return:
        description: ''
        type: <xref uid="adaptive-expressions.QuantifierContext" />
  - name: quantifier_type()
    uid: adaptive-expressions.CommonRegexParser.quantifier_type
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function quantifier_type(): Quantifier_typeContext'
      return:
        description: ''
        type: <xref uid="adaptive-expressions.Quantifier_typeContext" />
  - name: shared_atom()
    uid: adaptive-expressions.CommonRegexParser.shared_atom
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function shared_atom(): Shared_atomContext'
      return:
        description: ''
        type: <xref uid="adaptive-expressions.Shared_atomContext" />
  - name: shared_literal()
    uid: adaptive-expressions.CommonRegexParser.shared_literal
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function shared_literal(): Shared_literalContext'
      return:
        description: ''
        type: <xref uid="adaptive-expressions.Shared_literalContext" />
extends: Parser
