### YamlMime:TSType
name: Constant
uid: adaptive-expressions.Constant
package: adaptive-expressions
summary: Construct an expression constant.
fullName: Constant
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: Constant(any)
    uid: adaptive-expressions.Constant.constructor
    package: adaptive-expressions
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new Constant(value: any)'
      parameters:
        - id: value
          type: any
          description: ''
properties:
  - name: children
    uid: adaptive-expressions.Constant.children
    package: adaptive-expressions
    summary: Children expressions.
    fullName: children
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public children: Expression[]'
      return:
        type: '<xref uid="adaptive-expressions.Expression" />[]'
        description: ''
  - name: functions
    uid: adaptive-expressions.Constant.functions
    package: adaptive-expressions
    summary: >-
      Dictionary of function => ExpressionEvaluator.

      This is all available functions, you can add custom functions to it, but
      you cannot

      replace builtin functions.  If you clear the dictionary, it will be reset
      to the built in functions.
    fullName: functions
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static functions: FunctionTable = new FunctionTable()'
      return:
        type: <xref uid="adaptive-expressions.FunctionTable" />
        description: ''
  - name: returnType
    uid: adaptive-expressions.Constant.returnType
    package: adaptive-expressions
    summary: Expected result of evaluating expression.
    fullName: returnType
    isPreview: false
    isDeprecated: false
    syntax:
      content: ReturnType returnType
      return:
        type: <xref uid="adaptive-expressions.ReturnType" />
        description: ''
  - name: type
    uid: adaptive-expressions.Constant.type
    package: adaptive-expressions
    summary: Type of expression.
    fullName: type
    isPreview: false
    isDeprecated: false
    syntax:
      content: string type
      return:
        type: string
        description: ''
  - name: value
    uid: adaptive-expressions.Constant.value
    package: adaptive-expressions
    summary: Constant value.
    fullName: value
    isPreview: false
    isDeprecated: false
    syntax:
      content: any value
      return:
        type: any
        description: ''
methods:
  - name: 'andExpression(Expression[])'
    uid: adaptive-expressions.Constant.andExpression
    package: adaptive-expressions
    summary: Construct and validate an And expression.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static function andExpression(children: Expression[])'
      parameters:
        - id: children
          type: '<xref uid="adaptive-expressions.Expression" />[]'
          description: Child clauses.
      return:
        type: <xref uid="adaptive-expressions.Expression" />
        description: New expression.
  - name: deepEquals(Expression)
    uid: adaptive-expressions.Constant.deepEquals
    package: adaptive-expressions
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function deepEquals(other: Expression)'
      parameters:
        - id: other
          type: <xref uid="adaptive-expressions.Expression" />
          description: ''
      return:
        type: boolean
        description: ''
  - name: 'equalsExpression(Expression[])'
    uid: adaptive-expressions.Constant.equalsExpression
    package: adaptive-expressions
    summary: Construct and validate an Equals expression.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static function equalsExpression(children: Expression[])'
      parameters:
        - id: children
          type: '<xref uid="adaptive-expressions.Expression" />[]'
          description: Child clauses.
      return:
        type: <xref uid="adaptive-expressions.Expression" />
        description: New expression.
  - name: lambaExpression(EvaluateExpressionDelegate)
    uid: adaptive-expressions.Constant.lambaExpression
    package: adaptive-expressions
    summary: Construct an expression from a EvaluateExpressionDelegate
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static function lambaExpression(func: EvaluateExpressionDelegate)'
      parameters:
        - id: func
          type: <xref uid="adaptive-expressions.EvaluateExpressionDelegate" />
          description: |
            Function to create an expression from.
      return:
        type: <xref uid="adaptive-expressions.Expression" />
        description: ''
  - name: 'lambda((arg0: any) => any)'
    uid: adaptive-expressions.Constant.lambda
    package: adaptive-expressions
    summary: |-
      Construct an expression from a lamba expression over the state.
      Exceptions will be caught and surfaced as an error string.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static function lambda(func: (arg0: any) => any)'
      parameters:
        - id: func
          type: '(arg0: any) =&gt; any'
          description: ambda expression to evaluate.
      return:
        type: <xref uid="adaptive-expressions.Expression" />
        description: New expression.
  - name: lookup(string)
    uid: adaptive-expressions.Constant.lookup
    package: adaptive-expressions
    summary: Lookup a ExpressionEvaluator (function) by name.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static function lookup(functionName: string)'
      parameters:
        - id: functionName
          type: string
          description: name of function to lookup
      return:
        type: <xref uid="adaptive-expressions.ExpressionEvaluator" />
        description: a ExpressionEvaluator that corresponding to the funtion name
  - name: 'makeExpression(string, ExpressionEvaluator, Expression[])'
    uid: adaptive-expressions.Constant.makeExpression
    package: adaptive-expressions
    summary: Make an expression and validate it.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function makeExpression(type: string, evaluator:
        ExpressionEvaluator, children: Expression[])
      parameters:
        - id: type
          type: string
          description: Type of expression from ExpressionType
        - id: evaluator
          type: <xref uid="adaptive-expressions.ExpressionEvaluator" />
          description: Information about how to validate and evaluate expression.
        - id: children
          type: '<xref uid="adaptive-expressions.Expression" />[]'
          description: |
            Child expressions.
      return:
        type: <xref uid="adaptive-expressions.Expression" />
        description: ''
  - name: notExpression(Expression)
    uid: adaptive-expressions.Constant.notExpression
    package: adaptive-expressions
    summary: Construct and validate an Not expression.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static function notExpression(child: Expression)'
      parameters:
        - id: child
          type: <xref uid="adaptive-expressions.Expression" />
          description: ''
      return:
        type: <xref uid="adaptive-expressions.Expression" />
        description: New expression.
  - name: 'orExpression(Expression[])'
    uid: adaptive-expressions.Constant.orExpression
    package: adaptive-expressions
    summary: Construct and validate an Or expression.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static function orExpression(children: Expression[])'
      parameters:
        - id: children
          type: '<xref uid="adaptive-expressions.Expression" />[]'
          description: Child clauses.
      return:
        type: <xref uid="adaptive-expressions.Expression" />
        description: New expression.
  - name: 'parse(string, EvaluatorLookup)'
    uid: adaptive-expressions.Constant.parse
    package: adaptive-expressions
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static function parse(expression: string, lookup?: EvaluatorLookup)'
      parameters:
        - id: expression
          type: string
          description: ''
        - id: lookup
          type: <xref uid="adaptive-expressions.EvaluatorLookup" />
          description: ''
      return:
        type: <xref uid="adaptive-expressions.Expression" />
        description: ''
  - name: references()
    uid: adaptive-expressions.Constant.references
    package: adaptive-expressions
    summary: >-
      Return the static reference paths to memory.

      Return all static paths to memory.  If there is a computed element index,
      then the path is terminated there,

      but you might get other paths from the computed part as well.
    isPreview: false
    isDeprecated: false
    syntax:
      content: function references()
      return:
        type: 'string[]'
        description: List of the static reference paths.
  - name: 'referenceWalk(Expression, (arg0: Expression) => boolean)'
    uid: adaptive-expressions.Constant.referenceWalk
    package: adaptive-expressions
    summary: >-
      Walking function for identifying static memory references in an
      expression.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function referenceWalk(expression: Expression, extension?: (arg0:
        Expression) => boolean)
      parameters:
        - id: expression
          type: <xref uid="adaptive-expressions.Expression" />
          description: Expression to analyze.
        - id: extension
          type: '(arg0: Expression) =&gt; boolean'
          description: >-
            If present, called to override lookup for things like template
            expansion.
      return:
        type: Object
        description: Accessor path of expression.
  - name: 'setPathToValue(Expression, any)'
    uid: adaptive-expressions.Constant.setPathToValue
    package: adaptive-expressions
    summary: Construct and validate an Set a property expression to a value expression.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static function setPathToValue(property: Expression, value: any)'
      parameters:
        - id: property
          type: <xref uid="adaptive-expressions.Expression" />
          description: property expression.
        - id: value
          type: any
          description: value expression.
      return:
        type: <xref uid="adaptive-expressions.Expression" />
        description: New expression.
  - name: toString()
    uid: adaptive-expressions.Constant.toString
    package: adaptive-expressions
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function toString()
      return:
        type: string
        description: ''
  - name: 'tryEvaluate(MemoryInterface | any, Options)'
    uid: adaptive-expressions.Constant.tryEvaluate
    package: adaptive-expressions
    summary: >-
      Evaluate the expression.

      Global state to evaluate accessor expressions against.  Can Dictionary be
      otherwise reflection is used to access property and then indexer.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function tryEvaluate(state: MemoryInterface | any, options: Options)'
      parameters:
        - id: state
          type: <xref uid="adaptive-expressions.MemoryInterface" /> | any
          description: |+

        - id: options
          type: <xref uid="adaptive-expressions.Options" />
          description: ''
      return:
        type: <xref uid="adaptive-expressions.ValueWithError" />
        description: ''
  - name: validate()
    uid: adaptive-expressions.Constant.validate
    package: adaptive-expressions
    summary: Validate immediate expression.
    isPreview: false
    isDeprecated: false
    syntax:
      content: function validate()
  - name: validateTree()
    uid: adaptive-expressions.Constant.validateTree
    package: adaptive-expressions
    summary: Recursively validate the expression tree.
    isPreview: false
    isDeprecated: false
    syntax:
      content: function validateTree()
extends: <xref uid="adaptive-expressions.Expression" />
