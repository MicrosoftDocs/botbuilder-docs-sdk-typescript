### YamlMime:TSType
name: ExpressionAntlrParserListener
uid: adaptive-expressions.ExpressionAntlrParserListener
package: adaptive-expressions
summary: |-
  This interface defines a complete listener for a parse tree produced by
  `ExpressionAntlrParser`.
fullName: ExpressionAntlrParserListener
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: enterArgsList
    uid: adaptive-expressions.ExpressionAntlrParserListener.enterArgsList
    package: adaptive-expressions
    summary: Enter a parse tree produced by `ExpressionAntlrParser.argsList`.
    fullName: enterArgsList
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'enterArgsList?: (ctx: ArgsListContext) => void'
      return:
        type: '(ctx: ArgsListContext) =&gt; void'
        description: ''
  - name: enterArrayCreationExp
    uid: adaptive-expressions.ExpressionAntlrParserListener.enterArrayCreationExp
    package: adaptive-expressions
    summary: |-
      Enter a parse tree produced by the `arrayCreationExp`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    fullName: enterArrayCreationExp
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'enterArrayCreationExp?: (ctx: ArrayCreationExpContext) => void'
      return:
        type: '(ctx: ArrayCreationExpContext) =&gt; void'
        description: ''
  - name: enterBinaryOpExp
    uid: adaptive-expressions.ExpressionAntlrParserListener.enterBinaryOpExp
    package: adaptive-expressions
    summary: |-
      Enter a parse tree produced by the `binaryOpExp`
      labeled alternative in `ExpressionAntlrParser.expression`.
    fullName: enterBinaryOpExp
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'enterBinaryOpExp?: (ctx: BinaryOpExpContext) => void'
      return:
        type: '(ctx: BinaryOpExpContext) =&gt; void'
        description: ''
  - name: enterEveryRule
    uid: adaptive-expressions.ExpressionAntlrParserListener.enterEveryRule
    package: adaptive-expressions
    summary: ''
    fullName: enterEveryRule
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'enterEveryRule?: (ctx: ParserRuleContext) => void'
      return:
        type: '(ctx: ParserRuleContext) =&gt; void'
        description: ''
  - name: enterExpression
    uid: adaptive-expressions.ExpressionAntlrParserListener.enterExpression
    package: adaptive-expressions
    summary: Enter a parse tree produced by `ExpressionAntlrParser.expression`.
    fullName: enterExpression
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'enterExpression?: (ctx: ExpressionContext) => void'
      return:
        type: '(ctx: ExpressionContext) =&gt; void'
        description: ''
  - name: enterFile
    uid: adaptive-expressions.ExpressionAntlrParserListener.enterFile
    package: adaptive-expressions
    summary: Enter a parse tree produced by `ExpressionAntlrParser.file`.
    fullName: enterFile
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'enterFile?: (ctx: FileContext) => void'
      return:
        type: '(ctx: FileContext) =&gt; void'
        description: ''
  - name: enterFuncInvokeExp
    uid: adaptive-expressions.ExpressionAntlrParserListener.enterFuncInvokeExp
    package: adaptive-expressions
    summary: |-
      Enter a parse tree produced by the `funcInvokeExp`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    fullName: enterFuncInvokeExp
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'enterFuncInvokeExp?: (ctx: FuncInvokeExpContext) => void'
      return:
        type: '(ctx: FuncInvokeExpContext) =&gt; void'
        description: ''
  - name: enterIdAtom
    uid: adaptive-expressions.ExpressionAntlrParserListener.enterIdAtom
    package: adaptive-expressions
    summary: |-
      Enter a parse tree produced by the `idAtom`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    fullName: enterIdAtom
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'enterIdAtom?: (ctx: IdAtomContext) => void'
      return:
        type: '(ctx: IdAtomContext) =&gt; void'
        description: ''
  - name: enterIndexAccessExp
    uid: adaptive-expressions.ExpressionAntlrParserListener.enterIndexAccessExp
    package: adaptive-expressions
    summary: |-
      Enter a parse tree produced by the `indexAccessExp`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    fullName: enterIndexAccessExp
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'enterIndexAccessExp?: (ctx: IndexAccessExpContext) => void'
      return:
        type: '(ctx: IndexAccessExpContext) =&gt; void'
        description: ''
  - name: enterJsonCreationExp
    uid: adaptive-expressions.ExpressionAntlrParserListener.enterJsonCreationExp
    package: adaptive-expressions
    summary: |-
      Enter a parse tree produced by the `jsonCreationExp`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    fullName: enterJsonCreationExp
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'enterJsonCreationExp?: (ctx: JsonCreationExpContext) => void'
      return:
        type: '(ctx: JsonCreationExpContext) =&gt; void'
        description: ''
  - name: enterKey
    uid: adaptive-expressions.ExpressionAntlrParserListener.enterKey
    package: adaptive-expressions
    summary: Enter a parse tree produced by `ExpressionAntlrParser.key`.
    fullName: enterKey
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'enterKey?: (ctx: KeyContext) => void'
      return:
        type: '(ctx: KeyContext) =&gt; void'
        description: ''
  - name: enterKeyValuePair
    uid: adaptive-expressions.ExpressionAntlrParserListener.enterKeyValuePair
    package: adaptive-expressions
    summary: Enter a parse tree produced by `ExpressionAntlrParser.keyValuePair`.
    fullName: enterKeyValuePair
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'enterKeyValuePair?: (ctx: KeyValuePairContext) => void'
      return:
        type: '(ctx: KeyValuePairContext) =&gt; void'
        description: ''
  - name: enterKeyValuePairList
    uid: adaptive-expressions.ExpressionAntlrParserListener.enterKeyValuePairList
    package: adaptive-expressions
    summary: Enter a parse tree produced by `ExpressionAntlrParser.keyValuePairList`.
    fullName: enterKeyValuePairList
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'enterKeyValuePairList?: (ctx: KeyValuePairListContext) => void'
      return:
        type: '(ctx: KeyValuePairListContext) =&gt; void'
        description: ''
  - name: enterLambda
    uid: adaptive-expressions.ExpressionAntlrParserListener.enterLambda
    package: adaptive-expressions
    summary: Enter a parse tree produced by `ExpressionAntlrParser.lambda`.
    fullName: enterLambda
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'enterLambda?: (ctx: LambdaContext) => void'
      return:
        type: '(ctx: LambdaContext) =&gt; void'
        description: ''
  - name: enterMemberAccessExp
    uid: adaptive-expressions.ExpressionAntlrParserListener.enterMemberAccessExp
    package: adaptive-expressions
    summary: |-
      Enter a parse tree produced by the `memberAccessExp`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    fullName: enterMemberAccessExp
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'enterMemberAccessExp?: (ctx: MemberAccessExpContext) => void'
      return:
        type: '(ctx: MemberAccessExpContext) =&gt; void'
        description: ''
  - name: enterNumericAtom
    uid: adaptive-expressions.ExpressionAntlrParserListener.enterNumericAtom
    package: adaptive-expressions
    summary: |-
      Enter a parse tree produced by the `numericAtom`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    fullName: enterNumericAtom
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'enterNumericAtom?: (ctx: NumericAtomContext) => void'
      return:
        type: '(ctx: NumericAtomContext) =&gt; void'
        description: ''
  - name: enterParenthesisExp
    uid: adaptive-expressions.ExpressionAntlrParserListener.enterParenthesisExp
    package: adaptive-expressions
    summary: |-
      Enter a parse tree produced by the `parenthesisExp`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    fullName: enterParenthesisExp
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'enterParenthesisExp?: (ctx: ParenthesisExpContext) => void'
      return:
        type: '(ctx: ParenthesisExpContext) =&gt; void'
        description: ''
  - name: enterPrimaryExp
    uid: adaptive-expressions.ExpressionAntlrParserListener.enterPrimaryExp
    package: adaptive-expressions
    summary: |-
      Enter a parse tree produced by the `primaryExp`
      labeled alternative in `ExpressionAntlrParser.expression`.
    fullName: enterPrimaryExp
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'enterPrimaryExp?: (ctx: PrimaryExpContext) => void'
      return:
        type: '(ctx: PrimaryExpContext) =&gt; void'
        description: ''
  - name: enterPrimaryExpression
    uid: adaptive-expressions.ExpressionAntlrParserListener.enterPrimaryExpression
    package: adaptive-expressions
    summary: Enter a parse tree produced by `ExpressionAntlrParser.primaryExpression`.
    fullName: enterPrimaryExpression
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'enterPrimaryExpression?: (ctx: PrimaryExpressionContext) => void'
      return:
        type: '(ctx: PrimaryExpressionContext) =&gt; void'
        description: ''
  - name: enterStringAtom
    uid: adaptive-expressions.ExpressionAntlrParserListener.enterStringAtom
    package: adaptive-expressions
    summary: |-
      Enter a parse tree produced by the `stringAtom`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    fullName: enterStringAtom
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'enterStringAtom?: (ctx: StringAtomContext) => void'
      return:
        type: '(ctx: StringAtomContext) =&gt; void'
        description: ''
  - name: enterStringInterpolation
    uid: >-
      adaptive-expressions.ExpressionAntlrParserListener.enterStringInterpolation
    package: adaptive-expressions
    summary: >-
      Enter a parse tree produced by
      `ExpressionAntlrParser.stringInterpolation`.
    fullName: enterStringInterpolation
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'enterStringInterpolation?: (ctx: StringInterpolationContext) => void'
      return:
        type: '(ctx: StringInterpolationContext) =&gt; void'
        description: ''
  - name: enterStringInterpolationAtom
    uid: >-
      adaptive-expressions.ExpressionAntlrParserListener.enterStringInterpolationAtom
    package: adaptive-expressions
    summary: |-
      Enter a parse tree produced by the `stringInterpolationAtom`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    fullName: enterStringInterpolationAtom
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        enterStringInterpolationAtom?: (ctx: StringInterpolationAtomContext) =>
        void
      return:
        type: '(ctx: StringInterpolationAtomContext) =&gt; void'
        description: ''
  - name: enterTextContent
    uid: adaptive-expressions.ExpressionAntlrParserListener.enterTextContent
    package: adaptive-expressions
    summary: Enter a parse tree produced by `ExpressionAntlrParser.textContent`.
    fullName: enterTextContent
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'enterTextContent?: (ctx: TextContentContext) => void'
      return:
        type: '(ctx: TextContentContext) =&gt; void'
        description: ''
  - name: enterUnaryOpExp
    uid: adaptive-expressions.ExpressionAntlrParserListener.enterUnaryOpExp
    package: adaptive-expressions
    summary: |-
      Enter a parse tree produced by the `unaryOpExp`
      labeled alternative in `ExpressionAntlrParser.expression`.
    fullName: enterUnaryOpExp
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'enterUnaryOpExp?: (ctx: UnaryOpExpContext) => void'
      return:
        type: '(ctx: UnaryOpExpContext) =&gt; void'
        description: ''
  - name: exitArgsList
    uid: adaptive-expressions.ExpressionAntlrParserListener.exitArgsList
    package: adaptive-expressions
    summary: Exit a parse tree produced by `ExpressionAntlrParser.argsList`.
    fullName: exitArgsList
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'exitArgsList?: (ctx: ArgsListContext) => void'
      return:
        type: '(ctx: ArgsListContext) =&gt; void'
        description: ''
  - name: exitArrayCreationExp
    uid: adaptive-expressions.ExpressionAntlrParserListener.exitArrayCreationExp
    package: adaptive-expressions
    summary: |-
      Exit a parse tree produced by the `arrayCreationExp`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    fullName: exitArrayCreationExp
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'exitArrayCreationExp?: (ctx: ArrayCreationExpContext) => void'
      return:
        type: '(ctx: ArrayCreationExpContext) =&gt; void'
        description: ''
  - name: exitBinaryOpExp
    uid: adaptive-expressions.ExpressionAntlrParserListener.exitBinaryOpExp
    package: adaptive-expressions
    summary: |-
      Exit a parse tree produced by the `binaryOpExp`
      labeled alternative in `ExpressionAntlrParser.expression`.
    fullName: exitBinaryOpExp
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'exitBinaryOpExp?: (ctx: BinaryOpExpContext) => void'
      return:
        type: '(ctx: BinaryOpExpContext) =&gt; void'
        description: ''
  - name: exitEveryRule
    uid: adaptive-expressions.ExpressionAntlrParserListener.exitEveryRule
    package: adaptive-expressions
    summary: ''
    fullName: exitEveryRule
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'exitEveryRule?: (ctx: ParserRuleContext) => void'
      return:
        type: '(ctx: ParserRuleContext) =&gt; void'
        description: ''
  - name: exitExpression
    uid: adaptive-expressions.ExpressionAntlrParserListener.exitExpression
    package: adaptive-expressions
    summary: Exit a parse tree produced by `ExpressionAntlrParser.expression`.
    fullName: exitExpression
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'exitExpression?: (ctx: ExpressionContext) => void'
      return:
        type: '(ctx: ExpressionContext) =&gt; void'
        description: ''
  - name: exitFile
    uid: adaptive-expressions.ExpressionAntlrParserListener.exitFile
    package: adaptive-expressions
    summary: Exit a parse tree produced by `ExpressionAntlrParser.file`.
    fullName: exitFile
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'exitFile?: (ctx: FileContext) => void'
      return:
        type: '(ctx: FileContext) =&gt; void'
        description: ''
  - name: exitFuncInvokeExp
    uid: adaptive-expressions.ExpressionAntlrParserListener.exitFuncInvokeExp
    package: adaptive-expressions
    summary: |-
      Exit a parse tree produced by the `funcInvokeExp`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    fullName: exitFuncInvokeExp
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'exitFuncInvokeExp?: (ctx: FuncInvokeExpContext) => void'
      return:
        type: '(ctx: FuncInvokeExpContext) =&gt; void'
        description: ''
  - name: exitIdAtom
    uid: adaptive-expressions.ExpressionAntlrParserListener.exitIdAtom
    package: adaptive-expressions
    summary: |-
      Exit a parse tree produced by the `idAtom`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    fullName: exitIdAtom
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'exitIdAtom?: (ctx: IdAtomContext) => void'
      return:
        type: '(ctx: IdAtomContext) =&gt; void'
        description: ''
  - name: exitIndexAccessExp
    uid: adaptive-expressions.ExpressionAntlrParserListener.exitIndexAccessExp
    package: adaptive-expressions
    summary: |-
      Exit a parse tree produced by the `indexAccessExp`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    fullName: exitIndexAccessExp
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'exitIndexAccessExp?: (ctx: IndexAccessExpContext) => void'
      return:
        type: '(ctx: IndexAccessExpContext) =&gt; void'
        description: ''
  - name: exitJsonCreationExp
    uid: adaptive-expressions.ExpressionAntlrParserListener.exitJsonCreationExp
    package: adaptive-expressions
    summary: |-
      Exit a parse tree produced by the `jsonCreationExp`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    fullName: exitJsonCreationExp
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'exitJsonCreationExp?: (ctx: JsonCreationExpContext) => void'
      return:
        type: '(ctx: JsonCreationExpContext) =&gt; void'
        description: ''
  - name: exitKey
    uid: adaptive-expressions.ExpressionAntlrParserListener.exitKey
    package: adaptive-expressions
    summary: Exit a parse tree produced by `ExpressionAntlrParser.key`.
    fullName: exitKey
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'exitKey?: (ctx: KeyContext) => void'
      return:
        type: '(ctx: KeyContext) =&gt; void'
        description: ''
  - name: exitKeyValuePair
    uid: adaptive-expressions.ExpressionAntlrParserListener.exitKeyValuePair
    package: adaptive-expressions
    summary: Exit a parse tree produced by `ExpressionAntlrParser.keyValuePair`.
    fullName: exitKeyValuePair
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'exitKeyValuePair?: (ctx: KeyValuePairContext) => void'
      return:
        type: '(ctx: KeyValuePairContext) =&gt; void'
        description: ''
  - name: exitKeyValuePairList
    uid: adaptive-expressions.ExpressionAntlrParserListener.exitKeyValuePairList
    package: adaptive-expressions
    summary: Exit a parse tree produced by `ExpressionAntlrParser.keyValuePairList`.
    fullName: exitKeyValuePairList
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'exitKeyValuePairList?: (ctx: KeyValuePairListContext) => void'
      return:
        type: '(ctx: KeyValuePairListContext) =&gt; void'
        description: ''
  - name: exitLambda
    uid: adaptive-expressions.ExpressionAntlrParserListener.exitLambda
    package: adaptive-expressions
    summary: Exit a parse tree produced by `ExpressionAntlrParser.lambda`.
    fullName: exitLambda
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'exitLambda?: (ctx: LambdaContext) => void'
      return:
        type: '(ctx: LambdaContext) =&gt; void'
        description: ''
  - name: exitMemberAccessExp
    uid: adaptive-expressions.ExpressionAntlrParserListener.exitMemberAccessExp
    package: adaptive-expressions
    summary: |-
      Exit a parse tree produced by the `memberAccessExp`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    fullName: exitMemberAccessExp
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'exitMemberAccessExp?: (ctx: MemberAccessExpContext) => void'
      return:
        type: '(ctx: MemberAccessExpContext) =&gt; void'
        description: ''
  - name: exitNumericAtom
    uid: adaptive-expressions.ExpressionAntlrParserListener.exitNumericAtom
    package: adaptive-expressions
    summary: |-
      Exit a parse tree produced by the `numericAtom`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    fullName: exitNumericAtom
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'exitNumericAtom?: (ctx: NumericAtomContext) => void'
      return:
        type: '(ctx: NumericAtomContext) =&gt; void'
        description: ''
  - name: exitParenthesisExp
    uid: adaptive-expressions.ExpressionAntlrParserListener.exitParenthesisExp
    package: adaptive-expressions
    summary: |-
      Exit a parse tree produced by the `parenthesisExp`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    fullName: exitParenthesisExp
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'exitParenthesisExp?: (ctx: ParenthesisExpContext) => void'
      return:
        type: '(ctx: ParenthesisExpContext) =&gt; void'
        description: ''
  - name: exitPrimaryExp
    uid: adaptive-expressions.ExpressionAntlrParserListener.exitPrimaryExp
    package: adaptive-expressions
    summary: |-
      Exit a parse tree produced by the `primaryExp`
      labeled alternative in `ExpressionAntlrParser.expression`.
    fullName: exitPrimaryExp
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'exitPrimaryExp?: (ctx: PrimaryExpContext) => void'
      return:
        type: '(ctx: PrimaryExpContext) =&gt; void'
        description: ''
  - name: exitPrimaryExpression
    uid: adaptive-expressions.ExpressionAntlrParserListener.exitPrimaryExpression
    package: adaptive-expressions
    summary: Exit a parse tree produced by `ExpressionAntlrParser.primaryExpression`.
    fullName: exitPrimaryExpression
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'exitPrimaryExpression?: (ctx: PrimaryExpressionContext) => void'
      return:
        type: '(ctx: PrimaryExpressionContext) =&gt; void'
        description: ''
  - name: exitStringAtom
    uid: adaptive-expressions.ExpressionAntlrParserListener.exitStringAtom
    package: adaptive-expressions
    summary: |-
      Exit a parse tree produced by the `stringAtom`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    fullName: exitStringAtom
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'exitStringAtom?: (ctx: StringAtomContext) => void'
      return:
        type: '(ctx: StringAtomContext) =&gt; void'
        description: ''
  - name: exitStringInterpolation
    uid: adaptive-expressions.ExpressionAntlrParserListener.exitStringInterpolation
    package: adaptive-expressions
    summary: Exit a parse tree produced by `ExpressionAntlrParser.stringInterpolation`.
    fullName: exitStringInterpolation
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'exitStringInterpolation?: (ctx: StringInterpolationContext) => void'
      return:
        type: '(ctx: StringInterpolationContext) =&gt; void'
        description: ''
  - name: exitStringInterpolationAtom
    uid: >-
      adaptive-expressions.ExpressionAntlrParserListener.exitStringInterpolationAtom
    package: adaptive-expressions
    summary: |-
      Exit a parse tree produced by the `stringInterpolationAtom`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    fullName: exitStringInterpolationAtom
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        exitStringInterpolationAtom?: (ctx: StringInterpolationAtomContext) =>
        void
      return:
        type: '(ctx: StringInterpolationAtomContext) =&gt; void'
        description: ''
  - name: exitTextContent
    uid: adaptive-expressions.ExpressionAntlrParserListener.exitTextContent
    package: adaptive-expressions
    summary: Exit a parse tree produced by `ExpressionAntlrParser.textContent`.
    fullName: exitTextContent
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'exitTextContent?: (ctx: TextContentContext) => void'
      return:
        type: '(ctx: TextContentContext) =&gt; void'
        description: ''
  - name: exitUnaryOpExp
    uid: adaptive-expressions.ExpressionAntlrParserListener.exitUnaryOpExp
    package: adaptive-expressions
    summary: |-
      Exit a parse tree produced by the `unaryOpExp`
      labeled alternative in `ExpressionAntlrParser.expression`.
    fullName: exitUnaryOpExp
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'exitUnaryOpExp?: (ctx: UnaryOpExpContext) => void'
      return:
        type: '(ctx: UnaryOpExpContext) =&gt; void'
        description: ''
  - name: visitErrorNode
    uid: adaptive-expressions.ExpressionAntlrParserListener.visitErrorNode
    package: adaptive-expressions
    summary: ''
    fullName: visitErrorNode
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'visitErrorNode?: (node: ErrorNode) => void'
      return:
        type: '(node: ErrorNode) =&gt; void'
        description: ''
  - name: visitTerminal
    uid: adaptive-expressions.ExpressionAntlrParserListener.visitTerminal
    package: adaptive-expressions
    summary: ''
    fullName: visitTerminal
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'visitTerminal?: (node: TerminalNode) => void'
      return:
        type: '(node: TerminalNode) =&gt; void'
        description: ''
extends: ParseTreeListener
