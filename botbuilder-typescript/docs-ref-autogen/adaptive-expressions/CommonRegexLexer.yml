### YamlMime:TSType
name: CommonRegexLexer
uid: adaptive-expressions.CommonRegexLexer
package: adaptive-expressions
summary: ''
fullName: CommonRegexLexer
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: CommonRegexLexer(CharStream)
    uid: adaptive-expressions.CommonRegexLexer.constructor
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new CommonRegexLexer(input: CharStream)'
      parameters:
        - id: input
          type: CharStream
          description: ''
properties:
  - name: ALC
    uid: adaptive-expressions.CommonRegexLexer.ALC
    package: adaptive-expressions
    summary: ''
    fullName: ALC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static ALC: 44 = 44'
      return:
        type: '44'
        description: ''
  - name: Ampersand
    uid: adaptive-expressions.CommonRegexLexer.Ampersand
    package: adaptive-expressions
    summary: ''
    fullName: Ampersand
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static Ampersand: 43 = 43'
      return:
        type: '43'
        description: ''
  - name: atn
    uid: adaptive-expressions.CommonRegexLexer.atn
    package: adaptive-expressions
    summary: 'Get the <xref:ATN> used by the recognizer for prediction.'
    fullName: atn
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'atn: ATN'
      return:
        type: ATN
        description: ''
  - name: AUC
    uid: adaptive-expressions.CommonRegexLexer.AUC
    package: adaptive-expressions
    summary: ''
    fullName: AUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static AUC: 70 = 70'
      return:
        type: '70'
        description: ''
  - name: Backslash
    uid: adaptive-expressions.CommonRegexLexer.Backslash
    package: adaptive-expressions
    summary: ''
    fullName: Backslash
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static Backslash: 10 = 10'
      return:
        type: '10'
        description: ''
  - name: BellChar
    uid: adaptive-expressions.CommonRegexLexer.BellChar
    package: adaptive-expressions
    summary: ''
    fullName: BellChar
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static BellChar: 3 = 3'
      return:
        type: '3'
        description: ''
  - name: BLC
    uid: adaptive-expressions.CommonRegexLexer.BLC
    package: adaptive-expressions
    summary: ''
    fullName: BLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static BLC: 45 = 45'
      return:
        type: '45'
        description: ''
  - name: BlockQuoted
    uid: adaptive-expressions.CommonRegexLexer.BlockQuoted
    package: adaptive-expressions
    summary: ''
    fullName: BlockQuoted
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static BlockQuoted: 2 = 2'
      return:
        type: '2'
        description: ''
  - name: BUC
    uid: adaptive-expressions.CommonRegexLexer.BUC
    package: adaptive-expressions
    summary: ''
    fullName: BUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static BUC: 71 = 71'
      return:
        type: '71'
        description: ''
  - name: Caret
    uid: adaptive-expressions.CommonRegexLexer.Caret
    package: adaptive-expressions
    summary: ''
    fullName: Caret
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static Caret: 23 = 23'
      return:
        type: '23'
        description: ''
  - name: CarriageReturn
    uid: adaptive-expressions.CommonRegexLexer.CarriageReturn
    package: adaptive-expressions
    summary: ''
    fullName: CarriageReturn
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static CarriageReturn: 8 = 8'
      return:
        type: '8'
        description: ''
  - name: channel
    uid: adaptive-expressions.CommonRegexLexer.channel
    package: adaptive-expressions
    summary: ''
    fullName: channel
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'channel: number'
      return:
        type: number
        description: ''
  - name: channelNames
    uid: adaptive-expressions.CommonRegexLexer.channelNames
    package: adaptive-expressions
    summary: ''
    fullName: channelNames
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: "public static channelNames: string[] = [\n\t\t\"DEFAULT_TOKEN_CHANNEL\", \"HIDDEN\",\n\t]"
      return:
        type: 'string[]'
        description: ''
  - name: channelNames
    uid: adaptive-expressions.CommonRegexLexer.channelNames
    package: adaptive-expressions
    summary: ''
    fullName: channelNames
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'string[] channelNames'
      return:
        type: 'string[]'
        description: ''
  - name: CharacterClassEnd
    uid: adaptive-expressions.CommonRegexLexer.CharacterClassEnd
    package: adaptive-expressions
    summary: ''
    fullName: CharacterClassEnd
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static CharacterClassEnd: 22 = 22'
      return:
        type: '22'
        description: ''
  - name: CharacterClassStart
    uid: adaptive-expressions.CommonRegexLexer.CharacterClassStart
    package: adaptive-expressions
    summary: ''
    fullName: CharacterClassStart
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static CharacterClassStart: 21 = 21'
      return:
        type: '21'
        description: ''
  - name: charIndex
    uid: adaptive-expressions.CommonRegexLexer.charIndex
    package: adaptive-expressions
    summary: What is the index of the current character of lookahead?
    fullName: charIndex
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'charIndex: number'
      return:
        type: number
        description: ''
  - name: charPositionInLine
    uid: adaptive-expressions.CommonRegexLexer.charPositionInLine
    package: adaptive-expressions
    summary: ''
    fullName: charPositionInLine
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'charPositionInLine: number'
      return:
        type: number
        description: ''
  - name: CharWithoutProperty
    uid: adaptive-expressions.CommonRegexLexer.CharWithoutProperty
    package: adaptive-expressions
    summary: ''
    fullName: CharWithoutProperty
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static CharWithoutProperty: 16 = 16'
      return:
        type: '16'
        description: ''
  - name: CharWithProperty
    uid: adaptive-expressions.CommonRegexLexer.CharWithProperty
    package: adaptive-expressions
    summary: ''
    fullName: CharWithProperty
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static CharWithProperty: 15 = 15'
      return:
        type: '15'
        description: ''
  - name: CLC
    uid: adaptive-expressions.CommonRegexLexer.CLC
    package: adaptive-expressions
    summary: ''
    fullName: CLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static CLC: 46 = 46'
      return:
        type: '46'
        description: ''
  - name: CloseBrace
    uid: adaptive-expressions.CommonRegexLexer.CloseBrace
    package: adaptive-expressions
    summary: ''
    fullName: CloseBrace
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static CloseBrace: 29 = 29'
      return:
        type: '29'
        description: ''
  - name: CloseParen
    uid: adaptive-expressions.CommonRegexLexer.CloseParen
    package: adaptive-expressions
    summary: ''
    fullName: CloseParen
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static CloseParen: 34 = 34'
      return:
        type: '34'
        description: ''
  - name: Colon
    uid: adaptive-expressions.CommonRegexLexer.Colon
    package: adaptive-expressions
    summary: ''
    fullName: Colon
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static Colon: 39 = 39'
      return:
        type: '39'
        description: ''
  - name: Comma
    uid: adaptive-expressions.CommonRegexLexer.Comma
    package: adaptive-expressions
    summary: ''
    fullName: Comma
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static Comma: 30 = 30'
      return:
        type: '30'
        description: ''
  - name: ControlChar
    uid: adaptive-expressions.CommonRegexLexer.ControlChar
    package: adaptive-expressions
    summary: ''
    fullName: ControlChar
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static ControlChar: 4 = 4'
      return:
        type: '4'
        description: ''
  - name: CUC
    uid: adaptive-expressions.CommonRegexLexer.CUC
    package: adaptive-expressions
    summary: ''
    fullName: CUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static CUC: 72 = 72'
      return:
        type: '72'
        description: ''
  - name: D0
    uid: adaptive-expressions.CommonRegexLexer.D0
    package: adaptive-expressions
    summary: ''
    fullName: D0
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static D0: 105 = 105'
      return:
        type: '105'
        description: ''
  - name: D1
    uid: adaptive-expressions.CommonRegexLexer.D1
    package: adaptive-expressions
    summary: ''
    fullName: D1
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static D1: 96 = 96'
      return:
        type: '96'
        description: ''
  - name: D2
    uid: adaptive-expressions.CommonRegexLexer.D2
    package: adaptive-expressions
    summary: ''
    fullName: D2
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static D2: 97 = 97'
      return:
        type: '97'
        description: ''
  - name: D3
    uid: adaptive-expressions.CommonRegexLexer.D3
    package: adaptive-expressions
    summary: ''
    fullName: D3
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static D3: 98 = 98'
      return:
        type: '98'
        description: ''
  - name: D4
    uid: adaptive-expressions.CommonRegexLexer.D4
    package: adaptive-expressions
    summary: ''
    fullName: D4
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static D4: 99 = 99'
      return:
        type: '99'
        description: ''
  - name: D5
    uid: adaptive-expressions.CommonRegexLexer.D5
    package: adaptive-expressions
    summary: ''
    fullName: D5
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static D5: 100 = 100'
      return:
        type: '100'
        description: ''
  - name: D6
    uid: adaptive-expressions.CommonRegexLexer.D6
    package: adaptive-expressions
    summary: ''
    fullName: D6
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static D6: 101 = 101'
      return:
        type: '101'
        description: ''
  - name: D7
    uid: adaptive-expressions.CommonRegexLexer.D7
    package: adaptive-expressions
    summary: ''
    fullName: D7
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static D7: 102 = 102'
      return:
        type: '102'
        description: ''
  - name: D8
    uid: adaptive-expressions.CommonRegexLexer.D8
    package: adaptive-expressions
    summary: ''
    fullName: D8
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static D8: 103 = 103'
      return:
        type: '103'
        description: ''
  - name: D9
    uid: adaptive-expressions.CommonRegexLexer.D9
    package: adaptive-expressions
    summary: ''
    fullName: D9
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static D9: 104 = 104'
      return:
        type: '104'
        description: ''
  - name: DecimalDigit
    uid: adaptive-expressions.CommonRegexLexer.DecimalDigit
    package: adaptive-expressions
    summary: ''
    fullName: DecimalDigit
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static DecimalDigit: 13 = 13'
      return:
        type: '13'
        description: ''
  - name: DEFAULT_MODE
    uid: adaptive-expressions.CommonRegexLexer.DEFAULT_MODE
    package: adaptive-expressions
    summary: ''
    fullName: DEFAULT_MODE
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static DEFAULT_MODE: number'
      return:
        type: number
        description: ''
  - name: DEFAULT_TOKEN_CHANNEL
    uid: adaptive-expressions.CommonRegexLexer.DEFAULT_TOKEN_CHANNEL
    package: adaptive-expressions
    summary: ''
    fullName: DEFAULT_TOKEN_CHANNEL
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static DEFAULT_TOKEN_CHANNEL: number'
      return:
        type: number
        description: ''
  - name: DLC
    uid: adaptive-expressions.CommonRegexLexer.DLC
    package: adaptive-expressions
    summary: ''
    fullName: DLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static DLC: 47 = 47'
      return:
        type: '47'
        description: ''
  - name: Dot
    uid: adaptive-expressions.CommonRegexLexer.Dot
    package: adaptive-expressions
    summary: ''
    fullName: Dot
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static Dot: 12 = 12'
      return:
        type: '12'
        description: ''
  - name: DUC
    uid: adaptive-expressions.CommonRegexLexer.DUC
    package: adaptive-expressions
    summary: ''
    fullName: DUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static DUC: 73 = 73'
      return:
        type: '73'
        description: ''
  - name: ELC
    uid: adaptive-expressions.CommonRegexLexer.ELC
    package: adaptive-expressions
    summary: ''
    fullName: ELC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static ELC: 48 = 48'
      return:
        type: '48'
        description: ''
  - name: EndOfSubject
    uid: adaptive-expressions.CommonRegexLexer.EndOfSubject
    package: adaptive-expressions
    summary: ''
    fullName: EndOfSubject
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static EndOfSubject: 31 = 31'
      return:
        type: '31'
        description: ''
  - name: EOF
    uid: adaptive-expressions.CommonRegexLexer.EOF
    package: adaptive-expressions
    summary: ''
    fullName: EOF
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static EOF: number'
      return:
        type: number
        description: ''
  - name: Equals
    uid: adaptive-expressions.CommonRegexLexer.Equals
    package: adaptive-expressions
    summary: ''
    fullName: Equals
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static Equals: 41 = 41'
      return:
        type: '41'
        description: ''
  - name: EscapeChar
    uid: adaptive-expressions.CommonRegexLexer.EscapeChar
    package: adaptive-expressions
    summary: ''
    fullName: EscapeChar
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static EscapeChar: 5 = 5'
      return:
        type: '5'
        description: ''
  - name: EUC
    uid: adaptive-expressions.CommonRegexLexer.EUC
    package: adaptive-expressions
    summary: ''
    fullName: EUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static EUC: 74 = 74'
      return:
        type: '74'
        description: ''
  - name: Exclamation
    uid: adaptive-expressions.CommonRegexLexer.Exclamation
    package: adaptive-expressions
    summary: ''
    fullName: Exclamation
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static Exclamation: 42 = 42'
      return:
        type: '42'
        description: ''
  - name: FLC
    uid: adaptive-expressions.CommonRegexLexer.FLC
    package: adaptive-expressions
    summary: ''
    fullName: FLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static FLC: 49 = 49'
      return:
        type: '49'
        description: ''
  - name: FormFeed
    uid: adaptive-expressions.CommonRegexLexer.FormFeed
    package: adaptive-expressions
    summary: ''
    fullName: FormFeed
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static FormFeed: 6 = 6'
      return:
        type: '6'
        description: ''
  - name: FUC
    uid: adaptive-expressions.CommonRegexLexer.FUC
    package: adaptive-expressions
    summary: ''
    fullName: FUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static FUC: 75 = 75'
      return:
        type: '75'
        description: ''
  - name: GLC
    uid: adaptive-expressions.CommonRegexLexer.GLC
    package: adaptive-expressions
    summary: ''
    fullName: GLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static GLC: 50 = 50'
      return:
        type: '50'
        description: ''
  - name: grammarFileName
    uid: adaptive-expressions.CommonRegexLexer.grammarFileName
    package: adaptive-expressions
    summary: ''
    fullName: grammarFileName
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: string grammarFileName
      return:
        type: string
        description: ''
  - name: GreaterThan
    uid: adaptive-expressions.CommonRegexLexer.GreaterThan
    package: adaptive-expressions
    summary: ''
    fullName: GreaterThan
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static GreaterThan: 36 = 36'
      return:
        type: '36'
        description: ''
  - name: GUC
    uid: adaptive-expressions.CommonRegexLexer.GUC
    package: adaptive-expressions
    summary: ''
    fullName: GUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static GUC: 76 = 76'
      return:
        type: '76'
        description: ''
  - name: Hash
    uid: adaptive-expressions.CommonRegexLexer.Hash
    package: adaptive-expressions
    summary: ''
    fullName: Hash
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static Hash: 40 = 40'
      return:
        type: '40'
        description: ''
  - name: HexChar
    uid: adaptive-expressions.CommonRegexLexer.HexChar
    package: adaptive-expressions
    summary: ''
    fullName: HexChar
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static HexChar: 11 = 11'
      return:
        type: '11'
        description: ''
  - name: HIDDEN
    uid: adaptive-expressions.CommonRegexLexer.HIDDEN
    package: adaptive-expressions
    summary: ''
    fullName: HIDDEN
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static HIDDEN: number'
      return:
        type: number
        description: ''
  - name: HLC
    uid: adaptive-expressions.CommonRegexLexer.HLC
    package: adaptive-expressions
    summary: ''
    fullName: HLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static HLC: 51 = 51'
      return:
        type: '51'
        description: ''
  - name: HUC
    uid: adaptive-expressions.CommonRegexLexer.HUC
    package: adaptive-expressions
    summary: ''
    fullName: HUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static HUC: 77 = 77'
      return:
        type: '77'
        description: ''
  - name: Hyphen
    uid: adaptive-expressions.CommonRegexLexer.Hyphen
    package: adaptive-expressions
    summary: ''
    fullName: Hyphen
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static Hyphen: 24 = 24'
      return:
        type: '24'
        description: ''
  - name: ILC
    uid: adaptive-expressions.CommonRegexLexer.ILC
    package: adaptive-expressions
    summary: ''
    fullName: ILC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static ILC: 52 = 52'
      return:
        type: '52'
        description: ''
  - name: inputStream
    uid: adaptive-expressions.CommonRegexLexer.inputStream
    package: adaptive-expressions
    summary: Set the char stream and reset the lexer
    fullName: inputStream
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'inputStream: CharStream'
      return:
        type: CharStream
        description: ''
  - name: interpreter
    uid: adaptive-expressions.CommonRegexLexer.interpreter
    package: adaptive-expressions
    summary: Set the ATN interpreter used by the recognizer for prediction.
    fullName: interpreter
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'interpreter: LexerATNSimulator'
      return:
        type: LexerATNSimulator
        description: ''
  - name: IUC
    uid: adaptive-expressions.CommonRegexLexer.IUC
    package: adaptive-expressions
    summary: ''
    fullName: IUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static IUC: 78 = 78'
      return:
        type: '78'
        description: ''
  - name: JLC
    uid: adaptive-expressions.CommonRegexLexer.JLC
    package: adaptive-expressions
    summary: ''
    fullName: JLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static JLC: 53 = 53'
      return:
        type: '53'
        description: ''
  - name: JUC
    uid: adaptive-expressions.CommonRegexLexer.JUC
    package: adaptive-expressions
    summary: ''
    fullName: JUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static JUC: 79 = 79'
      return:
        type: '79'
        description: ''
  - name: KLC
    uid: adaptive-expressions.CommonRegexLexer.KLC
    package: adaptive-expressions
    summary: ''
    fullName: KLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static KLC: 54 = 54'
      return:
        type: '54'
        description: ''
  - name: KUC
    uid: adaptive-expressions.CommonRegexLexer.KUC
    package: adaptive-expressions
    summary: ''
    fullName: KUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static KUC: 80 = 80'
      return:
        type: '80'
        description: ''
  - name: LessThan
    uid: adaptive-expressions.CommonRegexLexer.LessThan
    package: adaptive-expressions
    summary: ''
    fullName: LessThan
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static LessThan: 35 = 35'
      return:
        type: '35'
        description: ''
  - name: line
    uid: adaptive-expressions.CommonRegexLexer.line
    package: adaptive-expressions
    summary: ''
    fullName: line
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'line: number'
      return:
        type: number
        description: ''
  - name: LLC
    uid: adaptive-expressions.CommonRegexLexer.LLC
    package: adaptive-expressions
    summary: ''
    fullName: LLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static LLC: 55 = 55'
      return:
        type: '55'
        description: ''
  - name: LUC
    uid: adaptive-expressions.CommonRegexLexer.LUC
    package: adaptive-expressions
    summary: ''
    fullName: LUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static LUC: 81 = 81'
      return:
        type: '81'
        description: ''
  - name: MAX_CHAR_VALUE
    uid: adaptive-expressions.CommonRegexLexer.MAX_CHAR_VALUE
    package: adaptive-expressions
    summary: ''
    fullName: MAX_CHAR_VALUE
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static MAX_CHAR_VALUE: number'
      return:
        type: number
        description: ''
  - name: MIN_CHAR_VALUE
    uid: adaptive-expressions.CommonRegexLexer.MIN_CHAR_VALUE
    package: adaptive-expressions
    summary: ''
    fullName: MIN_CHAR_VALUE
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static MIN_CHAR_VALUE: number'
      return:
        type: number
        description: ''
  - name: MLC
    uid: adaptive-expressions.CommonRegexLexer.MLC
    package: adaptive-expressions
    summary: ''
    fullName: MLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static MLC: 56 = 56'
      return:
        type: '56'
        description: ''
  - name: modeNames
    uid: adaptive-expressions.CommonRegexLexer.modeNames
    package: adaptive-expressions
    summary: ''
    fullName: modeNames
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: "public static modeNames: string[] = [\n\t\t\"DEFAULT_MODE\",\n\t]"
      return:
        type: 'string[]'
        description: ''
  - name: modeNames
    uid: adaptive-expressions.CommonRegexLexer.modeNames
    package: adaptive-expressions
    summary: ''
    fullName: modeNames
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'string[] modeNames'
      return:
        type: 'string[]'
        description: ''
  - name: MORE
    uid: adaptive-expressions.CommonRegexLexer.MORE
    package: adaptive-expressions
    summary: ''
    fullName: MORE
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static MORE: number'
      return:
        type: number
        description: ''
  - name: MUC
    uid: adaptive-expressions.CommonRegexLexer.MUC
    package: adaptive-expressions
    summary: ''
    fullName: MUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static MUC: 82 = 82'
      return:
        type: '82'
        description: ''
  - name: NewLine
    uid: adaptive-expressions.CommonRegexLexer.NewLine
    package: adaptive-expressions
    summary: ''
    fullName: NewLine
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static NewLine: 7 = 7'
      return:
        type: '7'
        description: ''
  - name: NLC
    uid: adaptive-expressions.CommonRegexLexer.NLC
    package: adaptive-expressions
    summary: ''
    fullName: NLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static NLC: 57 = 57'
      return:
        type: '57'
        description: ''
  - name: NotDecimalDigit
    uid: adaptive-expressions.CommonRegexLexer.NotDecimalDigit
    package: adaptive-expressions
    summary: ''
    fullName: NotDecimalDigit
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static NotDecimalDigit: 14 = 14'
      return:
        type: '14'
        description: ''
  - name: NotWhiteSpace
    uid: adaptive-expressions.CommonRegexLexer.NotWhiteSpace
    package: adaptive-expressions
    summary: ''
    fullName: NotWhiteSpace
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static NotWhiteSpace: 18 = 18'
      return:
        type: '18'
        description: ''
  - name: NotWordChar
    uid: adaptive-expressions.CommonRegexLexer.NotWordChar
    package: adaptive-expressions
    summary: ''
    fullName: NotWordChar
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static NotWordChar: 20 = 20'
      return:
        type: '20'
        description: ''
  - name: NUC
    uid: adaptive-expressions.CommonRegexLexer.NUC
    package: adaptive-expressions
    summary: ''
    fullName: NUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static NUC: 83 = 83'
      return:
        type: '83'
        description: ''
  - name: OLC
    uid: adaptive-expressions.CommonRegexLexer.OLC
    package: adaptive-expressions
    summary: ''
    fullName: OLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static OLC: 58 = 58'
      return:
        type: '58'
        description: ''
  - name: OpenBrace
    uid: adaptive-expressions.CommonRegexLexer.OpenBrace
    package: adaptive-expressions
    summary: ''
    fullName: OpenBrace
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static OpenBrace: 28 = 28'
      return:
        type: '28'
        description: ''
  - name: OpenParen
    uid: adaptive-expressions.CommonRegexLexer.OpenParen
    package: adaptive-expressions
    summary: ''
    fullName: OpenParen
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static OpenParen: 33 = 33'
      return:
        type: '33'
        description: ''
  - name: OtherChar
    uid: adaptive-expressions.CommonRegexLexer.OtherChar
    package: adaptive-expressions
    summary: ''
    fullName: OtherChar
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static OtherChar: 106 = 106'
      return:
        type: '106'
        description: ''
  - name: OUC
    uid: adaptive-expressions.CommonRegexLexer.OUC
    package: adaptive-expressions
    summary: ''
    fullName: OUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static OUC: 84 = 84'
      return:
        type: '84'
        description: ''
  - name: parseInfo
    uid: adaptive-expressions.CommonRegexLexer.parseInfo
    package: adaptive-expressions
    summary: |-
      If profiling during the parse/lex, this will return DecisionInfo records
       for each decision in recognizer in a ParseInfo object.
    fullName: parseInfo
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'parseInfo: Promise<ParseInfo | undefined>'
      return:
        type: Promise&lt;ParseInfo | undefined&gt;
        description: ''
  - name: Pipe
    uid: adaptive-expressions.CommonRegexLexer.Pipe
    package: adaptive-expressions
    summary: ''
    fullName: Pipe
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static Pipe: 32 = 32'
      return:
        type: '32'
        description: ''
  - name: PLC
    uid: adaptive-expressions.CommonRegexLexer.PLC
    package: adaptive-expressions
    summary: ''
    fullName: PLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static PLC: 59 = 59'
      return:
        type: '59'
        description: ''
  - name: Plus
    uid: adaptive-expressions.CommonRegexLexer.Plus
    package: adaptive-expressions
    summary: ''
    fullName: Plus
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static Plus: 26 = 26'
      return:
        type: '26'
        description: ''
  - name: PUC
    uid: adaptive-expressions.CommonRegexLexer.PUC
    package: adaptive-expressions
    summary: ''
    fullName: PUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static PUC: 85 = 85'
      return:
        type: '85'
        description: ''
  - name: QLC
    uid: adaptive-expressions.CommonRegexLexer.QLC
    package: adaptive-expressions
    summary: ''
    fullName: QLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static QLC: 60 = 60'
      return:
        type: '60'
        description: ''
  - name: QUC
    uid: adaptive-expressions.CommonRegexLexer.QUC
    package: adaptive-expressions
    summary: ''
    fullName: QUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static QUC: 86 = 86'
      return:
        type: '86'
        description: ''
  - name: QuestionMark
    uid: adaptive-expressions.CommonRegexLexer.QuestionMark
    package: adaptive-expressions
    summary: ''
    fullName: QuestionMark
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static QuestionMark: 25 = 25'
      return:
        type: '25'
        description: ''
  - name: Quoted
    uid: adaptive-expressions.CommonRegexLexer.Quoted
    package: adaptive-expressions
    summary: ''
    fullName: Quoted
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static Quoted: 1 = 1'
      return:
        type: '1'
        description: ''
  - name: RLC
    uid: adaptive-expressions.CommonRegexLexer.RLC
    package: adaptive-expressions
    summary: ''
    fullName: RLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RLC: 61 = 61'
      return:
        type: '61'
        description: ''
  - name: RUC
    uid: adaptive-expressions.CommonRegexLexer.RUC
    package: adaptive-expressions
    summary: ''
    fullName: RUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static RUC: 87 = 87'
      return:
        type: '87'
        description: ''
  - name: ruleNames
    uid: adaptive-expressions.CommonRegexLexer.ruleNames
    package: adaptive-expressions
    summary: ''
    fullName: ruleNames
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: "public static ruleNames: string[] = [\n\t\t\"Quoted\", \"BlockQuoted\", \"BellChar\", \"ControlChar\", \"EscapeChar\", \"FormFeed\", \n\t\t\"NewLine\", \"CarriageReturn\", \"Tab\", \"Backslash\", \"HexChar\", \"Dot\", \"DecimalDigit\", \n\t\t\"NotDecimalDigit\", \"CharWithProperty\", \"CharWithoutProperty\", \"WhiteSpace\", \n\t\t\"NotWhiteSpace\", \"WordChar\", \"NotWordChar\", \"CharacterClassStart\", \"CharacterClassEnd\", \n\t\t\"Caret\", \"Hyphen\", \"QuestionMark\", \"Plus\", \"Star\", \"OpenBrace\", \"CloseBrace\", \n\t\t\"Comma\", \"EndOfSubject\", \"Pipe\", \"OpenParen\", \"CloseParen\", \"LessThan\", \n\t\t\"GreaterThan\", \"SingleQuote\", \"Underscore\", \"Colon\", \"Hash\", \"Equals\", \n\t\t\"Exclamation\", \"Ampersand\", \"ALC\", \"BLC\", \"CLC\", \"DLC\", \"ELC\", \"FLC\", \n\t\t\"GLC\", \"HLC\", \"ILC\", \"JLC\", \"KLC\", \"LLC\", \"MLC\", \"NLC\", \"OLC\", \"PLC\", \n\t\t\"QLC\", \"RLC\", \"SLC\", \"TLC\", \"ULC\", \"VLC\", \"WLC\", \"XLC\", \"YLC\", \"ZLC\", \n\t\t\"AUC\", \"BUC\", \"CUC\", \"DUC\", \"EUC\", \"FUC\", \"GUC\", \"HUC\", \"IUC\", \"JUC\", \n\t\t\"KUC\", \"LUC\", \"MUC\", \"NUC\", \"OUC\", \"PUC\", \"QUC\", \"RUC\", \"SUC\", \"TUC\", \n\t\t\"UUC\", \"VUC\", \"WUC\", \"XUC\", \"YUC\", \"ZUC\", \"D1\", \"D2\", \"D3\", \"D4\", \"D5\", \n\t\t\"D6\", \"D7\", \"D8\", \"D9\", \"D0\", \"OtherChar\", \"UnderscoreAlphaNumerics\", \n\t\t\"AlphaNumerics\", \"AlphaNumeric\", \"NonAlphaNumeric\", \"HexDigit\", \"ASCII\",\n\t]"
      return:
        type: 'string[]'
        description: ''
  - name: ruleNames
    uid: adaptive-expressions.CommonRegexLexer.ruleNames
    package: adaptive-expressions
    summary: ''
    fullName: ruleNames
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'string[] ruleNames'
      return:
        type: 'string[]'
        description: ''
  - name: serializedATN
    uid: adaptive-expressions.CommonRegexLexer.serializedATN
    package: adaptive-expressions
    summary: ''
    fullName: serializedATN
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: string serializedATN
      return:
        type: string
        description: ''
  - name: SingleQuote
    uid: adaptive-expressions.CommonRegexLexer.SingleQuote
    package: adaptive-expressions
    summary: ''
    fullName: SingleQuote
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static SingleQuote: 37 = 37'
      return:
        type: '37'
        description: ''
  - name: SKIP
    uid: adaptive-expressions.CommonRegexLexer.SKIP
    package: adaptive-expressions
    summary: ''
    fullName: SKIP
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static SKIP: number'
      return:
        type: number
        description: ''
  - name: SLC
    uid: adaptive-expressions.CommonRegexLexer.SLC
    package: adaptive-expressions
    summary: ''
    fullName: SLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static SLC: 62 = 62'
      return:
        type: '62'
        description: ''
  - name: sourceName
    uid: adaptive-expressions.CommonRegexLexer.sourceName
    package: adaptive-expressions
    summary: ''
    fullName: sourceName
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'sourceName: string'
      return:
        type: string
        description: ''
  - name: Star
    uid: adaptive-expressions.CommonRegexLexer.Star
    package: adaptive-expressions
    summary: ''
    fullName: Star
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static Star: 27 = 27'
      return:
        type: '27'
        description: ''
  - name: state
    uid: adaptive-expressions.CommonRegexLexer.state
    package: adaptive-expressions
    summary: |-
      Indicate that the recognizer has changed internal state that is
       consistent with the ATN state passed in.  This way we always know
       where we are in the ATN as the parser goes along. The rule
       context objects form a stack that lets us see the stack of
       invoking rules. Combine this and we have complete ATN
       configuration information.
    fullName: state
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'state: number'
      return:
        type: number
        description: ''
  - name: SUC
    uid: adaptive-expressions.CommonRegexLexer.SUC
    package: adaptive-expressions
    summary: ''
    fullName: SUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static SUC: 88 = 88'
      return:
        type: '88'
        description: ''
  - name: Tab
    uid: adaptive-expressions.CommonRegexLexer.Tab
    package: adaptive-expressions
    summary: ''
    fullName: Tab
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static Tab: 9 = 9'
      return:
        type: '9'
        description: ''
  - name: text
    uid: adaptive-expressions.CommonRegexLexer.text
    package: adaptive-expressions
    summary: |-
      Set the complete text of this token; it wipes any previous
       changes to the text.
    fullName: text
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'text: string'
      return:
        type: string
        description: ''
  - name: TLC
    uid: adaptive-expressions.CommonRegexLexer.TLC
    package: adaptive-expressions
    summary: ''
    fullName: TLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static TLC: 63 = 63'
      return:
        type: '63'
        description: ''
  - name: token
    uid: adaptive-expressions.CommonRegexLexer.token
    package: adaptive-expressions
    summary: Override if emitting multiple tokens.
    fullName: token
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'token: Token | undefined'
      return:
        type: Token | undefined
        description: ''
  - name: tokenFactory
    uid: adaptive-expressions.CommonRegexLexer.tokenFactory
    package: adaptive-expressions
    summary: ''
    fullName: tokenFactory
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'tokenFactory: TokenFactory'
      return:
        type: TokenFactory
        description: ''
  - name: TUC
    uid: adaptive-expressions.CommonRegexLexer.TUC
    package: adaptive-expressions
    summary: ''
    fullName: TUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static TUC: 89 = 89'
      return:
        type: '89'
        description: ''
  - name: type
    uid: adaptive-expressions.CommonRegexLexer.type
    package: adaptive-expressions
    summary: ''
    fullName: type
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'type: number'
      return:
        type: number
        description: ''
  - name: ULC
    uid: adaptive-expressions.CommonRegexLexer.ULC
    package: adaptive-expressions
    summary: ''
    fullName: ULC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static ULC: 64 = 64'
      return:
        type: '64'
        description: ''
  - name: Underscore
    uid: adaptive-expressions.CommonRegexLexer.Underscore
    package: adaptive-expressions
    summary: ''
    fullName: Underscore
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static Underscore: 38 = 38'
      return:
        type: '38'
        description: ''
  - name: UUC
    uid: adaptive-expressions.CommonRegexLexer.UUC
    package: adaptive-expressions
    summary: ''
    fullName: UUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static UUC: 90 = 90'
      return:
        type: '90'
        description: ''
  - name: VLC
    uid: adaptive-expressions.CommonRegexLexer.VLC
    package: adaptive-expressions
    summary: ''
    fullName: VLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static VLC: 65 = 65'
      return:
        type: '65'
        description: ''
  - name: VOCABULARY
    uid: adaptive-expressions.CommonRegexLexer.VOCABULARY
    package: adaptive-expressions
    summary: ''
    fullName: VOCABULARY
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        public static VOCABULARY: Vocabulary = new
        VocabularyImpl(CommonRegexLexer._LITERAL_NAMES,
        CommonRegexLexer._SYMBOLIC_NAMES, [])
      return:
        type: Vocabulary
        description: ''
  - name: vocabulary
    uid: adaptive-expressions.CommonRegexLexer.vocabulary
    package: adaptive-expressions
    summary: ''
    fullName: vocabulary
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: Vocabulary vocabulary
      return:
        type: Vocabulary
        description: ''
  - name: VUC
    uid: adaptive-expressions.CommonRegexLexer.VUC
    package: adaptive-expressions
    summary: ''
    fullName: VUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static VUC: 91 = 91'
      return:
        type: '91'
        description: ''
  - name: WhiteSpace
    uid: adaptive-expressions.CommonRegexLexer.WhiteSpace
    package: adaptive-expressions
    summary: ''
    fullName: WhiteSpace
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static WhiteSpace: 17 = 17'
      return:
        type: '17'
        description: ''
  - name: WLC
    uid: adaptive-expressions.CommonRegexLexer.WLC
    package: adaptive-expressions
    summary: ''
    fullName: WLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static WLC: 66 = 66'
      return:
        type: '66'
        description: ''
  - name: WordChar
    uid: adaptive-expressions.CommonRegexLexer.WordChar
    package: adaptive-expressions
    summary: ''
    fullName: WordChar
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static WordChar: 19 = 19'
      return:
        type: '19'
        description: ''
  - name: WUC
    uid: adaptive-expressions.CommonRegexLexer.WUC
    package: adaptive-expressions
    summary: ''
    fullName: WUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static WUC: 92 = 92'
      return:
        type: '92'
        description: ''
  - name: XLC
    uid: adaptive-expressions.CommonRegexLexer.XLC
    package: adaptive-expressions
    summary: ''
    fullName: XLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static XLC: 67 = 67'
      return:
        type: '67'
        description: ''
  - name: XUC
    uid: adaptive-expressions.CommonRegexLexer.XUC
    package: adaptive-expressions
    summary: ''
    fullName: XUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static XUC: 93 = 93'
      return:
        type: '93'
        description: ''
  - name: YLC
    uid: adaptive-expressions.CommonRegexLexer.YLC
    package: adaptive-expressions
    summary: ''
    fullName: YLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static YLC: 68 = 68'
      return:
        type: '68'
        description: ''
  - name: YUC
    uid: adaptive-expressions.CommonRegexLexer.YUC
    package: adaptive-expressions
    summary: ''
    fullName: YUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static YUC: 94 = 94'
      return:
        type: '94'
        description: ''
  - name: ZLC
    uid: adaptive-expressions.CommonRegexLexer.ZLC
    package: adaptive-expressions
    summary: ''
    fullName: ZLC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static ZLC: 69 = 69'
      return:
        type: '69'
        description: ''
  - name: ZUC
    uid: adaptive-expressions.CommonRegexLexer.ZUC
    package: adaptive-expressions
    summary: ''
    fullName: ZUC
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public static ZUC: 95 = 95'
      return:
        type: '95'
        description: ''
methods:
  - name: 'action(RuleContext | undefined, number, number)'
    uid: adaptive-expressions.CommonRegexLexer.action
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function action(_localctx: RuleContext | undefined, ruleIndex: number,
        actionIndex: number)
      parameters:
        - id: _localctx
          type: RuleContext | undefined
          description: ''
        - id: ruleIndex
          type: number
          description: ''
        - id: actionIndex
          type: number
          description: ''
  - name: addErrorListener(ANTLRErrorListener<number>)
    uid: adaptive-expressions.CommonRegexLexer.addErrorListener
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function addErrorListener(listener: ANTLRErrorListener<number>)'
      parameters:
        - id: listener
          type: ANTLRErrorListener&lt;number&gt;
          description: ''
  - name: emit()
    uid: adaptive-expressions.CommonRegexLexer.emit_1
    package: adaptive-expressions
    summary: |-
      By default does not support multiple emits per nextToken invocation
       for efficiency reasons.  Subclass and override this method, nextToken,
       and getToken (to push tokens into a list and pull from that list
       rather than a single variable as this implementation does).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function emit()
      return:
        type: Token
        description: ''
  - name: emit(Token)
    uid: adaptive-expressions.CommonRegexLexer.emit
    package: adaptive-expressions
    summary: |-
      The standard method called to automatically emit a token at the
       outermost lexical rule.  The token object should point into the
       char buffer start..stop.  If there is a text override in 'text',
       use that to set the token's text.  Override this method to emit
       custom Token objects or provide a new factory.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function emit(token: Token)'
      parameters:
        - id: token
          type: Token
          description: ''
      return:
        type: Token
        description: ''
  - name: emitEOF()
    uid: adaptive-expressions.CommonRegexLexer.emitEOF
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function emitEOF()
      return:
        type: Token
        description: ''
  - name: getAllTokens()
    uid: adaptive-expressions.CommonRegexLexer.getAllTokens
    package: adaptive-expressions
    summary: |-
      Return a list of all Token objects in input char stream.
       Forces load of all tokens. Does not include EOF token.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getAllTokens()
      return:
        type: 'Token[]'
        description: ''
  - name: getCharErrorDisplay(number)
    uid: adaptive-expressions.CommonRegexLexer.getCharErrorDisplay
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getCharErrorDisplay(c: number)'
      parameters:
        - id: c
          type: number
          description: ''
      return:
        type: string
        description: ''
  - name: getErrorDisplay(string | number)
    uid: adaptive-expressions.CommonRegexLexer.getErrorDisplay
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getErrorDisplay(s: string | number)'
      parameters:
        - id: s
          type: string | number
          description: ''
      return:
        type: string
        description: ''
  - name: getErrorHeader(RecognitionException)
    uid: adaptive-expressions.CommonRegexLexer.getErrorHeader
    package: adaptive-expressions
    summary: 'What is the error header, normally line/character position information?'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getErrorHeader(e: RecognitionException)'
      parameters:
        - id: e
          type: RecognitionException
          description: ''
      return:
        type: string
        description: ''
  - name: getErrorListenerDispatch()
    uid: adaptive-expressions.CommonRegexLexer.getErrorListenerDispatch
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getErrorListenerDispatch()
      return:
        type: ANTLRErrorListener&lt;number&gt;
        description: ''
  - name: getErrorListeners()
    uid: adaptive-expressions.CommonRegexLexer.getErrorListeners
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getErrorListeners()
      return:
        type: Array&lt;ANTLRErrorListener&lt;number&gt;&gt;
        description: ''
  - name: getRuleIndexMap()
    uid: adaptive-expressions.CommonRegexLexer.getRuleIndexMap
    package: adaptive-expressions
    summary: |
      Get a map from rule names to rule indexes.
      Used for XPath and tree pattern compilation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getRuleIndexMap()
      return:
        type: 'ReadonlyMap&lt;string, number&gt;'
        description: ''
  - name: getTokenType(string)
    uid: adaptive-expressions.CommonRegexLexer.getTokenType
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getTokenType(tokenName: string)'
      parameters:
        - id: tokenName
          type: string
          description: ''
      return:
        type: number
        description: ''
  - name: getTokenTypeMap()
    uid: adaptive-expressions.CommonRegexLexer.getTokenTypeMap
    package: adaptive-expressions
    summary: |
      Get a map from token names to token types.
      Used for XPath and tree pattern compilation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getTokenTypeMap()
      return:
        type: 'ReadonlyMap&lt;string, number&gt;'
        description: ''
  - name: mode(number)
    uid: adaptive-expressions.CommonRegexLexer.mode
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function mode(m: number)'
      parameters:
        - id: m
          type: number
          description: ''
  - name: more()
    uid: adaptive-expressions.CommonRegexLexer.more
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function more()
  - name: nextToken()
    uid: adaptive-expressions.CommonRegexLexer.nextToken
    package: adaptive-expressions
    summary: |-
      Return a token from this source; i.e., match a token on the char
       stream.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function nextToken()
      return:
        type: Token
        description: ''
  - name: notifyListeners(LexerNoViableAltException)
    uid: adaptive-expressions.CommonRegexLexer.notifyListeners
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function notifyListeners(e: LexerNoViableAltException)'
      parameters:
        - id: e
          type: LexerNoViableAltException
          description: ''
  - name: popMode()
    uid: adaptive-expressions.CommonRegexLexer.popMode
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function popMode()
      return:
        type: number
        description: ''
  - name: 'precpred(RuleContext | undefined, number)'
    uid: adaptive-expressions.CommonRegexLexer.precpred
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function precpred(localctx: RuleContext | undefined, precedence: number)'
      parameters:
        - id: localctx
          type: RuleContext | undefined
          description: ''
        - id: precedence
          type: number
          description: ''
      return:
        type: boolean
        description: ''
  - name: pushMode(number)
    uid: adaptive-expressions.CommonRegexLexer.pushMode
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function pushMode(m: number)'
      parameters:
        - id: m
          type: number
          description: ''
  - name: recover(LexerNoViableAltException)
    uid: adaptive-expressions.CommonRegexLexer.recover_1
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function recover(re: LexerNoViableAltException)'
      parameters:
        - id: re
          type: LexerNoViableAltException
          description: ''
  - name: recover(RecognitionException)
    uid: adaptive-expressions.CommonRegexLexer.recover
    package: adaptive-expressions
    summary: |-
      Lexers can normally match any char in it's vocabulary after matching
       a token, so do the easy thing and just kill a character and hope
       it all works out.  You can instead use the rule invocation stack
       to do sophisticated error recovery if you are in a fragment rule.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function recover(re: RecognitionException)'
      parameters:
        - id: re
          type: RecognitionException
          description: ''
  - name: removeErrorListener(ANTLRErrorListener<number>)
    uid: adaptive-expressions.CommonRegexLexer.removeErrorListener
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function removeErrorListener(listener: ANTLRErrorListener<number>)'
      parameters:
        - id: listener
          type: ANTLRErrorListener&lt;number&gt;
          description: ''
  - name: removeErrorListeners()
    uid: adaptive-expressions.CommonRegexLexer.removeErrorListeners
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function removeErrorListeners()
  - name: reset()
    uid: adaptive-expressions.CommonRegexLexer.reset
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function reset()
  - name: reset(boolean)
    uid: adaptive-expressions.CommonRegexLexer.reset_1
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function reset(resetInput: boolean)'
      parameters:
        - id: resetInput
          type: boolean
          description: ''
  - name: 'sempred(RuleContext | undefined, number, number)'
    uid: adaptive-expressions.CommonRegexLexer.sempred
    package: adaptive-expressions
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function sempred(_localctx: RuleContext | undefined, ruleIndex: number,
        actionIndex: number)
      parameters:
        - id: _localctx
          type: RuleContext | undefined
          description: ''
        - id: ruleIndex
          type: number
          description: ''
        - id: actionIndex
          type: number
          description: ''
      return:
        type: boolean
        description: ''
  - name: skip()
    uid: adaptive-expressions.CommonRegexLexer.skip
    package: adaptive-expressions
    summary: |-
      Instruct the lexer to skip creating a token for current lexer rule
       and look for another token.  nextToken() knows to keep looking when
       a lexer rule finishes with token set to SKIP_TOKEN.  Recall that
       if token==undefined at end of any token rule, it creates one for you
       and emits it.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function skip()
extends: Lexer
