### YamlMime:TSType
name: ExpressionAntlrParserVisitor
uid: adaptive-expressions.ExpressionAntlrParserVisitor
package: adaptive-expressions
summary: |-
  This interface defines a complete generic visitor for a parse tree produced
  by `ExpressionAntlrParser`.
fullName: ExpressionAntlrParserVisitor<Result>
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: visitArgsList
    uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitArgsList
    package: adaptive-expressions
    summary: Visit a parse tree produced by `ExpressionAntlrParser.argsList`.
    fullName: visitArgsList
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'visitArgsList?: (ctx: ArgsListContext) => Result'
      return:
        type: '(ctx: ArgsListContext) =&gt; Result'
        description: ''
  - name: visitArrayCreationExp
    uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitArrayCreationExp
    package: adaptive-expressions
    summary: |-
      Visit a parse tree produced by the `arrayCreationExp`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    fullName: visitArrayCreationExp
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'visitArrayCreationExp?: (ctx: ArrayCreationExpContext) => Result'
      return:
        type: '(ctx: ArrayCreationExpContext) =&gt; Result'
        description: ''
  - name: visitBinaryOpExp
    uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitBinaryOpExp
    package: adaptive-expressions
    summary: |-
      Visit a parse tree produced by the `binaryOpExp`
      labeled alternative in `ExpressionAntlrParser.expression`.
    fullName: visitBinaryOpExp
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'visitBinaryOpExp?: (ctx: BinaryOpExpContext) => Result'
      return:
        type: '(ctx: BinaryOpExpContext) =&gt; Result'
        description: ''
  - name: visitExpression
    uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitExpression
    package: adaptive-expressions
    summary: Visit a parse tree produced by `ExpressionAntlrParser.expression`.
    fullName: visitExpression
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'visitExpression?: (ctx: ExpressionContext) => Result'
      return:
        type: '(ctx: ExpressionContext) =&gt; Result'
        description: ''
  - name: visitFile
    uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitFile
    package: adaptive-expressions
    summary: Visit a parse tree produced by `ExpressionAntlrParser.file`.
    fullName: visitFile
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'visitFile?: (ctx: FileContext) => Result'
      return:
        type: '(ctx: FileContext) =&gt; Result'
        description: ''
  - name: visitFuncInvokeExp
    uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitFuncInvokeExp
    package: adaptive-expressions
    summary: |-
      Visit a parse tree produced by the `funcInvokeExp`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    fullName: visitFuncInvokeExp
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'visitFuncInvokeExp?: (ctx: FuncInvokeExpContext) => Result'
      return:
        type: '(ctx: FuncInvokeExpContext) =&gt; Result'
        description: ''
  - name: visitIdAtom
    uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitIdAtom
    package: adaptive-expressions
    summary: |-
      Visit a parse tree produced by the `idAtom`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    fullName: visitIdAtom
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'visitIdAtom?: (ctx: IdAtomContext) => Result'
      return:
        type: '(ctx: IdAtomContext) =&gt; Result'
        description: ''
  - name: visitIndexAccessExp
    uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitIndexAccessExp
    package: adaptive-expressions
    summary: |-
      Visit a parse tree produced by the `indexAccessExp`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    fullName: visitIndexAccessExp
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'visitIndexAccessExp?: (ctx: IndexAccessExpContext) => Result'
      return:
        type: '(ctx: IndexAccessExpContext) =&gt; Result'
        description: ''
  - name: visitJsonCreationExp
    uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitJsonCreationExp
    package: adaptive-expressions
    summary: |-
      Visit a parse tree produced by the `jsonCreationExp`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    fullName: visitJsonCreationExp
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'visitJsonCreationExp?: (ctx: JsonCreationExpContext) => Result'
      return:
        type: '(ctx: JsonCreationExpContext) =&gt; Result'
        description: ''
  - name: visitKey
    uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitKey
    package: adaptive-expressions
    summary: Visit a parse tree produced by `ExpressionAntlrParser.key`.
    fullName: visitKey
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'visitKey?: (ctx: KeyContext) => Result'
      return:
        type: '(ctx: KeyContext) =&gt; Result'
        description: ''
  - name: visitKeyValuePair
    uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitKeyValuePair
    package: adaptive-expressions
    summary: Visit a parse tree produced by `ExpressionAntlrParser.keyValuePair`.
    fullName: visitKeyValuePair
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'visitKeyValuePair?: (ctx: KeyValuePairContext) => Result'
      return:
        type: '(ctx: KeyValuePairContext) =&gt; Result'
        description: ''
  - name: visitKeyValuePairList
    uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitKeyValuePairList
    package: adaptive-expressions
    summary: Visit a parse tree produced by `ExpressionAntlrParser.keyValuePairList`.
    fullName: visitKeyValuePairList
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'visitKeyValuePairList?: (ctx: KeyValuePairListContext) => Result'
      return:
        type: '(ctx: KeyValuePairListContext) =&gt; Result'
        description: ''
  - name: visitLambda
    uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitLambda
    package: adaptive-expressions
    summary: Visit a parse tree produced by `ExpressionAntlrParser.lambda`.
    fullName: visitLambda
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'visitLambda?: (ctx: LambdaContext) => Result'
      return:
        type: '(ctx: LambdaContext) =&gt; Result'
        description: ''
  - name: visitMemberAccessExp
    uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitMemberAccessExp
    package: adaptive-expressions
    summary: |-
      Visit a parse tree produced by the `memberAccessExp`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    fullName: visitMemberAccessExp
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'visitMemberAccessExp?: (ctx: MemberAccessExpContext) => Result'
      return:
        type: '(ctx: MemberAccessExpContext) =&gt; Result'
        description: ''
  - name: visitNumericAtom
    uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitNumericAtom
    package: adaptive-expressions
    summary: |-
      Visit a parse tree produced by the `numericAtom`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    fullName: visitNumericAtom
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'visitNumericAtom?: (ctx: NumericAtomContext) => Result'
      return:
        type: '(ctx: NumericAtomContext) =&gt; Result'
        description: ''
  - name: visitParenthesisExp
    uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitParenthesisExp
    package: adaptive-expressions
    summary: |-
      Visit a parse tree produced by the `parenthesisExp`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    fullName: visitParenthesisExp
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'visitParenthesisExp?: (ctx: ParenthesisExpContext) => Result'
      return:
        type: '(ctx: ParenthesisExpContext) =&gt; Result'
        description: ''
  - name: visitPrimaryExp
    uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitPrimaryExp
    package: adaptive-expressions
    summary: |-
      Visit a parse tree produced by the `primaryExp`
      labeled alternative in `ExpressionAntlrParser.expression`.
    fullName: visitPrimaryExp
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'visitPrimaryExp?: (ctx: PrimaryExpContext) => Result'
      return:
        type: '(ctx: PrimaryExpContext) =&gt; Result'
        description: ''
  - name: visitPrimaryExpression
    uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitPrimaryExpression
    package: adaptive-expressions
    summary: Visit a parse tree produced by `ExpressionAntlrParser.primaryExpression`.
    fullName: visitPrimaryExpression
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'visitPrimaryExpression?: (ctx: PrimaryExpressionContext) => Result'
      return:
        type: '(ctx: PrimaryExpressionContext) =&gt; Result'
        description: ''
  - name: visitStringAtom
    uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitStringAtom
    package: adaptive-expressions
    summary: |-
      Visit a parse tree produced by the `stringAtom`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    fullName: visitStringAtom
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'visitStringAtom?: (ctx: StringAtomContext) => Result'
      return:
        type: '(ctx: StringAtomContext) =&gt; Result'
        description: ''
  - name: visitStringInterpolation
    uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitStringInterpolation
    package: adaptive-expressions
    summary: >-
      Visit a parse tree produced by
      `ExpressionAntlrParser.stringInterpolation`.
    fullName: visitStringInterpolation
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'visitStringInterpolation?: (ctx: StringInterpolationContext) => Result'
      return:
        type: '(ctx: StringInterpolationContext) =&gt; Result'
        description: ''
  - name: visitStringInterpolationAtom
    uid: >-
      adaptive-expressions.ExpressionAntlrParserVisitor.visitStringInterpolationAtom
    package: adaptive-expressions
    summary: |-
      Visit a parse tree produced by the `stringInterpolationAtom`
      labeled alternative in `ExpressionAntlrParser.primaryExpression`.
    fullName: visitStringInterpolationAtom
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        visitStringInterpolationAtom?: (ctx: StringInterpolationAtomContext) =>
        Result
      return:
        type: '(ctx: StringInterpolationAtomContext) =&gt; Result'
        description: ''
  - name: visitTextContent
    uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitTextContent
    package: adaptive-expressions
    summary: Visit a parse tree produced by `ExpressionAntlrParser.textContent`.
    fullName: visitTextContent
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'visitTextContent?: (ctx: TextContentContext) => Result'
      return:
        type: '(ctx: TextContentContext) =&gt; Result'
        description: ''
  - name: visitUnaryOpExp
    uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitUnaryOpExp
    package: adaptive-expressions
    summary: |-
      Visit a parse tree produced by the `unaryOpExp`
      labeled alternative in `ExpressionAntlrParser.expression`.
    fullName: visitUnaryOpExp
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'visitUnaryOpExp?: (ctx: UnaryOpExpContext) => Result'
      return:
        type: '(ctx: UnaryOpExpContext) =&gt; Result'
        description: ''
methods:
  - name: visit(ParseTree)
    uid: adaptive-expressions.ExpressionAntlrParserVisitor.visit
    package: adaptive-expressions
    summary: 'Visit a parse tree, and return a user-defined result of the operation.'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function visit(tree: ParseTree)'
      parameters:
        - id: tree
          type: ParseTree
          description: 'The <xref:ParseTree> to visit.'
      return:
        type: Result
        description: The result of visiting the parse tree.
  - name: visitChildren(RuleNode)
    uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitChildren
    package: adaptive-expressions
    summary: |-
      Visit the children of a node, and return a user-defined result
      of the operation.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function visitChildren(node: RuleNode)'
      parameters:
        - id: node
          type: RuleNode
          description: 'The <xref:RuleNode> whose children should be visited.'
      return:
        type: Result
        description: The result of visiting the children of the node.
  - name: visitErrorNode(ErrorNode)
    uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitErrorNode
    package: adaptive-expressions
    summary: 'Visit an error node, and return a user-defined result of the operation.'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function visitErrorNode(node: ErrorNode)'
      parameters:
        - id: node
          type: ErrorNode
          description: 'The <xref:ErrorNode> to visit.'
      return:
        type: Result
        description: The result of visiting the node.
  - name: visitTerminal(TerminalNode)
    uid: adaptive-expressions.ExpressionAntlrParserVisitor.visitTerminal
    package: adaptive-expressions
    summary: 'Visit a terminal node, and return a user-defined result of the operation.'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function visitTerminal(node: TerminalNode)'
      parameters:
        - id: node
          type: TerminalNode
          description: 'The <xref:TerminalNode> to visit.'
      return:
        type: Result
        description: The result of visiting the node.
extends: ParseTreeVisitor&lt;Result&gt;
