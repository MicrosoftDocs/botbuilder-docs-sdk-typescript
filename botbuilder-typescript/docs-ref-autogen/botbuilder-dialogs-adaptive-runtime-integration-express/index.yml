### YamlMime:TSPackage
uid: botbuilder-dialogs-adaptive-runtime-integration-express
name: botbuilder-dialogs-adaptive-runtime-integration-express
summary: ''
type: package
typeAliases:
  - botbuilder-dialogs-adaptive-runtime-integration-express.Options
functions:
  - name: >-
      makeApp(ServiceCollection, Configuration, string, Partial<{
      connectorClientOptions: ConnectorClientOptions, logErrors: boolean,
      messagingEndpointPath: string, port: string | number,
      skillsEndpointPrefix: string, staticDirectory: string }>, Application)
    uid: botbuilder-dialogs-adaptive-runtime-integration-express.makeApp
    package: botbuilder-dialogs-adaptive-runtime-integration-express
    summary: Create an Express App using the runtime Express integration.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function makeApp(services: ServiceCollection, configuration:
        Configuration, applicationRoot: string, options?: Partial<{
        connectorClientOptions: ConnectorClientOptions, logErrors: boolean,
        messagingEndpointPath: string, port: string | number,
        skillsEndpointPrefix: string, staticDirectory: string }>, app?:
        Application): Promise<[Application, (callback?: () => void) => Server]>
      parameters:
        - id: services
          type: ServiceCollection
          description: runtime service collection
        - id: configuration
          type: Configuration
          description: runtime configuration
        - id: applicationRoot
          type: string
          description: application root directory
        - id: options
          type: >-
            Partial&lt;{ connectorClientOptions: ConnectorClientOptions,
            logErrors: boolean, messagingEndpointPath: string, port: string |
            number, skillsEndpointPrefix: string, staticDirectory: string }&gt;
          description: options bag for configuring Express Application
        - id: app
          type: Application
          description: optional predefined express app, useful to register middleware
      return:
        description: >-
          the Express Application and a function to start the App & handle
          "upgrade" requests for Streaming
        type: 'Promise&lt;[Application, (callback?: () =&gt; void) =&gt; Server]&gt;'
  - name: >-
      start(string, string, Partial<{ connectorClientOptions:
      ConnectorClientOptions, logErrors: boolean, messagingEndpointPath: string,
      port: string | number, skillsEndpointPrefix: string, staticDirectory:
      string }>)
    uid: botbuilder-dialogs-adaptive-runtime-integration-express.start
    package: botbuilder-dialogs-adaptive-runtime-integration-express
    summary: Start a bot using the runtime Express integration.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function start(applicationRoot: string, settingsDirectory: string,
        options?: Partial<{ connectorClientOptions: ConnectorClientOptions,
        logErrors: boolean, messagingEndpointPath: string, port: string |
        number, skillsEndpointPrefix: string, staticDirectory: string }>):
        Promise<void>
      parameters:
        - id: applicationRoot
          type: string
          description: application root directory
        - id: settingsDirectory
          type: string
          description: settings directory
        - id: options
          type: >-
            Partial&lt;{ connectorClientOptions: ConnectorClientOptions,
            logErrors: boolean, messagingEndpointPath: string, port: string |
            number, skillsEndpointPrefix: string, staticDirectory: string }&gt;
          description: options bag
      return:
        description: ''
        type: Promise&lt;void&gt;
