### YamlMime:TSType
name: NodeWebSocket
uid: botframework-streaming.NodeWebSocket
package: botframework-streaming
summary: ''
fullName: NodeWebSocket
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: NodeWebSocket(WebSocket)
    uid: botframework-streaming.NodeWebSocket.constructor
    package: botframework-streaming
    summary: >-
      Creates a new instance of the
      [NodeWebSocket](xref:botframework-streaming.NodeWebSocket) class.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new NodeWebSocket(wsSocket?: WebSocket)'
      parameters:
        - id: wsSocket
          type: WebSocket
          description: ''
properties:
  - name: isConnected
    uid: botframework-streaming.NodeWebSocket.isConnected
    package: botframework-streaming
    summary: True if the 'ws' WebSocket is currently connected.
    fullName: isConnected
    isPreview: false
    isDeprecated: false
    syntax:
      content: boolean isConnected
      return:
        type: boolean
        description: ''
methods:
  - name: 'close(number, string)'
    uid: botframework-streaming.NodeWebSocket.close
    package: botframework-streaming
    summary: Close the socket.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function close(code?: number, data?: string)'
      parameters:
        - id: code
          type: number
          description: ''
        - id: data
          type: string
          description: |+

  - name: 'connect(any, number)'
    uid: botframework-streaming.NodeWebSocket.connect
    package: botframework-streaming
    summary: Connects to the supporting socket using WebSocket protocol.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function connect(serverAddress: any, port: number)'
      parameters:
        - id: serverAddress
          type: any
          description: The address the server is listening on.
        - id: port
          type: number
          description: |
            The port the server is listening on, defaults to 8082.
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: 'create(INodeIncomingMessage, INodeSocket, INodeBuffer)'
    uid: botframework-streaming.NodeWebSocket.create
    package: botframework-streaming
    summary: 'Create and set a `ws` WebSocket with an HTTP Request, Socket and Buffer.'
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function create(req: INodeIncomingMessage, socket: INodeSocket, head:
        INodeBuffer)
      parameters:
        - id: req
          type: <xref uid="botframework-streaming.INodeIncomingMessage" />
          description: INodeIncomingMessage
        - id: socket
          type: <xref uid="botframework-streaming.INodeSocket" />
          description: INodeSocket
        - id: head
          type: <xref uid="botframework-streaming.INodeBuffer" />
          description: |
            INodeBuffer
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: 'setOnCloseHandler((x: any) => void)'
    uid: botframework-streaming.NodeWebSocket.setOnCloseHandler
    package: botframework-streaming
    summary: Set the callback to call when encountering socket closures.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setOnCloseHandler(handler: (x: any) => void)'
      parameters:
        - id: handler
          type: '(x: any) =&gt; void'
          description: ''
  - name: 'setOnErrorHandler((x: any) => void)'
    uid: botframework-streaming.NodeWebSocket.setOnErrorHandler
    package: botframework-streaming
    summary: Set the callback to call when encountering errors.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setOnErrorHandler(handler: (x: any) => void)'
      parameters:
        - id: handler
          type: '(x: any) =&gt; void'
          description: ''
  - name: 'setOnMessageHandler((x: any) => void)'
    uid: botframework-streaming.NodeWebSocket.setOnMessageHandler
    package: botframework-streaming
    summary: >-
      Set the handler for `'data'` and `'message'` events received on the
      socket.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setOnMessageHandler(handler: (x: any) => void)'
      parameters:
        - id: handler
          type: '(x: any) =&gt; void'
          description: ''
  - name: write(INodeBuffer)
    uid: botframework-streaming.NodeWebSocket.write
    package: botframework-streaming
    summary: Writes a buffer to the socket and sends it.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function write(buffer: INodeBuffer)'
      parameters:
        - id: buffer
          type: <xref uid="botframework-streaming.INodeBuffer" />
          description: |
            The buffer of data to send across the connection.
