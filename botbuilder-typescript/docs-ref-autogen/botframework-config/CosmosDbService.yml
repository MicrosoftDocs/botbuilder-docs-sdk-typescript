### YamlMime:UniversalReference
items:
  - uid: botframework-config.CosmosDbService
    name: CosmosDbService
    fullName: CosmosDbService
    children:
      - botframework-config.CosmosDbService.collection
      - botframework-config.CosmosDbService.constructor
      - botframework-config.CosmosDbService.database
      - botframework-config.CosmosDbService.decrypt
      - botframework-config.CosmosDbService.encrypt
      - botframework-config.CosmosDbService.endpoint
      - botframework-config.CosmosDbService.id
      - botframework-config.CosmosDbService.key
      - botframework-config.CosmosDbService.name
      - botframework-config.CosmosDbService.resourceGroup
      - botframework-config.CosmosDbService.serviceName
      - botframework-config.CosmosDbService.subscriptionId
      - botframework-config.CosmosDbService.tenantId
      - botframework-config.CosmosDbService.toJSON
      - botframework-config.CosmosDbService.type
    langs:
      - typeScript
    type: class
    summary: Defines a CosmosDB service connection.
    extends:
      name: botframework-config.AzureService
    package: botframework-config
  - uid: botframework-config.CosmosDbService.collection
    name: collection
    fullName: collection
    children: []
    langs:
      - typeScript
    type: property
    summary: Collection name.
    syntax:
      content: 'collection: string'
      return:
        type:
          - string
        description: ''
    package: botframework-config
  - uid: botframework-config.CosmosDbService.constructor
    name: CosmosDbService(ICosmosDBService)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates a new CosmosDBService instance.
    syntax:
      content: 'new CosmosDbService(source?: ICosmosDBService)'
      parameters:
        - id: source
          type:
            - botframework-config.ICosmosDBService
          description: |
            (Optional) JSON based service definition.
          optional: true
    package: botframework-config
  - uid: botframework-config.CosmosDbService.database
    name: database
    fullName: database
    children: []
    langs:
      - typeScript
    type: property
    summary: Database name.
    syntax:
      content: 'database: string'
      return:
        type:
          - string
        description: ''
    package: botframework-config
  - uid: botframework-config.CosmosDbService.decrypt
    name: 'decrypt(string, (value: string, secret: string) => string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function decrypt(secret: string, decryptString: (value: string, secret:
        string) => string)
      parameters:
        - id: secret
          type:
            - string
          description: ''
        - id: decryptString
          type:
            - '(value: string, secret: string) => string'
          description: ''
    package: botframework-config
  - uid: botframework-config.CosmosDbService.encrypt
    name: 'encrypt(string, (value: string, secret: string) => string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function encrypt(secret: string, encryptString: (value: string, secret:
        string) => string)
      parameters:
        - id: secret
          type:
            - string
          description: ''
        - id: encryptString
          type:
            - '(value: string, secret: string) => string'
          description: ''
    package: botframework-config
  - uid: botframework-config.CosmosDbService.endpoint
    name: endpoint
    fullName: endpoint
    children: []
    langs:
      - typeScript
    type: property
    summary: Endpoint/uri for CosmosDB.
    syntax:
      content: 'endpoint: string'
      return:
        type:
          - string
        description: ''
    package: botframework-config
  - uid: botframework-config.CosmosDbService.id
    name: id
    fullName: id
    children: []
    langs:
      - typeScript
    type: property
    summary: Unique Id for the service.
    syntax:
      content: 'id: string'
      return:
        type:
          - string
        description: ''
    package: botframework-config
  - uid: botframework-config.CosmosDbService.key
    name: key
    fullName: key
    children: []
    langs:
      - typeScript
    type: property
    summary: Key for accessing CosmosDB.
    syntax:
      content: 'key: string'
      return:
        type:
          - string
        description: ''
    package: botframework-config
  - uid: botframework-config.CosmosDbService.name
    name: name
    fullName: name
    children: []
    langs:
      - typeScript
    type: property
    summary: Friendly name for the service.
    syntax:
      content: 'name: string'
      return:
        type:
          - string
        description: ''
    package: botframework-config
  - uid: botframework-config.CosmosDbService.resourceGroup
    name: resourceGroup
    fullName: resourceGroup
    children: []
    langs:
      - typeScript
    type: property
    summary: Resource group for azure.
    syntax:
      content: 'resourceGroup: string'
      return:
        type:
          - string
        description: ''
    package: botframework-config
  - uid: botframework-config.CosmosDbService.serviceName
    name: serviceName
    fullName: serviceName
    children: []
    langs:
      - typeScript
    type: property
    summary: Name of the service.
    syntax:
      content: 'serviceName: string'
      return:
        type:
          - string
        description: ''
    package: botframework-config
  - uid: botframework-config.CosmosDbService.subscriptionId
    name: subscriptionId
    fullName: subscriptionId
    children: []
    langs:
      - typeScript
    type: property
    summary: Subscription ID for azure.
    syntax:
      content: 'subscriptionId: string'
      return:
        type:
          - string
        description: ''
    package: botframework-config
  - uid: botframework-config.CosmosDbService.tenantId
    name: tenantId
    fullName: tenantId
    children: []
    langs:
      - typeScript
    type: property
    summary: Tenant ID for azure.
    syntax:
      content: 'tenantId: string'
      return:
        type:
          - string
        description: ''
    package: botframework-config
  - uid: botframework-config.CosmosDbService.toJSON
    name: toJSON()
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns a JSON based version of the model for saving to disk.
    syntax:
      content: function toJSON()
      parameters: []
      return:
        type:
          - botframework-config.IConnectedService
        description: ''
    package: botframework-config
  - uid: botframework-config.CosmosDbService.type
    name: type
    fullName: type
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'type?: ServiceTypes'
      return:
        type:
          - botframework-config.ServiceTypes
        description: ''
    package: botframework-config
references:
  - uid: botframework-config.AzureService
    name: AzureService
    spec.typeScript:
      - name: AzureService
        fullName: AzureService
        uid: botframework-config.AzureService
  - uid: botframework-config.ICosmosDBService
    name: ICosmosDBService
    spec.typeScript:
      - name: ICosmosDBService
        fullName: ICosmosDBService
        uid: botframework-config.ICosmosDBService
  - uid: botframework-config.ServiceTypes
    name: ServiceTypes
    spec.typeScript:
      - name: ServiceTypes
        fullName: ServiceTypes
        uid: botframework-config.ServiceTypes
  - uid: botframework-config.IConnectedService
    name: IConnectedService
    spec.typeScript:
      - name: IConnectedService
        fullName: IConnectedService
        uid: botframework-config.IConnectedService
