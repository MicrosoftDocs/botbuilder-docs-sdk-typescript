### YamlMime:UniversalReference
items:
  - uid: botframework-config.BotConfiguration
    name: BotConfiguration
    fullName: BotConfiguration
    children:
      - botframework-config.BotConfiguration.constructor
      - botframework-config.BotConfiguration.clearSecret
      - botframework-config.BotConfiguration.connectService
      - botframework-config.BotConfiguration.decrypt
      - botframework-config.BotConfiguration.description
      - botframework-config.BotConfiguration.disconnectService
      - botframework-config.BotConfiguration.disconnectServiceByNameOrId
      - botframework-config.BotConfiguration.encrypt
      - botframework-config.BotConfiguration.findService
      - botframework-config.BotConfiguration.findServiceByNameOrId
      - botframework-config.BotConfiguration.fromJSON
      - botframework-config.BotConfiguration.generateKey
      - botframework-config.BotConfiguration.getPath
      - botframework-config.BotConfiguration.load
      - botframework-config.BotConfiguration.loadBotFromFolder
      - botframework-config.BotConfiguration.loadBotFromFolderSync
      - botframework-config.BotConfiguration.loadSync
      - botframework-config.BotConfiguration.name
      - botframework-config.BotConfiguration.padlock
      - botframework-config.BotConfiguration.save
      - botframework-config.BotConfiguration.saveAs
      - botframework-config.BotConfiguration.saveAsSync
      - botframework-config.BotConfiguration.saveSync
      - botframework-config.BotConfiguration.serviceFromJSON
      - botframework-config.BotConfiguration.services
      - botframework-config.BotConfiguration.toJSON
      - botframework-config.BotConfiguration.validateSecret
      - botframework-config.BotConfiguration.version
    langs:
      - typeScript
    type: class
    summary: BotConfiguration represents configuration information for a bot.
    extends:
      name: botframework-config.BotConfigurationBase
    package: botframework-config
    remarks: >-
      It is typically loaded from a .bot file on disk. This class implements
      methods for encrypting

      and manipulating the in-memory representation of the configuration.
  - uid: botframework-config.BotConfiguration.constructor
    name: BotConfiguration()
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates a new BotConfigurationBase instance.
    syntax:
      content: new BotConfiguration()
      parameters: []
    package: botframework-config
  - uid: botframework-config.BotConfiguration.clearSecret
    name: clearSecret()
    children: []
    type: method
    langs:
      - typeScript
    summary: Clear secret.
    syntax:
      content: function clearSecret()
      parameters: []
    package: botframework-config
  - uid: botframework-config.BotConfiguration.connectService
    name: connectService(IConnectedService)
    children: []
    type: method
    langs:
      - typeScript
    summary: Connect a service to the bot file.
    syntax:
      content: 'function connectService(newService: IConnectedService)'
      parameters:
        - id: newService
          type:
            - botframework-config.IConnectedService
          description: Service to add.
      return:
        type:
          - string
        description: Assigned ID for the service.
    package: botframework-config
  - uid: botframework-config.BotConfiguration.decrypt
    name: decrypt(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Decrypt all values in the in memory config.
    syntax:
      content: 'function decrypt(secret?: string)'
      parameters:
        - id: secret
          type:
            - string
          description: |
            Secret to decrypt.
          optional: true
    package: botframework-config
  - uid: botframework-config.BotConfiguration.description
    name: description
    fullName: description
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'description: string'
      return:
        type:
          - string
        description: ''
    package: botframework-config
  - uid: botframework-config.BotConfiguration.disconnectService
    name: disconnectService(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Remove service by id.
    syntax:
      content: 'function disconnectService(id: string)'
      parameters:
        - id: id
          type:
            - string
          description: ''
    package: botframework-config
  - uid: botframework-config.BotConfiguration.disconnectServiceByNameOrId
    name: disconnectServiceByNameOrId(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Remove service by name or id.
    syntax:
      content: 'function disconnectServiceByNameOrId(nameOrId: string)'
      parameters:
        - id: nameOrId
          type:
            - string
          description: |
            Name or ID of the service to remove.
      return:
        type:
          - botframework-config.IConnectedService
        description: ''
    package: botframework-config
  - uid: botframework-config.BotConfiguration.encrypt
    name: encrypt(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Encrypt all values in the in memory config.
    syntax:
      content: 'function encrypt(secret: string)'
      parameters:
        - id: secret
          type:
            - string
          description: |
            Secret to encrypt.
    package: botframework-config
  - uid: botframework-config.BotConfiguration.findService
    name: findService(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Find service by id.
    syntax:
      content: 'function findService(id: string)'
      parameters:
        - id: id
          type:
            - string
          description: |
            ID of the service to find.
      return:
        type:
          - botframework-config.IConnectedService
        description: ''
    package: botframework-config
  - uid: botframework-config.BotConfiguration.findServiceByNameOrId
    name: findServiceByNameOrId(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Find service by name or id.
    syntax:
      content: 'function findServiceByNameOrId(nameOrId: string)'
      parameters:
        - id: nameOrId
          type:
            - string
          description: |
            Name or ID of the service to find.
      return:
        type:
          - botframework-config.IConnectedService
        description: ''
    package: botframework-config
  - uid: botframework-config.BotConfiguration.fromJSON
    name: fromJSON(Partial<IBotConfiguration>)
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns a new BotConfiguration instance given a JSON based configuration.
    syntax:
      content: 'static function fromJSON(source?: Partial<IBotConfiguration>)'
      parameters:
        - id: source
          type:
            - Partial<botframework-config.IBotConfiguration>
          description: |
            JSON based configuration.
          optional: true
      return:
        type:
          - botframework-config.BotConfiguration
        description: ''
    package: botframework-config
  - uid: botframework-config.BotConfiguration.generateKey
    name: generateKey()
    children: []
    type: method
    langs:
      - typeScript
    summary: Generate a new key suitable for encrypting.
    syntax:
      content: static function generateKey()
      parameters: []
      return:
        type:
          - string
        description: ''
    package: botframework-config
  - uid: botframework-config.BotConfiguration.getPath
    name: getPath()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Return the path that this config was loaded from.  .save() will save to
      this path.
    syntax:
      content: function getPath()
      parameters: []
      return:
        type:
          - string
        description: ''
    package: botframework-config
  - uid: botframework-config.BotConfiguration.load
    name: 'load(string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Load the configuration from a .bot file.
    syntax:
      content: 'static function load(botpath: string, secret?: string)'
      parameters:
        - id: botpath
          type:
            - string
          description: Path to bot file.
        - id: secret
          type:
            - string
          description: |
            (Optional) secret used to decrypt the bot file.
          optional: true
      return:
        type:
          - Promise<botframework-config.BotConfiguration>
        description: ''
    package: botframework-config
  - uid: botframework-config.BotConfiguration.loadBotFromFolder
    name: 'loadBotFromFolder(string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Load the bot configuration by looking in a folder and loading the first
      .bot file in the

      folder.
    syntax:
      content: 'static function loadBotFromFolder(folder?: string, secret?: string)'
      parameters:
        - id: folder
          type:
            - string
          description: >-
            (Optional) folder to look for bot files. If not specified the
            current working directory is used.
          optional: true
        - id: secret
          type:
            - string
          description: |
            (Optional) secret used to decrypt the bot file.
          optional: true
      return:
        type:
          - Promise<botframework-config.BotConfiguration>
        description: ''
    package: botframework-config
  - uid: botframework-config.BotConfiguration.loadBotFromFolderSync
    name: 'loadBotFromFolderSync(string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Load the bot configuration by looking in a folder and loading the first
      .bot file in the

      folder. (blocking)
    syntax:
      content: 'static function loadBotFromFolderSync(folder?: string, secret?: string)'
      parameters:
        - id: folder
          type:
            - string
          description: >-
            (Optional) folder to look for bot files. If not specified the
            current working directory is used.
          optional: true
        - id: secret
          type:
            - string
          description: |
            (Optional) secret used to decrypt the bot file.
          optional: true
      return:
        type:
          - botframework-config.BotConfiguration
        description: ''
    package: botframework-config
  - uid: botframework-config.BotConfiguration.loadSync
    name: 'loadSync(string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Load the configuration from a .bot file. (blocking)
    syntax:
      content: 'static function loadSync(botpath: string, secret?: string)'
      parameters:
        - id: botpath
          type:
            - string
          description: Path to bot file.
        - id: secret
          type:
            - string
          description: |
            (Optional) secret used to decrypt the bot file.
          optional: true
      return:
        type:
          - botframework-config.BotConfiguration
        description: ''
    package: botframework-config
  - uid: botframework-config.BotConfiguration.name
    name: name
    fullName: name
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'name: string'
      return:
        type:
          - string
        description: ''
    package: botframework-config
  - uid: botframework-config.BotConfiguration.padlock
    name: padlock
    fullName: padlock
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'padlock: string'
      return:
        type:
          - string
        description: ''
    package: botframework-config
  - uid: botframework-config.BotConfiguration.save
    name: save(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Save the file with secret.
    syntax:
      content: 'function save(secret?: string)'
      parameters:
        - id: secret
          type:
            - string
          description: |
            (Optional) secret used to encrypt the bot file.
          optional: true
      return:
        type:
          - Promise<void>
        description: ''
    package: botframework-config
  - uid: botframework-config.BotConfiguration.saveAs
    name: 'saveAs(string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Save the configuration to a .bot file.
    syntax:
      content: 'function saveAs(botpath: string, secret?: string)'
      parameters:
        - id: botpath
          type:
            - string
          description: Path to bot file.
        - id: secret
          type:
            - string
          description: |
            (Optional) secret used to encrypt the bot file.
          optional: true
      return:
        type:
          - Promise<void>
        description: ''
    package: botframework-config
  - uid: botframework-config.BotConfiguration.saveAsSync
    name: 'saveAsSync(string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Save the configuration to a .bot file. (blocking)
    syntax:
      content: 'function saveAsSync(botpath: string, secret?: string)'
      parameters:
        - id: botpath
          type:
            - string
          description: Path to bot file.
        - id: secret
          type:
            - string
          description: |
            (Optional) secret used to encrypt the bot file.
          optional: true
    package: botframework-config
  - uid: botframework-config.BotConfiguration.saveSync
    name: saveSync(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Save the file with secret. (blocking)
    syntax:
      content: 'function saveSync(secret?: string)'
      parameters:
        - id: secret
          type:
            - string
          description: |
            (Optional) secret used to encrypt the bot file.
          optional: true
    package: botframework-config
  - uid: botframework-config.BotConfiguration.serviceFromJSON
    name: serviceFromJSON(IConnectedService)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns a ConnectedService instance given a JSON based service
      configuration.
    syntax:
      content: 'static function serviceFromJSON(service: IConnectedService)'
      parameters:
        - id: service
          type:
            - botframework-config.IConnectedService
          description: |
            JSON based service configuration.
      return:
        type:
          - botframework-config.ConnectedService
        description: ''
    package: botframework-config
  - uid: botframework-config.BotConfiguration.services
    name: services
    fullName: services
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'services: IConnectedService[]'
      return:
        type:
          - 'botframework-config.IConnectedService[]'
        description: ''
    package: botframework-config
  - uid: botframework-config.BotConfiguration.toJSON
    name: toJSON()
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns a JSON based version of the current bot.
    syntax:
      content: function toJSON()
      parameters: []
      return:
        type:
          - botframework-config.IBotConfiguration
        description: ''
    package: botframework-config
  - uid: botframework-config.BotConfiguration.validateSecret
    name: validateSecret(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Make sure secret is correct by decrypting the secretKey with it.
    syntax:
      content: 'function validateSecret(secret: string)'
      parameters:
        - id: secret
          type:
            - string
          description: |
            Secret to use.
    package: botframework-config
  - uid: botframework-config.BotConfiguration.version
    name: version
    fullName: version
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'version: string'
      return:
        type:
          - string
        description: ''
    package: botframework-config
references:
  - uid: botframework-config.BotConfigurationBase
    name: BotConfigurationBase
    spec.typeScript:
      - name: BotConfigurationBase
        fullName: BotConfigurationBase
        uid: botframework-config.BotConfigurationBase
  - uid: 'botframework-config.IConnectedService[]'
    name: 'IConnectedService[]'
    spec.typeScript:
      - name: IConnectedService
        fullName: IConnectedService
        uid: botframework-config.IConnectedService
      - name: '[]'
        fullName: '[]'
  - uid: botframework-config.IConnectedService
    name: IConnectedService
    spec.typeScript:
      - name: IConnectedService
        fullName: IConnectedService
        uid: botframework-config.IConnectedService
  - uid: botframework-config.IBotConfiguration
    name: IBotConfiguration
    spec.typeScript:
      - name: IBotConfiguration
        fullName: IBotConfiguration
        uid: botframework-config.IBotConfiguration
  - uid: Partial<botframework-config.IBotConfiguration>
    name: IBotConfiguration>
    spec.typeScript:
      - name: Partial<
        fullName: Partial<
      - name: IBotConfiguration
        fullName: IBotConfiguration
        uid: botframework-config.IBotConfiguration
      - name: '>'
        fullName: '>'
  - uid: botframework-config.BotConfiguration
    name: BotConfiguration
    spec.typeScript:
      - name: BotConfiguration
        fullName: BotConfiguration
        uid: botframework-config.BotConfiguration
  - uid: Promise<botframework-config.BotConfiguration>
    name: BotConfiguration>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: BotConfiguration
        fullName: BotConfiguration
        uid: botframework-config.BotConfiguration
      - name: '>'
        fullName: '>'
  - uid: botframework-config.ConnectedService
    name: ConnectedService
    spec.typeScript:
      - name: ConnectedService
        fullName: ConnectedService
        uid: botframework-config.ConnectedService
