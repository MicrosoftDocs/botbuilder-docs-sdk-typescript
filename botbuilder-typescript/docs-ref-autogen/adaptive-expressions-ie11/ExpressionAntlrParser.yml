### YamlMime:TSType
name: ExpressionAntlrParser
uid: adaptive-expressions-ie11.ExpressionAntlrParser
package: adaptive-expressions-ie11
summary: ''
fullName: ExpressionAntlrParser
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: ExpressionAntlrParser(TokenStream)
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.constructor
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'new ExpressionAntlrParser(input: TokenStream)'
      parameters:
        - id: input
          type: TokenStream
          description: ''
properties:
  - name: ARROW
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.ARROW
    package: adaptive-expressions-ie11
    summary: ''
    fullName: ARROW
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static ARROW: 27 = 27'
      return:
        description: ''
        type: '27'
  - name: ASTERISK
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.ASTERISK
    package: adaptive-expressions-ie11
    summary: ''
    fullName: ASTERISK
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static ASTERISK: 6 = 6'
      return:
        description: ''
        type: '6'
  - name: CLOSE_BRACKET
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.CLOSE_BRACKET
    package: adaptive-expressions-ie11
    summary: ''
    fullName: CLOSE_BRACKET
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static CLOSE_BRACKET: 19 = 19'
      return:
        description: ''
        type: '19'
  - name: CLOSE_CURLY_BRACKET
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.CLOSE_CURLY_BRACKET
    package: adaptive-expressions-ie11
    summary: ''
    fullName: CLOSE_CURLY_BRACKET
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static CLOSE_CURLY_BRACKET: 24 = 24'
      return:
        description: ''
        type: '24'
  - name: CLOSE_SQUARE_BRACKET
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.CLOSE_SQUARE_BRACKET
    package: adaptive-expressions-ie11
    summary: ''
    fullName: CLOSE_SQUARE_BRACKET
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static CLOSE_SQUARE_BRACKET: 22 = 22'
      return:
        description: ''
        type: '22'
  - name: COLON
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.COLON
    package: adaptive-expressions-ie11
    summary: ''
    fullName: COLON
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static COLON: 26 = 26'
      return:
        description: ''
        type: '26'
  - name: COMMA
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.COMMA
    package: adaptive-expressions-ie11
    summary: ''
    fullName: COMMA
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static COMMA: 25 = 25'
      return:
        description: ''
        type: '25'
  - name: DOT
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.DOT
    package: adaptive-expressions-ie11
    summary: ''
    fullName: DOT
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static DOT: 20 = 20'
      return:
        description: ''
        type: '20'
  - name: DOUBLE_AND
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.DOUBLE_AND
    package: adaptive-expressions-ie11
    summary: ''
    fullName: DOUBLE_AND
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static DOUBLE_AND: 12 = 12'
      return:
        description: ''
        type: '12'
  - name: DOUBLE_EQUAL
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.DOUBLE_EQUAL
    package: adaptive-expressions-ie11
    summary: ''
    fullName: DOUBLE_EQUAL
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static DOUBLE_EQUAL: 9 = 9'
      return:
        description: ''
        type: '9'
  - name: DOUBLE_VERTICAL_CYLINDER
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.DOUBLE_VERTICAL_CYLINDER
    package: adaptive-expressions-ie11
    summary: ''
    fullName: DOUBLE_VERTICAL_CYLINDER
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static DOUBLE_VERTICAL_CYLINDER: 13 = 13'
      return:
        description: ''
        type: '13'
  - name: ESCAPE_CHARACTER
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.ESCAPE_CHARACTER
    package: adaptive-expressions-ie11
    summary: ''
    fullName: ESCAPE_CHARACTER
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static ESCAPE_CHARACTER: 37 = 37'
      return:
        description: ''
        type: '37'
  - name: grammarFileName
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.grammarFileName
    package: adaptive-expressions-ie11
    summary: ''
    fullName: grammarFileName
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'grammarFileName: string'
      return:
        description: ''
        type: string
  - name: IDENTIFIER
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.IDENTIFIER
    package: adaptive-expressions-ie11
    summary: ''
    fullName: IDENTIFIER
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static IDENTIFIER: 32 = 32'
      return:
        description: ''
        type: '32'
  - name: INVALID_TOKEN_DEFAULT_MODE
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.INVALID_TOKEN_DEFAULT_MODE
    package: adaptive-expressions-ie11
    summary: ''
    fullName: INVALID_TOKEN_DEFAULT_MODE
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static INVALID_TOKEN_DEFAULT_MODE: 35 = 35'
      return:
        description: ''
        type: '35'
  - name: LESS_OR_EQUAl
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.LESS_OR_EQUAl
    package: adaptive-expressions-ie11
    summary: ''
    fullName: LESS_OR_EQUAl
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static LESS_OR_EQUAl: 16 = 16'
      return:
        description: ''
        type: '16'
  - name: LESS_THAN
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.LESS_THAN
    package: adaptive-expressions-ie11
    summary: ''
    fullName: LESS_THAN
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static LESS_THAN: 14 = 14'
      return:
        description: ''
        type: '14'
  - name: MORE_OR_EQUAL
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.MORE_OR_EQUAL
    package: adaptive-expressions-ie11
    summary: ''
    fullName: MORE_OR_EQUAL
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static MORE_OR_EQUAL: 17 = 17'
      return:
        description: ''
        type: '17'
  - name: MORE_THAN
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.MORE_THAN
    package: adaptive-expressions-ie11
    summary: ''
    fullName: MORE_THAN
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static MORE_THAN: 15 = 15'
      return:
        description: ''
        type: '15'
  - name: NEWLINE
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.NEWLINE
    package: adaptive-expressions-ie11
    summary: ''
    fullName: NEWLINE
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static NEWLINE: 33 = 33'
      return:
        description: ''
        type: '33'
  - name: NON
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.NON
    package: adaptive-expressions-ie11
    summary: ''
    fullName: NON
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static NON: 4 = 4'
      return:
        description: ''
        type: '4'
  - name: NOT_EQUAL
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.NOT_EQUAL
    package: adaptive-expressions-ie11
    summary: ''
    fullName: NOT_EQUAL
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static NOT_EQUAL: 10 = 10'
      return:
        description: ''
        type: '10'
  - name: NULL_COALESCE
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.NULL_COALESCE
    package: adaptive-expressions-ie11
    summary: ''
    fullName: NULL_COALESCE
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static NULL_COALESCE: 28 = 28'
      return:
        description: ''
        type: '28'
  - name: NUMBER
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.NUMBER
    package: adaptive-expressions-ie11
    summary: ''
    fullName: NUMBER
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static NUMBER: 30 = 30'
      return:
        description: ''
        type: '30'
  - name: OPEN_BRACKET
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.OPEN_BRACKET
    package: adaptive-expressions-ie11
    summary: ''
    fullName: OPEN_BRACKET
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static OPEN_BRACKET: 18 = 18'
      return:
        description: ''
        type: '18'
  - name: OPEN_CURLY_BRACKET
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.OPEN_CURLY_BRACKET
    package: adaptive-expressions-ie11
    summary: ''
    fullName: OPEN_CURLY_BRACKET
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static OPEN_CURLY_BRACKET: 23 = 23'
      return:
        description: ''
        type: '23'
  - name: OPEN_SQUARE_BRACKET
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.OPEN_SQUARE_BRACKET
    package: adaptive-expressions-ie11
    summary: ''
    fullName: OPEN_SQUARE_BRACKET
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static OPEN_SQUARE_BRACKET: 21 = 21'
      return:
        description: ''
        type: '21'
  - name: PERCENT
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.PERCENT
    package: adaptive-expressions-ie11
    summary: ''
    fullName: PERCENT
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static PERCENT: 8 = 8'
      return:
        description: ''
        type: '8'
  - name: PLUS
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.PLUS
    package: adaptive-expressions-ie11
    summary: ''
    fullName: PLUS
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static PLUS: 2 = 2'
      return:
        description: ''
        type: '2'
  - name: QUESTION_MARK
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.QUESTION_MARK
    package: adaptive-expressions-ie11
    summary: ''
    fullName: QUESTION_MARK
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static QUESTION_MARK: 29 = 29'
      return:
        description: ''
        type: '29'
  - name: ruleNames
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.ruleNames
    package: adaptive-expressions-ie11
    summary: ''
    fullName: ruleNames
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'ruleNames: string[]'
      return:
        description: ''
        type: string[]
  - name: ruleNames
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.ruleNames
    package: adaptive-expressions-ie11
    summary: ''
    fullName: ruleNames
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static ruleNames: string[]'
      return:
        description: ''
        type: string[]
  - name: RULE_argsList
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.RULE_argsList
    package: adaptive-expressions-ie11
    summary: ''
    fullName: RULE_argsList
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static RULE_argsList: 5 = 5'
      return:
        description: ''
        type: '5'
  - name: RULE_expression
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.RULE_expression
    package: adaptive-expressions-ie11
    summary: ''
    fullName: RULE_expression
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static RULE_expression: 1 = 1'
      return:
        description: ''
        type: '1'
  - name: RULE_file
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.RULE_file
    package: adaptive-expressions-ie11
    summary: ''
    fullName: RULE_file
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static RULE_file: 0 = 0'
      return:
        description: ''
        type: '0'
  - name: RULE_key
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.RULE_key
    package: adaptive-expressions-ie11
    summary: ''
    fullName: RULE_key
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static RULE_key: 9 = 9'
      return:
        description: ''
        type: '9'
  - name: RULE_keyValuePair
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.RULE_keyValuePair
    package: adaptive-expressions-ie11
    summary: ''
    fullName: RULE_keyValuePair
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static RULE_keyValuePair: 8 = 8'
      return:
        description: ''
        type: '8'
  - name: RULE_keyValuePairList
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.RULE_keyValuePairList
    package: adaptive-expressions-ie11
    summary: ''
    fullName: RULE_keyValuePairList
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static RULE_keyValuePairList: 7 = 7'
      return:
        description: ''
        type: '7'
  - name: RULE_lambda
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.RULE_lambda
    package: adaptive-expressions-ie11
    summary: ''
    fullName: RULE_lambda
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static RULE_lambda: 6 = 6'
      return:
        description: ''
        type: '6'
  - name: RULE_primaryExpression
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.RULE_primaryExpression
    package: adaptive-expressions-ie11
    summary: ''
    fullName: RULE_primaryExpression
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static RULE_primaryExpression: 2 = 2'
      return:
        description: ''
        type: '2'
  - name: RULE_stringInterpolation
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.RULE_stringInterpolation
    package: adaptive-expressions-ie11
    summary: ''
    fullName: RULE_stringInterpolation
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static RULE_stringInterpolation: 3 = 3'
      return:
        description: ''
        type: '3'
  - name: RULE_textContent
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.RULE_textContent
    package: adaptive-expressions-ie11
    summary: ''
    fullName: RULE_textContent
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static RULE_textContent: 4 = 4'
      return:
        description: ''
        type: '4'
  - name: serializedATN
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.serializedATN
    package: adaptive-expressions-ie11
    summary: ''
    fullName: serializedATN
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'serializedATN: string'
      return:
        description: ''
        type: string
  - name: SINGLE_AND
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.SINGLE_AND
    package: adaptive-expressions-ie11
    summary: ''
    fullName: SINGLE_AND
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static SINGLE_AND: 11 = 11'
      return:
        description: ''
        type: '11'
  - name: SLASH
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.SLASH
    package: adaptive-expressions-ie11
    summary: ''
    fullName: SLASH
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static SLASH: 7 = 7'
      return:
        description: ''
        type: '7'
  - name: STRING
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.STRING
    package: adaptive-expressions-ie11
    summary: ''
    fullName: STRING
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static STRING: 34 = 34'
      return:
        description: ''
        type: '34'
  - name: STRING_INTERPOLATION_START
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.STRING_INTERPOLATION_START
    package: adaptive-expressions-ie11
    summary: ''
    fullName: STRING_INTERPOLATION_START
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static STRING_INTERPOLATION_START: 1 = 1'
      return:
        description: ''
        type: '1'
  - name: SUBSTRACT
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.SUBSTRACT
    package: adaptive-expressions-ie11
    summary: ''
    fullName: SUBSTRACT
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static SUBSTRACT: 3 = 3'
      return:
        description: ''
        type: '3'
  - name: TEMPLATE
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.TEMPLATE
    package: adaptive-expressions-ie11
    summary: ''
    fullName: TEMPLATE
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static TEMPLATE: 36 = 36'
      return:
        description: ''
        type: '36'
  - name: TEXT_CONTENT
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.TEXT_CONTENT
    package: adaptive-expressions-ie11
    summary: ''
    fullName: TEXT_CONTENT
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static TEXT_CONTENT: 38 = 38'
      return:
        description: ''
        type: '38'
  - name: vocabulary
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.vocabulary
    package: adaptive-expressions-ie11
    summary: ''
    fullName: vocabulary
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'vocabulary: Vocabulary'
      return:
        description: ''
        type: Vocabulary
  - name: VOCABULARY
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.VOCABULARY
    package: adaptive-expressions-ie11
    summary: ''
    fullName: VOCABULARY
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static VOCABULARY: Vocabulary'
      return:
        description: ''
        type: Vocabulary
  - name: WHITESPACE
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.WHITESPACE
    package: adaptive-expressions-ie11
    summary: ''
    fullName: WHITESPACE
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static WHITESPACE: 31 = 31'
      return:
        description: ''
        type: '31'
  - name: XOR
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.XOR
    package: adaptive-expressions-ie11
    summary: ''
    fullName: XOR
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static XOR: 5 = 5'
      return:
        description: ''
        type: '5'
inheritedProperties:
  - name: atn
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.atn
    package: adaptive-expressions-ie11
    summary: >-
      Get the <xref:adaptive-expressions-ie11.CommonRegexLexer.serializedATN>
      used by the recognizer for prediction.
    fullName: atn
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'atn: ATN'
      return:
        description: >-
          The <xref:adaptive-expressions-ie11.CommonRegexLexer.serializedATN>
          used by the recognizer for prediction.
        type: ATN
    inheritanceDescription: <b>Inherited From</b> Parser.atn
  - name: buildParseTree
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.buildParseTree
    package: adaptive-expressions-ie11
    summary: |-
      Track the <xref:ParserRuleContext> objects during the parse and hook
      them up using the <xref:ParserRuleContext%23children> list so that it
      forms a parse tree. The <xref:ParserRuleContext> returned from the start
      rule represents the root of the parse tree.

      Note that if we are not building parse trees, rule contexts only point
      upwards. When a rule exits, it returns the context but that gets garbage
      collected if nobody holds a reference. It points upwards but nobody
      points at it.

      When we build parse trees, we are adding all of these contexts to
      <xref:ParserRuleContext%23children> list. Contexts are then not candidates
      for garbage collection.
    fullName: buildParseTree
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'buildParseTree: boolean'
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> Parser.buildParseTree
  - name: context
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.context
    package: adaptive-expressions-ie11
    summary: ''
    fullName: context
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'context: ParserRuleContext'
      return:
        description: ''
        type: ParserRuleContext
    inheritanceDescription: <b>Inherited From</b> Parser.context
  - name: currentToken
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.currentToken
    package: adaptive-expressions-ie11
    summary: |-
      Match needs to return the current input symbol, which gets put
       into the label for the associated token ref; e.g., x=ID.
    fullName: currentToken
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'currentToken: Token'
      return:
        description: ''
        type: Token
    inheritanceDescription: <b>Inherited From</b> Parser.currentToken
  - name: EOF
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.EOF
    package: adaptive-expressions-ie11
    summary: ''
    fullName: EOF
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static EOF: number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Parser.EOF
  - name: errorHandler
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.errorHandler
    package: adaptive-expressions-ie11
    summary: ''
    fullName: errorHandler
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'errorHandler: ANTLRErrorStrategy'
      return:
        description: ''
        type: ANTLRErrorStrategy
    inheritanceDescription: <b>Inherited From</b> Parser.errorHandler
  - name: inputStream
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.inputStream
    package: adaptive-expressions-ie11
    summary: Set the token stream and reset the parser.
    fullName: inputStream
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'inputStream: TokenStream'
      return:
        description: ''
        type: TokenStream
    inheritanceDescription: <b>Inherited From</b> Parser.inputStream
  - name: interpreter
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.interpreter
    package: adaptive-expressions-ie11
    summary: Set the ATN interpreter used by the recognizer for prediction.
    fullName: interpreter
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'interpreter: ParserATNSimulator'
      return:
        description: ''
        type: ParserATNSimulator
    inheritanceDescription: <b>Inherited From</b> Parser.interpreter
  - name: isMatchedEOF
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.isMatchedEOF
    package: adaptive-expressions-ie11
    summary: ''
    fullName: isMatchedEOF
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'isMatchedEOF: boolean'
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> Parser.isMatchedEOF
  - name: isTrace
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.isTrace
    package: adaptive-expressions-ie11
    summary: |-
      During a parse is sometimes useful to listen in on the rule entry and exit
       events as well as token matches. This is for quick and dirty debugging.
    fullName: isTrace
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'isTrace: boolean'
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> Parser.isTrace
  - name: numberOfSyntaxErrors
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.numberOfSyntaxErrors
    package: adaptive-expressions-ie11
    summary: |-
      Gets the number of syntax errors reported during parsing. This value is
      incremented each time <xref:%23notifyErrorListeners> is called.

      See #notifyErrorListeners
    fullName: numberOfSyntaxErrors
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'numberOfSyntaxErrors: number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Parser.numberOfSyntaxErrors
  - name: parseInfo
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.parseInfo
    package: adaptive-expressions-ie11
    summary: ''
    fullName: parseInfo
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'parseInfo: Promise<undefined | ParseInfo>'
      return:
        description: ''
        type: Promise&lt;undefined | ParseInfo&gt;
    inheritanceDescription: <b>Inherited From</b> Parser.parseInfo
  - name: precedence
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.precedence
    package: adaptive-expressions-ie11
    summary: Get the precedence level for the top-most precedence rule.
    fullName: precedence
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'precedence: number'
      return:
        description: |-
          The precedence level for the top-most precedence rule, or -1 if
          the parser context is not nested within a precedence rule.
        type: number
    inheritanceDescription: <b>Inherited From</b> Parser.precedence
  - name: ruleContext
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.ruleContext
    package: adaptive-expressions-ie11
    summary: ''
    fullName: ruleContext
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'ruleContext: ParserRuleContext'
      return:
        description: ''
        type: ParserRuleContext
    inheritanceDescription: <b>Inherited From</b> Parser.ruleContext
  - name: sourceName
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.sourceName
    package: adaptive-expressions-ie11
    summary: ''
    fullName: sourceName
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'sourceName: string'
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> Parser.sourceName
  - name: state
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.state
    package: adaptive-expressions-ie11
    summary: |-
      Indicate that the recognizer has changed internal state that is
       consistent with the ATN state passed in.  This way we always know
       where we are in the ATN as the parser goes along. The rule
       context objects form a stack that lets us see the stack of
       invoking rules. Combine this and we have complete ATN
       configuration information.
    fullName: state
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'state: number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Parser.state
  - name: tokenFactory
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.tokenFactory
    package: adaptive-expressions-ie11
    summary: ''
    fullName: tokenFactory
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'tokenFactory: TokenFactory'
      return:
        description: ''
        type: TokenFactory
    inheritanceDescription: <b>Inherited From</b> Parser.tokenFactory
inheritedMethods:
  - name: action(undefined | RuleContext, number, number)
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.action
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function action(_localctx: undefined | RuleContext, ruleIndex: number,
        actionIndex: number)
      parameters:
        - id: _localctx
          type: undefined | RuleContext
          description: ''
        - id: ruleIndex
          type: number
          description: ''
        - id: actionIndex
          type: number
          description: ''
    inheritanceDescription: <b>Inherited From</b> Parser.action
  - name: addErrorListener(ANTLRErrorListener<Token>)
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.addErrorListener
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function addErrorListener(listener: ANTLRErrorListener<Token>)'
      parameters:
        - id: listener
          type: ANTLRErrorListener&lt;Token&gt;
          description: ''
    inheritanceDescription: <b>Inherited From</b> Parser.addErrorListener
  - name: addParseListener(ParseTreeListener)
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.addParseListener
    package: adaptive-expressions-ie11
    summary: |-
      Registers `listener` to receive events during the parsing process.

      To support output-preserving grammar transformations (including but not
      limited to left-recursion removal, automated left-factoring, and
      optimized code generation), calls to listener methods during the parse
      may differ substantially from calls made by
      <xref:ParseTreeWalker%23DEFAULT> used after the parse is complete. In
      particular, rule entry and exit events may occur in a different order
      during the parse than after the parser. In addition, calls to certain
      rule entry methods may be omitted.

      With the following specific exceptions, calls to listener events are
      *deterministic*, i.e. for identical input the calls to listener
      methods will be the same.

      * Alterations to the grammar used to generate code may change the
        behavior of the listener calls.
      * Alterations to the command line options passed to ANTLR 4 when
        generating the parser may change the behavior of the listener calls.
      * Changing the version of the ANTLR Tool used to generate the parser
        may change the behavior of the listener calls.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function addParseListener(listener: ParseTreeListener)'
      parameters:
        - id: listener
          type: ParseTreeListener
          description: the listener to add
    inheritanceDescription: <b>Inherited From</b> Parser.addParseListener
  - name: compileParseTreePattern(string, number)
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.compileParseTreePattern
    package: adaptive-expressions-ie11
    summary: >-
      The preferred method of getting a tree pattern. For example, here's a

      sample use:


      ```

      let t: ParseTree = parser.expr();

      let p: ParseTreePattern = await parser.compileParseTreePattern("<ID>+0",
      MyParser.RULE_expr);

      let m: ParseTreeMatch = p.match(t);

      let id: string = m.get("ID");

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function compileParseTreePattern(pattern: string, patternRuleIndex:
        number): Promise<ParseTreePattern>
      parameters:
        - id: pattern
          type: string
          description: ''
        - id: patternRuleIndex
          type: number
          description: ''
      return:
        description: ''
        type: Promise&lt;ParseTreePattern&gt;
    inheritanceDescription: <b>Inherited From</b> Parser.compileParseTreePattern
  - name: compileParseTreePattern(string, number, Lexer)
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.compileParseTreePattern_1
    package: adaptive-expressions-ie11
    summary: >-
      The same as [int)](xref:%23compileParseTreePattern(String%2C) but specify
      a

      <xref:adaptive-expressions-ie11.CommonRegexLexer> rather than trying to
      deduce it from this parser.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function compileParseTreePattern(pattern: string, patternRuleIndex:
        number, lexer?: Lexer): Promise<ParseTreePattern>
      parameters:
        - id: pattern
          type: string
          description: ''
        - id: patternRuleIndex
          type: number
          description: ''
        - id: lexer
          type: Lexer
          description: ''
      return:
        description: ''
        type: Promise&lt;ParseTreePattern&gt;
    inheritanceDescription: <b>Inherited From</b> Parser.compileParseTreePattern
  - name: consume()
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.consume
    package: adaptive-expressions-ie11
    summary: >-
      Consume and return the [current symbol](`currentToken`).


      E.g., given the following input with `A` being the current

      lookahead symbol, this function moves the cursor to `B` and returns

      `A`.


      ```

      A B

      ^

      ```


      If the parser is not in error recovery mode, the consumed symbol is added

      to the parse tree using <xref:ParserRuleContext%23addChild(TerminalNode)>,
      and

      <xref:ParseTreeListener%23visitTerminal> is called on any parse listeners.

      If the parser *is* in error recovery mode, the consumed symbol is

      added to the parse tree using
      [Token)](xref:%23createErrorNode(ParserRuleContext%2C) then

      <xref:ParserRuleContext%23addErrorNode(ErrorNode)> and

      <xref:ParseTreeListener%23visitErrorNode> is called on any parse

      listeners.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function consume(): Token'
      return:
        description: ''
        type: Token
    inheritanceDescription: <b>Inherited From</b> Parser.consume
  - name: createErrorNode(ParserRuleContext, Token)
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.createErrorNode
    package: adaptive-expressions-ie11
    summary: |-
      How to create an error node, given a token, associated with a parent.
      Typically, the error node to create is not a function of the parent.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function createErrorNode(parent: ParserRuleContext, t: Token): ErrorNode'
      parameters:
        - id: parent
          type: ParserRuleContext
          description: ''
        - id: t
          type: Token
          description: ''
      return:
        description: ''
        type: ErrorNode
    inheritanceDescription: <b>Inherited From</b> Parser.createErrorNode
  - name: createTerminalNode(ParserRuleContext, Token)
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.createTerminalNode
    package: adaptive-expressions-ie11
    summary: |-
      How to create a token leaf node associated with a parent.
      Typically, the terminal node to create is not a function of the parent.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createTerminalNode(parent: ParserRuleContext, t: Token):
        TerminalNode
      parameters:
        - id: parent
          type: ParserRuleContext
          description: ''
        - id: t
          type: Token
          description: ''
      return:
        description: ''
        type: TerminalNode
    inheritanceDescription: <b>Inherited From</b> Parser.createTerminalNode
  - name: dumpDFA()
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.dumpDFA
    package: adaptive-expressions-ie11
    summary: For debugging and other purposes.
    remarks: ''
    isDeprecated: false
    syntax:
      content: function dumpDFA()
    inheritanceDescription: <b>Inherited From</b> Parser.dumpDFA
  - name: enterLeftFactoredRule(ParserRuleContext, number, number)
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.enterLeftFactoredRule
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function enterLeftFactoredRule(localctx: ParserRuleContext, state:
        number, ruleIndex: number)
      parameters:
        - id: localctx
          type: ParserRuleContext
          description: ''
        - id: state
          type: number
          description: ''
        - id: ruleIndex
          type: number
          description: ''
    inheritanceDescription: <b>Inherited From</b> Parser.enterLeftFactoredRule
  - name: enterOuterAlt(ParserRuleContext, number)
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.enterOuterAlt
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function enterOuterAlt(localctx: ParserRuleContext, altNum: number)'
      parameters:
        - id: localctx
          type: ParserRuleContext
          description: ''
        - id: altNum
          type: number
          description: ''
    inheritanceDescription: <b>Inherited From</b> Parser.enterOuterAlt
  - name: enterRecursionRule(ParserRuleContext, number, number, number)
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.enterRecursionRule
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function enterRecursionRule(localctx: ParserRuleContext, state: number,
        ruleIndex: number, precedence: number)
      parameters:
        - id: localctx
          type: ParserRuleContext
          description: ''
        - id: state
          type: number
          description: ''
        - id: ruleIndex
          type: number
          description: ''
        - id: precedence
          type: number
          description: ''
    inheritanceDescription: <b>Inherited From</b> Parser.enterRecursionRule
  - name: enterRule(ParserRuleContext, number, number)
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.enterRule
    package: adaptive-expressions-ie11
    summary: |-
      Always called by generated parsers upon entry to a rule. Access field
      <xref:%23_ctx> get the current context.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function enterRule(localctx: ParserRuleContext, state: number,
        ruleIndex: number)
      parameters:
        - id: localctx
          type: ParserRuleContext
          description: ''
        - id: state
          type: number
          description: ''
        - id: ruleIndex
          type: number
          description: ''
    inheritanceDescription: <b>Inherited From</b> Parser.enterRule
  - name: exitRule()
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.exitRule
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: function exitRule()
    inheritanceDescription: <b>Inherited From</b> Parser.exitRule
  - name: getATNWithBypassAlts()
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.getATNWithBypassAlts
    package: adaptive-expressions-ie11
    summary: |-
      The ATN with bypass alternatives is expensive to create so we create it
      lazily.

      @ if the current parser does not
      implement the `serializedATN` property.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getATNWithBypassAlts(): ATN'
      return:
        description: ''
        type: ATN
    inheritanceDescription: <b>Inherited From</b> Parser.getATNWithBypassAlts
  - name: getDFAStrings()
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.getDFAStrings
    package: adaptive-expressions-ie11
    summary: For debugging and other purposes.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getDFAStrings(): string[]'
      return:
        description: ''
        type: string[]
    inheritanceDescription: <b>Inherited From</b> Parser.getDFAStrings
  - name: getErrorHeader(RecognitionException)
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.getErrorHeader
    package: adaptive-expressions-ie11
    summary: What is the error header, normally line/character position information?
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getErrorHeader(e: RecognitionException): string'
      parameters:
        - id: e
          type: RecognitionException
          description: ''
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> Parser.getErrorHeader
  - name: getErrorListenerDispatch()
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.getErrorListenerDispatch
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getErrorListenerDispatch(): ParserErrorListener'
      return:
        description: ''
        type: ParserErrorListener
    inheritanceDescription: <b>Inherited From</b> Parser.getErrorListenerDispatch
  - name: getErrorListeners()
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.getErrorListeners
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getErrorListeners(): ANTLRErrorListener<Token>[]'
      return:
        description: ''
        type: ANTLRErrorListener&lt;Token&gt;[]
    inheritanceDescription: <b>Inherited From</b> Parser.getErrorListeners
  - name: getExpectedTokens()
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.getExpectedTokens
    package: adaptive-expressions-ie11
    summary: >-
      Computes the set of input symbols which could follow the current parser

      state and context, as given by <xref:%23getState> and
      <xref:%23getContext>,

      respectively.


      See ATN#getExpectedTokens(int, RuleContext)
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getExpectedTokens(): IntervalSet'
      return:
        description: ''
        type: IntervalSet
    inheritanceDescription: <b>Inherited From</b> Parser.getExpectedTokens
  - name: getExpectedTokensWithinCurrentRule()
    uid: >-
      adaptive-expressions-ie11.ExpressionAntlrParser.getExpectedTokensWithinCurrentRule
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getExpectedTokensWithinCurrentRule(): IntervalSet'
      return:
        description: ''
        type: IntervalSet
    inheritanceDescription: <b>Inherited From</b> Parser.getExpectedTokensWithinCurrentRule
  - name: getInvokingContext(number)
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.getInvokingContext
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getInvokingContext(ruleIndex: number): undefined |
        ParserRuleContext
      parameters:
        - id: ruleIndex
          type: number
          description: ''
      return:
        description: ''
        type: undefined | ParserRuleContext
    inheritanceDescription: <b>Inherited From</b> Parser.getInvokingContext
  - name: getParseListeners()
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.getParseListeners
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getParseListeners(): ParseTreeListener[]'
      return:
        description: ''
        type: ParseTreeListener[]
    inheritanceDescription: <b>Inherited From</b> Parser.getParseListeners
  - name: getRuleIndex(string)
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.getRuleIndex
    package: adaptive-expressions-ie11
    summary: Get a rule's index (i.e., `RULE_ruleName` field) or -1 if not found.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getRuleIndex(ruleName: string): number'
      parameters:
        - id: ruleName
          type: string
          description: ''
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Parser.getRuleIndex
  - name: getRuleIndexMap()
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.getRuleIndexMap
    package: adaptive-expressions-ie11
    summary: |-
      Get a map from rule names to rule indexes.

      Used for XPath and tree pattern compilation.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getRuleIndexMap(): ReadonlyMap<string, number>'
      return:
        description: ''
        type: ReadonlyMap&lt;string, number&gt;
    inheritanceDescription: <b>Inherited From</b> Parser.getRuleIndexMap
  - name: getRuleInvocationStack(RuleContext)
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.getRuleInvocationStack
    package: adaptive-expressions-ie11
    summary: |-
      Return List&lt;String&gt; of the rule names in your parser instance
       leading up to a call to the current rule.  You could override if
       you want more details such as the file/line info of where
       in the ATN a rule is invoked.

       This is very useful for error messages.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getRuleInvocationStack(ctx?: RuleContext): string[]'
      parameters:
        - id: ctx
          type: RuleContext
          description: ''
      return:
        description: ''
        type: string[]
    inheritanceDescription: <b>Inherited From</b> Parser.getRuleInvocationStack
  - name: getTokenType(string)
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.getTokenType
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getTokenType(tokenName: string): number'
      parameters:
        - id: tokenName
          type: string
          description: ''
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Parser.getTokenType
  - name: getTokenTypeMap()
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.getTokenTypeMap
    package: adaptive-expressions-ie11
    summary: |-
      Get a map from token names to token types.

      Used for XPath and tree pattern compilation.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getTokenTypeMap(): ReadonlyMap<string, number>'
      return:
        description: ''
        type: ReadonlyMap&lt;string, number&gt;
    inheritanceDescription: <b>Inherited From</b> Parser.getTokenTypeMap
  - name: inContext(string)
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.inContext
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function inContext(context: string): boolean'
      parameters:
        - id: context
          type: string
          description: ''
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> Parser.inContext
  - name: isExpectedToken(number)
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.isExpectedToken
    package: adaptive-expressions-ie11
    summary: |-
      Checks whether or not `symbol` can follow the current state in the
      ATN. The behavior of this method is equivalent to the following, but is
      implemented such that the complete context-sensitive follow set does not
      need to be explicitly constructed.

      ```
      return getExpectedTokens().contains(symbol);
      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function isExpectedToken(symbol: number): boolean'
      parameters:
        - id: symbol
          type: number
          description: the symbol type to check
      return:
        description: |-
          `true` if `symbol` can follow the current state in
          the ATN, otherwise `false`.
        type: boolean
    inheritanceDescription: <b>Inherited From</b> Parser.isExpectedToken
  - name: match(number)
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.match
    package: adaptive-expressions-ie11
    summary: >-
      Match current input symbol against `ttype`. If the symbol type

      matches, <xref:ANTLRErrorStrategy%23reportMatch> and <xref:%23consume> are

      called to complete the match process.


      If the symbol type does not match,

      <xref:ANTLRErrorStrategy%23recoverInline> is called on the current error

      strategy to attempt recovery. If <xref:%23getBuildParseTree> is

      `true` and the token index of the symbol returned by

      <xref:ANTLRErrorStrategy%23recoverInline> is -1, the symbol is added to

      the parse tree by calling
      [Token)](xref:%23createErrorNode(ParserRuleContext%2C) then

      <xref:ParserRuleContext%23addErrorNode(ErrorNode)>.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function match(ttype: number): Token'
      parameters:
        - id: ttype
          type: number
          description: the token type to match
      return:
        description: |-
          the matched symbol
          @ if the current input symbol did not match
          `ttype` and the error strategy could not recover from the
          mismatched symbol
        type: Token
    inheritanceDescription: <b>Inherited From</b> Parser.match
  - name: matchWildcard()
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.matchWildcard
    package: adaptive-expressions-ie11
    summary: >-
      Match current input symbol as a wildcard. If the symbol type matches

      (i.e. has a value greater than 0), <xref:ANTLRErrorStrategy%23reportMatch>

      and <xref:%23consume> are called to complete the match process.


      If the symbol type does not match,

      <xref:ANTLRErrorStrategy%23recoverInline> is called on the current error

      strategy to attempt recovery. If <xref:%23getBuildParseTree> is

      `true` and the token index of the symbol returned by

      <xref:ANTLRErrorStrategy%23recoverInline> is -1, the symbol is added to

      the parse tree by calling
      [Token)](xref:Parser%23createErrorNode(ParserRuleContext%2C) then

      <xref:ParserRuleContext%23addErrorNode(ErrorNode)>.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function matchWildcard(): Token'
      return:
        description: >-
          the matched symbol

          @ if the current input symbol did not match

          a wildcard and the error strategy could not recover from the
          mismatched

          symbol
        type: Token
    inheritanceDescription: <b>Inherited From</b> Parser.matchWildcard
  - name: notifyErrorListeners(string)
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.notifyErrorListeners
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function notifyErrorListeners(msg: string)'
      parameters:
        - id: msg
          type: string
          description: ''
    inheritanceDescription: <b>Inherited From</b> Parser.notifyErrorListeners
  - name: >-
      notifyErrorListeners(string, null | Token, undefined |
      RecognitionException)
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.notifyErrorListeners_1
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function notifyErrorListeners(msg: string, offendingToken: null | Token,
        e: undefined | RecognitionException)
      parameters:
        - id: msg
          type: string
          description: ''
        - id: offendingToken
          type: null | Token
          description: ''
        - id: e
          type: undefined | RecognitionException
          description: ''
    inheritanceDescription: <b>Inherited From</b> Parser.notifyErrorListeners
  - name: precpred(RuleContext, number)
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.precpred
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function precpred(localctx: RuleContext, precedence: number): boolean'
      parameters:
        - id: localctx
          type: RuleContext
          description: ''
        - id: precedence
          type: number
          description: ''
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> Parser.precpred
  - name: pushNewRecursionContext(ParserRuleContext, number, number)
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.pushNewRecursionContext
    package: adaptive-expressions-ie11
    summary: |-
      Like <xref:%23enterRule> but for recursive rules.
       Make the current context the child of the incoming localctx.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function pushNewRecursionContext(localctx: ParserRuleContext, state:
        number, ruleIndex: number)
      parameters:
        - id: localctx
          type: ParserRuleContext
          description: ''
        - id: state
          type: number
          description: ''
        - id: ruleIndex
          type: number
          description: ''
    inheritanceDescription: <b>Inherited From</b> Parser.pushNewRecursionContext
  - name: removeErrorListener(ANTLRErrorListener<Token>)
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.removeErrorListener
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function removeErrorListener(listener: ANTLRErrorListener<Token>)'
      parameters:
        - id: listener
          type: ANTLRErrorListener&lt;Token&gt;
          description: ''
    inheritanceDescription: <b>Inherited From</b> Parser.removeErrorListener
  - name: removeErrorListeners()
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.removeErrorListeners
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: function removeErrorListeners()
    inheritanceDescription: <b>Inherited From</b> Parser.removeErrorListeners
  - name: removeParseListener(ParseTreeListener)
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.removeParseListener
    package: adaptive-expressions-ie11
    summary: |-
      Remove `listener` from the list of parse listeners.

      If `listener` is `undefined` or has not been added as a parse
      listener, this method does nothing.

      See #addParseListener
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function removeParseListener(listener: ParseTreeListener)'
      parameters:
        - id: listener
          type: ParseTreeListener
          description: the listener to remove
    inheritanceDescription: <b>Inherited From</b> Parser.removeParseListener
  - name: removeParseListeners()
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.removeParseListeners
    package: adaptive-expressions-ie11
    summary: |-
      Remove all parse listeners.

      See #addParseListener
    remarks: ''
    isDeprecated: false
    syntax:
      content: function removeParseListeners()
    inheritanceDescription: <b>Inherited From</b> Parser.removeParseListeners
  - name: reset()
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.reset
    package: adaptive-expressions-ie11
    summary: reset the parser's state
    remarks: ''
    isDeprecated: false
    syntax:
      content: function reset()
    inheritanceDescription: <b>Inherited From</b> Parser.reset
  - name: reset(boolean)
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.reset_1
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function reset(resetInput: boolean)'
      parameters:
        - id: resetInput
          type: boolean
          description: ''
    inheritanceDescription: <b>Inherited From</b> Parser.reset
  - name: setProfile(boolean)
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.setProfile
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setProfile(profile: boolean): Promise<void>'
      parameters:
        - id: profile
          type: boolean
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
    inheritanceDescription: <b>Inherited From</b> Parser.setProfile
  - name: unrollRecursionContexts(ParserRuleContext)
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.unrollRecursionContexts
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function unrollRecursionContexts(_parentctx: ParserRuleContext)'
      parameters:
        - id: _parentctx
          type: ParserRuleContext
          description: ''
    inheritanceDescription: <b>Inherited From</b> Parser.unrollRecursionContexts
methods:
  - name: argsList()
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.argsList
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function argsList(): ArgsListContext'
      return:
        description: ''
        type: <xref uid="adaptive-expressions-ie11.ArgsListContext" />
  - name: expression()
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.expression
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function expression(): ExpressionContext'
      return:
        description: ''
        type: <xref uid="adaptive-expressions-ie11.ExpressionContext" />
  - name: expression(number)
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.expression_1
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function expression(_p: number): ExpressionContext'
      parameters:
        - id: _p
          type: number
          description: ''
      return:
        description: ''
        type: <xref uid="adaptive-expressions-ie11.ExpressionContext" />
  - name: file()
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.file
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function file(): FileContext'
      return:
        description: ''
        type: <xref uid="adaptive-expressions-ie11.FileContext" />
  - name: key()
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.key
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function key(): KeyContext'
      return:
        description: ''
        type: <xref uid="adaptive-expressions-ie11.KeyContext" />
  - name: keyValuePair()
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.keyValuePair
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function keyValuePair(): KeyValuePairContext'
      return:
        description: ''
        type: <xref uid="adaptive-expressions-ie11.KeyValuePairContext" />
  - name: keyValuePairList()
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.keyValuePairList
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function keyValuePairList(): KeyValuePairListContext'
      return:
        description: ''
        type: <xref uid="adaptive-expressions-ie11.KeyValuePairListContext" />
  - name: lambda()
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.lambda
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function lambda(): LambdaContext'
      return:
        description: ''
        type: <xref uid="adaptive-expressions-ie11.LambdaContext" />
  - name: primaryExpression()
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.primaryExpression
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function primaryExpression(): PrimaryExpressionContext'
      return:
        description: ''
        type: <xref uid="adaptive-expressions-ie11.PrimaryExpressionContext" />
  - name: primaryExpression(number)
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.primaryExpression_1
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function primaryExpression(_p: number): PrimaryExpressionContext'
      parameters:
        - id: _p
          type: number
          description: ''
      return:
        description: ''
        type: <xref uid="adaptive-expressions-ie11.PrimaryExpressionContext" />
  - name: sempred(RuleContext, number, number)
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.sempred
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function sempred(_localctx: RuleContext, ruleIndex: number, predIndex:
        number): boolean
      parameters:
        - id: _localctx
          type: RuleContext
          description: ''
        - id: ruleIndex
          type: number
          description: ''
        - id: predIndex
          type: number
          description: ''
      return:
        description: ''
        type: boolean
  - name: stringInterpolation()
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.stringInterpolation
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function stringInterpolation(): StringInterpolationContext'
      return:
        description: ''
        type: <xref uid="adaptive-expressions-ie11.StringInterpolationContext" />
  - name: textContent()
    uid: adaptive-expressions-ie11.ExpressionAntlrParser.textContent
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function textContent(): TextContentContext'
      return:
        description: ''
        type: <xref uid="adaptive-expressions-ie11.TextContentContext" />
extends: Parser
