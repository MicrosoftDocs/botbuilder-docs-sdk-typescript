### YamlMime:TSType
name: ExpressionAntlrLexer
uid: adaptive-expressions-ie11.ExpressionAntlrLexer
package: adaptive-expressions-ie11
summary: ''
fullName: ExpressionAntlrLexer
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: ExpressionAntlrLexer(CharStream)
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.constructor
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'new ExpressionAntlrLexer(input: CharStream)'
      parameters:
        - id: input
          type: CharStream
          description: ''
properties:
  - name: ARROW
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.ARROW
    package: adaptive-expressions-ie11
    summary: ''
    fullName: ARROW
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static ARROW: 27 = 27'
      return:
        description: ''
        type: '27'
  - name: ASTERISK
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.ASTERISK
    package: adaptive-expressions-ie11
    summary: ''
    fullName: ASTERISK
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static ASTERISK: 6 = 6'
      return:
        description: ''
        type: '6'
  - name: channelNames
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.channelNames
    package: adaptive-expressions-ie11
    summary: ''
    fullName: channelNames
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'channelNames: string[]'
      return:
        description: ''
        type: string[]
  - name: channelNames
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.channelNames
    package: adaptive-expressions-ie11
    summary: ''
    fullName: channelNames
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static channelNames: string[]'
      return:
        description: ''
        type: string[]
  - name: CLOSE_BRACKET
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.CLOSE_BRACKET
    package: adaptive-expressions-ie11
    summary: ''
    fullName: CLOSE_BRACKET
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static CLOSE_BRACKET: 19 = 19'
      return:
        description: ''
        type: '19'
  - name: CLOSE_CURLY_BRACKET
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.CLOSE_CURLY_BRACKET
    package: adaptive-expressions-ie11
    summary: ''
    fullName: CLOSE_CURLY_BRACKET
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static CLOSE_CURLY_BRACKET: 24 = 24'
      return:
        description: ''
        type: '24'
  - name: CLOSE_SQUARE_BRACKET
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.CLOSE_SQUARE_BRACKET
    package: adaptive-expressions-ie11
    summary: ''
    fullName: CLOSE_SQUARE_BRACKET
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static CLOSE_SQUARE_BRACKET: 22 = 22'
      return:
        description: ''
        type: '22'
  - name: COLON
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.COLON
    package: adaptive-expressions-ie11
    summary: ''
    fullName: COLON
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static COLON: 26 = 26'
      return:
        description: ''
        type: '26'
  - name: COMMA
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.COMMA
    package: adaptive-expressions-ie11
    summary: ''
    fullName: COMMA
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static COMMA: 25 = 25'
      return:
        description: ''
        type: '25'
  - name: DOT
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.DOT
    package: adaptive-expressions-ie11
    summary: ''
    fullName: DOT
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static DOT: 20 = 20'
      return:
        description: ''
        type: '20'
  - name: DOUBLE_AND
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.DOUBLE_AND
    package: adaptive-expressions-ie11
    summary: ''
    fullName: DOUBLE_AND
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static DOUBLE_AND: 12 = 12'
      return:
        description: ''
        type: '12'
  - name: DOUBLE_EQUAL
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.DOUBLE_EQUAL
    package: adaptive-expressions-ie11
    summary: ''
    fullName: DOUBLE_EQUAL
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static DOUBLE_EQUAL: 9 = 9'
      return:
        description: ''
        type: '9'
  - name: DOUBLE_VERTICAL_CYLINDER
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.DOUBLE_VERTICAL_CYLINDER
    package: adaptive-expressions-ie11
    summary: ''
    fullName: DOUBLE_VERTICAL_CYLINDER
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static DOUBLE_VERTICAL_CYLINDER: 13 = 13'
      return:
        description: ''
        type: '13'
  - name: ESCAPE_CHARACTER
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.ESCAPE_CHARACTER
    package: adaptive-expressions-ie11
    summary: ''
    fullName: ESCAPE_CHARACTER
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static ESCAPE_CHARACTER: 37 = 37'
      return:
        description: ''
        type: '37'
  - name: grammarFileName
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.grammarFileName
    package: adaptive-expressions-ie11
    summary: ''
    fullName: grammarFileName
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'grammarFileName: string'
      return:
        description: ''
        type: string
  - name: IDENTIFIER
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.IDENTIFIER
    package: adaptive-expressions-ie11
    summary: ''
    fullName: IDENTIFIER
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static IDENTIFIER: 32 = 32'
      return:
        description: ''
        type: '32'
  - name: ignoreWS
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.ignoreWS
    package: adaptive-expressions-ie11
    summary: ''
    fullName: ignoreWS
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'ignoreWS: boolean'
      return:
        description: ''
        type: boolean
  - name: INVALID_TOKEN_DEFAULT_MODE
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.INVALID_TOKEN_DEFAULT_MODE
    package: adaptive-expressions-ie11
    summary: ''
    fullName: INVALID_TOKEN_DEFAULT_MODE
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static INVALID_TOKEN_DEFAULT_MODE: 35 = 35'
      return:
        description: ''
        type: '35'
  - name: LESS_OR_EQUAl
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.LESS_OR_EQUAl
    package: adaptive-expressions-ie11
    summary: ''
    fullName: LESS_OR_EQUAl
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static LESS_OR_EQUAl: 16 = 16'
      return:
        description: ''
        type: '16'
  - name: LESS_THAN
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.LESS_THAN
    package: adaptive-expressions-ie11
    summary: ''
    fullName: LESS_THAN
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static LESS_THAN: 14 = 14'
      return:
        description: ''
        type: '14'
  - name: modeNames
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.modeNames
    package: adaptive-expressions-ie11
    summary: ''
    fullName: modeNames
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'modeNames: string[]'
      return:
        description: ''
        type: string[]
  - name: modeNames
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.modeNames
    package: adaptive-expressions-ie11
    summary: ''
    fullName: modeNames
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static modeNames: string[]'
      return:
        description: ''
        type: string[]
  - name: MORE_OR_EQUAL
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.MORE_OR_EQUAL
    package: adaptive-expressions-ie11
    summary: ''
    fullName: MORE_OR_EQUAL
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static MORE_OR_EQUAL: 17 = 17'
      return:
        description: ''
        type: '17'
  - name: MORE_THAN
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.MORE_THAN
    package: adaptive-expressions-ie11
    summary: ''
    fullName: MORE_THAN
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static MORE_THAN: 15 = 15'
      return:
        description: ''
        type: '15'
  - name: NEWLINE
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.NEWLINE
    package: adaptive-expressions-ie11
    summary: ''
    fullName: NEWLINE
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static NEWLINE: 33 = 33'
      return:
        description: ''
        type: '33'
  - name: NON
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.NON
    package: adaptive-expressions-ie11
    summary: ''
    fullName: NON
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static NON: 4 = 4'
      return:
        description: ''
        type: '4'
  - name: NOT_EQUAL
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.NOT_EQUAL
    package: adaptive-expressions-ie11
    summary: ''
    fullName: NOT_EQUAL
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static NOT_EQUAL: 10 = 10'
      return:
        description: ''
        type: '10'
  - name: NULL_COALESCE
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.NULL_COALESCE
    package: adaptive-expressions-ie11
    summary: ''
    fullName: NULL_COALESCE
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static NULL_COALESCE: 28 = 28'
      return:
        description: ''
        type: '28'
  - name: NUMBER
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.NUMBER
    package: adaptive-expressions-ie11
    summary: ''
    fullName: NUMBER
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static NUMBER: 30 = 30'
      return:
        description: ''
        type: '30'
  - name: OPEN_BRACKET
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.OPEN_BRACKET
    package: adaptive-expressions-ie11
    summary: ''
    fullName: OPEN_BRACKET
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static OPEN_BRACKET: 18 = 18'
      return:
        description: ''
        type: '18'
  - name: OPEN_CURLY_BRACKET
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.OPEN_CURLY_BRACKET
    package: adaptive-expressions-ie11
    summary: ''
    fullName: OPEN_CURLY_BRACKET
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static OPEN_CURLY_BRACKET: 23 = 23'
      return:
        description: ''
        type: '23'
  - name: OPEN_SQUARE_BRACKET
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.OPEN_SQUARE_BRACKET
    package: adaptive-expressions-ie11
    summary: ''
    fullName: OPEN_SQUARE_BRACKET
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static OPEN_SQUARE_BRACKET: 21 = 21'
      return:
        description: ''
        type: '21'
  - name: PERCENT
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.PERCENT
    package: adaptive-expressions-ie11
    summary: ''
    fullName: PERCENT
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static PERCENT: 8 = 8'
      return:
        description: ''
        type: '8'
  - name: PLUS
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.PLUS
    package: adaptive-expressions-ie11
    summary: ''
    fullName: PLUS
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static PLUS: 2 = 2'
      return:
        description: ''
        type: '2'
  - name: QUESTION_MARK
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.QUESTION_MARK
    package: adaptive-expressions-ie11
    summary: ''
    fullName: QUESTION_MARK
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static QUESTION_MARK: 29 = 29'
      return:
        description: ''
        type: '29'
  - name: ruleNames
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.ruleNames
    package: adaptive-expressions-ie11
    summary: ''
    fullName: ruleNames
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'ruleNames: string[]'
      return:
        description: ''
        type: string[]
  - name: ruleNames
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.ruleNames
    package: adaptive-expressions-ie11
    summary: ''
    fullName: ruleNames
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static ruleNames: string[]'
      return:
        description: ''
        type: string[]
  - name: serializedATN
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.serializedATN
    package: adaptive-expressions-ie11
    summary: ''
    fullName: serializedATN
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'serializedATN: string'
      return:
        description: ''
        type: string
  - name: SINGLE_AND
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.SINGLE_AND
    package: adaptive-expressions-ie11
    summary: ''
    fullName: SINGLE_AND
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static SINGLE_AND: 11 = 11'
      return:
        description: ''
        type: '11'
  - name: SLASH
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.SLASH
    package: adaptive-expressions-ie11
    summary: ''
    fullName: SLASH
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static SLASH: 7 = 7'
      return:
        description: ''
        type: '7'
  - name: STRING
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.STRING
    package: adaptive-expressions-ie11
    summary: ''
    fullName: STRING
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static STRING: 34 = 34'
      return:
        description: ''
        type: '34'
  - name: STRING_INTERPOLATION_MODE
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.STRING_INTERPOLATION_MODE
    package: adaptive-expressions-ie11
    summary: ''
    fullName: STRING_INTERPOLATION_MODE
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static STRING_INTERPOLATION_MODE: 1 = 1'
      return:
        description: ''
        type: '1'
  - name: STRING_INTERPOLATION_START
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.STRING_INTERPOLATION_START
    package: adaptive-expressions-ie11
    summary: ''
    fullName: STRING_INTERPOLATION_START
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static STRING_INTERPOLATION_START: 1 = 1'
      return:
        description: ''
        type: '1'
  - name: SUBSTRACT
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.SUBSTRACT
    package: adaptive-expressions-ie11
    summary: ''
    fullName: SUBSTRACT
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static SUBSTRACT: 3 = 3'
      return:
        description: ''
        type: '3'
  - name: TEMPLATE
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.TEMPLATE
    package: adaptive-expressions-ie11
    summary: ''
    fullName: TEMPLATE
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static TEMPLATE: 36 = 36'
      return:
        description: ''
        type: '36'
  - name: TEXT_CONTENT
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.TEXT_CONTENT
    package: adaptive-expressions-ie11
    summary: ''
    fullName: TEXT_CONTENT
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static TEXT_CONTENT: 38 = 38'
      return:
        description: ''
        type: '38'
  - name: vocabulary
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.vocabulary
    package: adaptive-expressions-ie11
    summary: ''
    fullName: vocabulary
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'vocabulary: Vocabulary'
      return:
        description: ''
        type: Vocabulary
  - name: VOCABULARY
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.VOCABULARY
    package: adaptive-expressions-ie11
    summary: ''
    fullName: VOCABULARY
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static VOCABULARY: Vocabulary'
      return:
        description: ''
        type: Vocabulary
  - name: WHITESPACE
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.WHITESPACE
    package: adaptive-expressions-ie11
    summary: ''
    fullName: WHITESPACE
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static WHITESPACE: 31 = 31'
      return:
        description: ''
        type: '31'
  - name: XOR
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.XOR
    package: adaptive-expressions-ie11
    summary: ''
    fullName: XOR
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static XOR: 5 = 5'
      return:
        description: ''
        type: '5'
inheritedProperties:
  - name: atn
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.atn
    package: adaptive-expressions-ie11
    summary: >-
      Get the <xref:adaptive-expressions-ie11.CommonRegexLexer.serializedATN>
      used by the recognizer for prediction.
    fullName: atn
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'atn: ATN'
      return:
        description: >-
          The <xref:adaptive-expressions-ie11.CommonRegexLexer.serializedATN>
          used by the recognizer for prediction.
        type: ATN
    inheritanceDescription: <b>Inherited From</b> Lexer.atn
  - name: channel
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.channel
    package: adaptive-expressions-ie11
    summary: ''
    fullName: channel
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'channel: number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Lexer.channel
  - name: charIndex
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.charIndex
    package: adaptive-expressions-ie11
    summary: What is the index of the current character of lookahead?
    fullName: charIndex
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'charIndex: number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Lexer.charIndex
  - name: charPositionInLine
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.charPositionInLine
    package: adaptive-expressions-ie11
    summary: ''
    fullName: charPositionInLine
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'charPositionInLine: number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Lexer.charPositionInLine
  - name: DEFAULT_MODE
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.DEFAULT_MODE
    package: adaptive-expressions-ie11
    summary: ''
    fullName: DEFAULT_MODE
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static DEFAULT_MODE: number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Lexer.DEFAULT_MODE
  - name: DEFAULT_TOKEN_CHANNEL
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.DEFAULT_TOKEN_CHANNEL
    package: adaptive-expressions-ie11
    summary: ''
    fullName: DEFAULT_TOKEN_CHANNEL
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static DEFAULT_TOKEN_CHANNEL: number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Lexer.DEFAULT_TOKEN_CHANNEL
  - name: EOF
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.EOF
    package: adaptive-expressions-ie11
    summary: ''
    fullName: EOF
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static EOF: number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Lexer.EOF
  - name: HIDDEN
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.HIDDEN
    package: adaptive-expressions-ie11
    summary: ''
    fullName: HIDDEN
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static HIDDEN: number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Lexer.HIDDEN
  - name: inputStream
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.inputStream
    package: adaptive-expressions-ie11
    summary: Set the char stream and reset the lexer
    fullName: inputStream
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'inputStream: CharStream'
      return:
        description: ''
        type: CharStream
    inheritanceDescription: <b>Inherited From</b> Lexer.inputStream
  - name: interpreter
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.interpreter
    package: adaptive-expressions-ie11
    summary: Set the ATN interpreter used by the recognizer for prediction.
    fullName: interpreter
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'interpreter: LexerATNSimulator'
      return:
        description: ''
        type: LexerATNSimulator
    inheritanceDescription: <b>Inherited From</b> Lexer.interpreter
  - name: line
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.line
    package: adaptive-expressions-ie11
    summary: ''
    fullName: line
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'line: number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Lexer.line
  - name: MAX_CHAR_VALUE
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.MAX_CHAR_VALUE
    package: adaptive-expressions-ie11
    summary: ''
    fullName: MAX_CHAR_VALUE
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static MAX_CHAR_VALUE: number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Lexer.MAX_CHAR_VALUE
  - name: MIN_CHAR_VALUE
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.MIN_CHAR_VALUE
    package: adaptive-expressions-ie11
    summary: ''
    fullName: MIN_CHAR_VALUE
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static MIN_CHAR_VALUE: number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Lexer.MIN_CHAR_VALUE
  - name: MORE
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.MORE
    package: adaptive-expressions-ie11
    summary: ''
    fullName: MORE
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static MORE: number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Lexer.MORE
  - name: parseInfo
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.parseInfo
    package: adaptive-expressions-ie11
    summary: |-
      If profiling during the parse/lex, this will return DecisionInfo records
       for each decision in recognizer in a ParseInfo object.
    fullName: parseInfo
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'parseInfo: Promise<undefined | ParseInfo>'
      return:
        description: ''
        type: Promise&lt;undefined | ParseInfo&gt;
    inheritanceDescription: <b>Inherited From</b> Lexer.parseInfo
  - name: SKIP
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.SKIP
    package: adaptive-expressions-ie11
    summary: ''
    fullName: SKIP
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static SKIP: number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Lexer.SKIP
  - name: sourceName
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.sourceName
    package: adaptive-expressions-ie11
    summary: ''
    fullName: sourceName
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'sourceName: string'
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> Lexer.sourceName
  - name: state
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.state
    package: adaptive-expressions-ie11
    summary: |-
      Indicate that the recognizer has changed internal state that is
       consistent with the ATN state passed in.  This way we always know
       where we are in the ATN as the parser goes along. The rule
       context objects form a stack that lets us see the stack of
       invoking rules. Combine this and we have complete ATN
       configuration information.
    fullName: state
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'state: number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Lexer.state
  - name: text
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.text
    package: adaptive-expressions-ie11
    summary: |-
      Set the complete text of this token; it wipes any previous
       changes to the text.
    fullName: text
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'text: string'
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> Lexer.text
  - name: token
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.token
    package: adaptive-expressions-ie11
    summary: Override if emitting multiple tokens.
    fullName: token
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'token: undefined | Token'
      return:
        description: ''
        type: undefined | Token
    inheritanceDescription: <b>Inherited From</b> Lexer.token
  - name: tokenFactory
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.tokenFactory
    package: adaptive-expressions-ie11
    summary: ''
    fullName: tokenFactory
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'tokenFactory: TokenFactory'
      return:
        description: ''
        type: TokenFactory
    inheritanceDescription: <b>Inherited From</b> Lexer.tokenFactory
  - name: type
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.type
    package: adaptive-expressions-ie11
    summary: ''
    fullName: type
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'type: number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Lexer.type
inheritedMethods:
  - name: addErrorListener(ANTLRErrorListener<number>)
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.addErrorListener
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function addErrorListener(listener: ANTLRErrorListener<number>)'
      parameters:
        - id: listener
          type: ANTLRErrorListener&lt;number&gt;
          description: ''
    inheritanceDescription: <b>Inherited From</b> Lexer.addErrorListener
  - name: emit()
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.emit_1
    package: adaptive-expressions-ie11
    summary: |-
      By default does not support multiple emits per nextToken invocation
       for efficiency reasons.  Subclass and override this method, nextToken,
       and getToken (to push tokens into a list and pull from that list
       rather than a single variable as this implementation does).
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function emit(): Token'
      return:
        description: ''
        type: Token
    inheritanceDescription: <b>Inherited From</b> Lexer.emit
  - name: emit(Token)
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.emit
    package: adaptive-expressions-ie11
    summary: |-
      The standard method called to automatically emit a token at the
       outermost lexical rule.  The token object should point into the
       char buffer start..stop.  If there is a text override in 'text',
       use that to set the token's text.  Override this method to emit
       custom Token objects or provide a new factory.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function emit(token: Token): Token'
      parameters:
        - id: token
          type: Token
          description: ''
      return:
        description: ''
        type: Token
    inheritanceDescription: <b>Inherited From</b> Lexer.emit
  - name: emitEOF()
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.emitEOF
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function emitEOF(): Token'
      return:
        description: ''
        type: Token
    inheritanceDescription: <b>Inherited From</b> Lexer.emitEOF
  - name: getAllTokens()
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.getAllTokens
    package: adaptive-expressions-ie11
    summary: |-
      Return a list of all Token objects in input char stream.
       Forces load of all tokens. Does not include EOF token.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getAllTokens(): Token[]'
      return:
        description: ''
        type: Token[]
    inheritanceDescription: <b>Inherited From</b> Lexer.getAllTokens
  - name: getCharErrorDisplay(number)
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.getCharErrorDisplay
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getCharErrorDisplay(c: number): string'
      parameters:
        - id: c
          type: number
          description: ''
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> Lexer.getCharErrorDisplay
  - name: getErrorDisplay(string | number)
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.getErrorDisplay
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getErrorDisplay(s: string | number): string'
      parameters:
        - id: s
          type: string | number
          description: ''
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> Lexer.getErrorDisplay
  - name: getErrorHeader(RecognitionException)
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.getErrorHeader
    package: adaptive-expressions-ie11
    summary: What is the error header, normally line/character position information?
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getErrorHeader(e: RecognitionException): string'
      parameters:
        - id: e
          type: RecognitionException
          description: ''
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> Lexer.getErrorHeader
  - name: getErrorListenerDispatch()
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.getErrorListenerDispatch
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getErrorListenerDispatch(): ANTLRErrorListener<number>'
      return:
        description: ''
        type: ANTLRErrorListener&lt;number&gt;
    inheritanceDescription: <b>Inherited From</b> Lexer.getErrorListenerDispatch
  - name: getErrorListeners()
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.getErrorListeners
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getErrorListeners(): ANTLRErrorListener<number>[]'
      return:
        description: ''
        type: ANTLRErrorListener&lt;number&gt;[]
    inheritanceDescription: <b>Inherited From</b> Lexer.getErrorListeners
  - name: getRuleIndexMap()
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.getRuleIndexMap
    package: adaptive-expressions-ie11
    summary: |-
      Get a map from rule names to rule indexes.

      Used for XPath and tree pattern compilation.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getRuleIndexMap(): ReadonlyMap<string, number>'
      return:
        description: ''
        type: ReadonlyMap&lt;string, number&gt;
    inheritanceDescription: <b>Inherited From</b> Lexer.getRuleIndexMap
  - name: getTokenType(string)
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.getTokenType
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getTokenType(tokenName: string): number'
      parameters:
        - id: tokenName
          type: string
          description: ''
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Lexer.getTokenType
  - name: getTokenTypeMap()
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.getTokenTypeMap
    package: adaptive-expressions-ie11
    summary: |-
      Get a map from token names to token types.

      Used for XPath and tree pattern compilation.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getTokenTypeMap(): ReadonlyMap<string, number>'
      return:
        description: ''
        type: ReadonlyMap&lt;string, number&gt;
    inheritanceDescription: <b>Inherited From</b> Lexer.getTokenTypeMap
  - name: mode(number)
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.mode
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function mode(m: number)'
      parameters:
        - id: m
          type: number
          description: ''
    inheritanceDescription: <b>Inherited From</b> Lexer.mode
  - name: more()
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.more
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: function more()
    inheritanceDescription: <b>Inherited From</b> Lexer.more
  - name: nextToken()
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.nextToken
    package: adaptive-expressions-ie11
    summary: |-
      Return a token from this source; i.e., match a token on the char
       stream.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function nextToken(): Token'
      return:
        description: ''
        type: Token
    inheritanceDescription: <b>Inherited From</b> Lexer.nextToken
  - name: notifyListeners(LexerNoViableAltException)
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.notifyListeners
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function notifyListeners(e: LexerNoViableAltException)'
      parameters:
        - id: e
          type: LexerNoViableAltException
          description: ''
    inheritanceDescription: <b>Inherited From</b> Lexer.notifyListeners
  - name: popMode()
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.popMode
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function popMode(): number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Lexer.popMode
  - name: precpred(undefined | RuleContext, number)
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.precpred
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function precpred(localctx: undefined | RuleContext, precedence:
        number): boolean
      parameters:
        - id: localctx
          type: undefined | RuleContext
          description: ''
        - id: precedence
          type: number
          description: ''
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> Lexer.precpred
  - name: pushMode(number)
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.pushMode
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function pushMode(m: number)'
      parameters:
        - id: m
          type: number
          description: ''
    inheritanceDescription: <b>Inherited From</b> Lexer.pushMode
  - name: recover(LexerNoViableAltException)
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.recover_1
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function recover(re: LexerNoViableAltException)'
      parameters:
        - id: re
          type: LexerNoViableAltException
          description: ''
    inheritanceDescription: <b>Inherited From</b> Lexer.recover
  - name: recover(RecognitionException)
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.recover
    package: adaptive-expressions-ie11
    summary: |-
      Lexers can normally match any char in it's vocabulary after matching
       a token, so do the easy thing and just kill a character and hope
       it all works out.  You can instead use the rule invocation stack
       to do sophisticated error recovery if you are in a fragment rule.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function recover(re: RecognitionException)'
      parameters:
        - id: re
          type: RecognitionException
          description: ''
    inheritanceDescription: <b>Inherited From</b> Lexer.recover
  - name: removeErrorListener(ANTLRErrorListener<number>)
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.removeErrorListener
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function removeErrorListener(listener: ANTLRErrorListener<number>)'
      parameters:
        - id: listener
          type: ANTLRErrorListener&lt;number&gt;
          description: ''
    inheritanceDescription: <b>Inherited From</b> Lexer.removeErrorListener
  - name: removeErrorListeners()
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.removeErrorListeners
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: function removeErrorListeners()
    inheritanceDescription: <b>Inherited From</b> Lexer.removeErrorListeners
  - name: reset()
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.reset
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: function reset()
    inheritanceDescription: <b>Inherited From</b> Lexer.reset
  - name: reset(boolean)
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.reset_1
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function reset(resetInput: boolean)'
      parameters:
        - id: resetInput
          type: boolean
          description: ''
    inheritanceDescription: <b>Inherited From</b> Lexer.reset
  - name: skip()
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.skip
    package: adaptive-expressions-ie11
    summary: |-
      Instruct the lexer to skip creating a token for current lexer rule
       and look for another token.  nextToken() knows to keep looking when
       a lexer rule finishes with token set to SKIP_TOKEN.  Recall that
       if token==undefined at end of any token rule, it creates one for you
       and emits it.
    remarks: ''
    isDeprecated: false
    syntax:
      content: function skip()
    inheritanceDescription: <b>Inherited From</b> Lexer.skip
methods:
  - name: action(RuleContext, number, number)
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.action
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function action(_localctx: RuleContext, ruleIndex: number, actionIndex:
        number)
      parameters:
        - id: _localctx
          type: RuleContext
          description: ''
        - id: ruleIndex
          type: number
          description: ''
        - id: actionIndex
          type: number
          description: ''
  - name: sempred(RuleContext, number, number)
    uid: adaptive-expressions-ie11.ExpressionAntlrLexer.sempred
    package: adaptive-expressions-ie11
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function sempred(_localctx: RuleContext, ruleIndex: number, predIndex:
        number): boolean
      parameters:
        - id: _localctx
          type: RuleContext
          description: ''
        - id: ruleIndex
          type: number
          description: ''
        - id: predIndex
          type: number
          description: ''
      return:
        description: ''
        type: boolean
extends: Lexer
