### YamlMime:TSType
name: ActivityHandler
uid: botbuilder-core.ActivityHandler
package: botbuilder-core
summary: >-
  Event-emitting activity handler for bots. Extends
  [ActivityHandlerBase](xref:botbuilder-core.ActivityHandlerBase).
fullName: ActivityHandler
remarks: >-
  This provides an extensible class for handling incoming activities in an
  event-driven way.

  You can register an arbitrary set of handlers for each event type.


  To register a handler for an event, use the corresponding _on event_ method.
  If multiple handlers are

  registered for an event, they are run in the order in which they were
  registered.


  This object emits a series of _events_ as it processes an incoming activity.

  A handler can stop the propagation of the event by not calling the
  continuation function.


  | Event type | Description |

  | :--- | :--- |

  | Turn | Emitted first for every activity. |

  | Type-specific | Emitted for the specific activity type, before emitting an
  event for any sub-type. |

  | Sub-type | Emitted for certain specialized events, based on activity
  content. |

  | Dialog | Emitted as the final activity processing event. |


  For example:


  ```typescript

  const bot = new ActivityHandler();


  server.post('/api/messages', (req, res) => {
      adapter.processActivity(req, res, async (context) => {
          // Route to bot's activity logic.
          await bot.run(context);
      });
  });


  bot.onTurn(async (context, next) => {
          // Handle a "turn" event.
          await context.sendActivity(`${ context.activity.type } activity received.`);
          // Continue with further processing.
          await next();
      })
      .onMessage(async (context, next) => {
          // Handle a message activity.
          await context.sendActivity(`Echo: ${ context.activity.text }`);
          // Continue with further processing.
          await next();
      });
  ```


  **See also**

  - The [Bot Framework Activity schema](https://aka.ms/botSpecs-activitySchema)
isPreview: false
isDeprecated: false
type: class
methods:
  - name: onCommand(BotHandler)
    uid: botbuilder-core.ActivityHandler.onCommand
    package: botbuilder-core
    summary: Registers an activity event handler for the _command_ activity.
    remarks: >-
      To handle a Command event, use the

      [onCommand](xref:botbuilder-core.ActivityHandler.onCommand) type-specific
      event handler.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onCommand(handler: BotHandler): this'
      parameters:
        - id: handler
          type: <xref uid="botbuilder-core.BotHandler" />
          description: The event handler.
      return:
        description: >-
          A reference to the
          [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.
        type: this
  - name: onCommandResult(BotHandler)
    uid: botbuilder-core.ActivityHandler.onCommandResult
    package: botbuilder-core
    summary: Registers an activity event handler for the _CommandResult_ activity.
    remarks: >-
      To handle a CommandResult event, use the

      [onCommandResult](xref:botbuilder-core.ActivityHandler.onCommandResult)
      type-specific event handler.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onCommandResult(handler: BotHandler): this'
      parameters:
        - id: handler
          type: <xref uid="botbuilder-core.BotHandler" />
          description: The event handler.
      return:
        description: >-
          A reference to the
          [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.
        type: this
  - name: onConversationUpdate(BotHandler)
    uid: botbuilder-core.ActivityHandler.onConversationUpdate
    package: botbuilder-core
    summary: >-
      Registers an activity event handler for the _conversation update_ event,
      emitted for every incoming

      conversation update activity.
    remarks: >-
      Conversation update activities describe a changes to a conversation's
      metadata, such as title, participants,

      or other channel-specific information.


      To handle when members are added to or removed from the conversation, use
      the

      [onMembersAdded](xref:botbuilder-core.ActivityHandler.onMembersAdded) and

      [onMembersRemoved](xref:botbuilder-core.ActivityHandler.onMembersRemoved)
      sub-type event handlers.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onConversationUpdate(handler: BotHandler): this'
      parameters:
        - id: handler
          type: <xref uid="botbuilder-core.BotHandler" />
          description: The event handler.
      return:
        description: >-
          A reference to the
          [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.
        type: this
  - name: onDialog(BotHandler)
    uid: botbuilder-core.ActivityHandler.onDialog
    package: botbuilder-core
    summary: >-
      Registers an activity event handler for the _dialog_ event, emitted as the
      last event for an incoming activity.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onDialog(handler: BotHandler): this'
      parameters:
        - id: handler
          type: <xref uid="botbuilder-core.BotHandler" />
          description: The event handler.
      return:
        description: >-
          A reference to the
          [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.
        type: this
  - name: onEndOfConversation(BotHandler)
    uid: botbuilder-core.ActivityHandler.onEndOfConversation
    package: botbuilder-core
    summary: >-
      Registers an activity event handler for the _end of conversation_
      activity.
    remarks: >-
      This activity is typically send from a Skill to a Skill caller indicating
      the end of that particular child conversation.


      To handle an End of Conversation, use the

      [onEndOfConversation](xref:botbuilder-core.ActivityHandler.onEndOfConversation)
      type-specific event handler.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onEndOfConversation(handler: BotHandler): this'
      parameters:
        - id: handler
          type: <xref uid="botbuilder-core.BotHandler" />
          description: The event handler.
      return:
        description: >-
          A reference to the
          [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.
        type: this
  - name: onEvent(BotHandler)
    uid: botbuilder-core.ActivityHandler.onEvent
    package: botbuilder-core
    summary: >-
      Registers an activity event handler for the _event_ event, emitted for
      every incoming event activity.
    remarks: >-
      Event activities communicate programmatic information from a client or
      channel to a bot.

      The meaning of an event activity is defined by the activity's

      [name](xref:botframework-schema.Activity.name) property, which is
      meaningful within the scope

      of a channel. Event activities are designed to carry both interactive
      information (such as

      button clicks) and non-interactive information (such as a notification of
      a client

      automatically updating an embedded speech model).


      To handle a `tokens/response` event event, use the

      [onTokenResponseEvent](xref:botbuilder-core.ActivityHandler.onTokenResponseEvent)
      sub-type

      event handler. To handle other named events, add logic to this handler.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onEvent(handler: BotHandler): this'
      parameters:
        - id: handler
          type: <xref uid="botbuilder-core.BotHandler" />
          description: The event handler.
      return:
        description: >-
          A reference to the
          [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.
        type: this
  - name: onInstallationUpdate(BotHandler)
    uid: botbuilder-core.ActivityHandler.onInstallationUpdate
    package: botbuilder-core
    summary: Registers an activity event handler for the _installationupdate_ activity.
    remarks: >-
      To handle a InstallationUpdate event, use the

      [onInstallationUpdate](xref:botbuilder-core.ActivityHandler.onInstallationUpdate)
      type-specific event handler.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onInstallationUpdate(handler: BotHandler): this'
      parameters:
        - id: handler
          type: <xref uid="botbuilder-core.BotHandler" />
          description: The event handler.
      return:
        description: >-
          A reference to the
          [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.
        type: this
  - name: onInstallationUpdateAdd(BotHandler)
    uid: botbuilder-core.ActivityHandler.onInstallationUpdateAdd
    package: botbuilder-core
    summary: >-
      Registers an activity event handler for the _installationupdate add_
      activity.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onInstallationUpdateAdd(handler: BotHandler): this'
      parameters:
        - id: handler
          type: <xref uid="botbuilder-core.BotHandler" />
          description: The event handler.
      return:
        description: >-
          A reference to the
          [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.

          To handle a InstallationUpdateAdd event, use the

          [onInstallationUpdateAdd](xref:botbuilder-core.ActivityHandler.onInstallationUpdateAdd)
          type-specific event handler.
        type: this
  - name: onInstallationUpdateRemove(BotHandler)
    uid: botbuilder-core.ActivityHandler.onInstallationUpdateRemove
    package: botbuilder-core
    summary: >-
      Registers an activity event handler for the _installationupdate remove_
      activity.
    remarks: >-
      To handle a InstallationUpdateRemove event, use the

      [onInstallationUpdateRemove](xref:botbuilder-core.ActivityHandler.onInstallationUpdateRemove)
      type-specific event handler.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onInstallationUpdateRemove(handler: BotHandler): this'
      parameters:
        - id: handler
          type: <xref uid="botbuilder-core.BotHandler" />
          description: The event handler.
      return:
        description: >-
          A reference to the
          [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.
        type: this
  - name: onMembersAdded(BotHandler)
    uid: botbuilder-core.ActivityHandler.onMembersAdded
    package: botbuilder-core
    summary: >-
      Registers an activity event handler for the _members added_ event, emitted
      for any incoming

      conversation update activity that includes members added to the
      conversation.
    remarks: >-
      The activity's
      [membersAdded](xref:botframework-schema.Activity.membersAdded) property

      contains the members added to the conversation, which can include the bot.


      To handle conversation update events in general, use the

      [onConversationUpdate](xref:botbuilder-core.ActivityHandler.onConversationUpdate)
      type-specific event handler.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onMembersAdded(handler: BotHandler): this'
      parameters:
        - id: handler
          type: <xref uid="botbuilder-core.BotHandler" />
          description: The event handler.
      return:
        description: >-
          A reference to the
          [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.
        type: this
  - name: onMembersRemoved(BotHandler)
    uid: botbuilder-core.ActivityHandler.onMembersRemoved
    package: botbuilder-core
    summary: >-
      Registers an activity event handler for the _members removed_ event,
      emitted for any incoming

      conversation update activity that includes members removed from the
      conversation.
    remarks: >-
      The activity's
      [membersRemoved](xref:botframework-schema.Activity.membersRemoved)
      property

      contains the members removed from the conversation, which can include the
      bot.


      To handle conversation update events in general, use the

      [onConversationUpdate](xref:botbuilder-core.ActivityHandler.onConversationUpdate)
      type-specific event handler.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onMembersRemoved(handler: BotHandler): this'
      parameters:
        - id: handler
          type: <xref uid="botbuilder-core.BotHandler" />
          description: The event handler.
      return:
        description: >-
          A reference to the
          [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.
        type: this
  - name: onMessage(BotHandler)
    uid: botbuilder-core.ActivityHandler.onMessage
    package: botbuilder-core
    summary: >-
      Registers an activity event handler for the _message_ event, emitted for
      every incoming message activity.
    remarks: >-
      Message activities represent content intended to be shown within a
      conversational interface

      and can contain text, speech, interactive cards, and binary or unknown
      attachments.

      Not all message activities contain text, the activity's
      [text](xref:botframework-schema.Activity.text)

      property can be `null` or `undefined`.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onMessage(handler: BotHandler): this'
      parameters:
        - id: handler
          type: <xref uid="botbuilder-core.BotHandler" />
          description: The event handler.
      return:
        description: >-
          A reference to the
          [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.
        type: this
  - name: onMessageReaction(BotHandler)
    uid: botbuilder-core.ActivityHandler.onMessageReaction
    package: botbuilder-core
    summary: >-
      Registers an activity event handler for the _message reaction_ event,
      emitted for every incoming

      message reaction activity.
    remarks: >-
      Message reaction activities represent a social interaction on an existing
      message activity

      within a conversation. The original activity is referred to by the message
      reaction activity's

      [replyToId](xref:botframework-schema.Activity.replyToId) property. The

      [from](xref:botframework-schema.Activity.from) property represents the
      source of the reaction,

      such as the user that reacted to the message.


      To handle when reactions are added to or removed from messages in the
      conversation, use the

      [onReactionsAdded](xref:botbuilder-core.ActivityHandler.onReactionsAdded)
      and

      [onReactionsRemoved](xref:botbuilder-core.ActivityHandler.onReactionsRemoved)
      sub-type event handlers.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onMessageReaction(handler: BotHandler): this'
      parameters:
        - id: handler
          type: <xref uid="botbuilder-core.BotHandler" />
          description: The event handler.
      return:
        description: >-
          A reference to the
          [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.
        type: this
  - name: onReactionsAdded(BotHandler)
    uid: botbuilder-core.ActivityHandler.onReactionsAdded
    package: botbuilder-core
    summary: >-
      Registers an activity event handler for the _reactions added_ event,
      emitted for any incoming

      message reaction activity that describes reactions added to a message.
    remarks: >-
      The activity's
      [reactionsAdded](xref:botframework-schema.Activity.reactionsAdded)
      property

      includes one or more reactions that were added.


      To handle message reaction events in general, use the

      [onMessageReaction](xref:botbuilder-core.ActivityHandler.onMessageReaction)
      type-specific event handler.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onReactionsAdded(handler: BotHandler): this'
      parameters:
        - id: handler
          type: <xref uid="botbuilder-core.BotHandler" />
          description: The event handler.
      return:
        description: >-
          A reference to the
          [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.
        type: this
  - name: onReactionsRemoved(BotHandler)
    uid: botbuilder-core.ActivityHandler.onReactionsRemoved
    package: botbuilder-core
    summary: >-
      Registers an activity event handler for the _reactions removed_ event,
      emitted for any incoming

      message reaction activity that describes reactions removed from a message.
    remarks: >-
      The activity's
      [reactionsRemoved](xref:botframework-schema.Activity.reactionsRemoved)
      property

      includes one or more reactions that were removed.


      To handle message reaction events in general, use the

      [onMessageReaction](xref:botbuilder-core.ActivityHandler.onMessageReaction)
      type-specific event handler.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onReactionsRemoved(handler: BotHandler): this'
      parameters:
        - id: handler
          type: <xref uid="botbuilder-core.BotHandler" />
          description: The event handler.
      return:
        description: >-
          A reference to the
          [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.
        type: this
  - name: onTokenResponseEvent(BotHandler)
    uid: botbuilder-core.ActivityHandler.onTokenResponseEvent
    package: botbuilder-core
    summary: >-
      Registers an activity event handler for the _tokens-response_ event,
      emitted for any incoming

      `tokens/response` event activity. These are generated as part of the OAuth
      authentication flow.
    remarks: >-
      The activity's [value](xref:botframework-schema.Activity.value) property
      contains the user token.


      If your bot handles authentication using an
      [OAuthPrompt](xref:botbuilder-dialogs.OAuthPrompt)

      within a dialog, then the dialog will need to receive this activity to
      complete the authentication flow.


      To handle other named events and event events in general, use the

      [onEvent](xref:botbuilder-core.ActivityHandler.onEvent) type-specific
      event handler.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onTokenResponseEvent(handler: BotHandler): this'
      parameters:
        - id: handler
          type: <xref uid="botbuilder-core.BotHandler" />
          description: The event handler.
      return:
        description: >-
          A reference to the
          [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.
        type: this
  - name: onTurn(BotHandler)
    uid: botbuilder-core.ActivityHandler.onTurn
    package: botbuilder-core
    summary: >-
      Registers an activity event handler for the _turn_ event, emitted for
      every incoming activity, regardless of type.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onTurn(handler: BotHandler): this'
      parameters:
        - id: handler
          type: <xref uid="botbuilder-core.BotHandler" />
          description: The event handler.
      return:
        description: >-
          A reference to the
          [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.
        type: this
  - name: onTyping(BotHandler)
    uid: botbuilder-core.ActivityHandler.onTyping
    package: botbuilder-core
    summary: Registers an activity event handler for the _typing_ activity.
    remarks: >-
      To handle a Typing event, use the

      [onTyping](xref:botbuilder-core.ActivityHandler.onTyping) type-specific
      event handler.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onTyping(handler: BotHandler): this'
      parameters:
        - id: handler
          type: <xref uid="botbuilder-core.BotHandler" />
          description: The event handler.
      return:
        description: >-
          A reference to the
          [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.
        type: this
  - name: onUnrecognizedActivityType(BotHandler)
    uid: botbuilder-core.ActivityHandler.onUnrecognizedActivityType
    package: botbuilder-core
    summary: >-
      Registers an activity event handler for the _unrecognized activity type_
      event, emitted for an

      incoming activity with a type for which the
      [ActivityHandler](xref:botbuilder-core.ActivityHandler)

      doesn't provide an event handler.
    remarks: >-
      The `ActivityHandler` does not define events for all activity types
      defined in the

      [Bot Framework Activity schema](http://aka.ms/botSpecs-activitySchema). In
      addition,

      channels and custom adapters can create
      [Activities](xref:botframework-schema.Activity) with

      types not in the schema. When the activity handler receives such an event,
      it emits an unrecognized activity type event.


      The activity's [type](xref:botframework-schema.Activity.type) property
      contains the activity type.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onUnrecognizedActivityType(handler: BotHandler): this'
      parameters:
        - id: handler
          type: <xref uid="botbuilder-core.BotHandler" />
          description: The event handler.
      return:
        description: >-
          A reference to the
          [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.
        type: this
  - name: run(TurnContext)
    uid: botbuilder-core.ActivityHandler.run
    package: botbuilder-core
    summary: Called to initiate the event emission process.
    remarks: >-
      Typically, you would provide this method as the function handler that the
      adapter calls

      to perform the bot's logic after the received activity has been
      pre-processed by the adapter

      and routed through any middleware.


      For example:

      ```javascript
       server.post('/api/messages', (req, res) => {
           adapter.processActivity(req, res, async (context) => {
               // Route to bot's activity logic.
               await bot.run(context);
           });
      });

      ```


      **See also**

      -
      [BotFrameworkAdapter.processActivity](xref:botbuilder.BotFrameworkAdapter.processActivity)
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function run(context: TurnContext): Promise<void>'
      parameters:
        - id: context
          type: <xref uid="botbuilder-core.TurnContext" />
          description: |
            The context object for the current turn.
      return:
        description: ''
        type: Promise&lt;void&gt;
extends: <xref uid="botbuilder-core.ActivityHandlerBase" />
