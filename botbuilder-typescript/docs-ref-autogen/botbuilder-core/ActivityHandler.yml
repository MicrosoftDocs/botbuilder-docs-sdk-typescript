### YamlMime:UniversalReference
items:
  - uid: botbuilder-core.ActivityHandler
    name: ActivityHandler
    fullName: ActivityHandler
    children:
      - botbuilder-core.ActivityHandler.onConversationUpdate
      - botbuilder-core.ActivityHandler.onDialog
      - botbuilder-core.ActivityHandler.onEvent
      - botbuilder-core.ActivityHandler.onMembersAdded
      - botbuilder-core.ActivityHandler.onMembersRemoved
      - botbuilder-core.ActivityHandler.onMessage
      - botbuilder-core.ActivityHandler.onMessageReaction
      - botbuilder-core.ActivityHandler.onReactionsAdded
      - botbuilder-core.ActivityHandler.onReactionsRemoved
      - botbuilder-core.ActivityHandler.onTokenResponseEvent
      - botbuilder-core.ActivityHandler.onTurn
      - botbuilder-core.ActivityHandler.onUnrecognizedActivityType
      - botbuilder-core.ActivityHandler.run
    langs:
      - typeScript
    type: class
    summary: >-
      Event-emitting activity handler for bots. Extends
      [ActivityHandlerBase](xref:botbuilder-core.ActivityHandlerBase).
    extends:
      name: botbuilder-core.ActivityHandlerBase
    package: botbuilder-core
    remarks: >-
      This provides an extensible class for handling incoming activities in an
      event-driven way.

      You can register an arbitrary set of handlers for each event type.


      To register a handler for an event, use the corresponding _on event_
      method. If multiple handlers are

      registered for an event, they are run in the order in which they were
      registered.


      This object emits a series of _events_ as it processes an incoming
      activity.

      A handler can stop the propagation of the event by not calling the
      continuation function.


      | Event type | Description |

      | :--- | :--- |

      | Turn | Emitted first for every activity. |

      | Type-specific | Emitted for the specific activity type, before emitting
      an event for any sub-type. |

      | Sub-type | Emitted for certain specialized events, based on activity
      content. |

      | Dialog | Emitted as the final activity processing event. Designed for
      passing control to a dialog. |


      For example:


      ```typescript

      const bot = new ActivityHandler();


      server.post('/api/messages', (req, res) => {
          adapter.processActivity(req, res, async (context) => {
              // Route to main dialog.
              await bot.run(context);
          });
      });


      bot.onTurn(async (context, next) => {
              // Handle a "turn" event.
              await context.sendActivity(`${ context.activity.type } activity received.`);
              // Continue with further processing.
              await next();
          })
          .onMessage(async (context, next) => {
              // Handle a message activity.
              await context.sendActivity(`Echo: ${ context.activity.text }`);
              // Continue with further processing.
              await next();
          });
      ```


      **See also**

      - The [Bot Framework Activity
      schema](https://aka.ms/botSpecs-activitySchema)
  - uid: botbuilder-core.ActivityHandler.onConversationUpdate
    name: onConversationUpdate(BotHandler)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Registers an activity event handler for the _conversation update_ event,
      emitted for every incoming

      conversation update activity.
    syntax:
      content: 'function onConversationUpdate(handler: BotHandler)'
      parameters:
        - id: handler
          type:
            - botbuilder-core.BotHandler
          description: |
            The event handler.
      return:
        type:
          - this
        description: ''
    package: botbuilder-core
    remarks: >-
      Returns a reference to the
      [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.


      Conversation update activities describe a changes to a conversation's
      metadata, such as title, participants,

      or other channel-specific information.


      To handle when members are added to or removed from the conversation, use
      the

      [onMembersAdded](xref:botbuilder-core.ActivityHandler.onMembersAdded) and

      [onMembersRemoved](xref:botbuilder-core.ActivityHandler.onMembersRemoved)
      sub-type event handlers.
  - uid: botbuilder-core.ActivityHandler.onDialog
    name: onDialog(BotHandler)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Registers an activity event handler for the _dialog_ event, emitted as the
      last event for an incoming activity.
    syntax:
      content: 'function onDialog(handler: BotHandler)'
      parameters:
        - id: handler
          type:
            - botbuilder-core.BotHandler
          description: |
            The event handler.
      return:
        type:
          - this
        description: ''
    package: botbuilder-core
    remarks: >-
      Returns a reference to the
      [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.


      For example:

      ```javascript

      bot.onDialog(async (context, next) => {
           if (context.activity.type === ActivityTypes.Message) {
               const dialogContext = await dialogSet.createContext(context);
               const results = await dialogContext.continueDialog();
               await conversationState.saveChanges(context);
           }

           await next();
      });

      ```
  - uid: botbuilder-core.ActivityHandler.onEvent
    name: onEvent(BotHandler)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Registers an activity event handler for the _event_ event, emitted for
      every incoming event activity.
    syntax:
      content: 'function onEvent(handler: BotHandler)'
      parameters:
        - id: handler
          type:
            - botbuilder-core.BotHandler
          description: |
            The event handler.
      return:
        type:
          - this
        description: ''
    package: botbuilder-core
    remarks: >-
      Returns a reference to the
      [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.


      Event activities communicate programmatic information from a client or
      channel to a bot.

      The meaning of an event activity is defined by the activity's

      [name](xref:botframework-schema.Activity.name) property, which is
      meaningful within the scope

      of a channel. Event activities are designed to carry both interactive
      information (such as

      button clicks) and non-interactive information (such as a notification of
      a client

      automatically updating an embedded speech model).


      To handle a `tokens/response` event event, use the

      [onTokenResponseEvent](xref:botbuilder-core.ActivityHandler.onTokenResponseEvent)
      sub-type

      event handler. To handle other named events, add logic to this handler.
  - uid: botbuilder-core.ActivityHandler.onMembersAdded
    name: onMembersAdded(BotHandler)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Registers an activity event handler for the _members added_ event, emitted
      for any incoming

      conversation update activity that includes members added to the
      conversation.
    syntax:
      content: 'function onMembersAdded(handler: BotHandler)'
      parameters:
        - id: handler
          type:
            - botbuilder-core.BotHandler
          description: |
            The event handler.
      return:
        type:
          - this
        description: ''
    package: botbuilder-core
    remarks: >-
      Returns a reference to the
      [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.


      The activity's
      [membersAdded](xref:botframework-schema.Activity.membersAdded) property

      contains the members added to the conversation, which can include the bot.


      To handle conversation update events in general, use the

      [onConversationUpdate](xref:botbuilder-core.ActivityHandler.onConversationUpdate)
      type-specific event handler.
  - uid: botbuilder-core.ActivityHandler.onMembersRemoved
    name: onMembersRemoved(BotHandler)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Registers an activity event handler for the _members removed_ event,
      emitted for any incoming

      conversation update activity that includes members removed from the
      conversation.
    syntax:
      content: 'function onMembersRemoved(handler: BotHandler)'
      parameters:
        - id: handler
          type:
            - botbuilder-core.BotHandler
          description: |
            The event handler.
      return:
        type:
          - this
        description: ''
    package: botbuilder-core
    remarks: >-
      Returns a reference to the
      [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.


      The activity's
      [membersRemoved](xref:botframework-schema.Activity.membersRemoved)
      property

      contains the members removed from the conversation, which can include the
      bot.


      To handle conversation update events in general, use the

      [onConversationUpdate](xref:botbuilder-core.ActivityHandler.onConversationUpdate)
      type-specific event handler.
  - uid: botbuilder-core.ActivityHandler.onMessage
    name: onMessage(BotHandler)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Registers an activity event handler for the _message_ event, emitted for
      every incoming message activity.
    syntax:
      content: 'function onMessage(handler: BotHandler)'
      parameters:
        - id: handler
          type:
            - botbuilder-core.BotHandler
          description: |
            The event handler.
      return:
        type:
          - this
        description: ''
    package: botbuilder-core
    remarks: >-
      Returns a reference to the
      [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.


      Message activities represent content intended to be shown within a
      conversational interface

      and can contain text, speech, interactive cards, and binary or unknown
      attachments.

      Not all message activities contain text, the activity's
      [text](xref:botframework-schema.Activity.text)

      property can be `null` or `undefined`.
  - uid: botbuilder-core.ActivityHandler.onMessageReaction
    name: onMessageReaction(BotHandler)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Registers an activity event handler for the _message reaction_ event,
      emitted for every incoming

      message reaction activity.
    syntax:
      content: 'function onMessageReaction(handler: BotHandler)'
      parameters:
        - id: handler
          type:
            - botbuilder-core.BotHandler
          description: |
            The event handler.
      return:
        type:
          - this
        description: ''
    package: botbuilder-core
    remarks: >-
      Returns a reference to the
      [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.


      Message reaction activities represent a social interaction on an existing
      message activity

      within a conversation. The original activity is referred to by the message
      reaction activity's

      [replyToId](xref:botframework-schema.Activity.replyToId) property. The

      [from](xref:botframework-schema.Activity.from) property represents the
      source of the reaction,

      such as the user that reacted to the message.


      To handle when reactions are added to or removed from messages in the
      conversation, use the

      [onReactionsAdded](xref:botbuilder-core.ActivityHandler.onReactionsAdded)
      and

      [onReactionsRemoved](xref:botbuilder-core.ActivityHandler.onReactionsRemoved)
      sub-type event handlers.
  - uid: botbuilder-core.ActivityHandler.onReactionsAdded
    name: onReactionsAdded(BotHandler)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Registers an activity event handler for the _reactions added_ event,
      emitted for any incoming

      message reaction activity that describes reactions added to a message.
    syntax:
      content: 'function onReactionsAdded(handler: BotHandler)'
      parameters:
        - id: handler
          type:
            - botbuilder-core.BotHandler
          description: |
            The event handler.
      return:
        type:
          - this
        description: ''
    package: botbuilder-core
    remarks: >-
      Returns a reference to the
      [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.


      The activity's
      [reactionsAdded](xref:botframework-schema.Activity.reactionsAdded)
      property

      includes one or more reactions that were added.


      To handle message reaction events in general, use the

      [onMessageReaction](xref:botbuilder-core.ActivityHandler.onMessageReaction)
      type-specific event handler.
  - uid: botbuilder-core.ActivityHandler.onReactionsRemoved
    name: onReactionsRemoved(BotHandler)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Registers an activity event handler for the _reactions removed_ event,
      emitted for any incoming

      message reaction activity that describes reactions removed from a message.
    syntax:
      content: 'function onReactionsRemoved(handler: BotHandler)'
      parameters:
        - id: handler
          type:
            - botbuilder-core.BotHandler
          description: |
            The event handler.
      return:
        type:
          - this
        description: ''
    package: botbuilder-core
    remarks: >-
      Returns a reference to the
      [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.


      The activity's
      [reactionsRemoved](xref:botframework-schema.Activity.reactionsRemoved)
      property

      includes one or more reactions that were removed.


      To handle message reaction events in general, use the

      [onMessageReaction](xref:botbuilder-core.ActivityHandler.onMessageReaction)
      type-specific event handler.
  - uid: botbuilder-core.ActivityHandler.onTokenResponseEvent
    name: onTokenResponseEvent(BotHandler)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Registers an activity event handler for the _tokens-response_ event,
      emitted for any incoming

      `tokens/response` event activity. These are generated as part of the OAuth
      authentication flow.
    syntax:
      content: 'function onTokenResponseEvent(handler: BotHandler)'
      parameters:
        - id: handler
          type:
            - botbuilder-core.BotHandler
          description: |
            The event handler.
      return:
        type:
          - this
        description: ''
    package: botbuilder-core
    remarks: >-
      Returns a reference to the
      [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.


      The activity's [value](xref:botframework-schema.Activity.value) property
      contains the user token.


      If your bot handles authentication using an
      [OAuthPrompt](xref:botbuilder-dialogs.OAuthPrompt)

      within a dialog, then the dialog will need to receive this activity to
      complete the authentication flow.


      To handle other named events and event events in general, use the

      [onEvent](xref:botbuilder-core.ActivityHandler.onEvent) type-specific
      event handler.
  - uid: botbuilder-core.ActivityHandler.onTurn
    name: onTurn(BotHandler)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Registers an activity event handler for the _turn_ event, emitted for
      every incoming activity, regardless of type.
    syntax:
      content: 'function onTurn(handler: BotHandler)'
      parameters:
        - id: handler
          type:
            - botbuilder-core.BotHandler
          description: |
            The event handler.
      return:
        type:
          - this
        description: ''
    package: botbuilder-core
    remarks: >-
      Returns a reference to the
      [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.
  - uid: botbuilder-core.ActivityHandler.onUnrecognizedActivityType
    name: onUnrecognizedActivityType(BotHandler)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Registers an activity event handler for the _unrecognized activity type_
      event, emitted for an

      incoming activity with a type for which the
      [ActivityHandler](xref:botbuilder-core.ActivityHandler)

      doesn't provide an event handler.
    syntax:
      content: 'function onUnrecognizedActivityType(handler: BotHandler)'
      parameters:
        - id: handler
          type:
            - botbuilder-core.BotHandler
          description: |
            The event handler.
      return:
        type:
          - this
        description: ''
    package: botbuilder-core
    remarks: >-
      Returns a reference to the
      [ActivityHandler](xref:botbuilder-core.ActivityHandler) object.


      The `ActivityHandler` does not define events for all activity types
      defined in the

      [Bot Framework Activity schema](http://aka.ms/botSpecs-activitySchema). In
      addition,

      channels and custom adapters can create
      [Activities](xref:botframework-schema.Activity) with

      types not in the schema. When the activity handler receives such an event,
      it emits an unrecognized activity type event.


      The activity's [type](xref:botframework-schema.Activity.type) property
      contains the activity type.
  - uid: botbuilder-core.ActivityHandler.run
    name: run(TurnContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: Called to initiate the event emission process.
    syntax:
      content: 'function run(context: TurnContext)'
      parameters:
        - id: context
          type:
            - botbuilder-core.TurnContext
          description: |
            The context object for the current turn.
      return:
        type:
          - Promise<void>
        description: ''
    package: botbuilder-core
    remarks: >-
      Typically, you would provide this method as the function handler that the
      adapter calls

      to perform the bot's logic after the received activity has been
      pre-processed by the adapter

      and routed through any middleware.


      For example:

      ```javascript
       server.post('/api/messages', (req, res) => {
           adapter.processActivity(req, res, async (context) => {
               // Route to main dialog.
               await bot.run(context);
           });
      });

      ```


      **See also**

      -
      [BotFrameworkAdapter.processActivity](xref:botbuilder.BotFrameworkAdapter.processActivity)
references:
  - uid: botbuilder-core.ActivityHandlerBase
    name: ActivityHandlerBase
    spec.typeScript:
      - name: ActivityHandlerBase
        fullName: ActivityHandlerBase
        uid: botbuilder-core.ActivityHandlerBase
  - uid: botbuilder-core.BotHandler
    name: BotHandler
    spec.typeScript:
      - name: BotHandler
        fullName: BotHandler
        uid: botbuilder-core.BotHandler
  - uid: botbuilder-core.TurnContext
    name: TurnContext
    spec.typeScript:
      - name: TurnContext
        fullName: TurnContext
        uid: botbuilder-core.TurnContext
