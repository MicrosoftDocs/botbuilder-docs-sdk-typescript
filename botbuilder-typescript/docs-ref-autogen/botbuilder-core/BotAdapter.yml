### YamlMime:TSType
name: BotAdapter
uid: botbuilder-core.BotAdapter
package: botbuilder-core
summary: >-
  Defines the core behavior of a bot adapter that can connect a bot to a service
  endpoint.
fullName: BotAdapter
isPreview: false
isDeprecated: false
type: class
properties:
  - name: BotIdentityKey
    uid: botbuilder-core.BotAdapter.BotIdentityKey
    package: botbuilder-core
    summary: ''
    fullName: BotIdentityKey
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public BotIdentityKey: Symbol = Symbol(''BotIdentity'')'
      return:
        type: Symbol
        description: ''
  - name: OAuthScopeKey
    uid: botbuilder-core.BotAdapter.OAuthScopeKey
    package: botbuilder-core
    summary: ''
    fullName: OAuthScopeKey
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public OAuthScopeKey: Symbol = Symbol(''OAuthScope'')'
      return:
        type: Symbol
        description: ''
  - name: onTurnError
    uid: botbuilder-core.BotAdapter.onTurnError
    package: botbuilder-core
    summary: >-
      Gets or sets an error handler that can catch exceptions in the middleware
      or application.
    fullName: onTurnError
    isPreview: false
    isDeprecated: false
    syntax:
      content: '(context: TurnContext, error: Error) => Promise<void> onTurnError'
      return:
        type: '(context: TurnContext, error: Error) =&gt; Promise&lt;void&gt;'
        description: ''
methods:
  - name: >-
      continueConversation(Partial<ConversationReference>, (revocableContext:
      TurnContext) => Promise<void>)
    uid: botbuilder-core.BotAdapter.continueConversation
    package: botbuilder-core
    summary: >-
      Asynchronously resumes a conversation with a user, possibly after some
      time has gone by.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function continueConversation(reference: Partial<ConversationReference>,
        logic: (revocableContext: TurnContext) => Promise<void>)
      parameters:
        - id: reference
          type: Partial&lt;ConversationReference&gt;
          description: A reference to the conversation to continue.
        - id: logic
          type: '(revocableContext: TurnContext) =&gt; Promise&lt;void&gt;'
          description: |
            The asynchronous method to call after the adapter middleware runs.
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: 'deleteActivity(TurnContext, Partial<ConversationReference>)'
    uid: botbuilder-core.BotAdapter.deleteActivity
    package: botbuilder-core
    summary: >
      Asynchronously deletes an existing activity.

      This interface supports the framework and is not intended to be called
      directly for your code.

      Use
      [TurnContext.deleteActivity](xref:botbuilder-core.TurnContext.deleteActivity)
      to delete

      an activity from your bot code.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteActivity(context: TurnContext, reference:
        Partial<ConversationReference>)
      parameters:
        - id: context
          type: <xref uid="botbuilder-core.TurnContext" />
          description: The context object for the turn.
        - id: reference
          type: Partial&lt;ConversationReference&gt;
          description: |
            Conversation reference information for the activity to delete.
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: 'sendActivities(TurnContext, Partial<Activity>[])'
    uid: botbuilder-core.BotAdapter.sendActivities
    package: botbuilder-core
    summary: >
      Asynchronously sends a set of outgoing activities to a channel server.

      This method supports the framework and is not intended to be called
      directly for your code.

      Use the turn context's
      [sendActivity](xref:botbuilder-core.TurnContext.sendActivity) or

      [sendActivities](xref:botbuilder-core.TurnContext.sendActivities) method
      from your bot code.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function sendActivities(context: TurnContext, activities:
        Partial<Activity>[])
      parameters:
        - id: context
          type: <xref uid="botbuilder-core.TurnContext" />
          description: The context object for the turn.
        - id: activities
          type: 'Partial&lt;Activity&gt;[]'
          description: |
            The activities to send.
      return:
        type: 'Promise&lt;ResourceResponse[]&gt;'
        description: 'An array of [ResourceResponse](xref:)'
  - name: 'updateActivity(TurnContext, Partial<Activity>)'
    uid: botbuilder-core.BotAdapter.updateActivity
    package: botbuilder-core
    summary: >
      Asynchronously replaces a previous activity with an updated version.

      This interface supports the framework and is not intended to be called
      directly for your code.

      Use
      [TurnContext.updateActivity](xref:botbuilder-core.TurnContext.updateActivity)
      to update

      an activity from your bot code.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updateActivity(context: TurnContext, activity:
        Partial<Activity>)
      parameters:
        - id: context
          type: <xref uid="botbuilder-core.TurnContext" />
          description: The context object for the turn.
        - id: activity
          type: Partial&lt;Activity&gt;
          description: |
            The updated version of the activity to replace.
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: >-
      use((context: TurnContext, next: () => Promise<void>) => Promise<void> |
      Middleware[])
    uid: botbuilder-core.BotAdapter.use
    package: botbuilder-core
    summary: Adds middleware to the adapter's pipeline.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function use(middleware: (context: TurnContext, next: () =>
        Promise<void>) => Promise<void> | Middleware[])
      parameters:
        - id: middleware
          type: >-
            (context: TurnContext, next: () =&gt; Promise&lt;void&gt;) =&gt;
            Promise&lt;void&gt; | <xref uid="botbuilder-core.Middleware" />[]
          description: |
            The middleware or middleware handlers to add.
      return:
        type: this
        description: ''
