### YamlMime:TSType
name: ExtendedUserTokenProvider
uid: botbuilder-core.ExtendedUserTokenProvider
package: botbuilder-core
summary: >-
  Interface for User Token OAuth Single Sign On and Token Exchange APIs for
  BotAdapters
fullName: ExtendedUserTokenProvider
remarks: ''
isPreview: false
isDeprecated: true
customDeprecatedMessage: Use `UserTokenClient` instead.
type: interface
inheritedMethods:
  - name: 'getTokenStatus(TurnContext, string, string, any)'
    uid: botbuilder-core.ExtendedUserTokenProvider.getTokenStatus
    package: botbuilder-core
    summary: >-
      Retrieves the token status for each configured connection for the given
      user, using the bot's AppCredentials.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getTokenStatus(context: TurnContext, userId: string,
        includeFilter?: string, oAuthAppCredentials?: any): Promise<any[]>
      parameters:
        - id: context
          type: <xref uid="botbuilder-core.TurnContext" />
          description: Context for the current turn of conversation with the user.
        - id: userId
          type: string
          description: The user Id for which token status is retrieved.
        - id: includeFilter
          type: string
          description: >-
            Comma separated list of connection's to include. Blank will return
            token status for all configured connections.
        - id: oAuthAppCredentials
          type: any
          description: |
            The app credentials for OAuth.
      return:
        description: ''
        type: 'Promise&lt;any[]&gt;'
    inheritanceDescription: >-
      <b>Inherited From</b>
      [IUserTokenProvider.getTokenStatus](xref:botbuilder-core.IUserTokenProvider.getTokenStatus)
methods:
  - name: 'exchangeToken(TurnContext, string, string, TokenExchangeRequest)'
    uid: botbuilder-core.ExtendedUserTokenProvider.exchangeToken
    package: botbuilder-core
    summary: Performs a token exchange operation such as for single sign-on.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function exchangeToken(context: TurnContext, connectionName: string,
        userId: string, tokenExchangeRequest: TokenExchangeRequest):
        Promise<TokenResponse>
      parameters:
        - id: context
          type: <xref uid="botbuilder-core.TurnContext" />
          description: Context for the current turn of conversation with the user.
        - id: connectionName
          type: string
          description: Name of the auth connection to use.
        - id: userId
          type: string
          description: The user id that will be associated with the token.
        - id: tokenExchangeRequest
          type: TokenExchangeRequest
          description: >
            The exchange request details, either a token to exchange or a uri to
            exchange.
      return:
        description: ''
        type: Promise&lt;TokenResponse&gt;
  - name: >-
      exchangeToken(TurnContext, string, string, TokenExchangeRequest,
      CoreAppCredentials)
    uid: botbuilder-core.ExtendedUserTokenProvider.exchangeToken_1
    package: botbuilder-core
    summary: Performs a token exchange operation such as for single sign-on.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function exchangeToken(context: TurnContext, connectionName: string,
        userId: string, tokenExchangeRequest: TokenExchangeRequest,
        appCredentials: CoreAppCredentials): Promise<TokenResponse>
      parameters:
        - id: context
          type: <xref uid="botbuilder-core.TurnContext" />
          description: Context for the current turn of conversation with the user.
        - id: connectionName
          type: string
          description: Name of the auth connection to use.
        - id: userId
          type: string
          description: The user id that will be associated with the token.
        - id: tokenExchangeRequest
          type: TokenExchangeRequest
          description: >
            The exchange request details, either a token to exchange or a uri to
            exchange.
        - id: appCredentials
          type: <xref uid="botbuilder-core.CoreAppCredentials" />
          description: ''
      return:
        description: ''
        type: Promise&lt;TokenResponse&gt;
  - name: 'getAadTokens(TurnContext, string, string[], CoreAppCredentials)'
    uid: botbuilder-core.ExtendedUserTokenProvider.getAadTokens
    package: botbuilder-core
    summary: Signs the user out with the token server.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAadTokens(context: TurnContext, connectionName: string,
        resourceUrls: string[], appCredentials?: CoreAppCredentials):
        Promise<[key: string]: TokenResponse>
      parameters:
        - id: context
          type: <xref uid="botbuilder-core.TurnContext" />
          description: Context for the current turn of conversation with the user.
        - id: connectionName
          type: string
          description: Name of the auth connection to use.
        - id: resourceUrls
          type: 'string[]'
          description: ''
        - id: appCredentials
          type: <xref uid="botbuilder-core.CoreAppCredentials" />
          description: ''
      return:
        description: ''
        type: 'Promise&lt;[key: string]: TokenResponse&gt;'
  - name: 'getSignInLink(TurnContext, string, CoreAppCredentials)'
    uid: botbuilder-core.ExtendedUserTokenProvider.getSignInLink
    package: botbuilder-core
    summary: >-
      Gets a signin link from the token server that can be sent as part of a
      SigninCard.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSignInLink(context: TurnContext, connectionName: string,
        appCredentials?: CoreAppCredentials): Promise<string>
      parameters:
        - id: context
          type: <xref uid="botbuilder-core.TurnContext" />
          description: Context for the current turn of conversation with the user.
        - id: connectionName
          type: string
          description: Name of the auth connection to use.
        - id: appCredentials
          type: <xref uid="botbuilder-core.CoreAppCredentials" />
          description: ''
      return:
        description: ''
        type: Promise&lt;string&gt;
  - name: 'getSignInResource(TurnContext, string)'
    uid: botbuilder-core.ExtendedUserTokenProvider.getSignInResource
    package: botbuilder-core
    summary: >-
      Get the raw signin resource to be sent to the user for signin for a
      connection name.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSignInResource(context: TurnContext, connectionName:
        string): Promise<SignInUrlResponse>
      parameters:
        - id: context
          type: <xref uid="botbuilder-core.TurnContext" />
          description: Context for the current turn of conversation with the user.
        - id: connectionName
          type: string
          description: |
            Name of the auth connection to use.
      return:
        description: ''
        type: Promise&lt;SignInUrlResponse&gt;
  - name: 'getSignInResource(TurnContext, string, string, string)'
    uid: botbuilder-core.ExtendedUserTokenProvider.getSignInResource_1
    package: botbuilder-core
    summary: >-
      Get the raw signin resource to be sent to the user for signin for a
      connection name.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSignInResource(context: TurnContext, connectionName: string,
        userId: string, finalRedirect?: string): Promise<SignInUrlResponse>
      parameters:
        - id: context
          type: <xref uid="botbuilder-core.TurnContext" />
          description: Context for the current turn of conversation with the user.
        - id: connectionName
          type: string
          description: Name of the auth connection to use.
        - id: userId
          type: string
          description: The user id that will be associated with the token.
        - id: finalRedirect
          type: string
          description: |
            The final URL that the OAuth flow will redirect to.
      return:
        description: ''
        type: Promise&lt;SignInUrlResponse&gt;
  - name: 'getSignInResource(TurnContext, string, string, string, CoreAppCredentials)'
    uid: botbuilder-core.ExtendedUserTokenProvider.getSignInResource_2
    package: botbuilder-core
    summary: >-
      Get the raw signin resource to be sent to the user for signin for a
      connection name.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSignInResource(context: TurnContext, connectionName: string,
        userId: string, finalRedirect?: string, appCredentials?:
        CoreAppCredentials): Promise<SignInUrlResponse>
      parameters:
        - id: context
          type: <xref uid="botbuilder-core.TurnContext" />
          description: Context for the current turn of conversation with the user.
        - id: connectionName
          type: string
          description: Name of the auth connection to use.
        - id: userId
          type: string
          description: The user id that will be associated with the token.
        - id: finalRedirect
          type: string
          description: |
            The final URL that the OAuth flow will redirect to.
        - id: appCredentials
          type: <xref uid="botbuilder-core.CoreAppCredentials" />
          description: ''
      return:
        description: ''
        type: Promise&lt;SignInUrlResponse&gt;
  - name: 'getUserToken(TurnContext, string, string, CoreAppCredentials)'
    uid: botbuilder-core.ExtendedUserTokenProvider.getUserToken
    package: botbuilder-core
    summary: Retrieves the OAuth token for a user that is in a sign-in flow.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getUserToken(context: TurnContext, connectionName: string,
        magicCode?: string, appCredentials?: CoreAppCredentials):
        Promise<TokenResponse>
      parameters:
        - id: context
          type: <xref uid="botbuilder-core.TurnContext" />
          description: Context for the current turn of conversation with the user.
        - id: connectionName
          type: string
          description: Name of the auth connection to use.
        - id: magicCode
          type: string
          description: |
            (Optional) Optional user entered code to validate.
        - id: appCredentials
          type: <xref uid="botbuilder-core.CoreAppCredentials" />
          description: ''
      return:
        description: ''
        type: Promise&lt;TokenResponse&gt;
  - name: 'signOutUser(TurnContext, string, string, CoreAppCredentials)'
    uid: botbuilder-core.ExtendedUserTokenProvider.signOutUser
    package: botbuilder-core
    summary: Signs the user out with the token server.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function signOutUser(context: TurnContext, connectionName: string,
        userId?: string, appCredentials?: CoreAppCredentials): Promise<void>
      parameters:
        - id: context
          type: <xref uid="botbuilder-core.TurnContext" />
          description: Context for the current turn of conversation with the user.
        - id: connectionName
          type: string
          description: Name of the auth connection to use.
        - id: userId
          type: string
          description: User id of user to sign out.
        - id: appCredentials
          type: <xref uid="botbuilder-core.CoreAppCredentials" />
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
extends: <xref uid="botbuilder-core.IUserTokenProvider" />
