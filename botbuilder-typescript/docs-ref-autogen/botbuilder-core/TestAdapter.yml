### YamlMime:UniversalReference
items:
  - uid: botbuilder-core.TestAdapter
    name: TestAdapter
    fullName: TestAdapter
    children:
      - botbuilder-core.TestAdapter.continueConversation
      - botbuilder-core.TestAdapter.deletedActivities
      - botbuilder-core.TestAdapter.send
      - botbuilder-core.TestAdapter.template
      - botbuilder-core.TestAdapter.test
      - botbuilder-core.TestAdapter.testActivities
      - botbuilder-core.TestAdapter.constructor
      - botbuilder-core.TestAdapter.updatedActivities
    langs:
      - typeScript
    type: class
    summary: >-
      Test adapter used for unit tests. This adapter can be used to simulate
      sending messages from the

      user to the bot.
    extends:
      name: botbuilder-core.BotAdapter
    package: botbuilder-core
    remarks: >-
      The following example sets up the test adapter and then executes a simple
      test:


      ```JavaScript

      const { TestAdapter } = require('botbuilder');


      const adapter = new TestAdapter(async (context) => {
           await context.sendActivity(`Hello World`);
      });


      adapter.test(`hi`, `Hello World`)
             .then(() => done());
      ```
  - uid: botbuilder-core.TestAdapter.continueConversation
    name: continueConversation
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The `TestAdapter` doesn't implement `continueConversation()` and will
      return an error if it's

      called.
    syntax:
      content: >-
        function continueConversation(reference: Partial<ConversationReference>,
        logic: (revocableContext: TurnContext) => Promise<void>)
      parameters:
        - id: reference
          type:
            - Partial<ConversationReference>
          description: ''
        - id: logic
          type:
            - '(revocableContext: TurnContext) => Promise<void>'
          description: ''
      return:
        type:
          - Promise<void>
    package: botbuilder-core
  - uid: botbuilder-core.TestAdapter.deletedActivities
    name: deletedActivities
    fullName: deletedActivities
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      List of deleted activities passed to the adapter which can be inspected
      after the current

      turn completes.
    syntax:
      content: 'public deletedActivities: Partial<ConversationReference>[] = []'
      return:
        type:
          - 'Partial<ConversationReference>[]'
    package: botbuilder-core
    remarks: |-
      This example shows how to test that expected deletes have been preformed:

      ```JavaScript
      adapter.test('delete', '1 deleted').then(() => {
         assert(adapter.deletedActivities.length === 1);
         assert(adapter.deletedActivities[0].activityId === '12345');
         done();
      });
      ```
  - uid: botbuilder-core.TestAdapter.send
    name: send
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Sends something to the bot. This returns a new `TestFlow` instance which
      can be used to add

      additional steps for inspecting the bots reply and then sending additional
      activities.
    syntax:
      content: 'function send(userSays: string | Partial<Activity>)'
      parameters:
        - id: userSays
          type:
            - string | Partial<Activity>
          description: |
            Text or activity simulating user input.
      return:
        type:
          - botbuilder-core.TestFlow
    package: botbuilder-core
    remarks: >-
      This example shows how to send a message and then verify that the response
      was as expected:


      ```JavaScript

      adapter.send('hi')
             .assertReply('Hello World')
             .then(() => done());
      ```
  - uid: botbuilder-core.TestAdapter.template
    name: template
    fullName: template
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      `Activity` template that will be merged with all activities sent to the
      logic under test.
    syntax:
      content: 'public template: Partial<Activity>'
      return:
        type:
          - Partial<Activity>
    package: botbuilder-core
  - uid: botbuilder-core.TestAdapter.test
    name: test
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Send something to the bot and expects the bot to return with a given
      reply.
    syntax:
      content: >-
        function test(userSays: string | Partial<Activity>, expected: string |
        Partial<Activity> | (activity: Partial<Activity>, description?: string)
        => void, description?: string, timeout?: number)
      parameters:
        - id: userSays
          type:
            - string | Partial<Activity>
          description: Text or activity simulating user input.
        - id: expected
          type:
            - >-
              string | Partial<Activity> | (activity: Partial<Activity>,
              description?: string) => void
          description: Expected text or activity of the reply sent by the bot.
        - id: description
          type:
            - string
          description: >-
            (Optional) Description of the test case. If not provided one will be
            generated.
          optional: true
        - id: timeout
          type:
            - number
          description: >
            (Optional) number of milliseconds to wait for a response from bot.
            Defaults to a value of `3000`.
          optional: true
      return:
        type:
          - botbuilder-core.TestFlow
    package: botbuilder-core
    remarks: >-
      This is simply a wrapper around calls to `send()` and `assertReply()`.
      This is such a

      common pattern that a helper is provided.


      ```JavaScript

      adapter.test('hi', 'Hello World')
             .then(() => done());
      ```
  - uid: botbuilder-core.TestAdapter.testActivities
    name: testActivities
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Test a list of activities.
      Each activity with the "bot" role will be processed with assertReply()
      Every other activity will be processed as a user message with send()
    syntax:
      content: >-
        function testActivities(activities: Partial<Activity>[], description?:
        string, timeout?: number)
      parameters:
        - id: activities
          type:
            - 'Partial<Activity>[]'
          description: Array of activities.
        - id: description
          type:
            - string
          description: >-
            (Optional) Description of the test case. If not provided one will be
            generated.
          optional: true
        - id: timeout
          type:
            - number
          description: >
            (Optional) number of milliseconds to wait for a response from bot.
            Defaults to a value of `3000`.
          optional: true
      return:
        type:
          - botbuilder-core.TestFlow
    package: botbuilder-core
  - uid: botbuilder-core.TestAdapter.constructor
    name: TestAdapter
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates a new TestAdapter instance.
    syntax:
      content: >-
        new TestAdapter(logic: (context: TurnContext) => Promise<void>,
        template?: Partial<Activity>, sendTraceActivities?: boolean)
      parameters:
        - id: logic
          type:
            - '(context: TurnContext) => Promise<void>'
          description: The bots logic that's under test.
        - id: template
          type:
            - Partial<Activity>
          description: >
            (Optional) activity containing default values to assign to all test
            messages received.
          optional: true
        - id: sendTraceActivities
          type:
            - boolean
          description: ''
          optional: true
    package: botbuilder-core
  - uid: botbuilder-core.TestAdapter.updatedActivities
    name: updatedActivities
    fullName: updatedActivities
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      List of updated activities passed to the adapter which can be inspected
      after the current

      turn completes.
    syntax:
      content: 'public updatedActivities: Partial<Activity>[] = []'
      return:
        type:
          - 'Partial<Activity>[]'
    package: botbuilder-core
    remarks: |-
      This example shows how to test that expected updates have been preformed:

      ```JavaScript
      adapter.test('update', '1 updated').then(() => {
         assert(adapter.updatedActivities.length === 1);
         assert(adapter.updatedActivities[0].id === '12345');
         done();
      });
      ```
references:
  - uid: botbuilder-core.BotAdapter
    name: BotAdapter
    spec.typeScript:
      - name: BotAdapter
        fullName: BotAdapter
        uid: botbuilder-core.BotAdapter
  - uid: botbuilder-core.TestFlow
    name: TestFlow
    spec.typeScript:
      - name: TestFlow
        fullName: TestFlow
        uid: botbuilder-core.TestFlow
