### YamlMime:TSType
name: TestAdapter
uid: botbuilder-core.TestAdapter
package: botbuilder-core
summary: >-
  Test adapter used for unit tests. This adapter can be used to simulate sending
  messages from the

  user to the bot.
fullName: TestAdapter
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: >-
      TestAdapter((context: TurnContext) => Promise<void>, Partial<Activity>,
      boolean)
    uid: botbuilder-core.TestAdapter.constructor
    package: botbuilder-core
    summary: Creates a new TestAdapter instance.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new TestAdapter(logic: (context: TurnContext) => Promise<void>,
        template?: Partial<Activity>, sendTraceActivities?: boolean)
      parameters:
        - id: logic
          type: '(context: TurnContext) =&gt; Promise&lt;void&gt;'
          description: The bots logic that's under test.
        - id: template
          type: Partial&lt;Activity&gt;
          description: >
            (Optional) activity containing default values to assign to all test
            messages received.
        - id: sendTraceActivities
          type: boolean
          description: ''
properties:
  - name: BotIdentityKey
    uid: botbuilder-core.TestAdapter.BotIdentityKey
    package: botbuilder-core
    summary: ''
    fullName: BotIdentityKey
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public BotIdentityKey: Symbol = Symbol(''BotIdentity'')'
      return:
        type: Symbol
        description: ''
  - name: deletedActivities
    uid: botbuilder-core.TestAdapter.deletedActivities
    package: botbuilder-core
    summary: >-
      List of deleted activities passed to the adapter which can be inspected
      after the current

      turn completes.
    fullName: deletedActivities
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public deletedActivities: Partial<ConversationReference>[] = []'
      return:
        type: 'Partial&lt;ConversationReference&gt;[]'
        description: ''
  - name: OAuthScopeKey
    uid: botbuilder-core.TestAdapter.OAuthScopeKey
    package: botbuilder-core
    summary: ''
    fullName: OAuthScopeKey
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public OAuthScopeKey: Symbol = Symbol(''OAuthScope'')'
      return:
        type: Symbol
        description: ''
  - name: onTurnError
    uid: botbuilder-core.TestAdapter.onTurnError
    package: botbuilder-core
    summary: >-
      Gets or sets an error handler that can catch exceptions in the middleware
      or application.
    fullName: onTurnError
    isPreview: false
    isDeprecated: false
    syntax:
      content: '(context: TurnContext, error: Error) => Promise<void> onTurnError'
      return:
        type: '(context: TurnContext, error: Error) =&gt; Promise&lt;void&gt;'
        description: ''
  - name: template
    uid: botbuilder-core.TestAdapter.template
    package: botbuilder-core
    summary: >-
      `Activity` template that will be merged with all activities sent to the
      logic under test.
    fullName: template
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public template: Partial<Activity>'
      return:
        type: Partial&lt;Activity&gt;
        description: ''
  - name: updatedActivities
    uid: botbuilder-core.TestAdapter.updatedActivities
    package: botbuilder-core
    summary: >-
      List of updated activities passed to the adapter which can be inspected
      after the current

      turn completes.
    fullName: updatedActivities
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public updatedActivities: Partial<Activity>[] = []'
      return:
        type: 'Partial&lt;Activity&gt;[]'
        description: ''
methods:
  - name: 'addExchangeableToken(string, string, string, string, string)'
    uid: botbuilder-core.TestAdapter.addExchangeableToken
    package: botbuilder-core
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function addExchangeableToken(connectionName: string, channelId: string,
        userId: string, exchangeableItem: string, token: string)
      parameters:
        - id: connectionName
          type: string
          description: ''
        - id: channelId
          type: string
          description: ''
        - id: userId
          type: string
          description: ''
        - id: exchangeableItem
          type: string
          description: ''
        - id: token
          type: string
          description: ''
  - name: 'addUserToken(string, string, string, string, string)'
    uid: botbuilder-core.TestAdapter.addUserToken
    package: botbuilder-core
    summary: Adds a fake user token so it can later be retrieved.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function addUserToken(connectionName: string, channelId: string, userId:
        string, token: string, magicCode: string)
      parameters:
        - id: connectionName
          type: string
          description: The connection name.
        - id: channelId
          type: string
          description: The channel id.
        - id: userId
          type: string
          description: The user id.
        - id: token
          type: string
          description: The token to store.
        - id: magicCode
          type: string
          description: |
            (Optional) The optional magic code to associate with this token.
  - name: >-
      continueConversation(Partial<ConversationReference>, (revocableContext:
      TurnContext) => Promise<void>)
    uid: botbuilder-core.TestAdapter.continueConversation
    package: botbuilder-core
    summary: >-
      The `TestAdapter` doesn't implement `continueConversation()` and will
      return an error if it's

      called.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function continueConversation(reference: Partial<ConversationReference>,
        logic: (revocableContext: TurnContext) => Promise<void>)
      parameters:
        - id: reference
          type: Partial&lt;ConversationReference&gt;
          description: ''
        - id: logic
          type: '(revocableContext: TurnContext) =&gt; Promise&lt;void&gt;'
          description: ''
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: 'exchangeToken(TurnContext, string, string, TokenExchangeRequest)'
    uid: botbuilder-core.TestAdapter.exchangeToken
    package: botbuilder-core
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function exchangeToken(context: TurnContext, connectionName: string,
        userId: string, tokenExchangeRequest: TokenExchangeRequest)
      parameters:
        - id: context
          type: <xref uid="botbuilder-core.TurnContext" />
          description: ''
        - id: connectionName
          type: string
          description: ''
        - id: userId
          type: string
          description: ''
        - id: tokenExchangeRequest
          type: TokenExchangeRequest
          description: ''
      return:
        type: Promise&lt;TokenResponse&gt;
        description: ''
  - name: 'getAadTokens(TurnContext, string, string[])'
    uid: botbuilder-core.TestAdapter.getAadTokens
    package: botbuilder-core
    summary: Signs the user out with the token server.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAadTokens(context: TurnContext, connectionName: string,
        resourceUrls: string[])
      parameters:
        - id: context
          type: <xref uid="botbuilder-core.TurnContext" />
          description: Context for the current turn of conversation with the user.
        - id: connectionName
          type: string
          description: |
            Name of the auth connection to use.
        - id: resourceUrls
          type: 'string[]'
          description: ''
      return:
        type: 'Promise&lt;[key: string]: TokenResponse&gt;'
        description: ''
  - name: 'getSignInLink(TurnContext, string)'
    uid: botbuilder-core.TestAdapter.getSignInLink
    package: botbuilder-core
    summary: >-
      Gets a signin link from the token server that can be sent as part of a
      SigninCard.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getSignInLink(context: TurnContext, connectionName: string)'
      parameters:
        - id: context
          type: <xref uid="botbuilder-core.TurnContext" />
          description: Context for the current turn of conversation with the user.
        - id: connectionName
          type: string
          description: |
            Name of the auth connection to use.
      return:
        type: Promise&lt;string&gt;
        description: ''
  - name: 'getSignInResource(TurnContext, string, string, string)'
    uid: botbuilder-core.TestAdapter.getSignInResource
    package: botbuilder-core
    summary: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSignInResource(context: TurnContext, connectionName: string,
        userId?: string, finalRedirect?: string)
      parameters:
        - id: context
          type: <xref uid="botbuilder-core.TurnContext" />
          description: ''
        - id: connectionName
          type: string
          description: ''
        - id: userId
          type: string
          description: ''
        - id: finalRedirect
          type: string
          description: ''
      return:
        type: Promise&lt;SignInUrlResponse&gt;
        description: ''
  - name: 'getTokenStatus(TurnContext, string, string, any)'
    uid: botbuilder-core.TestAdapter.getTokenStatus
    package: botbuilder-core
    summary: >-
      Asynchronously retrieves the token status for each configured connection
      for the given user.

      In testAdapter, retrieves tokens which were previously added via
      addUserToken.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getTokenStatus(context: TurnContext, userId: string,
        includeFilter?: string, oAuthAppCredentials?: any)
      parameters:
        - id: context
          type: <xref uid="botbuilder-core.TurnContext" />
          description: The context object for the turn.
        - id: userId
          type: string
          description: The ID of the user to retrieve the token status for.
        - id: includeFilter
          type: string
          description: >-
            Optional. A comma-separated list of connection's to include. If
            present,
                 the `includeFilter` parameter limits the tokens this method returns.
        - id: oAuthAppCredentials
          type: any
          description: |
            AppCredentials for OAuth.
      return:
        type: 'Promise&lt;any[]&gt;'
        description: >-
          The [TokenStatus](xref:botframework-connector.TokenStatus) objects
          retrieved.
  - name: 'getUserToken(TurnContext, string, string)'
    uid: botbuilder-core.TestAdapter.getUserToken
    package: botbuilder-core
    summary: Retrieves the OAuth token for a user that is in a sign-in flow.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getUserToken(context: TurnContext, connectionName: string,
        magicCode?: string)
      parameters:
        - id: context
          type: <xref uid="botbuilder-core.TurnContext" />
          description: Context for the current turn of conversation with the user.
        - id: connectionName
          type: string
          description: Name of the auth connection to use.
        - id: magicCode
          type: string
          description: |
            (Optional) Optional user entered code to validate.
      return:
        type: Promise&lt;TokenResponse&gt;
        description: ''
  - name: send(string | Partial<Activity>)
    uid: botbuilder-core.TestAdapter.send
    package: botbuilder-core
    summary: >-
      Sends something to the bot. This returns a new `TestFlow` instance which
      can be used to add

      additional steps for inspecting the bots reply and then sending additional
      activities.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function send(userSays: string | Partial<Activity>)'
      parameters:
        - id: userSays
          type: string | Partial&lt;Activity&gt;
          description: |
            Text or activity simulating user input.
      return:
        type: <xref uid="botbuilder-core.TestFlow" />
        description: ''
  - name: 'signOutUser(TurnContext, string)'
    uid: botbuilder-core.TestAdapter.signOutUser
    package: botbuilder-core
    summary: Signs the user out with the token server.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function signOutUser(context: TurnContext, connectionName: string)'
      parameters:
        - id: context
          type: <xref uid="botbuilder-core.TurnContext" />
          description: Context for the current turn of conversation with the user.
        - id: connectionName
          type: string
          description: |
            Name of the auth connection to use.
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: >-
      test(string | Partial<Activity>, string | Partial<Activity> | (activity:
      Partial<Activity>, description?: string) => void, string, number)
    uid: botbuilder-core.TestAdapter.test
    package: botbuilder-core
    summary: >-
      Send something to the bot and expects the bot to return with a given
      reply.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function test(userSays: string | Partial<Activity>, expected: string |
        Partial<Activity> | (activity: Partial<Activity>, description?: string)
        => void, description?: string, timeout?: number)
      parameters:
        - id: userSays
          type: string | Partial&lt;Activity&gt;
          description: Text or activity simulating user input.
        - id: expected
          type: >-
            string | Partial&lt;Activity&gt; | (activity:
            Partial&lt;Activity&gt;, description?: string) =&gt; void
          description: Expected text or activity of the reply sent by the bot.
        - id: description
          type: string
          description: >-
            (Optional) Description of the test case. If not provided one will be
            generated.
        - id: timeout
          type: number
          description: >
            (Optional) number of milliseconds to wait for a response from bot.
            Defaults to a value of `3000`.
      return:
        type: <xref uid="botbuilder-core.TestFlow" />
        description: ''
  - name: 'testActivities(Partial<Activity>[], string, number)'
    uid: botbuilder-core.TestAdapter.testActivities
    package: botbuilder-core
    summary: Test a list of activities.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function testActivities(activities: Partial<Activity>[], description?:
        string, timeout?: number)
      parameters:
        - id: activities
          type: 'Partial&lt;Activity&gt;[]'
          description: Array of activities.
        - id: description
          type: string
          description: >-
            (Optional) Description of the test case. If not provided one will be
            generated.
        - id: timeout
          type: number
          description: >
            (Optional) number of milliseconds to wait for a response from bot.
            Defaults to a value of `3000`.
      return:
        type: <xref uid="botbuilder-core.TestFlow" />
        description: ''
  - name: 'throwOnExchangeRequest(string, string, string, string)'
    uid: botbuilder-core.TestAdapter.throwOnExchangeRequest
    package: botbuilder-core
    summary: Adds an instruction to throw an exception during exchange requests.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function throwOnExchangeRequest(connectionName: string, channelId:
        string, userId: string, exchangeableItem: string)
      parameters:
        - id: connectionName
          type: string
          description: The connection name.
        - id: channelId
          type: string
          description: The channel id.
        - id: userId
          type: string
          description: The user id.
        - id: exchangeableItem
          type: string
          description: |
            The exchangeable token or resource URI.
  - name: >-
      use((context: TurnContext, next: () => Promise<void>) => Promise<void> |
      Middleware[])
    uid: botbuilder-core.TestAdapter.use
    package: botbuilder-core
    summary: Adds middleware to the adapter's pipeline.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function use(middleware: (context: TurnContext, next: () =>
        Promise<void>) => Promise<void> | Middleware[])
      parameters:
        - id: middleware
          type: >-
            (context: TurnContext, next: () =&gt; Promise&lt;void&gt;) =&gt;
            Promise&lt;void&gt; | <xref uid="botbuilder-core.Middleware" />[]
          description: |
            The middleware or middleware handlers to add.
      return:
        type: this
        description: ''
extends: <xref uid="botbuilder-core.BotAdapter" />
