### YamlMime:UniversalReference
items:
  - uid: botbuilder-core.ActivityHandlerBase
    name: ActivityHandlerBase
    fullName: ActivityHandlerBase
    children:
      - botbuilder-core.ActivityHandlerBase.run
    langs:
      - typeScript
    type: class
    summary: Defines the core behavior for event-emitting activity handlers for bots.
    package: botbuilder-core
    remarks: >-
      This provides an extensible class for handling incoming activities in an
      event-driven way.

      You can register an arbitrary set of handlers for each event type.


      To register a handler for an event, use the corresponding _on event_
      method. If multiple handlers are

      registered for an event, they are run in the order in which they were
      registered.


      This object emits a series of _events_ as it processes an incoming
      activity.

      A handler can stop the propagation of the event by not calling the
      continuation function.


      | Event type | Description |

      | :--- | :--- |

      | Type-specific | Emitted for the specific activity type, before emitting
      an event for any sub-type. |

      | Sub-type | Emitted for certain specialized events, based on activity
      content. |


      **See also**

      - The [Bot Framework Activity
      schema](https://aka.ms/botSpecs-activitySchema)
  - uid: botbuilder-core.ActivityHandlerBase.run
    name: run(TurnContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: Called to initiate the event emission process.
    syntax:
      content: 'function run(context: TurnContext)'
      parameters:
        - id: context
          type:
            - botbuilder-core.TurnContext
          description: |
            The context object for the current turn.
      return:
        type:
          - Promise<void>
        description: ''
    package: botbuilder-core
    remarks: >-
      Typically, you would provide this method as the function handler that the
      adapter calls

      to perform the bot's logic after the received activity has been
      pre-processed by the adapter

      and routed through any middleware.


      For example:

      ```javascript
       server.post('/api/messages', (req, res) => {
           adapter.processActivity(req, res, async (context) => {
               // Route to main dialog.
               await bot.run(context);
           });
      });

      ```


      **See also**

      -
      [BotFrameworkAdapter.processActivity](xref:botbuilder.BotFrameworkAdapter.processActivity)
references:
  - uid: botbuilder-core.TurnContext
    name: TurnContext
    spec.typeScript:
      - name: TurnContext
        fullName: TurnContext
        uid: botbuilder-core.TurnContext
