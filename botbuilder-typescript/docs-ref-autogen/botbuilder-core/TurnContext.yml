### YamlMime:UniversalReference
items:
  - uid: botbuilder-core.TurnContext
    name: TurnContext
    fullName: TurnContext
    children:
      - botbuilder-core.TurnContext.activity
      - botbuilder-core.TurnContext.adapter
      - botbuilder-core.TurnContext.applyConversationReference
      - botbuilder-core.TurnContext.deleteActivity
      - botbuilder-core.TurnContext.getConversationReference
      - botbuilder-core.TurnContext.getMentions
      - botbuilder-core.TurnContext.getReplyConversationReference
      - botbuilder-core.TurnContext.onDeleteActivity
      - botbuilder-core.TurnContext.onSendActivities
      - botbuilder-core.TurnContext.onUpdateActivity
      - botbuilder-core.TurnContext.removeMentionText
      - botbuilder-core.TurnContext.removeRecipientMention
      - botbuilder-core.TurnContext.responded
      - botbuilder-core.TurnContext.sendActivities
      - botbuilder-core.TurnContext.sendActivity
      - botbuilder-core.TurnContext.sendTraceActivity
      - botbuilder-core.TurnContext.constructor
      - botbuilder-core.TurnContext.constructor_1
      - botbuilder-core.TurnContext.turnState
      - botbuilder-core.TurnContext.updateActivity
    langs:
      - typeScript
    type: class
    summary: Provides context for a turn of a bot.
    package: botbuilder-core
    remarks: >-
      Context provides information needed to process an incoming activity. The
      context object is

      created by a [BotAdapter](xref:botbuilder-core.BotAdapter) and persists
      for the length of the turn.
  - uid: botbuilder-core.TurnContext.activity
    name: activity
    fullName: activity
    children: []
    langs:
      - typeScript
    type: property
    summary: Gets the activity associated with this turn.
    syntax:
      content: 'activity: Activity'
      return:
        type:
          - Activity
        description: ''
    package: botbuilder-core
    remarks: >-
      This example shows how to get the users trimmed utterance from the
      activity:


      ```JavaScript

      const utterance = (context.activity.text || '').trim();

      ```
  - uid: botbuilder-core.TurnContext.adapter
    name: adapter
    fullName: adapter
    children: []
    langs:
      - typeScript
    type: property
    summary: Gets the bot adapter that created this context object.
    syntax:
      content: 'adapter: BotAdapter'
      return:
        type:
          - botbuilder-core.BotAdapter
        description: ''
    package: botbuilder-core
  - uid: botbuilder-core.TurnContext.applyConversationReference
    name: >-
      applyConversationReference(Partial<Activity>,
      Partial<ConversationReference>, boolean)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Updates an activity with the delivery information from an existing
      conversation reference.
    syntax:
      content: >-
        static function applyConversationReference(activity: Partial<Activity>,
        reference: Partial<ConversationReference>, isIncoming?: boolean)
      parameters:
        - id: activity
          type:
            - Partial<Activity>
          description: The activity to update.
        - id: reference
          type:
            - Partial<ConversationReference>
          description: The conversation reference to copy delivery information from.
        - id: isIncoming
          type:
            - boolean
          description: >
            Optional. `true` to treat the activity as an incoming activity,
            where the
                 bot is the recipient; otherwise, `false`. Default is `false`, and the activity will show
                 the bot as the sender.
          optional: true
      return:
        type:
          - Partial<Activity>
        description: ''
    package: botbuilder-core
    remarks: >-
      Call the
      [getConversationReference](xref:botbuilder-core.TurnContext.getConversationReference)

      method on an incoming activity to get a conversation reference that you
      can then use

      to update an outgoing activity with the correct delivery information.
  - uid: botbuilder-core.TurnContext.deleteActivity
    name: deleteActivity(string | Partial<ConversationReference>)
    children: []
    type: method
    langs:
      - typeScript
    summary: Asynchronously deletes a previously sent activity.
    syntax:
      content: >-
        function deleteActivity(idOrReference: string |
        Partial<ConversationReference>)
      parameters:
        - id: idOrReference
          type:
            - string | Partial<ConversationReference>
          description: |
            ID or conversation reference for the activity to delete.
      return:
        type:
          - Promise<void>
        description: ''
    package: botbuilder-core
    remarks: >-
      If an ID is specified, the conversation reference for the current request
      is used

      to get the rest of the information needed.


      For example:

      ```JavaScript

      const matched = /approve (.*)/i.exec(context.activity.text);

      if (matched) {
         const savedId = await approveExpenseReport(matched[1]);
         await context.deleteActivity(savedId);
      }

      ```


      **See also**


      - [sendActivity](xref:botbuilder-core.TurnContext.sendActivity)

      - [updateActivity](xref:botbuilder-core.TurnContext.updateActivity)

      -
      [getReplyConversationReference](xref:botbuilder-core.TurnContext.getReplyConversationReference)
  - uid: botbuilder-core.TurnContext.getConversationReference
    name: getConversationReference(Partial<Activity>)
    children: []
    type: method
    langs:
      - typeScript
    summary: Copies conversation reference information from an activity.
    syntax:
      content: 'static function getConversationReference(activity: Partial<Activity>)'
      parameters:
        - id: activity
          type:
            - Partial<Activity>
          description: |
            The activity to get the information from.
      return:
        type:
          - Partial<ConversationReference>
        description: ''
    package: botbuilder-core
    remarks: >-
      You can save the conversation reference as a JSON object and use it later
      to proactively message the user.


      For example:

      ```JavaScript

      const reference = TurnContext.getConversationReference(context.request);

      ```


      **See also**


      -
      [BotAdapter.continueConversation](xref:botbuilder-core.BotAdapter.continueConversation)
  - uid: botbuilder-core.TurnContext.getMentions
    name: getMentions(Partial<Activity>)
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets all at-mention entities included in an activity.
    syntax:
      content: 'static function getMentions(activity: Partial<Activity>)'
      parameters:
        - id: activity
          type:
            - Partial<Activity>
          description: |
            The activity.
      return:
        type:
          - 'Mention[]'
        description: ''
    package: botbuilder-core
    remarks: >-
      The activity's [entities](xref:botframework-schema.Activity.entities)
      property contains a flat

      list of metadata objects pertaining to this activity and can contain

      [mention](xref:botframework-schema.Mention) entities. This method returns
      all such entities

      for a given activity.


      For example:

      ```JavaScript

      const mentions = TurnContext.getMentions(turnContext.request);

      ```
  - uid: botbuilder-core.TurnContext.getReplyConversationReference
    name: 'getReplyConversationReference(Partial<Activity>, ResourceResponse)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Copies conversation reference information from a resource response for a
      sent activity.
    syntax:
      content: >-
        static function getReplyConversationReference(activity:
        Partial<Activity>, reply: ResourceResponse)
      parameters:
        - id: activity
          type:
            - Partial<Activity>
          description: The sent activity.
        - id: reply
          type:
            - ResourceResponse
          description: |
            The resource response for the activity, returned by the
                 [sendActivity](xref:botbuilder-core.TurnContext.sendActivity) or
                 [sendActivities](xref:botbuilder-core.TurnContext.sendActivities) method.
      return:
        type:
          - Partial<ConversationReference>
        description: ''
    package: botbuilder-core
    remarks: >-
      You can save the conversation reference as a JSON object and use it later
      to update or delete the message.


      For example:

      ```javascript

      var reply = await context.sendActivity('Hi');

      var reference =
      TurnContext.getReplyConversationReference(context.activity, reply);

      ```


      **See also**


      - [deleteActivity](xref:botbuilder-core.TurnContext.deleteActivity)

      - [updateActivity](xref:botbuilder-core.TurnContext.updateActivity)
  - uid: botbuilder-core.TurnContext.onDeleteActivity
    name: onDeleteActivity(DeleteActivityHandler)
    children: []
    type: method
    langs:
      - typeScript
    summary: Adds a response handler for delete activity operations.
    syntax:
      content: 'function onDeleteActivity(handler: DeleteActivityHandler)'
      parameters:
        - id: handler
          type:
            - botbuilder-core.DeleteActivityHandler
          description: |
            The handler to add to the context object.
      return:
        type:
          - this
        description: ''
    package: botbuilder-core
    remarks: >-
      This method returns a reference to the turn context object.


      When the [deleteActivity](xref:botbuilder-core.TurnContext.deleteActivity)
      method is called,

      the registered handlers are called in the order in which they were added
      to the context object

      before the activity is deleted.


      This example shows how to listen for and log activity deletions.


      ```JavaScript

      context.onDeleteActivity(async (ctx, reference, next) => {
         // Delete activity
         await next();

         // Log delete
         logDelete(activity);
      });

      ```
  - uid: botbuilder-core.TurnContext.onSendActivities
    name: onSendActivities(SendActivitiesHandler)
    children: []
    type: method
    langs:
      - typeScript
    summary: Adds a response handler for send activity operations.
    syntax:
      content: 'function onSendActivities(handler: SendActivitiesHandler)'
      parameters:
        - id: handler
          type:
            - botbuilder-core.SendActivitiesHandler
          description: |
            The handler to add to the context object.
      return:
        type:
          - this
        description: ''
    package: botbuilder-core
    remarks: >-
      This method returns a reference to the turn context object.


      When the [sendActivity](xref:botbuilder-core.TurnContext.sendActivity) or

      [sendActivities](xref:botbuilder-core.TurnContext.sendActivities) method
      is called,

      the registered handlers are called in the order in which they were added
      to the context object

      before the activities are sent.


      This example shows how to listen for and log outgoing `message`
      activities.


      ```JavaScript

      context.onSendActivities(async (ctx, activities, next) => {
         // Log activities before sending them.
         activities.filter(a => a.type === 'message').forEach(a => logSend(a));

         // Allow the send process to continue.
         next();
      });

      ```
  - uid: botbuilder-core.TurnContext.onUpdateActivity
    name: onUpdateActivity(UpdateActivityHandler)
    children: []
    type: method
    langs:
      - typeScript
    summary: Adds a response handler for update activity operations.
    syntax:
      content: 'function onUpdateActivity(handler: UpdateActivityHandler)'
      parameters:
        - id: handler
          type:
            - botbuilder-core.UpdateActivityHandler
          description: |
            The handler to add to the context object.
      return:
        type:
          - this
        description: ''
    package: botbuilder-core
    remarks: >-
      This method returns a reference to the turn context object.


      When the [updateActivity](xref:botbuilder-core.TurnContext.updateActivity)
      method is called,

      the registered handlers are called in the order in which they were added
      to the context object

      before the activity is updated.


      This example shows how to listen for and log activity updates.


      ```JavaScript

      context.onUpdateActivity(async (ctx, activity, next) => {
         // Replace activity
         await next();

         // Log update
         logUpdate(activity);
      });

      ```
  - uid: botbuilder-core.TurnContext.removeMentionText
    name: 'removeMentionText(Partial<Activity>, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Removes at mentions for a given ID from the text of an activity and
      returns the updated text.

      Use with caution; this function alters the activity's
      [text](xref:botframework-schema.Activity.text) property.
    syntax:
      content: >-
        static function removeMentionText(activity: Partial<Activity>, id:
        string)
      parameters:
        - id: activity
          type:
            - Partial<Activity>
          description: The activity to remove at mentions from.
        - id: id
          type:
            - string
          description: |
            The ID of the user or bot to remove at mentions for.
      return:
        type:
          - string
        description: ''
    package: botbuilder-core
    remarks: >-
      Some channels, for example Microsoft Teams, add at mentions to the text of
      a message activity.


      Use this helper method to modify the activity's
      [text](xref:botframework-schema.Activity.text) property.

      It removes all at mentions for the given bot or user ID and then returns
      the updated property value.


      For example, when you remove mentions of **echoBot** from an activity
      containing the text "@echoBot Hi Bot",

      the activity text is updated, and the method returns "Hi Bot".


      The format of a mention [entity](xref:botframework-schema.Entity) is
      channel-dependent.

      However, the mention's [text](xref:botframework-schema.Mention.text)
      property should contain

      the exact text for the user as it appears in the activity text.


      For example, whether the channel uses "<at>username</at>" or "@username",
      this string is in

      the activity's text, and this method will remove all occurrences of that
      string from the text.


      For example:

      ```JavaScript

      const updatedText = TurnContext.removeMentionText(activity,
      activity.recipient.id);

      ```

      **See also**

      -
      [removeRecipientMention](xref:botbuilder-core.TurnContext.removeRecipientMention)
  - uid: botbuilder-core.TurnContext.removeRecipientMention
    name: removeRecipientMention(Partial<Activity>)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Removes at mentions for the activity's
      [recipient](xref:botframework-schema.Activity.recipient)

      from the text of an activity and returns the updated text.

      Use with caution; this function alters the activity's
      [text](xref:botframework-schema.Activity.text) property.
    syntax:
      content: 'static function removeRecipientMention(activity: Partial<Activity>)'
      parameters:
        - id: activity
          type:
            - Partial<Activity>
          description: |
            The activity to remove at mentions from.
      return:
        type:
          - string
        description: ''
    package: botbuilder-core
    remarks: >-
      Some channels, for example Microsoft Teams, add at-mention details to the
      text of a message activity.


      Use this helper method to modify the activity's
      [text](xref:botframework-schema.Activity.text) property.

      It removes all at mentions of the activity's
      [recipient](xref:botframework-schema.Activity.recipient)

      and then returns the updated property value.


      For example:

      ```JavaScript

      const updatedText =
      TurnContext.removeRecipientMention(turnContext.request);

      ```

      **See also**

      - [removeMentionText](xref:botbuilder-core.TurnContext.removeMentionText)
  - uid: botbuilder-core.TurnContext.responded
    name: responded
    fullName: responded
    children: []
    langs:
      - typeScript
    type: property
    summary: Sets the response flag on the current turn context.
    syntax:
      content: 'responded: boolean'
      return:
        type:
          - boolean
        description: ''
    package: botbuilder-core
    remarks: >-
      The [sendActivity](xref:botbuilder-core.TurnContext.sendActivity) and

      [sendActivities](xref:botbuilder-core.TurnContext.sendActivities) methods
      call this method to

      update the responded flag. You can call this method directly to indicate
      that your bot has

      responded appropriately to the incoming activity.
  - uid: botbuilder-core.TurnContext.sendActivities
    name: 'sendActivities(Partial<Activity>[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Asynchronously sends a set of activities to the sender of the incoming
      activity.
    syntax:
      content: 'function sendActivities(activities: Partial<Activity>[])'
      parameters:
        - id: activities
          type:
            - 'Partial<Activity>[]'
          description: |
            The activities to send.
      return:
        type:
          - 'Promise<ResourceResponse[]>'
        description: ''
    package: botbuilder-core
    remarks: >-
      If the activities are successfully sent, results in an array of

      [ResourceResponse](xref:botframework-schema.ResourceResponse) objects
      containing the IDs that

      the receiving channel assigned to the activities.


      Before they are sent, the delivery information of each outbound activity
      is updated based on the

      delivery information of the inbound inbound activity.


      For example:

      ```JavaScript

      await context.sendActivities([
         { type: 'typing' },
         { type: 'delay', value: 2000 },
         { type: 'message', text: 'Hello... How are you?' }
      ]);

      ```


      **See also**


      - [sendActivity](xref:botbuilder-core.TurnContext.sendActivity)

      - [updateActivity](xref:botbuilder-core.TurnContext.updateActivity)

      - [deleteActivity](xref:botbuilder-core.TurnContext.deleteActivity)
  - uid: botbuilder-core.TurnContext.sendActivity
    name: 'sendActivity(string | Partial<Activity>, string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Asynchronously sends an activity to the sender of the incoming activity.
    syntax:
      content: >-
        function sendActivity(activityOrText: string | Partial<Activity>,
        speak?: string, inputHint?: string)
      parameters:
        - id: activityOrText
          type:
            - string | Partial<Activity>
          description: The activity or text to send.
        - id: speak
          type:
            - string
          description: >-
            Optional. The text to be spoken by your bot on a speech-enabled
            channel.
          optional: true
        - id: inputHint
          type:
            - string
          description: >
            Optional. Indicates whether your bot is accepting, expecting, or
            ignoring user
                 input after the message is delivered to the client. One of: 'acceptingInput', 'ignoringInput',
                 or 'expectingInput'. Default is 'acceptingInput'.
          optional: true
      return:
        type:
          - Promise<ResourceResponse | undefined>
        description: ''
    package: botbuilder-core
    remarks: >-
      If the activity is successfully sent, results in a

      [ResourceResponse](xref:botframework-schema.ResourceResponse) object
      containing the ID that the

      receiving channel assigned to the activity.


      See the channel's documentation for limits imposed upon the contents of
      the **activityOrText** parameter.


      To control various characteristics of your bot's speech such as voice,
      rate, volume, pronunciation,

      and pitch, specify **speak** in Speech Synthesis Markup Language (SSML)
      format.


      For example:

      ```JavaScript

      await context.sendActivity(`Hello World`);

      ```


      **See also**


      - [sendActivities](xref:botbuilder-core.TurnContext.sendActivities)

      - [updateActivity](xref:botbuilder-core.TurnContext.updateActivity)

      - [deleteActivity](xref:botbuilder-core.TurnContext.deleteActivity)
  - uid: botbuilder-core.TurnContext.sendTraceActivity
    name: 'sendTraceActivity(string, any, string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Asynchronously sends an activity to the sender of the incoming activity.
    syntax:
      content: >-
        function sendTraceActivity(name: string, value?: any, valueType?:
        string, label?: string)
      parameters:
        - id: name
          type:
            - string
          description: The activity or text to send.
        - id: value
          type:
            - any
          description: >-
            Optional. The text to be spoken by your bot on a speech-enabled
            channel.
          optional: true
        - id: valueType
          type:
            - string
          description: >-
            Optional. Indicates whether your bot is accepting, expecting, or
            ignoring user
          optional: true
        - id: label
          type:
            - string
          description: >
            Optional. Indicates whether your bot is accepting, expecting, or
            ignoring user
          optional: true
      return:
        type:
          - Promise<ResourceResponse | undefined>
        description: ''
    package: botbuilder-core
    remarks: >-
      Creates and sends a Trace activity. Trace activities are only sent when
      the channel is the emulator.


      For example:

      ```JavaScript

      await context.sendTraceActivity(`The following exception was thrown
      ${msg}`);

      ```


      **See also**


      - [sendActivities](xref:botbuilder-core.TurnContext.sendActivities)
  - uid: botbuilder-core.TurnContext.constructor
    name: 'TurnContext(BotAdapter, Partial<Activity>)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: >-
      Creates an new instance of the
      [TurnContext](xref:xref:botbuilder-core.TurnContext) class.
    syntax:
      content: >-
        new TurnContext(adapterOrContext: BotAdapter, request:
        Partial<Activity>)
      parameters:
        - id: adapterOrContext
          type:
            - botbuilder-core.BotAdapter
          description: The adapter creating the context.
        - id: request
          type:
            - Partial<Activity>
          description: |
            The incoming activity for the turn.
    package: botbuilder-core
  - uid: botbuilder-core.TurnContext.constructor_1
    name: TurnContext(TurnContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: >-
      Creates an new instance of the
      [TurnContext](xref:xref:botbuilder-core.TurnContext) class.
    syntax:
      content: 'new TurnContext(adapterOrContext: TurnContext)'
      parameters:
        - id: adapterOrContext
          type:
            - botbuilder-core.TurnContext
          description: The adapter creating the context.
    package: botbuilder-core
  - uid: botbuilder-core.TurnContext.turnState
    name: turnState
    fullName: turnState
    children: []
    langs:
      - typeScript
    type: property
    summary: Gets the services registered on this context object.
    syntax:
      content: 'turnState: Map<any, any>'
      return:
        type:
          - 'Map<any, any>'
        description: ''
    package: botbuilder-core
    remarks: >-
      Middleware, other components, and services will typically use this to
      cache information

      that could be asked for by a bot multiple times during a turn. You can use
      this cache to

      pass information between components of your bot.


      For example:

      ```JavaScript

      const cartKey = Symbol();

      const cart = await loadUsersShoppingCart(context);

      context.turnState.set(cartKey, cart);

      ```


      > [!TIP]

      > When creating middleware or a third-party component, use a unique symbol
      for your cache key

      > to avoid state naming collisions with the bot or other middleware or
      components.
  - uid: botbuilder-core.TurnContext.updateActivity
    name: updateActivity(Partial<Activity>)
    children: []
    type: method
    langs:
      - typeScript
    summary: Asynchronously updates a previously sent activity.
    syntax:
      content: 'function updateActivity(activity: Partial<Activity>)'
      parameters:
        - id: activity
          type:
            - Partial<Activity>
          description: |
            The replacement for the original activity.
      return:
        type:
          - Promise<void>
        description: ''
    package: botbuilder-core
    remarks: >-
      The [id](xref:botframework-schema.Activity.id) of the replacement activity
      indicates the activity

      in the conversation to replace.


      For example:

      ```JavaScript

      const matched = /approve (.*)/i.exec(context.activity.text);

      if (matched) {
         const update = await approveExpenseReport(matched[1]);
         await context.updateActivity(update);
      }

      ```


      **See also**


      - [sendActivity](xref:botbuilder-core.TurnContext.sendActivity)

      - [deleteActivity](xref:botbuilder-core.TurnContext.deleteActivity)

      -
      [getReplyConversationReference](xref:botbuilder-core.TurnContext.getReplyConversationReference)
references:
  - uid: botbuilder-core.BotAdapter
    name: BotAdapter
    spec.typeScript:
      - name: BotAdapter
        fullName: BotAdapter
        uid: botbuilder-core.BotAdapter
  - uid: botbuilder-core.TurnContext
    name: TurnContext
    spec.typeScript:
      - name: TurnContext
        fullName: TurnContext
        uid: botbuilder-core.TurnContext
  - uid: botbuilder-core.DeleteActivityHandler
    name: DeleteActivityHandler
    spec.typeScript:
      - name: DeleteActivityHandler
        fullName: DeleteActivityHandler
        uid: botbuilder-core.DeleteActivityHandler
  - uid: botbuilder-core.SendActivitiesHandler
    name: SendActivitiesHandler
    spec.typeScript:
      - name: SendActivitiesHandler
        fullName: SendActivitiesHandler
        uid: botbuilder-core.SendActivitiesHandler
  - uid: botbuilder-core.UpdateActivityHandler
    name: UpdateActivityHandler
    spec.typeScript:
      - name: UpdateActivityHandler
        fullName: UpdateActivityHandler
        uid: botbuilder-core.UpdateActivityHandler
