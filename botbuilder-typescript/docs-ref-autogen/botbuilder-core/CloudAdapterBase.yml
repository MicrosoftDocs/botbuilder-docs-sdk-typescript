### YamlMime:TSType
name: CloudAdapterBase
uid: botbuilder-core.CloudAdapterBase
package: botbuilder-core
summary: >-
  An adapter that implements the Bot Framework Protocol and can be hosted in
  different cloud environments both public and private.
fullName: CloudAdapterBase
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: CloudAdapterBase(BotFrameworkAuthentication)
    uid: botbuilder-core.CloudAdapterBase.constructor
    package: botbuilder-core
    summary: >-
      Create a new [CloudAdapterBase](xref:botbuilder.CloudAdapterBase)
      instance.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new CloudAdapterBase(botFrameworkAuthentication:
        BotFrameworkAuthentication)
      parameters:
        - id: botFrameworkAuthentication
          type: BotFrameworkAuthentication
          description: >-
            A
            [BotFrameworkAuthentication](xref:botframework-connector.BotFrameworkAuthentication)
            used for validating and creating tokens.
properties:
  - name: ConnectorFactoryKey
    uid: botbuilder-core.CloudAdapterBase.ConnectorFactoryKey
    package: botbuilder-core
    summary: ''
    fullName: ConnectorFactoryKey
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'ConnectorFactoryKey: symbol'
      return:
        description: ''
        type: symbol
  - name: onTurnError
    uid: botbuilder-core.CloudAdapterBase.onTurnError
    package: botbuilder-core
    summary: >-
      Gets or sets an error handler that can catch exceptions in the middleware
      or application.
    fullName: onTurnError
    remarks: ''
    isDeprecated: false
    syntax:
      content: '(context: TurnContext, error: Error) => Promise<void> onTurnError'
      return:
        description: A promise representing the async operation.
        type: '(context: TurnContext, error: Error) =&gt; Promise&lt;void&gt;'
  - name: UserTokenClientKey
    uid: botbuilder-core.CloudAdapterBase.UserTokenClientKey
    package: botbuilder-core
    summary: ''
    fullName: UserTokenClientKey
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'UserTokenClientKey: symbol'
      return:
        description: ''
        type: symbol
inheritedProperties:
  - name: BotIdentityKey
    uid: botbuilder-core.CloudAdapterBase.BotIdentityKey
    package: botbuilder-core
    summary: ''
    fullName: BotIdentityKey
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'BotIdentityKey: symbol'
      return:
        description: ''
        type: symbol
    inheritanceDescription: >-
      <b>Inherited From</b>
      [BotAdapter.BotIdentityKey](xref:botbuilder-core.BotAdapter.BotIdentityKey)
  - name: ConnectorClientKey
    uid: botbuilder-core.CloudAdapterBase.ConnectorClientKey
    package: botbuilder-core
    summary: ''
    fullName: ConnectorClientKey
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'ConnectorClientKey: symbol'
      return:
        description: ''
        type: symbol
    inheritanceDescription: >-
      <b>Inherited From</b>
      [BotAdapter.ConnectorClientKey](xref:botbuilder-core.BotAdapter.ConnectorClientKey)
  - name: OAuthScopeKey
    uid: botbuilder-core.CloudAdapterBase.OAuthScopeKey
    package: botbuilder-core
    summary: ''
    fullName: OAuthScopeKey
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'OAuthScopeKey: symbol'
      return:
        description: ''
        type: symbol
    inheritanceDescription: >-
      <b>Inherited From</b>
      [BotAdapter.OAuthScopeKey](xref:botbuilder-core.BotAdapter.OAuthScopeKey)
inheritedMethods:
  - name: use((MiddlewareHandler | Middleware)[])
    uid: botbuilder-core.CloudAdapterBase.use
    package: botbuilder-core
    summary: Adds middleware to the adapter's pipeline.
    remarks: >-
      Middleware is added to the adapter at initialization time.

      Each turn, the adapter calls its middleware in the order in which you
      added it.
    isDeprecated: false
    syntax:
      content: >-
        function use(middlewares: (MiddlewareHandler | Middleware)[]):
        CloudAdapterBase
      parameters:
        - id: middlewares
          type: >-
            (<xref uid="botbuilder-core.MiddlewareHandler" /> | <xref
            uid="botbuilder-core.Middleware" />)[]
          description: The middleware or middleware handlers to add.
      return:
        description: The updated adapter object.
        type: <xref uid="botbuilder-core.CloudAdapterBase" />
    inheritanceDescription: >-
      <b>Inherited From</b>
      [BotAdapter.use](xref:botbuilder-core.BotAdapter.use)
methods:
  - name: >-
      continueConversation(Partial<ConversationReference>, (context:
      TurnContext) => Promise<void>)
    uid: botbuilder-core.CloudAdapterBase.continueConversation
    package: botbuilder-core
    summary: >-
      Asynchronously resumes a conversation with a user, possibly after some
      time has gone by.
    remarks: >-
      This is often referred to as a _proactive notification_, the bot can
      proactively

      send a message to a conversation or user without waiting for an incoming
      message.

      For example, a bot can use this method to send notifications or coupons to
      a user.
    isDeprecated: false
    syntax:
      content: >-
        function continueConversation(_reference:
        Partial<ConversationReference>, _logic: (context: TurnContext) =>
        Promise<void>): Promise<void>
      parameters:
        - id: _reference
          type: Partial&lt;<xref uid="botbuilder-core.ConversationReference" />&gt;
          description: A reference to the conversation to continue.
        - id: _logic
          type: '(context: TurnContext) =&gt; Promise&lt;void&gt;'
          description: The asynchronous method to call after the adapter middleware runs.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: >-
      createConversationAsync(string, string, string, string,
      ConversationParameters, (context: TurnContext) => Promise<void>)
    uid: botbuilder-core.CloudAdapterBase.createConversationAsync
    package: botbuilder-core
    summary: Creates a conversation on the specified channel.
    remarks: >-
      To start a conversation, your bot must know its account information and
      the user's account information on that

      channel.  Most _channels only support initiating a direct message
      (non-group) conversation.


      The adapter attempts to create a new conversation on the channel, and then
      sends a `conversationUpdate` activity

      through its middleware pipeline to the logic method.


      If the conversation is established with the specified users, the ID of the
      activity's converstion will contain

      the ID of the new conversation.
    isDeprecated: false
    syntax:
      content: >-
        function createConversationAsync(botAppId: string, channelId: string,
        serviceUrl: string, audience: string, conversationParameters:
        ConversationParameters, logic: (context: TurnContext) => Promise<void>):
        Promise<void>
      parameters:
        - id: botAppId
          type: string
          description: The application ID of the bot.
        - id: channelId
          type: string
          description: The ID for the channel.
        - id: serviceUrl
          type: string
          description: The ID for the channel.
        - id: audience
          type: string
          description: |-
            The audience for the connector.
            <param name="conversationParameters">
        - id: conversationParameters
          type: <xref uid="botbuilder-core.ConversationParameters" />
          description: The conversation information to use to create the conversation
        - id: logic
          type: '(context: TurnContext) =&gt; Promise&lt;void&gt;'
          description: The method to call for the resulting bot turn.
      return:
        description: A promise that represents the asynchronous operation
        type: Promise&lt;void&gt;
  - name: deleteActivity(TurnContext, Partial<ConversationReference>)
    uid: botbuilder-core.CloudAdapterBase.deleteActivity
    package: botbuilder-core
    summary: >-
      Asynchronously deletes an existing activity.


      This interface supports the framework and is not intended to be called
      directly for your code.

      Use
      [TurnContext.deleteActivity](xref:botbuilder-core.TurnContext.deleteActivity)
      to delete

      an activity from your bot code.
    remarks: >-
      Not all channels support this operation. For channels that don't, this
      call may throw an exception.
    isDeprecated: false
    syntax:
      content: >-
        function deleteActivity(context: TurnContext, reference:
        Partial<ConversationReference>): Promise<void>
      parameters:
        - id: context
          type: <xref uid="botbuilder-core.TurnContext" />
          description: The context object for the turn.
        - id: reference
          type: Partial&lt;<xref uid="botbuilder-core.ConversationReference" />&gt;
          description: Conversation reference information for the activity to delete.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: sendActivities(TurnContext, Partial<Activity>[])
    uid: botbuilder-core.CloudAdapterBase.sendActivities
    package: botbuilder-core
    summary: >-
      Asynchronously sends a set of outgoing activities to a channel server.


      This method supports the framework and is not intended to be called
      directly for your code.

      Use the turn context's
      [sendActivity](xref:botbuilder-core.TurnContext.sendActivity) or

      [sendActivities](xref:botbuilder-core.TurnContext.sendActivities) method
      from your bot code.
    remarks: >-
      The activities will be sent one after another in the order in which
      they're received. A

      response object will be returned for each sent activity. For `message`
      activities this will

      contain the ID of the delivered message.
    isDeprecated: false
    syntax:
      content: >-
        function sendActivities(context: TurnContext, activities:
        Partial<Activity>[]): Promise<ResourceResponse[]>
      parameters:
        - id: context
          type: <xref uid="botbuilder-core.TurnContext" />
          description: The context object for the turn.
        - id: activities
          type: Partial&lt;<xref uid="botbuilder-core.Activity" />&gt;[]
          description: The activities to send.
      return:
        description: An array of [ResourceResponse](xref:botbuilder-core.Os)
        type: Promise&lt;<xref uid="botbuilder-core.ResourceResponse" />[]&gt;
  - name: updateActivity(TurnContext, Partial<Activity>)
    uid: botbuilder-core.CloudAdapterBase.updateActivity
    package: botbuilder-core
    summary: >-
      Asynchronously replaces a previous activity with an updated version.


      This interface supports the framework and is not intended to be called
      directly for your code.

      Use
      [TurnContext.updateActivity](xref:botbuilder-core.TurnContext.updateActivity)
      to update

      an activity from your bot code.
    remarks: >-
      Not all channels support this operation. For channels that don't, this
      call may throw an exception.
    isDeprecated: false
    syntax:
      content: >-
        function updateActivity(context: TurnContext, activity:
        Partial<Activity>): Promise<void | ResourceResponse>
      parameters:
        - id: context
          type: <xref uid="botbuilder-core.TurnContext" />
          description: The context object for the turn.
        - id: activity
          type: Partial&lt;<xref uid="botbuilder-core.Activity" />&gt;
          description: The updated version of the activity to replace.
      return:
        description: ''
        type: Promise&lt;void | <xref uid="botbuilder-core.ResourceResponse" />&gt;
extends: <xref uid="botbuilder-core.BotAdapter" />
