### YamlMime:TSType
name: CloudAdapterBase
uid: botbuilder-core.CloudAdapterBase
package: botbuilder-core
summary: >-
  An adapter that implements the Bot Framework Protocol and can be hosted in
  different cloud environments both public and private.
fullName: CloudAdapterBase
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: CloudAdapterBase(BotFrameworkAuthentication)
    uid: botbuilder-core.CloudAdapterBase.constructor
    package: botbuilder-core
    summary: >-
      Create a new [CloudAdapterBase](xref:botbuilder.CloudAdapterBase)
      instance.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new CloudAdapterBase(botFrameworkAuthentication:
        BotFrameworkAuthentication)
      parameters:
        - id: botFrameworkAuthentication
          type: BotFrameworkAuthentication
          description: >
            A
            [BotFrameworkAuthentication](xref:botframework-connector.BotFrameworkAuthentication)
            used for validating and creating tokens.
properties:
  - name: ConnectorFactoryKey
    uid: botbuilder-core.CloudAdapterBase.ConnectorFactoryKey
    package: botbuilder-core
    summary: ''
    fullName: ConnectorFactoryKey
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ConnectorFactoryKey: symbol'
      return:
        description: ''
        type: symbol
  - name: onTurnError
    uid: botbuilder-core.CloudAdapterBase.onTurnError
    package: botbuilder-core
    summary: >-
      Gets or sets an error handler that can catch exceptions in the middleware
      or application.

      Sets an error handler that can catch exceptions in the middleware or
      application.
    fullName: onTurnError
    remarks: >-
      The error handler is called with these parameters:


      | Name | Type | Description |

      | :--- | :--- | :--- |

      | `context` | [TurnContext](xref:botbuilder-core.TurnContext) | The
      context object for the turn. |

      | `error` | `Error` | The Node.js error thrown. |
    isPreview: false
    isDeprecated: false
    syntax:
      content: '(context: TurnContext, error: Error) => Promise<void> onTurnError'
      return:
        description: A promise representing the async operation.
        type: '(context: TurnContext, error: Error) =&gt; Promise&lt;void&gt;'
  - name: UserTokenClientKey
    uid: botbuilder-core.CloudAdapterBase.UserTokenClientKey
    package: botbuilder-core
    summary: ''
    fullName: UserTokenClientKey
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'UserTokenClientKey: symbol'
      return:
        description: ''
        type: symbol
inheritedProperties:
  - name: BotIdentityKey
    uid: botbuilder-core.CloudAdapterBase.BotIdentityKey
    package: botbuilder-core
    summary: ''
    fullName: BotIdentityKey
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'BotIdentityKey: symbol'
      return:
        description: ''
        type: symbol
    inheritanceDescription: >-
      <b>Inherited From</b>
      [BotAdapter.BotIdentityKey](xref:botbuilder-core.BotAdapter.BotIdentityKey)
  - name: ConnectorClientKey
    uid: botbuilder-core.CloudAdapterBase.ConnectorClientKey
    package: botbuilder-core
    summary: ''
    fullName: ConnectorClientKey
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ConnectorClientKey: symbol'
      return:
        description: ''
        type: symbol
    inheritanceDescription: >-
      <b>Inherited From</b>
      [BotAdapter.ConnectorClientKey](xref:botbuilder-core.BotAdapter.ConnectorClientKey)
  - name: OAuthScopeKey
    uid: botbuilder-core.CloudAdapterBase.OAuthScopeKey
    package: botbuilder-core
    summary: ''
    fullName: OAuthScopeKey
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'OAuthScopeKey: symbol'
      return:
        description: ''
        type: symbol
    inheritanceDescription: >-
      <b>Inherited From</b>
      [BotAdapter.OAuthScopeKey](xref:botbuilder-core.BotAdapter.OAuthScopeKey)
inheritedMethods:
  - name: >-
      use((context: TurnContext, next: () => Promise<void>) => Promise<void> |
      Middleware[])
    uid: botbuilder-core.CloudAdapterBase.use
    package: botbuilder-core
    summary: Adds middleware to the adapter's pipeline.
    remarks: >-
      Middleware is added to the adapter at initialization time.

      Each turn, the adapter calls its middleware in the order in which you
      added it.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function use(middlewares: (context: TurnContext, next: () =>
        Promise<void>) => Promise<void> | Middleware[]): this
      parameters:
        - id: middlewares
          type: >-
            (context: TurnContext, next: () =&gt; Promise&lt;void&gt;) =&gt;
            Promise&lt;void&gt; | <xref uid="botbuilder-core.Middleware" />[]
          description: The middleware or middleware handlers to add.
      return:
        description: The updated adapter object.
        type: this
    inheritanceDescription: >-
      <b>Inherited From</b>
      [BotAdapter.use](xref:botbuilder-core.BotAdapter.use)
methods:
  - name: >-
      continueConversation(Partial<ConversationReference>, (context:
      TurnContext) => Promise<void>)
    uid: botbuilder-core.CloudAdapterBase.continueConversation
    package: botbuilder-core
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: ''
    syntax:
      content: >-
        function continueConversation(_reference:
        Partial<ConversationReference>, _logic: (context: TurnContext) =>
        Promise<void>): Promise<void>
      parameters:
        - id: _reference
          type: Partial&lt;ConversationReference&gt;
          description: ''
        - id: _logic
          type: '(context: TurnContext) =&gt; Promise&lt;void&gt;'
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: >-
      continueConversationAsync(string | ClaimsIdentity,
      Partial<ConversationReference>, (context: TurnContext) => Promise<void> |
      string, (context: TurnContext) => Promise<void>)
    uid: botbuilder-core.CloudAdapterBase.continueConversationAsync
    package: botbuilder-core
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function continueConversationAsync(botAppIdOrClaimsIdentity: string |
        ClaimsIdentity, reference: Partial<ConversationReference>,
        logicOrAudience: (context: TurnContext) => Promise<void> | string,
        maybeLogic?: (context: TurnContext) => Promise<void>): Promise<void>
      parameters:
        - id: botAppIdOrClaimsIdentity
          type: string | ClaimsIdentity
          description: ''
        - id: reference
          type: Partial&lt;ConversationReference&gt;
          description: ''
        - id: logicOrAudience
          type: '(context: TurnContext) =&gt; Promise&lt;void&gt; | string'
          description: ''
        - id: maybeLogic
          type: '(context: TurnContext) =&gt; Promise&lt;void&gt;'
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: >-
      createConversationAsync(string, string, string, string,
      ConversationParameters, (context: TurnContext) => Promise<void>)
    uid: botbuilder-core.CloudAdapterBase.createConversationAsync
    package: botbuilder-core
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createConversationAsync(botAppId: string, channelId: string,
        serviceUrl: string, audience: string, conversationParameters:
        ConversationParameters, logic: (context: TurnContext) => Promise<void>):
        Promise<void>
      parameters:
        - id: botAppId
          type: string
          description: ''
        - id: channelId
          type: string
          description: ''
        - id: serviceUrl
          type: string
          description: ''
        - id: audience
          type: string
          description: ''
        - id: conversationParameters
          type: ConversationParameters
          description: ''
        - id: logic
          type: '(context: TurnContext) =&gt; Promise&lt;void&gt;'
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: 'deleteActivity(TurnContext, Partial<ConversationReference>)'
    uid: botbuilder-core.CloudAdapterBase.deleteActivity
    package: botbuilder-core
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteActivity(context: TurnContext, reference:
        Partial<ConversationReference>): Promise<void>
      parameters:
        - id: context
          type: <xref uid="botbuilder-core.TurnContext" />
          description: ''
        - id: reference
          type: Partial&lt;ConversationReference&gt;
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: 'sendActivities(TurnContext, Partial<Activity>[])'
    uid: botbuilder-core.CloudAdapterBase.sendActivities
    package: botbuilder-core
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function sendActivities(context: TurnContext, activities:
        Partial<Activity>[]): Promise<ResourceResponse[]>
      parameters:
        - id: context
          type: <xref uid="botbuilder-core.TurnContext" />
          description: ''
        - id: activities
          type: 'Partial&lt;Activity&gt;[]'
          description: ''
      return:
        description: ''
        type: 'Promise&lt;ResourceResponse[]&gt;'
  - name: 'updateActivity(TurnContext, Partial<Activity>)'
    uid: botbuilder-core.CloudAdapterBase.updateActivity
    package: botbuilder-core
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updateActivity(context: TurnContext, activity:
        Partial<Activity>): Promise<ResourceResponse | void>
      parameters:
        - id: context
          type: <xref uid="botbuilder-core.TurnContext" />
          description: ''
        - id: activity
          type: Partial&lt;Activity&gt;
          description: ''
      return:
        description: ''
        type: Promise&lt;ResourceResponse | void&gt;
extends: <xref uid="botbuilder-core.BotAdapter" />
