### YamlMime:TSType
name: BotServiceConnector
uid: botbuilder-azure.BotServiceConnector
package: botbuilder-azure
summary: Connects a UniversalBot to multiple channels via the Bot Framework.
fullName: BotServiceConnector
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: BotServiceConnector(IBotServiceConnectorSettings)
    uid: botbuilder-azure.BotServiceConnector.constructor
    package: botbuilder-azure
    summary: Creates a new instnace of the BotServiceConnector.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new BotServiceConnector(settings?: IBotServiceConnectorSettings)'
      parameters:
        - id: settings
          type: <xref uid="botbuilder-azure.IBotServiceConnectorSettings" />
          description: >
            (Optional) config params that let you specify the bots App ID &
            Password you were assigned in the Bot Frameworks developer portal.
methods:
  - name: 'getData(IBotStorageContext, (err: Error, data: IBotStorageData) => void)'
    uid: botbuilder-azure.BotServiceConnector.getData
    package: botbuilder-azure
    summary: Reads in data from the Bot Frameworks state service.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getData(context: IBotStorageContext, callback: (err: Error,
        data: IBotStorageData) => void)
      parameters:
        - id: context
          type: <xref uid="botbuilder-azure.IBotStorageContext" />
          description: ''
        - id: callback
          type: '(err: Error, data: IBotStorageData) =&gt; void'
          description: ''
  - name: listen()
    uid: botbuilder-azure.BotServiceConnector.listen
    package: botbuilder-azure
    summary: Registers an Express or Restify style hook to listen for new messages.
    isPreview: false
    isDeprecated: false
    syntax:
      content: function listen()
      return:
        type: '(req: any, res: any) =&gt; void'
        description: ''
  - name: 'onEvent((events: IEvent[], callback?: (err: Error) => void) => void)'
    uid: botbuilder-azure.BotServiceConnector.onEvent
    package: botbuilder-azure
    summary: >-
      Called by the UniversalBot at registration time to register a handler for
      receiving incoming events from a channel.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function onEvent(handler: (events: IEvent[], callback?: (err: Error) =>
        void) => void)
      parameters:
        - id: handler
          type: '(events: IEvent[], callback?: (err: Error) =&gt; void) =&gt; void'
          description: ''
  - name: 'saveData(IBotStorageContext, IBotStorageData, (err: Error) => void)'
    uid: botbuilder-azure.BotServiceConnector.saveData
    package: botbuilder-azure
    summary: Writes out data to the Bot Frameworks state service.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function saveData(context: IBotStorageContext, data: IBotStorageData,
        callback?: (err: Error) => void)
      parameters:
        - id: context
          type: <xref uid="botbuilder-azure.IBotStorageContext" />
          description: ''
        - id: data
          type: <xref uid="botbuilder-azure.IBotStorageData" />
          description: ''
        - id: callback
          type: '(err: Error) =&gt; void'
          description: ''
  - name: 'send(IMessage[], (err: Error) => void)'
    uid: botbuilder-azure.BotServiceConnector.send
    package: botbuilder-azure
    summary: Called by the UniversalBot to deliver outgoing messages to a user.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function send(messages: IMessage[], done: (err: Error) => void)'
      parameters:
        - id: messages
          type: '<xref uid="botbuilder-azure.IMessage" />[]'
          description: ''
        - id: done
          type: '(err: Error) =&gt; void'
          description: ''
  - name: 'startConversation(IAddress, (err: Error, address?: IAddress) => void)'
    uid: botbuilder-azure.BotServiceConnector.startConversation
    package: botbuilder-azure
    summary: >-
      Called when a UniversalBot wants to start a new proactive conversation
      with a user. The connector should return a properly formated __address__
      object with a populated __conversation__ field.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function startConversation(address: IAddress, done: (err: Error,
        address?: IAddress) => void)
      parameters:
        - id: address
          type: <xref uid="botbuilder-azure.IAddress" />
          description: ''
        - id: done
          type: '(err: Error, address?: IAddress) =&gt; void'
          description: ''
