### YamlMime:TSType
name: CallConnector
uid: botbuilder-calling.CallConnector
package: botbuilder-calling
summary: Connect a UniversalCallBot to the Skype calling service.
fullName: CallConnector
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: CallConnector(ICallConnectorSettings)
    uid: botbuilder-calling.CallConnector.constructor
    package: botbuilder-calling
    summary: Creates a new instnace of the ChatConnector.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new CallConnector(settings?: ICallConnectorSettings)'
      parameters:
        - id: settings
          type: <xref uid="botbuilder-calling.ICallConnectorSettings" />
          description: >
            (Optional) config params that let you specify the bots App ID &
            Password you were assigned in the Bot Frameworks developer portal.
methods:
  - name: 'getData(IBotStorageContext, (err: Error, data: IBotStorageData) => void)'
    uid: botbuilder-calling.CallConnector.getData
    package: botbuilder-calling
    summary: Reads in data from the Bot Frameworks state service.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getData(context: IBotStorageContext, callback: (err: Error,
        data: IBotStorageData) => void)
      parameters:
        - id: context
          type: <xref uid="botbuilder-calling.IBotStorageContext" />
          description: ''
        - id: callback
          type: '(err: Error, data: IBotStorageData) =&gt; void'
          description: ''
  - name: listen()
    uid: botbuilder-calling.CallConnector.listen
    package: botbuilder-calling
    summary: Registers an Express or Restify style hook to listen for new messages.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function listen()
      return:
        type: '(req: any, res: any) =&gt; void'
        description: ''
  - name: 'onEvent((event: IEvent, cb?: (err: Error) => void) => void)'
    uid: botbuilder-calling.CallConnector.onEvent
    package: botbuilder-calling
    summary: >-
      Called by the UniversalCallBot at registration time to register a handler
      for receiving incoming events from the calling service.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function onEvent(handler: (event: IEvent, cb?: (err: Error) => void) =>
        void)
      parameters:
        - id: handler
          type: '(event: IEvent, cb?: (err: Error) =&gt; void) =&gt; void'
          description: ''
  - name: 'saveData(IBotStorageContext, IBotStorageData, (err: Error) => void)'
    uid: botbuilder-calling.CallConnector.saveData
    package: botbuilder-calling
    summary: Writes out data to the Bot Frameworks state service.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function saveData(context: IBotStorageContext, data: IBotStorageData,
        callback?: (err: Error) => void)
      parameters:
        - id: context
          type: <xref uid="botbuilder-calling.IBotStorageContext" />
          description: ''
        - id: data
          type: <xref uid="botbuilder-calling.IBotStorageData" />
          description: ''
        - id: callback
          type: '(err: Error) =&gt; void'
          description: ''
  - name: 'send(IEvent, (err: Error) => void)'
    uid: botbuilder-calling.CallConnector.send
    package: botbuilder-calling
    summary: Called by the UniversalCallBot to deliver workflow actions to the service.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function send(event: IEvent, done: (err: Error) => void)'
      parameters:
        - id: event
          type: <xref uid="botbuilder-calling.IEvent" />
          description: ''
        - id: done
          type: '(err: Error) =&gt; void'
          description: ''
  - name: verifyBotFramework()
    uid: botbuilder-calling.CallConnector.verifyBotFramework
    package: botbuilder-calling
    summary: >-
      Express or Resitify style middleware that verifies recieved messages are
      from the Bot Framework.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function verifyBotFramework()
      return:
        type: '(req: any, res: any, next: any) =&gt; void'
        description: ''
