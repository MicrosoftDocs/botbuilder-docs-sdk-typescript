### YamlMime:TSType
name: Library
uid: botbuilder.Library
package: botbuilder
summary: >
  A library of related dialogs used for routing purposes. Libraries can be
  chained together to enable

  the development of complex bots. The
  [UniversalBot](/en-us/node/builder/chat-reference/classes/_botbuilder_d_.universalbot.html)

  class is itself a Library that forms the root of this chain.

  Libraries of reusable parts can be developed by creating a new Library
  instance and adding dialogs

  just as you would to a bot. Your library should have a unique name that
  corresponds to either your

  libraries website or NPM module name.  Bots can then reuse your library by
  simply adding your parts

  Library instance to their bot using
  [UniversalBot.library()](/en-us/node/builder/chat-reference/classes/_botbuilder_d_.universalbot.html#library).

  If your library itself depends on other libraries you should add them to your
  library as a dependency

  using [Library.library()](#library). You can easily manage multiple versions
  of your library by

  adding a version number to your library name.


  To invoke dialogs within your library bots will need to call
  [session.beginDialog()](/en-us/node/builder/chat-reference/classes/_botbuilder_d_.session.html#begindialog)

  with a fully qualified dialog id in the form of '<libName>:<dialogId>'. You'll
  typically hide

  this from the developer by exposing a function from their module that starts
  the dialog for them.

  So calling something like `myLib.someDialog(session, { arg: '' });` would end
  up calling

  `session.beginDialog('myLib:someDialog', args);` under the covers.


  It's worth noting that dialogs are always invoked within the current dialog so
  once your within

  a dialog from your library you don't need to prefix every beginDialog() call
  your with your

  libraries name. It's only when crossing from one library context to another
  that you need to

  include the library name prefix.
fullName: Library
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: Library(string)
    uid: botbuilder.Library.constructor
    package: botbuilder
    summary: Creates a new instance of the library.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new Library(name: string)'
      parameters:
        - id: name
          type: string
          description: |
            Unique namespace for the library.
properties:
  - name: name
    uid: botbuilder.Library.name
    package: botbuilder
    summary: >-
      The libraries unique namespace. This is used to issolate the libraries
      dialogs and localized

      prompts.
    fullName: name
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'name: string'
      return:
        type: string
        description: ''
  - name: RouteTypes
    uid: botbuilder.Library.RouteTypes
    package: botbuilder
    summary: >-
      Supported
      [routeType](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.irouteresult#routetype)
      values returned by default from [findRoutes()](#findroutes).
    fullName: RouteTypes
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static RouteTypes: Object'
      return:
        type: Object
        description: ''
methods:
  - name: 'addRouteResult(IRouteResult, IRouteResult[])'
    uid: botbuilder.Library.addRouteResult
    package: botbuilder
    summary: >-
      Helper method called from the various route finding methods to manage
      adding a candidate

      route to the result set.

      * If the score is greater then the current best match in the set a new
      result set will be returned containing just the new match.

      * If the score is equal to the current best match it will be added to the
      existing set.

      * If the score is less than the current best match it will be ignored.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function addRouteResult(route: IRouteResult, current?:
        IRouteResult[])
      parameters:
        - id: route
          type: <xref uid="botbuilder.IRouteResult" />
          description: The candidate route to add to the set.
        - id: current
          type: '<xref uid="botbuilder.IRouteResult" />[]'
          description: >
            (Optional) result set to add the route too. If missing then a new
            set with just the route will be returned.
      return:
        type: '<xref uid="botbuilder.IRouteResult" />[]'
        description: ''
  - name: 'beginDialogAction(string, string, IDialogActionOptions)'
    uid: botbuilder.Library.beginDialogAction
    package: botbuilder
    summary: >-
      Registers a global action that will start another dialog anytime it's
      triggered. The new

      dialog will be pushed onto the stack so it does not automatically end any
      current task. The

      current task will be continued once the new dialog ends. The built-in
      prompts will automatically

      re-prompt the user once this happens but that behaviour can be disabled by
      setting the
      [promptAfterAction](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.ipromptoptions#promptafteraction)

      flag when calling a built-in prompt.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDialogAction(name: string, id: string, options?:
        IDialogActionOptions)
      parameters:
        - id: name
          type: string
          description: Unique name to assign the action.
        - id: id
          type: string
          description: ID of the dialog to start.
        - id: options
          type: <xref uid="botbuilder.IDialogActionOptions" />
          description: >
            (Optional) options used to configure the action. If
            [matches](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.idialogactionoptions#matches)
            is specified the action will listen

            for the user to say a word or phrase that triggers the action,
            otherwise the action needs to be bound to a button using
            [CardAction.dialogAction()](/en-us/node/builder/chat-reference/classes/_botbuilder_d_.cardaction#dialogaction)

            to trigger the action. You can also use
            [dialogArgs](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.idialogactionoptions#dialogargs)
            to pass additional params to the dialog being started.
      return:
        type: <xref uid="botbuilder.Dialog" />
        description: ''
  - name: 'bestRouteResult(IRouteResult[], IDialogState[], string)'
    uid: botbuilder.Library.bestRouteResult
    package: botbuilder
    summary: >-
      Finds the best route to use within a result set containing multiple
      ambiguous routes. The

      following disambigution strategy will be used:

      1. __<custom>__: Custom route types are the highest priority and will
      alwsays be preferred. This lets the developer override routing within a
      bot in very powerful way.

      2. __ActiveDialog__: The active dialog is the next highest priority.

      3. __StackAction__: Stack actions are the next highest priority and the
      action with the deepest stack position will be returned.

      4. __GlobalAction__: Global actions are the lowest priority. If a
      `dialogStack` is past in the actions from the library deepest on the stack
      will be favored. Otherwise the first one will be returned.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function bestRouteResult(routes: IRouteResult[], dialogStack?:
        IDialogState[], rootLibraryName?: string)
      parameters:
        - id: routes
          type: '<xref uid="botbuilder.IRouteResult" />[]'
          description: Array of candidate routes to filter.
        - id: dialogStack
          type: '<xref uid="botbuilder.IDialogState" />[]'
          description: >-
            (Optional) dialog stack used to determine which libraries global
            actions to favor.
        - id: rootLibraryName
          type: string
          description: >
            (Optional) library namespace to prefer when disambiguating global
            actions and there's no dialogs on the stack.
      return:
        type: <xref uid="botbuilder.IRouteResult" />
        description: ''
  - name: 'clone(Library, string)'
    uid: botbuilder.Library.clone
    package: botbuilder
    summary: Returns a clone of an existing Library.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function clone(copyTo?: Library, newName?: string)'
      parameters:
        - id: copyTo
          type: <xref uid="botbuilder.Library" />
          description: >-
            (Optional) instance to copy the current object to. If missing a new
            instance will be created.
        - id: newName
          type: string
          description: >
            (Optional) if specified the returned copy will be renamed to a new
            name.
      return:
        type: <xref uid="botbuilder.Library" />
        description: ''
  - name: customAction(IDialogActionOptions)
    uid: botbuilder.Library.customAction
    package: botbuilder
    summary: >-
      Registers a custom global action that will call the passed in
      [onSelectAction](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.idialogactionoptions#onselectaction)

      handler when triggered.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function customAction(options: IDialogActionOptions)'
      parameters:
        - id: options
          type: <xref uid="botbuilder.IDialogActionOptions" />
          description: >
            The options used to configure the action. If
            [matches](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.idialogactionoptions#matches)
            is specified the action will listen

            for the user to say a word or phrase that triggers the action.
            Custom matching logic can be provided using
            [onFindAction](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.idialogactionoptions#onfindaction).
      return:
        type: <xref uid="botbuilder.Library" />
        description: ''
  - name: >-
      dialog(string, Dialog | IDialogWaterfallStep[] | IDialogWaterfallStep,
      boolean)
    uid: botbuilder.Library.dialog
    package: botbuilder
    summary: Registers or returns a dialog from the library.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function dialog(id: string, dialog?: Dialog | IDialogWaterfallStep[] |
        IDialogWaterfallStep, replace?: boolean)
      parameters:
        - id: id
          type: string
          description: Unique ID of the dialog being regsitered or retrieved.
        - id: dialog
          type: >-
            <xref uid="botbuilder.Dialog" /> | <xref
            uid="botbuilder.IDialogWaterfallStep" />[] | <xref
            uid="botbuilder.IDialogWaterfallStep" />
          description: >-
            (Optional) dialog or waterfall to register.

            * __dialog:__ _{Dialog}_ - Dialog to add.

            * __dialog:__ _{IDialogWaterfallStep[]}_ - Waterfall of steps to
            execute. See
            [IDialogWaterfallStep](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.idialogwaterfallstep.html)
            for details.

            * __dialog:__ _{IDialogWaterfallStep}_ - Single step waterfall.
            Calling a built-in prompt or starting a new dialog will result in
            the current dialog ending upon completion of the child
            prompt/dialog.
        - id: replace
          type: boolean
          description: >
            (Optional) if true, the dialog should replace the existing dialog if
            already registered.
      return:
        type: <xref uid="botbuilder.Dialog" />
        description: ''
  - name: 'endConversationAction(string, TextOrMessageType, ICancelActionOptions)'
    uid: botbuilder.Library.endConversationAction
    package: botbuilder
    summary: >-
      Registers a global action that will end the conversation with the user
      when triggered.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function endConversationAction(name: string, msg?: TextOrMessageType,
        options?: ICancelActionOptions)
      parameters:
        - id: name
          type: string
          description: Unique name to assign the action.
        - id: msg
          type: <xref uid="botbuilder.TextOrMessageType" />
          description: >-
            (Optional) message to send the user prior to ending the
            conversation.
        - id: options
          type: <xref uid="botbuilder.ICancelActionOptions" />
          description: >
            (Optional) options used to configure the action. If
            [matches](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.idialogactionoptions#matches)
            is specified the action will listen

            for the user to say a word or phrase that triggers the action,
            otherwise the action needs to be bound to a button using
            [CardAction.dialogAction()](/en-us/node/builder/chat-reference/classes/_botbuilder_d_.cardaction#dialogaction)

            to trigger the action.
      return:
        type: <xref uid="botbuilder.Dialog" />
        description: ''
  - name: >-
      findActiveDialogRoutes(IRecognizeContext, (err: Error, routes:
      IRouteResult[]) => void, IDialogState[])
    uid: botbuilder.Library.findActiveDialogRoutes
    package: botbuilder
    summary: >-
      Gets the active dialogs confidence that it understands the current
      message. The dialog

      must be a member of the current library, otherwise a score of 0.0 will be
      returned.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function findActiveDialogRoutes(context: IRecognizeContext, callback:
        (err: Error, routes: IRouteResult[]) => void, dialogStack?:
        IDialogState[])
      parameters:
        - id: context
          type: <xref uid="botbuilder.IRecognizeContext" />
          description: Read-only recognizer context for the current conversation.
        - id: callback
          type: '(err: Error, routes: IRouteResult[]) =&gt; void'
          description: Function that should be invoked with the found routes.
        - id: dialogStack
          type: '<xref uid="botbuilder.IDialogState" />[]'
          description: >
            (Optional) dialog stack to search over. The default behaviour is to
            search over the sessions current dialog stack.
  - name: 'findDialog(string, string)'
    uid: botbuilder.Library.findDialog
    package: botbuilder
    summary: >-
      Searches the library and all of its dependencies for a specific dialog.
      Returns the dialog

      if found, otherwise null.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function findDialog(libName: string, dialogId: string)'
      parameters:
        - id: libName
          type: string
          description: Name of the library containing the dialog.
        - id: dialogId
          type: string
          description: |
            Unique ID of the dialog within the library.
      return:
        type: <xref uid="botbuilder.Dialog" />
        description: ''
  - name: >-
      findGlobalActionRoutes(IRecognizeContext, (err: Error, routes:
      IRouteResult[]) => void)
    uid: botbuilder.Library.findGlobalActionRoutes
    package: botbuilder
    summary: Searches the library to see if any global actions have been triggered.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function findGlobalActionRoutes(context: IRecognizeContext, callback:
        (err: Error, routes: IRouteResult[]) => void)
      parameters:
        - id: context
          type: <xref uid="botbuilder.IRecognizeContext" />
          description: Read-only recognizer context for the current conversation.
        - id: callback
          type: '(err: Error, routes: IRouteResult[]) =&gt; void'
          description: Function that should be invoked with the found routes.
  - name: >-
      findRoutes(IRecognizeContext, (err: Error, routes: IRouteResult[]) =>
      void)
    uid: botbuilder.Library.findRoutes
    package: botbuilder
    summary: >-
      Searches for candidate routes to handle the current message. To actually
      initiate the

      handling of the message you should call [selectRoute()](#selectroute) with
      one of the

      returned results.

      The default search logic can be overriden using
      [onFindRoute()](#onfindroute) and only the

      current library is searched so you should call `findRoutes()` seperately
      for each library

      within the hierarchy.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function findRoutes(context: IRecognizeContext, callback: (err: Error,
        routes: IRouteResult[]) => void)
      parameters:
        - id: context
          type: <xref uid="botbuilder.IRecognizeContext" />
          description: Read-only recognizer context for the current conversation.
        - id: callback
          type: '(err: Error, routes: IRouteResult[]) =&gt; void'
          description: Function that should be invoked with the found routes.
  - name: >-
      findStackActionRoutes(IRecognizeContext, (err: Error, routes:
      IRouteResult[]) => void, IDialogState[])
    uid: botbuilder.Library.findStackActionRoutes
    package: botbuilder
    summary: >-
      Searches the sessions dialog stack to see if any actions have been
      triggered.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function findStackActionRoutes(context: IRecognizeContext, callback:
        (err: Error, routes: IRouteResult[]) => void, dialogStack?:
        IDialogState[])
      parameters:
        - id: context
          type: <xref uid="botbuilder.IRecognizeContext" />
          description: Read-only recognizer context for the current conversation.
        - id: callback
          type: '(err: Error, routes: IRouteResult[]) =&gt; void'
          description: Function that should be invoked with the found routes.
        - id: dialogStack
          type: '<xref uid="botbuilder.IDialogState" />[]'
          description: >
            (Optional) dialog stack to search over. The default behaviour is to
            search over the sessions current dialog stack.
  - name: 'forEachDialog((dialog: Dialog, id: string) => void)'
    uid: botbuilder.Library.forEachDialog
    package: botbuilder
    summary: Enumerates all of the libraries dialogs.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function forEachDialog(callback: (dialog: Dialog, id: string) => void)'
      parameters:
        - id: callback
          type: '(dialog: Dialog, id: string) =&gt; void'
          description: Iterator function to call with each dialog.
  - name: 'forEachLibrary((library: Library) => void)'
    uid: botbuilder.Library.forEachLibrary
    package: botbuilder
    summary: >-
      Enumerates all of the libraries child libraries. The caller should take
      appropriate steps to

      avoid circular references when enumerating the hierarchy. In most cases
      calling

      [libraryList()](#librarylist) is a better choice as it already contains
      logic to avoid cycles.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function forEachLibrary(callback: (library: Library) => void)'
      parameters:
        - id: callback
          type: '(library: Library) =&gt; void'
          description: Iterator function to call with each child libray.
  - name: library(Library | string)
    uid: botbuilder.Library.library
    package: botbuilder
    summary: Registers or returns a library dependency.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function library(lib: Library | string)'
      parameters:
        - id: lib
          type: <xref uid="botbuilder.Library" /> | string
          description: >

            * __lib:__ _{Library}_ - Library to register as a dependency.

            * __lib:__ _{string}_ - Unique name of the library to lookup. All
            dependencies will be searched as well.
      return:
        type: <xref uid="botbuilder.Library" />
        description: ''
  - name: libraryList(boolean)
    uid: botbuilder.Library.libraryList
    package: botbuilder
    summary: >-
      Returns a list of unique libraries within the hierarchy. Should be called
      on the root of the

      library hierarchy and avoids cycles created when two child libraries
      reference the same

      dependent library.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function libraryList(reverse?: boolean)'
      parameters:
        - id: reverse
          type: boolean
          description: >
            (Optional) If true list will be generated from the leaves up meaning
            the root library will be listed last. The default value is false
            which means it will be generated from the roots down and the root
            library will be listed first.
      return:
        type: '<xref uid="botbuilder.Library" />[]'
        description: ''
  - name: localePath(string)
    uid: botbuilder.Library.localePath
    package: botbuilder
    summary: >-
      Gets or sets the path to the libraries "/locale/" folder containing its
      localized prompts.

      The prompts for the library should be stored in a
      "/locale/<IETF_TAG>/<NAMESPACE>.json" file

      under this path where "<IETF_TAG>" representes the 2-3 digit language tage
      for the locale and

      "<NAMESPACE>" is a filename matching the libraries namespace.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function localePath(path?: string)'
      parameters:
        - id: path
          type: string
          description: >
            (Optional) path to the libraries "/locale/" folder. If specified
            this will update the libraries path.
      return:
        type: string
        description: ''
  - name: onFindRoutes(IFindRoutesHandler)
    uid: botbuilder.Library.onFindRoutes
    package: botbuilder
    summary: >-
      Replaces [findRoutes()](#findroutes) default route searching logic with a
      custom

      implementation.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onFindRoutes(handler: IFindRoutesHandler)'
      parameters:
        - id: handler
          type: <xref uid="botbuilder.IFindRoutesHandler" />
          description: >
            Function that will be invoked anytime `findRoutes()` is called for
            the library.
  - name: onSelectRoute(ISelectRouteHandler)
    uid: botbuilder.Library.onSelectRoute
    package: botbuilder
    summary: >-
      Replaces the default logic for [selectRoute()](#selectroute) with a custom
      implementation.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onSelectRoute(handler: ISelectRouteHandler)'
      parameters:
        - id: handler
          type: <xref uid="botbuilder.ISelectRouteHandler" />
          description: |
            Function that will be invoked anytime `selectRoute()` is called.
  - name: >-
      recognize(IRecognizeContext, (err: Error, result: IIntentRecognizerResult)
      => void)
    uid: botbuilder.Library.recognize
    package: botbuilder
    summary: >-
      Attempts to match a users text utterance to an intent using the libraries
      recognizers. See

      [IIntentRecognizer.recognize()](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.iintentrecognizer#recognize)

      for details.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function recognize(context: IRecognizeContext, callback: (err: Error,
        result: IIntentRecognizerResult) => void)
      parameters:
        - id: context
          type: <xref uid="botbuilder.IRecognizeContext" />
          description: Read-only recognizer context for the current conversation.
        - id: callback
          type: '(err: Error, result: IIntentRecognizerResult) =&gt; void'
          description: Function that should be invoked upon completion of the recognition.
  - name: recognizer(IIntentRecognizer)
    uid: botbuilder.Library.recognizer
    package: botbuilder
    summary: Adds a new recognizer plugin to the library.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function recognizer(plugin: IIntentRecognizer)'
      parameters:
        - id: plugin
          type: <xref uid="botbuilder.IIntentRecognizer" />
          description: |
            The recognizer to add.
      return:
        type: <xref uid="botbuilder.IntentDialog" />
        description: ''
  - name: 'selectActiveDialogRoute(Session, IRouteResult, IDialogState[])'
    uid: botbuilder.Library.selectActiveDialogRoute
    package: botbuilder
    summary: Routes the current message to the active dialog.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function selectActiveDialogRoute(session: Session, route: IRouteResult,
        newStack?: IDialogState[])
      parameters:
        - id: session
          type: <xref uid="botbuilder.Session" />
          description: Session object for the current conversation.
        - id: route
          type: <xref uid="botbuilder.IRouteResult" />
          description: >
            Route result returned from a previous call to
            [findRoutes()](#findroutes) or
            [findActiveDialogRoutes()](#findactivedialogroutes).
        - id: newStack
          type: '<xref uid="botbuilder.IDialogState" />[]'
          description: ''
  - name: 'selectGlobalActionRoute(Session, IRouteResult, IDialogState[])'
    uid: botbuilder.Library.selectGlobalActionRoute
    package: botbuilder
    summary: Routes the current message to a triggered global action.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function selectGlobalActionRoute(session: Session, route: IRouteResult,
        newStack?: IDialogState[])
      parameters:
        - id: session
          type: <xref uid="botbuilder.Session" />
          description: Session object for the current conversation.
        - id: route
          type: <xref uid="botbuilder.IRouteResult" />
          description: >
            Route result returned from a previous call to
            [findRoutes()](#findroutes) or
            [findGlobalActionRoutes()](#findglobalactionroutes).
        - id: newStack
          type: '<xref uid="botbuilder.IDialogState" />[]'
          description: ''
  - name: 'selectRoute(Session, IRouteResult)'
    uid: botbuilder.Library.selectRoute
    package: botbuilder
    summary: >-
      Triggers the handling of the current message using the selected route. The
      default logic can

      be overriden using [onSelectRoute()](#onselectroute).
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function selectRoute(session: Session, route: IRouteResult)'
      parameters:
        - id: session
          type: <xref uid="botbuilder.Session" />
          description: Session object for the current conversation.
        - id: route
          type: <xref uid="botbuilder.IRouteResult" />
          description: >
            Route result returned from a previous call to
            [findRoutes()](#findroutes).
  - name: 'selectStackActionRoute(Session, IRouteResult, IDialogState[])'
    uid: botbuilder.Library.selectStackActionRoute
    package: botbuilder
    summary: Routes the current message to a triggered stack action.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function selectStackActionRoute(session: Session, route: IRouteResult,
        newStack?: IDialogState[])
      parameters:
        - id: session
          type: <xref uid="botbuilder.Session" />
          description: Session object for the current conversation.
        - id: route
          type: <xref uid="botbuilder.IRouteResult" />
          description: >
            Route result returned from a previous call to
            [findRoutes()](#findroutes) or
            [findStackActionRoutes()](#findstackactionroutes).
        - id: newStack
          type: '<xref uid="botbuilder.IDialogState" />[]'
          description: ''
