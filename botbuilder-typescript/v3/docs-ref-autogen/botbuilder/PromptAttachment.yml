### YamlMime:TSType
name: PromptAttachment
uid: botbuilder.PromptAttachment
package: botbuilder
summary: Customizable attachment prompt.
fullName: PromptAttachment
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: PromptAttachment(IPromptAttachmentFeatures)
    uid: botbuilder.PromptAttachment.constructor
    package: botbuilder
    summary: >-
      Creates a new customizable instance of the prompt. Your new prompt should
      be added as a

      dialog to either a bot or library.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new PromptAttachment(features?: IPromptAttachmentFeatures)'
      parameters:
        - id: features
          type: <xref uid="botbuilder.IPromptAttachmentFeatures" />
          description: |
            (Optional) features used to customize the prompts behaviour.
properties:
  - name: features
    uid: botbuilder.PromptAttachment.features
    package: botbuilder
    summary: The prompts current configured set of features.
    fullName: features
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'public features: IPromptAttachmentFeatures'
      return:
        type: <xref uid="botbuilder.IPromptAttachmentFeatures" />
        description: ''
methods:
  - name: 'addDialogTrigger(ActionSet, string)'
    uid: botbuilder.PromptAttachment.addDialogTrigger
    package: botbuilder
    summary: >-
      Called once for each dialog within a library to give the dialog a chance
      to add its

      `triggerAction()` to the libraries global action set.  These triggers get
      mapped to

      a `beginDialogAction()` that starts the dialog when the trigger condition
      is met.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function addDialogTrigger(actions: ActionSet, dialogId: string)'
      parameters:
        - id: actions
          type: <xref uid="botbuilder.ActionSet" />
          description: Libraries global action set.
        - id: dialogId
          type: string
          description: |
            The fully qualified ID of the dialog to trigger.
  - name: 'begin<T>(Session, T)'
    uid: botbuilder.PromptAttachment.begin
    package: botbuilder
    summary: Called when a new dialog session is being started.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function begin<T>(session: Session, args?: T)'
      parameters:
        - id: session
          type: <xref uid="botbuilder.Session" />
          description: Session object for the current conversation.
        - id: args
          type: T
          description: |
            (Optional) arguments passed to the dialog by its parent.
  - name: 'beginDialogAction(string, string, IBeginDialogActionOptions)'
    uid: botbuilder.PromptAttachment.beginDialogAction
    package: botbuilder
    summary: >-
      Binds an action to the dialog that will start another dialog anytime it's
      triggered. The new

      dialog will be pushed onto the stack so it does not automatically end the
      current task. The

      current task will be continued once the new dialog ends. The built-in
      prompts will automatically

      re-prompt the user once this happens but that behaviour can be disabled by
      setting the
      [promptAfterAction](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.ipromptoptions#promptafteraction)

      flag when calling a built-in prompt.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function beginDialogAction(name: string, id: string, options?:
        IBeginDialogActionOptions)
      parameters:
        - id: name
          type: string
          description: Unique name to assign the action.
        - id: id
          type: string
          description: ID of the dialog to start.
        - id: options
          type: <xref uid="botbuilder.IBeginDialogActionOptions" />
          description: >
            (Optional) options used to configure the action. If
            [matches](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.idialogactionoptions#matches)
            is specified the action will listen

            for the user to say a word or phrase that triggers the action,
            otherwise the action needs to be bound to a button using
            [CardAction.dialogAction()](/en-us/node/builder/chat-reference/classes/_botbuilder_d_.cardaction#dialogaction)

            to trigger the action. You can also use
            [dialogArgs](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.idialogactionoptions#dialogargs)
            to pass additional params to the dialog being started.
      return:
        type: <xref uid="botbuilder.Dialog" />
        description: ''
  - name: 'cancelAction(string, TextOrMessageType, ICancelActionOptions)'
    uid: botbuilder.PromptAttachment.cancelAction
    package: botbuilder
    summary: >-
      Binds an action to the dialog that will cancel the dialog anytime it's
      triggered. When canceled, the

      dialogs parent will be resumed with a
      [resumed](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.idialogresult#resumed)
      code indicating that it was
      [canceled](/en-us/node/builder/chat-reference/enums/_botbuilder_d_.resumereason#canceled).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function cancelAction(name: string, msg?: TextOrMessageType, options?:
        ICancelActionOptions)
      parameters:
        - id: name
          type: string
          description: Unique name to assign the action.
        - id: msg
          type: <xref uid="botbuilder.TextOrMessageType" />
          description: (Optional) message to send the user prior to canceling the dialog.
        - id: options
          type: <xref uid="botbuilder.ICancelActionOptions" />
          description: >
            (Optional) options used to configure the action. If
            [matches](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.idialogactionoptions#matches)
            is specified the action will listen

            for the user to say a word or phrase that triggers the action,
            otherwise the action needs to be bound to a button using
            [CardAction.dialogAction()](/en-us/node/builder/chat-reference/classes/_botbuilder_d_.cardaction#dialogaction)

            to trigger the action.
      return:
        type: <xref uid="botbuilder.Dialog" />
        description: ''
  - name: clone(ActionSet)
    uid: botbuilder.PromptAttachment.clone
    package: botbuilder
    summary: Returns a clone of an existing ActionSet.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function clone(copyTo?: ActionSet)'
      parameters:
        - id: copyTo
          type: <xref uid="botbuilder.ActionSet" />
          description: >
            (Optional) instance to copy the current object to. If missing a new
            instance will be created.
      return:
        type: <xref uid="botbuilder.ActionSet" />
        description: ''
  - name: customAction(IDialogActionOptions)
    uid: botbuilder.PromptAttachment.customAction
    package: botbuilder
    summary: >-
      Binds a custom action to the dialog that will call the passed in
      [onSelectAction](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.idialogactionoptions#onselectaction)

      handler when triggered.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function customAction(options: IDialogActionOptions)'
      parameters:
        - id: options
          type: <xref uid="botbuilder.IDialogActionOptions" />
          description: >
            The options used to configure the action. If
            [matches](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.idialogactionoptions#matches)
            is specified the action will listen

            for the user to say a word or phrase that triggers the action.
            Custom matching logic can be provided using
            [onFindAction](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.idialogactionoptions#onfindaction).
      return:
        type: <xref uid="botbuilder.Library" />
        description: ''
  - name: 'dialogInterrupted(Session, string, any)'
    uid: botbuilder.PromptAttachment.dialogInterrupted
    package: botbuilder
    summary: >-
      Called when a root dialog is being interrupted by another dialog. This
      gives the dialog

      that's being interrupted a chance to run custom logic before it's removed
      from the stack.

      The dialog itself is responsible for clearing the dialog stack and
      starting the new dialog.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function dialogInterrupted(session: Session, dialogId: string,
        dialogArgs: any)
      parameters:
        - id: session
          type: <xref uid="botbuilder.Session" />
          description: Session object for the current conversation.
        - id: dialogId
          type: string
          description: ID of the dialog that should be started.
        - id: dialogArgs
          type: any
          description: |
            Arguments that should be passed to the new dialog.
  - name: 'dialogResumed<T>(Session, IDialogResult<T>)'
    uid: botbuilder.PromptAttachment.dialogResumed
    package: botbuilder
    summary: A child dialog has ended and the current one is being resumed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function dialogResumed<T>(session: Session, result: IDialogResult<T>)'
      parameters:
        - id: session
          type: <xref uid="botbuilder.Session" />
          description: Session object for the current conversation.
        - id: result
          type: <xref uid="botbuilder.IDialogResult" />&lt;T&gt;
          description: |
            Result returned by the child dialog.
  - name: 'endConversationAction(string, TextOrMessageType, ICancelActionOptions)'
    uid: botbuilder.PromptAttachment.endConversationAction
    package: botbuilder
    summary: >-
      Binds an action that will end the conversation with the user when
      triggered.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function endConversationAction(name: string, msg?: TextOrMessageType,
        options?: ICancelActionOptions)
      parameters:
        - id: name
          type: string
          description: Unique name to assign the action.
        - id: msg
          type: <xref uid="botbuilder.TextOrMessageType" />
          description: >-
            (Optional) message to send the user prior to ending the
            conversation.
        - id: options
          type: <xref uid="botbuilder.ICancelActionOptions" />
          description: >
            (Optional) options used to configure the action. If
            [matches](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.idialogactionoptions#matches)
            is specified the action will listen

            for the user to say a word or phrase that triggers the action,
            otherwise the action needs to be bound to a button using
            [CardAction.dialogAction()](/en-us/node/builder/chat-reference/classes/_botbuilder_d_.cardaction#dialogaction)

            to trigger the action.
      return:
        type: <xref uid="botbuilder.Dialog" />
        description: ''
  - name: >-
      findActionRoutes(IRecognizeDialogContext, (err: Error, results:
      IRouteResult[]) => void)
    uid: botbuilder.PromptAttachment.findActionRoutes
    package: botbuilder
    summary: >-
      Called during the
      [Library.findRoutes()](/en-us/node/builder/chat-reference/classes/_botbuilder_d_.library#findroutes)

      call for each dialog on the stack to determine if any of the dialogs
      actions are triggered

      by the users utterance.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function findActionRoutes(context: IRecognizeDialogContext, callback:
        (err: Error, results: IRouteResult[]) => void)
      parameters:
        - id: context
          type: <xref uid="botbuilder.IRecognizeDialogContext" />
          description: >-
            The context of the incoming message as well as the
            [dialogData](/en-us/node/builder/chat-reference/classes/_botbuilder_d_.session#dialogdata)
            for the evaluated dialog.
        - id: callback
          type: '(err: Error, results: IRouteResult[]) =&gt; void'
          description: |
            Function to invoke with the top candidate route(s).
  - name: >-
      formatMessage(Session, TextType, TextType, (err: Error, msg: IMessage) =>
      void)
    uid: botbuilder.PromptAttachment.formatMessage
    package: botbuilder
    summary: >-
      Creates the message to send for the prompt. This is called automatically
      by [sendPrompt()](#sendprompt)

      so in most cases you'll want to register a
      [onFormatMessage()](#onformatmessage) handler to

      customize the message sent for a prompt. You should only need to call this
      method if you're

      implementing your own `sendPrompt()` logic.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function formatMessage(session: Session, text: TextType, speak:
        TextType, callback: (err: Error, msg: IMessage) => void)
      parameters:
        - id: session
          type: <xref uid="botbuilder.Session" />
          description: Session object for the current conversation.
        - id: text
          type: <xref uid="botbuilder.TextType" />
          description: Current prompt/retryPrompt text.
        - id: speak
          type: <xref uid="botbuilder.TextType" />
          description: Current speak/retrySpeak SSML. This value may be null.
        - id: callback
          type: '(err: Error, msg: IMessage) =&gt; void'
          description: |
            Function to receive the created message.
  - name: 'gettext(Session, TextType, string)'
    uid: botbuilder.PromptAttachment.gettext
    package: botbuilder
    summary: >-
      Returns the text for a prompt that's been localized using the namespace of
      the prompts caller.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function gettext(session: Session, text: TextType, namespace?:
        string)
      parameters:
        - id: session
          type: <xref uid="botbuilder.Session" />
          description: Current session for the conversation.
        - id: text
          type: <xref uid="botbuilder.TextType" />
          description: Prompt to localize.
        - id: namespace
          type: string
          description: >
            (Optional) library namespace to use for localizing the prompt. By
            default the namespace of the prompts caller will be used.
      return:
        type: string
        description: ''
  - name: >-
      matches(RegExp | string, string | IDialogWaterfallStep[] |
      IDialogWaterfallStep, any)
    uid: botbuilder.PromptAttachment.matches
    package: botbuilder
    summary: >-
      Invokes a handler when a given intent is detected in the users utterance.
      For `string` based

      intents, the intent can either be an intent returned by a
      [recognizer()](#recognizer) registered

      for the prompt or it can be an intent that flows in from a global
      [recognizer()](/en-us/node/builder/chat-reference/classes/_botbuilder_d_.library#recognizer).

      > __NOTE:__ The full details of the match, including the list of intents &
      entities detected, will be passed to the
      [args](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.iintentrecognizerresult)
      of the first waterfall step or dialog that's started.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function matches(intent: RegExp | string, dialogId: string |
        IDialogWaterfallStep[] | IDialogWaterfallStep, dialogArgs?: any)
      parameters:
        - id: intent
          type: RegExp | string
          description: >-

            * __intent:__ _{RegExp}_ - A regular expression that will be
            evaluated to detect the users intent.

            * __intent:__ _{string}_ - A named intent returned by an
            [IIntentRecognizer](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.iintentrecognizer)
            plugin that will be used to match the users intent.
        - id: dialogId
          type: >-
            string | <xref uid="botbuilder.IDialogWaterfallStep" />[] | <xref
            uid="botbuilder.IDialogWaterfallStep" />
          description: >-

            * __dialogId:__ _{string} - The ID of a dialog to begin when the
            intent is matched.

            * __dialogId:__ _{IDialogWaterfallStep[]}_ - Waterfall of steps to
            execute when the intent is matched.

            * __dialogId:__ _{IDialogWaterfallStep}_ - Single step waterfall to
            execute when the intent is matched. Calling a built-in prompt or
            starting a new dialog will result in the current dialog ending upon
            completion of the child prompt/dialog.
        - id: dialogArgs
          type: any
          description: >
            (Optional) arguments to pass the dialog that started when `dialogId`
            is a _{string}_.
      return:
        type: <xref uid="botbuilder.IntentDialog" />
        description: ''
  - name: >-
      matchesAny(RegExp[] | string[], string | IDialogWaterfallStep[] |
      IDialogWaterfallStep, any)
    uid: botbuilder.PromptAttachment.matchesAny
    package: botbuilder
    summary: >-
      Invokes a handler when any of the given intents are detected in the users
      utterance. For `string` based

      intents, the intent can either be an intent returned by a
      [recognizer()](#recognizer) registered

      for the prompt or it can be an intent that flows in from a global
      [recognizer()](/en-us/node/builder/chat-reference/classes/_botbuilder_d_.library#recognizer).

      > __NOTE:__ The full details of the match, including the list of intents &
      entities detected, will be passed to the
      [args](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.iintentrecognizerresult)
      of the first waterfall step or dialog that's started.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function matchesAny(intent: RegExp[] | string[], dialogId: string |
        IDialogWaterfallStep[] | IDialogWaterfallStep, dialogArgs?: any)
      parameters:
        - id: intent
          type: 'RegExp[] | string[]'
          description: >-

            * __intent:__ _{RegExp[]}_ - Array of regular expressions that will
            be evaluated to detect the users intent.

            * __intent:__ _{string[]}_ - Array of named intents returned by an
            [IIntentRecognizer](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.iintentrecognizer)
            plugin that will be used to match the users intent.
        - id: dialogId
          type: >-
            string | <xref uid="botbuilder.IDialogWaterfallStep" />[] | <xref
            uid="botbuilder.IDialogWaterfallStep" />
          description: >-

            * __dialogId:__ _{string} - The ID of a dialog to begin when the
            intent is matched.

            * __dialogId:__ _{IDialogWaterfallStep[]}_ - Waterfall of steps to
            execute when the intent is matched.

            * __dialogId:__ _{IDialogWaterfallStep}_ - Single step waterfall to
            execute when the intent is matched. Calling a built-in prompt or
            starting a new dialog will result in the current dialog ending upon
            completion of the child prompt/dialog.
        - id: dialogArgs
          type: any
          description: >
            (Optional) arguments to pass the dialog that started when `dialogId`
            is a _{string}_.
      return:
        type: <xref uid="botbuilder.IntentDialog" />
        description: ''
  - name: >-
      onFormatMessage((session: Session, text: TextType, speak: TextType,
      callback: (err: Error, message?: IMessage) => void) => void)
    uid: botbuilder.PromptAttachment.onFormatMessage
    package: botbuilder
    summary: >-
      Registers a handler that will be called to create the outgoing
      [IMessage](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.imessage)

      that will be sent for the prompt.  This handler is only called when the
      current

      prompt/retryPrompt is of type `string|string[]`. Anytime the
      prompt/retryPrompt is an

      `IMessage|IIsMessage` the configured message is used so your handler will
      not be called.

      Multiple handlers can be registered and the first handler to call
      `callback()` with a message

      will be used. Calling `callback(null, null)` will cause processing to move
      to the next handler

      in the chain.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function onFormatMessage(handler: (session: Session, text: TextType,
        speak: TextType, callback: (err: Error, message?: IMessage) => void) =>
        void)
      parameters:
        - id: handler
          type: >-
            (session: Session, text: TextType, speak: TextType, callback: (err:
            Error, message?: IMessage) =&gt; void) =&gt; void
          description: >
            Function that will be called to create an `IMessage` for the current
            prompt. Call `callback()` with either a message or `null` to
            continue processing.
      return:
        type: <xref uid="botbuilder.Prompt" />&lt;any&gt;
        description: ''
  - name: 'onPrompt((session: Session, next: Function) => void)'
    uid: botbuilder.PromptAttachment.onPrompt
    package: botbuilder
    summary: >-
      Registers a handler that will be called every time the prompt is about to
      send a message to

      the user. You can use this hook to implement your own custom prompt
      sending logic.

      Multiple handlers can be registered and calling `next()` will invoke the
      next handler in

      the chain. The final handler performs the prompts default logic which is
      to create a new

      message using [formatMessage()](#formatmessage) and then send it.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function onPrompt(handler: (session: Session, next: Function) => void)'
      parameters:
        - id: handler
          type: '(session: Session, next: Function) =&gt; void'
          description: >
            Function that will be called anytime [sendPrompt()](#sendprompt) is
            called.
      return:
        type: <xref uid="botbuilder.Prompt" />&lt;any&gt;
        description: ''
  - name: >-
      onRecognize((context: IRecognizeDialogContext, callback: (err: Error,
      score: number, response?: any) => void) => void)
    uid: botbuilder.PromptAttachment.onRecognize
    package: botbuilder
    summary: >-
      Registers a handler that will be called everytime the prompt receives a
      reply from the user.

      The handlers `callback()` can be used to return a confidence score that it
      understood the

      users input as well as the value that should be returned to the caller of
      the prompt.

      Calling `callback(null, 1.0, true);` would indicate a high confidence that
      the user answered

      the prompt and would return a `boolean` true as the response from the
      prompt. Any response

      type is possible, including objects. Calling `callback(null, 0.0);`
      indicates that the users

      input was not understood at all and that they should be re-prompted.


      Multiple handlers can be registered and unlike the other handler types,
      all of the registered

      will be called and handler providing the highest confidence score will be
      chosen as the winner.

      When customizing one of the built-in prompt types you'll often want to
      disable the prompts

      default recognizer logic. This can be achieved by setting the
      [features](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.ipromptfeatures)

      of the prompt when you create it. Just keep in mind that if you completely
      disable the prompts

      default recognizer logic, you'll need to do all of the recognition
      yourself.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function onRecognize(handler: (context: IRecognizeDialogContext,
        callback: (err: Error, score: number, response?: any) => void) => void)
      parameters:
        - id: handler
          type: >-
            (context: IRecognizeDialogContext, callback: (err: Error, score:
            number, response?: any) =&gt; void) =&gt; void
          description: >
            Function that will be called to recognize the users reply to a
            prompt.
      return:
        type: <xref uid="botbuilder.Prompt" />&lt;any&gt;
        description: ''
  - name: >-
      recognize(IRecognizeDialogContext, (err: Error, result: IRecognizeResult)
      => void)
    uid: botbuilder.PromptAttachment.recognize
    package: botbuilder
    summary: >-
      Parses the users utterance and assigns a score from 0.0 - 1.0 indicating
      how confident the

      dialog is that it understood the users utterance.  This method is always
      called for the active

      dialog on the stack.  A score of 1.0 will indicate a perfect match and
      terminate any further

      recognition.

      When the score is less than 1.0, every dialog on the stack will have its

      [recognizeAction()](#recognizeaction) method called as well to see if
      there are any named

      actions bound to the dialog that better matches the users utterance.
      Global actions registered

      at the bot level will also be evaluated. If the dialog has a score higher
      then any bound actions,

      the dialogs [replyReceived()](#replyreceived) method will be called with
      the result object

      returned from the recognize() call.  This lets the dialog pass additional
      data collected during

      the recognize phase to the replyReceived() method for handling.


      Should there be an action with a higher score then the dialog the action
      will be invoked instead

      of the dialogs replyReceived() method.  The dialog will stay on the stack
      and may be resumed

      at some point should the action invoke a new dialog so dialogs should
      prepare for unexpected calls

      to [dialogResumed()](#dialogresumed).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function recognize(context: IRecognizeDialogContext, callback: (err:
        Error, result: IRecognizeResult) => void)
      parameters:
        - id: context
          type: <xref uid="botbuilder.IRecognizeDialogContext" />
          description: The context of the request.
        - id: callback
          type: '(err: Error, result: IRecognizeResult) =&gt; void'
          description: |
            Function to invoke with the recognition results.
  - name: recognizer(IIntentRecognizer)
    uid: botbuilder.PromptAttachment.recognizer
    package: botbuilder
    summary: >-
      Adds a new recognizer plugin to the Prompt which will be run everytime the
      user replies

      to the prompt.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function recognizer(plugin: IIntentRecognizer)'
      parameters:
        - id: plugin
          type: <xref uid="botbuilder.IIntentRecognizer" />
          description: |
            The recognizer to add.
      return:
        type: <xref uid="botbuilder.IntentDialog" />
        description: ''
  - name: 'reloadAction(string, TextOrMessageType, IBeginDialogActionOptions)'
    uid: botbuilder.PromptAttachment.reloadAction
    package: botbuilder
    summary: >-
      Binds an action to the dialog that will cause the dialog to be reloaded
      anytime it's triggered. This is

      useful to implement logic that handle user utterances like "start over".
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function reloadAction(name: string, msg?: TextOrMessageType, options?:
        IBeginDialogActionOptions)
      parameters:
        - id: name
          type: string
          description: Unique name to assign the action.
        - id: msg
          type: <xref uid="botbuilder.TextOrMessageType" />
          description: (Optional) message to send the user prior to reloading the dialog.
        - id: options
          type: <xref uid="botbuilder.IBeginDialogActionOptions" />
          description: >
            (Optional) options used to configure the action. If
            [matches](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.idialogactionoptions#matches)
            is specified the action will listen

            for the user to say a word or phrase that triggers the action,
            otherwise the action needs to be bound to a button using
            [CardAction.dialogAction()](/en-us/node/builder/chat-reference/classes/_botbuilder_d_.cardaction#dialogaction)

            to trigger the action. You can also use
            [dialogArgs](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.idialogactionoptions#dialogargs)
            to pass additional params to the dialog when reloaded.
      return:
        type: <xref uid="botbuilder.Dialog" />
        description: ''
  - name: 'replyReceived(Session, IRecognizeResult)'
    uid: botbuilder.PromptAttachment.replyReceived
    package: botbuilder
    summary: Processes messages received from the user. Called by the dialog system.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function replyReceived(session: Session, recognizeResult?:
        IRecognizeResult)
      parameters:
        - id: session
          type: <xref uid="botbuilder.Session" />
          description: Session object for the current conversation.
        - id: recognizeResult
          type: <xref uid="botbuilder.IRecognizeResult" />
          description: ''
  - name: 'selectActionRoute(Session, IRouteResult)'
    uid: botbuilder.PromptAttachment.selectActionRoute
    package: botbuilder
    summary: Selects the route that had the highest confidence score for the utterance.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function selectActionRoute(session: Session, route: IRouteResult)'
      parameters:
        - id: session
          type: <xref uid="botbuilder.Session" />
          description: Session object for the current conversation.
        - id: route
          type: <xref uid="botbuilder.IRouteResult" />
          description: >
            Results returned from the call to
            [findActionRoutes()](#findactionroute).
  - name: sendPrompt(Session)
    uid: botbuilder.PromptAttachment.sendPrompt
    package: botbuilder
    summary: >-
      Sends a prompt to the user for the current turn. This can be called from a
      [matches()][#matches]

      handler to manually send a prompt/reprompt to the user. To force sending
      of the initial prompt

      you would need to set `session.dialogData.turns = 0;` before calling
      `sendPrompt()`.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function sendPrompt(session: Session)'
      parameters:
        - id: session
          type: <xref uid="botbuilder.Session" />
          description: |
            Session object for the current conversation.
  - name: triggerAction(ITriggerActionOptions)
    uid: botbuilder.PromptAttachment.triggerAction
    package: botbuilder
    summary: >-
      Binds an action to the dialog that will make it the active dialog anytime
      it's triggered.

      The default behaviour is to interupt any existing dialog by clearing the
      stack and starting

      the dialog at the root of the stack.  The dialog being interrupted can
      intercept this

      interruption by adding a custom
      [onInterrupted](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.itriggeractionsoptions#oninterrupted)

      handler to their trigger action options.  Additionally, you can customize
      the way the

      triggered dialog is started by providing a custom
      [onSelectAction](/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.ibegindialogactionsoptions#onselectaction)

      handler to your trigger action options.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function triggerAction(options: ITriggerActionOptions)'
      parameters:
        - id: options
          type: <xref uid="botbuilder.ITriggerActionOptions" />
          description: |
            Options used to configure the action.
      return:
        type: <xref uid="botbuilder.Dialog" />
        description: ''
extends: >-
  <xref uid="botbuilder.Prompt" />&lt;<xref
  uid="botbuilder.IPromptAttachmentFeatures" />&gt;
